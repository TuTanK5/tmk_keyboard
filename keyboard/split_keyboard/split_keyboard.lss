
split_keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00005bcc  00005c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005bcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fc  0080014a  0080014a  00005caa  2**0
                  ALLOC
  3 .noinit       00000004  00800246  00800246  00005caa  2**0
                  ALLOC
  4 .stab         000023dc  00000000  00000000  00005cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000007fb  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000be8  00000000  00000000  00008888  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f158  00000000  00000000  00009470  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b5a  00000000  00000000  000185c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000067b8  00000000  00000000  0001c122  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002034  00000000  00000000  000228dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004a25  00000000  00000000  00024910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000078d4  00000000  00000000  00029335  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c70  00000000  00000000  00030c09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__ctors_end>
       4:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__vector_1>
       8:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
       c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      10:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      14:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      18:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      1c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      20:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      24:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      28:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__vector_10>
      2c:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__vector_11>
      30:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      34:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      38:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      3c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      40:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      44:	0c 94 1f 2c 	jmp	0x583e	; 0x583e <__vector_17>
      48:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      4c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      50:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      54:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__vector_21>
      58:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      5c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      60:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      64:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      68:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      6c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      70:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      74:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      78:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      7c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      80:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      84:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      88:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      8c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      90:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_36>
      94:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      98:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      9c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      a0:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      a4:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      a8:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>

000000ac <actionmaps>:
      ac:	32 00 1e 00 1f 00 20 00 21 00 22 00 2b 00 14 00     2..... .!.".+...
      bc:	1a 00 08 00 15 00 17 00 39 00 04 00 16 00 07 00     ........9.......
      cc:	09 00 0a 00 e1 00 1d 00 1b 00 06 00 19 00 05 00     ................
      dc:	29 00 39 28 2b 00 00 22 2c 00 e0 00 2d 00 27 00     ).9(+..",...-.'.
      ec:	26 00 25 00 24 00 23 00 2f 00 13 00 12 00 0c 00     &.%.$.#./.......
      fc:	18 00 1c 00 34 00 33 00 0f 00 0e 00 0d 00 0b 00     ....4.3.........
     10c:	e5 00 38 00 37 00 36 00 10 00 11 00 e6 00 34 00     ..8.7.6.......4.
     11c:	51 00 2a 00 28 00 f0 a3                             Q.*.(...

00000124 <__c.1785>:
     124:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     134:	42 43 44 45 46 0a 00                                BCDEF..

0000013b <__c.1788>:
     13b:	25 30 32 58 00                                      %02X.

00000140 <__c.1790>:
     140:	3a 20 00                                            : .

00000143 <__c.1792>:
     143:	25 30 31 36 62 00                                   %016b.

00000149 <__c.1794>:
     149:	0a 00                                               ..

0000014b <__c.4422>:
     14b:	5b 43 5d 00                                         [C].

0000014f <__c.4427>:
     14f:	5b 44 5d 00                                         [D].

00000153 <__c.4432>:
     153:	5b 52 5d 00                                         [R].

00000157 <__c.4436>:
     157:	5b 53 5d 00                                         [S].

0000015b <__c.4440>:
     15b:	5b 57 5d 00                                         [W].

0000015f <__c.4542>:
     15f:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     16f:	00                                                  .

00000170 <__c.4544>:
     170:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     180:	00                                                  .

00000181 <__c.4546>:
     181:	5b 73 5d 00                                         [s].

00000185 <ProductString>:
     185:	1e 03 4c 00 65 00 74 00 73 00 5f 00 73 00 70 00     ..L.e.t.s._.s.p.
     195:	6c 00 69 00 74 00 5f 00 32 00 35 00 36 00 00 00     l.i.t._.2.5.6...

000001a5 <ManufacturerString>:
     1a5:	0c 03 74 00 75 00 74 00 61 00 6e 00 00 00           ..t.u.t.a.n...

000001b3 <LanguageString>:
     1b3:	04 03 09 04                                         ....

000001b7 <ConfigurationDescriptor>:
     1b7:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     1c7:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     1d7:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     1e7:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     1f7:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     207:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     217:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
     227:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     237:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000244 <DeviceDescriptor>:
     244:	12 01 10 01 00 00 00 08 ed fe 44 44 01 00 01 02     ..........DD....
     254:	00 01                                               ..

00000256 <NKROReport>:
     256:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     266:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     276:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     286:	25 01 95 78 75 01 81 02 c0                          %..xu....

0000028f <ConsoleReport>:
     28f:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     29f:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

000002af <ExtrakeyReport>:
     2af:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     2bf:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     2cf:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     2df:	10 95 01 81 00 c0                                   ......

000002e5 <MouseReport>:
     2e5:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     2f5:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     305:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     315:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     325:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000332 <KeyboardReport>:
     332:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     342:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     352:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     362:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

00000371 <__c.4189>:
     371:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     381:	20 00                                                .

00000383 <__c.4192>:
     383:	25 30 32 58 20 00                                   %02X .

00000389 <__c.4197>:
     389:	0a 00                                               ..

0000038b <__c.4520>:
     38b:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     39b:	3a 20 00                                            : .

0000039e <__c.4522>:
     39e:	25 30 32 58 00                                      %02X.

000003a3 <__c.4524>:
     3a3:	0a 00                                               ..

000003a5 <__c.4609>:
     3a5:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     3b5:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000003c3 <__c.4614>:
     3c3:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     3d3:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000003e1 <__c.4460>:
     3e1:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
     3f1:	2e 2e 2e 20 00                                      ... .

000003f6 <__c.4466>:
     3f6:	64 6f 6e 65 2e 0a 00                                done...

000003fd <__c.4241>:
     3fd:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     40d:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     41d:	20 5b 00                                             [.

00000420 <__c.4243>:
     420:	25 30 32 58 00                                      %02X.

00000425 <__c.4245>:
     425:	7c 00                                               |.

00000427 <__c.4247>:
     427:	25 64 00                                            %d.

0000042a <__c.4249>:
     42a:	20 00                                                .

0000042c <__c.4251>:
     42c:	25 64 00                                            %d.

0000042f <__c.4253>:
     42f:	20 00                                                .

00000431 <__c.4255>:
     431:	25 64 00                                            %d.

00000434 <__c.4257>:
     434:	20 00                                                .

00000436 <__c.4259>:
     436:	25 64 00                                            %d.

00000439 <__c.4261>:
     439:	5d 28 00                                            ](.

0000043c <__c.4263>:
     43c:	25 75 00                                            %u.

0000043f <__c.4265>:
     43f:	2f 00                                               /.

00000441 <__c.4267>:
     441:	25 75 00                                            %u.

00000444 <__c.4269>:
     444:	29 0a 00                                            )..

00000447 <__c.4714>:
     447:	53 6c 65 65 70 20 4c 45 44 20 74 65 73 74 0a 00     Sleep LED test..

00000457 <__c.4718>:
     457:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000462 <__c.4723>:
     462:	43 3e 20 00                                         C> .

00000466 <__c.4726>:
     466:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     476:	00                                                  .

00000477 <__c.4729>:
     477:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000484 <__c.4731>:
     484:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000490 <__c.4734>:
     490:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

0000049d <__c.4736>:
     49d:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

000004ab <__c.4739>:
     4ab:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

000004ba <__c.4741>:
     4ba:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

000004ca <__c.4744>:
     4ca:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

000004d6 <__c.4746>:
     4d6:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

000004e3 <__c.4749>:
     4e3:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

000004f2 <__c.4751>:
     4f2:	44 45 53 43 3a 20 74 6d 6b 20 73 70 6c 69 74 20     DESC: tmk split 
     502:	6b 65 79 62 6f 61 72 64 20 66 69 72 6d 77 61 72     keyboard firmwar
     512:	65 0a 00                                            e..

00000515 <__c.4753>:
     515:	56 49 44 3a 20 30 78 46 45 45 44 28 74 75 74 61     VID: 0xFEED(tuta
     525:	6e 29 20 50 49 44 3a 20 30 78 34 34 34 34 28 4c     n) PID: 0x4444(L
     535:	65 74 73 5f 73 70 6c 69 74 5f 32 35 36 29 20 56     ets_split_256) V
     545:	45 52 3a 20 30 78 30 30 30 31 0a 00                 ER: 0x0001..

00000551 <__c.4755>:
     551:	42 55 49 4c 44 3a 20 37 66 36 35 30 30 39 2d 64     BUILD: 7f65009-d
     561:	69 72 74 79 20 28 31 32 3a 30 37 3a 35 31 20 41     irty (12:07:51 A
     571:	70 72 20 31 39 20 32 30 32 31 29 0a 00              pr 19 2021)..

0000057e <__c.4757>:
     57e:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     58e:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     59e:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     5ae:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     5be:	30 39 36 0a 00                                      096..

000005c3 <__c.4759>:
     5c3:	47 43 43 3a 20 34 2e 36 2e 32 20 41 56 52 2d 4c     GCC: 4.6.2 AVR-L
     5d3:	49 42 43 3a 20 31 2e 38 2e 30 20 41 56 52 5f 41     IBC: 1.8.0 AVR_A
     5e3:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

000005ee <__c.4762>:
     5ee:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000005fc <__c.4764>:
     5fc:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     60c:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000616 <__c.4766>:
     616:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     626:	6c 3a 20 25 58 0a 00                                l: %X..

0000062d <__c.4768>:
     62d:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     63d:	58 0a 00                                            X..

00000640 <__c.4770>:
     640:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     650:	58 0a 00                                            X..

00000653 <__c.4772>:
     653:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     663:	6c 58 0a 00                                         lX..

00000667 <__c.4775>:
     667:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000671 <__c.4777>:
     671:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

0000067c <__c.4786>:
     67c:	3f 00                                               ?.

0000067e <__c.4617>:
     67e:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

0000068e <__c.4619>:
     68e:	25 75 00                                            %u.

00000691 <__c.4621>:
     691:	0a 00                                               ..

00000693 <__c.4624>:
     693:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     6a3:	3a 20 00                                            : .

000006a6 <__c.4626>:
     6a6:	25 30 32 58 00                                      %02X.

000006ab <__c.4628>:
     6ab:	0a 00                                               ..

000006ad <__c.4630>:
     6ad:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

000006b7 <__c.4632>:
     6b7:	25 75 00                                            %u.

000006ba <__c.4634>:
     6ba:	0a 00                                               ..

000006bc <__c.4636>:
     6bc:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

000006c6 <__c.4638>:
     6c6:	25 75 00                                            %u.

000006c9 <__c.4640>:
     6c9:	0a 00                                               ..

000006cb <__c.4642>:
     6cb:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000006d7 <__c.4644>:
     6d7:	25 75 00                                            %u.

000006da <__c.4646>:
     6da:	0a 00                                               ..

000006dc <__c.4648>:
     6dc:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000006e5 <__c.4650>:
     6e5:	25 75 00                                            %u.

000006e8 <__c.4652>:
     6e8:	0a 00                                               ..

000006ea <__c.4655>:
     6ea:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     6fa:	77 3a 20 00                                         w: .

000006fe <__c.4657>:
     6fe:	25 30 32 58 00                                      %02X.

00000703 <__c.4659>:
     703:	0a 00                                               ..

00000705 <__c.4661>:
     705:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     715:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

0000071e <__c.4663>:
     71e:	25 75 00                                            %u.

00000721 <__c.4665>:
     721:	0a 00                                               ..

00000723 <__c.4667>:
     723:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     733:	74 72 6f 6c 3a 20 00                                trol: .

0000073a <__c.4669>:
     73a:	25 75 00                                            %u.

0000073d <__c.4671>:
     73d:	0a 00                                               ..

0000073f <__c.4673>:
     73f:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     74f:	20 00                                                .

00000751 <__c.4675>:
     751:	25 75 00                                            %u.

00000754 <__c.4677>:
     754:	0a 00                                               ..

00000756 <__c.4679>:
     756:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     766:	20 00                                                .

00000768 <__c.4681>:
     768:	25 75 00                                            %u.

0000076b <__c.4683>:
     76b:	0a 00                                               ..

0000076d <__c.4685>:
     76d:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000777 <__c.4687>:
     777:	25 75 00                                            %u.

0000077a <__c.4689>:
     77a:	0a 00                                               ..

0000077c <__c.4691>:
     77c:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     78c:	20 00                                                .

0000078e <__c.4693>:
     78e:	25 75 00                                            %u.

00000791 <__c.4695>:
     791:	0a 00                                               ..

00000793 <__c.4697>:
     793:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     7a3:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

000007af <__c.4699>:
     7af:	25 75 00                                            %u.

000007b2 <__c.4701>:
     7b2:	0a 00                                               ..

000007b4 <__c.4703>:
     7b4:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000007bc <__c.4705>:
     7bc:	25 75 00                                            %u.

000007bf <__c.4707>:
     7bf:	0a 00                                               ..

000007c1 <__c.4612>:
     7c1:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     7d1:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     7e1:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     7f1:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     801:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     811:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     821:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     831:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     841:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     851:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     861:	4b 52 4f 0a 7a 3a 09 73 6c 65 65 70 20 4c 45 44     KRO.z:.sleep LED
     871:	20 74 65 73 74 0a 00                                 test..

00000878 <__c.4791>:
     878:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     888:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     898:	73 65 6b 65 79 0a 00                                sekey..

0000089f <__c.4951>:
     89f:	4c 25 64 0a 00                                      L%d..

000008a4 <__c.4807>:
     8a4:	43 3e 20 00                                         C> .

000008a8 <__c.4802>:
     8a8:	4d 3e 20 00                                         M> .

000008ac <__c.4805>:
     8ac:	3f 00                                               ?.

000008ae <__c.4900>:
     8ae:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     8be:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     8ce:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     8de:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     8ee:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     8fe:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     90e:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     91e:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     92e:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     93e:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     94e:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     95e:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     96e:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     97e:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     98e:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     99e:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

000009a9 <__c.4902>:
     9a9:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     9b9:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     9c9:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     9d9:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     9e9:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

000009f7 <__c.4912>:
     9f7:	43 3e 20 00                                         C> .

000009fb <__c.4926>:
     9fb:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000a08 <__c.4929>:
     a08:	3f 00                                               ?.

00000a0a <__c.4931>:
     a0a:	4d 25 64 3e 20 00                                   M%d> .

00000a10 <__c.4933>:
     a10:	4d 3e 00                                            M>.

00000a13 <__c.4813>:
     a13:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000a21 <__c.4815>:
     a21:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     a31:	20 00                                                .

00000a33 <__c.4817>:
     a33:	25 75 00                                            %u.

00000a36 <__c.4819>:
     a36:	0a 00                                               ..

00000a38 <__c.4821>:
     a38:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     a48:	20 00                                                .

00000a4a <__c.4823>:
     a4a:	25 75 00                                            %u.

00000a4d <__c.4825>:
     a4d:	0a 00                                               ..

00000a4f <__c.4827>:
     a4f:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000a5e <__c.4829>:
     a5e:	25 75 00                                            %u.

00000a61 <__c.4831>:
     a61:	0a 00                                               ..

00000a63 <__c.4833>:
     a63:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     a73:	00                                                  .

00000a74 <__c.4835>:
     a74:	25 75 00                                            %u.

00000a77 <__c.4837>:
     a77:	0a 00                                               ..

00000a79 <__c.4839>:
     a79:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     a89:	65 64 3a 20 00                                      ed: .

00000a8e <__c.4841>:
     a8e:	25 75 00                                            %u.

00000a91 <__c.4843>:
     a91:	0a 00                                               ..

00000a93 <__c.4845>:
     a93:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     aa3:	5f 6d 61 78 3a 20 00                                _max: .

00000aaa <__c.4847>:
     aaa:	25 75 00                                            %u.

00000aad <__c.4849>:
     aad:	0a 00                                               ..

00000aaf <__c.4856>:
     aaf:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000abe <__c.4860>:
     abe:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     ace:	0a 00                                               ..

00000ad0 <__c.4863>:
     ad0:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     ae0:	64 0a 00                                            d..

00000ae3 <__c.4866>:
     ae3:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     af3:	20 25 64 0a 00                                       %d..

00000af8 <__c.4869>:
     af8:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     b08:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000b11 <__c.4872>:
     b11:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     b21:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000b2c <__c.4879>:
     b2c:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000b3b <__c.4883>:
     b3b:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     b4b:	0a 00                                               ..

00000b4d <__c.4886>:
     b4d:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     b5d:	64 0a 00                                            d..

00000b60 <__c.4889>:
     b60:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     b70:	20 25 64 0a 00                                       %d..

00000b75 <__c.4892>:
     b75:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     b85:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000b8e <__c.4895>:
     b8e:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     b9e:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000ba9 <breathing_table>:
     ba9:	00 00 00 00 00 00 00 00 00 00 00 01 02 04 06 0a     ................
     bb9:	0f 17 20 2c 3a 4a 5d 71 87 9d b3 c7 da e9 f5 fc     .. ,:J]q........
     bc9:	ff fc f5 e9 da c7 b3 9d 87 71 5d 4a 3a 2c 20 17     .........q]J:, .
     bd9:	0f 0a 06 04 02 01 00 00 00 00 00 00 00 00 00 00     ................
     be9:	00                                                  .

00000bea <__ctors_end>:
     bea:	11 24       	eor	r1, r1
     bec:	1f be       	out	0x3f, r1	; 63
     bee:	cf ef       	ldi	r28, 0xFF	; 255
     bf0:	da e0       	ldi	r29, 0x0A	; 10
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	cd bf       	out	0x3d, r28	; 61

00000bf6 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     bf6:	04 b6       	in	r0, 0x34	; 52
     bf8:	03 fe       	sbrs	r0, 3
     bfa:	27 c0       	rjmp	.+78     	; 0xc4a <__do_copy_data>
     bfc:	80 91 46 02 	lds	r24, 0x0246
     c00:	90 91 47 02 	lds	r25, 0x0247
     c04:	a0 91 48 02 	lds	r26, 0x0248
     c08:	b0 91 49 02 	lds	r27, 0x0249
     c0c:	87 30       	cpi	r24, 0x07	; 7
     c0e:	20 eb       	ldi	r18, 0xB0	; 176
     c10:	92 07       	cpc	r25, r18
     c12:	27 e0       	ldi	r18, 0x07	; 7
     c14:	a2 07       	cpc	r26, r18
     c16:	20 eb       	ldi	r18, 0xB0	; 176
     c18:	b2 07       	cpc	r27, r18
     c1a:	b9 f4       	brne	.+46     	; 0xc4a <__do_copy_data>
        reset_key = 0;
     c1c:	10 92 46 02 	sts	0x0246, r1
     c20:	10 92 47 02 	sts	0x0247, r1
     c24:	10 92 48 02 	sts	0x0248, r1
     c28:	10 92 49 02 	sts	0x0249, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     c2c:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     c2e:	84 b7       	in	r24, 0x34	; 52
     c30:	87 7f       	andi	r24, 0xF7	; 247
     c32:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     c34:	88 e1       	ldi	r24, 0x18	; 24
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	80 93 60 00 	sts	0x0060, r24
     c3e:	10 92 60 00 	sts	0x0060, r1
     c42:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     c44:	e0 e0       	ldi	r30, 0x00	; 0
     c46:	f8 e3       	ldi	r31, 0x38	; 56
     c48:	09 95       	icall

00000c4a <__do_copy_data>:
     c4a:	11 e0       	ldi	r17, 0x01	; 1
     c4c:	a0 e0       	ldi	r26, 0x00	; 0
     c4e:	b1 e0       	ldi	r27, 0x01	; 1
     c50:	ec ec       	ldi	r30, 0xCC	; 204
     c52:	fb e5       	ldi	r31, 0x5B	; 91
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <__do_copy_data+0x10>
     c56:	05 90       	lpm	r0, Z+
     c58:	0d 92       	st	X+, r0
     c5a:	aa 34       	cpi	r26, 0x4A	; 74
     c5c:	b1 07       	cpc	r27, r17
     c5e:	d9 f7       	brne	.-10     	; 0xc56 <__do_copy_data+0xc>

00000c60 <__do_clear_bss>:
     c60:	12 e0       	ldi	r17, 0x02	; 2
     c62:	aa e4       	ldi	r26, 0x4A	; 74
     c64:	b1 e0       	ldi	r27, 0x01	; 1
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <.do_clear_bss_start>

00000c68 <.do_clear_bss_loop>:
     c68:	1d 92       	st	X+, r1

00000c6a <.do_clear_bss_start>:
     c6a:	a6 34       	cpi	r26, 0x46	; 70
     c6c:	b1 07       	cpc	r27, r17
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <.do_clear_bss_loop>
     c70:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <main>
     c74:	0c 94 e4 2d 	jmp	0x5bc8	; 0x5bc8 <_exit>

00000c78 <__bad_interrupt>:
     c78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c7c <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     c7c:	ff 93       	push	r31
	push	ZL
     c7e:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     c80:	e0 91 4a 01 	lds	r30, 0x014A
	lds	ZH, xfunc_out+1	;/
     c84:	f0 91 4b 01 	lds	r31, 0x014B
	sbiw	ZL, 0		;Skip if null
     c88:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     c8a:	09 f0       	breq	.+2      	; 0xc8e <xputc+0x12>
	icall
     c8c:	09 95       	icall
2:	pop	ZL
     c8e:	ef 91       	pop	r30
	pop	ZH
     c90:	ff 91       	pop	r31
	ret
     c92:	08 95       	ret

00000c94 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     c94:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     c96:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     c98:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     c9a:	11 f0       	breq	.+4      	; 0xca0 <xputs+0xc>
	rcall	xputc
     c9c:	ef df       	rcall	.-34     	; 0xc7c <xputc>
	rjmp	1b
     c9e:	fb cf       	rjmp	.-10     	; 0xc96 <xputs+0x2>
2:	ret
     ca0:	08 95       	ret

00000ca2 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     ca2:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     ca4:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     ca6:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     ca8:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     caa:	0c c0       	rjmp	.+24     	; 0xcc4 <xitoa+0x22>
	neg	r20		;
     cac:	41 95       	neg	r20
	sbrs	r25, 7		;
     cae:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     cb0:	09 c0       	rjmp	.+18     	; 0xcc4 <xitoa+0x22>
	ldi	r30, '-'	;
     cb2:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     cb4:	60 95       	com	r22
	com	r23		;
     cb6:	70 95       	com	r23
	com	r24		;
     cb8:	80 95       	com	r24
	com	r25		;
     cba:	90 95       	com	r25
	adc	r22, r1		;
     cbc:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     cbe:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     cc0:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     cc2:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     cc4:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <xitoa+0x2a>
	neg	r18		;
     cc8:	21 95       	neg	r18
	ldi	r19, '0'	;/
     cca:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     ccc:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     cce:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     cd0:	66 0f       	add	r22, r22
	rol	r23		;
     cd2:	77 1f       	adc	r23, r23
	rol	r24		;
     cd4:	88 1f       	adc	r24, r24
	rol	r25		;
     cd6:	99 1f       	adc	r25, r25
	rol	r26		;
     cd8:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     cda:	a4 17       	cp	r26, r20
	brcs	3f		;
     cdc:	10 f0       	brcs	.+4      	; 0xce2 <xitoa+0x40>
	sub	r26, r20	;
     cde:	a4 1b       	sub	r26, r20
	inc	r22		;
     ce0:	63 95       	inc	r22
3:	dec	r21		;
     ce2:	5a 95       	dec	r21
	brne	2b		;/
     ce4:	a9 f7       	brne	.-22     	; 0xcd0 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     ce6:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     ce8:	08 f0       	brcs	.+2      	; 0xcec <xitoa+0x4a>
	subi	r26, -7		;
     cea:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     cec:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     cee:	af 93       	push	r26
	inc	r31		;/
     cf0:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     cf2:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     cf4:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     cf6:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     cf8:	91 05       	cpc	r25, r1
	brne	1b		;/
     cfa:	41 f7       	brne	.-48     	; 0xccc <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     cfc:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     cfe:	11 f4       	brne	.+4      	; 0xd04 <xitoa+0x62>
	push	r30		;
     d00:	ef 93       	push	r30
	inc	r31		;/
     d02:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d04:	f2 17       	cp	r31, r18
	brcc	6f		;
     d06:	18 f4       	brcc	.+6      	; 0xd0e <xitoa+0x6c>
	push	r19		;
     d08:	3f 93       	push	r19
	inc	r31		;
     d0a:	f3 95       	inc	r31
	rjmp	5b		;/
     d0c:	fb cf       	rjmp	.-10     	; 0xd04 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d0e:	8f 91       	pop	r24
	rcall	xputc		;
     d10:	b5 df       	rcall	.-150    	; 0xc7c <xputc>
	dec	r31		;
     d12:	fa 95       	dec	r31
	brne	6b		;/
     d14:	e1 f7       	brne	.-8      	; 0xd0e <xitoa+0x6c>

	ret
     d16:	08 95       	ret

00000d18 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     d18:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d1a:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d1c:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d1e:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     d20:	21 f0       	breq	.+8      	; 0xd2a <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     d22:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     d24:	19 f0       	breq	.+6      	; 0xd2c <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     d26:	aa df       	rcall	.-172    	; 0xc7c <xputc>
	rjmp	0b		;/
     d28:	f9 cf       	rjmp	.-14     	; 0xd1c <xvprintf+0x4>
90:	ret
     d2a:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     d2c:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     d2e:	e8 94       	clt
	_LPMI	r21		;Get flags
     d30:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     d32:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     d34:	c1 f3       	breq	.-16     	; 0xd26 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     d36:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     d38:	11 f4       	brne	.+4      	; 0xd3e <xvprintf+0x26>
	set			;/
     d3a:	68 94       	set
22:	_LPMI	r21		;Get width
     d3c:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     d3e:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     d40:	48 f4       	brcc	.+18     	; 0xd54 <xvprintf+0x3c>
	subi	r21, '0'	;
     d42:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     d44:	90 f3       	brcs	.-28     	; 0xd2a <xvprintf+0x12>
	lsl	r18		;
     d46:	22 0f       	add	r18, r18
	mov	r0, r18		;
     d48:	02 2e       	mov	r0, r18
	lsl	r18		;
     d4a:	22 0f       	add	r18, r18
	lsl	r18		;
     d4c:	22 0f       	add	r18, r18
	add	r18, r0		;
     d4e:	20 0d       	add	r18, r0
	add	r18, r21	;
     d50:	25 0f       	add	r18, r21
	rjmp	22b		;/
     d52:	f4 cf       	rjmp	.-24     	; 0xd3c <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     d54:	0e f4       	brtc	.+2      	; 0xd58 <xvprintf+0x40>
	neg	r18		;
     d56:	21 95       	neg	r18
25:	ld	r24, Y+		;
     d58:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     d5a:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     d5c:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     d5e:	19 f3       	breq	.-58     	; 0xd26 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     d60:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     d62:	29 f1       	breq	.+74     	; 0xdae <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     d64:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     d66:	59 f1       	breq	.+86     	; 0xdbe <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     d68:	bc 01       	movw	r22, r24
	clr	r24		;
     d6a:	88 27       	eor	r24, r24
	clr	r25		;
     d6c:	99 27       	eor	r25, r25
	clt			;/
     d6e:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     d70:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     d72:	21 f4       	brne	.+8      	; 0xd7c <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     d74:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     d76:	99 91       	ld	r25, Y+
	set			;
     d78:	68 94       	set
	_LPMI	r21		;/
     d7a:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     d7c:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     d7e:	39 f4       	brne	.+14     	; 0xd8e <xvprintf+0x76>
	ldi	r20, -10	;
     d80:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     d82:	7e f0       	brts	.+30     	; 0xda2 <xvprintf+0x8a>
	sbrs	r23, 7		;
     d84:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     d86:	0d c0       	rjmp	.+26     	; 0xda2 <xvprintf+0x8a>
	ldi	r24, -1		;
     d88:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     d8a:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     d8c:	0a c0       	rjmp	.+20     	; 0xda2 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     d8e:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     d90:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     d92:	39 f0       	breq	.+14     	; 0xda2 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     d94:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     d96:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     d98:	21 f0       	breq	.+8      	; 0xda2 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     d9a:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     d9c:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     d9e:	09 f0       	breq	.+2      	; 0xda2 <xvprintf+0x8a>
	ret			;abort
     da0:	08 95       	ret
40:	push	ZH		;Output the value
     da2:	ff 93       	push	r31
	push	ZL		;
     da4:	ef 93       	push	r30
	rcall	xitoa		;
     da6:	7d df       	rcall	.-262    	; 0xca2 <xitoa>
42:	pop	ZL		;
     da8:	ef 91       	pop	r30
	pop	ZH		;
     daa:	ff 91       	pop	r31
	rjmp	0b		;/
     dac:	b7 cf       	rjmp	.-146    	; 0xd1c <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     dae:	ff 93       	push	r31
	push	ZL
     db0:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     db2:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     db4:	81 91       	ld	r24, Z+
	cpi	r24, 0
     db6:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     db8:	b9 f3       	breq	.-18     	; 0xda8 <xvprintf+0x90>
	rcall	xputc
     dba:	60 df       	rcall	.-320    	; 0xc7c <xputc>
	rjmp	51b
     dbc:	fb cf       	rjmp	.-10     	; 0xdb4 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     dbe:	ff 93       	push	r31
	push	ZL
     dc0:	ef 93       	push	r30
	rcall	xputs
     dc2:	68 df       	rcall	.-304    	; 0xc94 <xputs>
	rjmp	42b
     dc4:	f1 cf       	rjmp	.-30     	; 0xda8 <xvprintf+0x90>

00000dc6 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     dc6:	df 93       	push	r29
	push	YL
     dc8:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     dca:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     dcc:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     dce:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     dd0:	a3 df       	rcall	.-186    	; 0xd18 <xvprintf>
	pop	YL
     dd2:	cf 91       	pop	r28
	pop	YH
     dd4:	df 91       	pop	r29
	ret
     dd6:	08 95       	ret

00000dd8 <promicro_bootloader_jmp>:
void promicro_bootloader_jmp(bool program) {
    uint16_t *const bootKeyPtr = (uint16_t *)0x0800;

    // Value used by Caterina bootloader use to determine whether to run the
    // sketch or the bootloader programmer.
    uint16_t bootKey = program ? 0x7777 : 0;
     dd8:	88 23       	and	r24, r24
     dda:	19 f0       	breq	.+6      	; 0xde2 <promicro_bootloader_jmp+0xa>
     ddc:	87 e7       	ldi	r24, 0x77	; 119
     dde:	97 e7       	ldi	r25, 0x77	; 119
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <promicro_bootloader_jmp+0xe>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0

    *bootKeyPtr = bootKey;
     de6:	90 93 01 08 	sts	0x0801, r25
     dea:	80 93 00 08 	sts	0x0800, r24

    // setup watchdog timeout
    wdt_enable(WDTO_60MS);
     dee:	2a e0       	ldi	r18, 0x0A	; 10
     df0:	88 e1       	ldi	r24, 0x18	; 24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	a8 95       	wdr
     dfa:	80 93 60 00 	sts	0x0060, r24
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	20 93 60 00 	sts	0x0060, r18
     e04:	ff cf       	rjmp	.-2      	; 0xe04 <promicro_bootloader_jmp+0x2c>

00000e06 <action_function>:

/*
 * user defined action function
 */
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
     e06:	fc 01       	movw	r30, r24
    uint8_t tap_count = record->tap.count;
     e08:	85 81       	ldd	r24, Z+5	; 0x05
     e0a:	82 95       	swap	r24
     e0c:	8f 70       	andi	r24, 0x0F	; 15
    switch (id) {
     e0e:	61 30       	cpi	r22, 0x01	; 1
     e10:	49 f1       	breq	.+82     	; 0xe64 <action_function+0x5e>
     e12:	61 30       	cpi	r22, 0x01	; 1
     e14:	18 f0       	brcs	.+6      	; 0xe1c <action_function+0x16>
     e16:	62 30       	cpi	r22, 0x02	; 2
     e18:	71 f5       	brne	.+92     	; 0xe76 <action_function+0x70>
     e1a:	28 c0       	rjmp	.+80     	; 0xe6c <action_function+0x66>
        case RESET_LAYER_STATE:
            if (record->event.pressed) {
     e1c:	82 81       	ldd	r24, Z+2	; 0x02
     e1e:	88 23       	and	r24, r24
     e20:	61 f0       	breq	.+24     	; 0xe3a <action_function+0x34>
                if (!get_oneshot_locked_mods() && !get_oneshot_layer_state()) {
     e22:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <get_oneshot_locked_mods>
     e26:	88 23       	and	r24, r24
     e28:	31 f5       	brne	.+76     	; 0xe76 <action_function+0x70>
     e2a:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <get_oneshot_layer_state>
     e2e:	88 23       	and	r24, r24
     e30:	11 f5       	brne	.+68     	; 0xe76 <action_function+0x70>
                    register_code(KC_ESC);
     e32:	89 e2       	ldi	r24, 0x29	; 41
     e34:	0e 94 43 14 	call	0x2886	; 0x2886 <register_code>
     e38:	08 95       	ret
                }
            } else {
                if (!get_oneshot_locked_mods() && !get_oneshot_layer_state()) {
     e3a:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <get_oneshot_locked_mods>
     e3e:	88 23       	and	r24, r24
     e40:	41 f4       	brne	.+16     	; 0xe52 <action_function+0x4c>
     e42:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <get_oneshot_layer_state>
     e46:	88 23       	and	r24, r24
     e48:	21 f4       	brne	.+8      	; 0xe52 <action_function+0x4c>
                    unregister_code(KC_ESC);
     e4a:	89 e2       	ldi	r24, 0x29	; 41
     e4c:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <unregister_code>
     e50:	08 95       	ret
                } else {
                    reset_oneshot_layer();
     e52:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <reset_oneshot_layer>
                    clear_oneshot_locked_mods();
     e56:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <clear_oneshot_locked_mods>
                    layer_clear();
     e5a:	0e 94 a6 1c 	call	0x394c	; 0x394c <layer_clear>
                    clear_keyboard();
     e5e:	0e 94 0f 18 	call	0x301e	; 0x301e <clear_keyboard>
     e62:	08 95       	ret
                }
            }
            break;
        case PROMICRO_RESET:
            if(tap_count == 5) {
     e64:	85 30       	cpi	r24, 0x05	; 5
     e66:	39 f4       	brne	.+14     	; 0xe76 <action_function+0x70>
                promicro_bootloader_jmp(false);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	03 c0       	rjmp	.+6      	; 0xe72 <action_function+0x6c>
            }
            break;
        case PROMICRO_PROGRAM:
            if(tap_count == 5) {
     e6c:	85 30       	cpi	r24, 0x05	; 5
     e6e:	19 f4       	brne	.+6      	; 0xe76 <action_function+0x70>
                promicro_bootloader_jmp(true);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <promicro_bootloader_jmp>
     e76:	08 95       	ret

00000e78 <unselect_rows>:
    }
    return result;
}

static void unselect_rows(void)
{
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
    for(int x = 0; x < ROWS_PER_HAND; x++) {
     e7c:	a6 e1       	ldi	r26, 0x16	; 22
     e7e:	b1 e0       	ldi	r27, 0x01	; 1
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
        _SFR_IO8((row_pins[x] >> 4) + 1) &=  ~_BV(row_pins[x] & 0xF);
     e84:	41 e0       	ldi	r20, 0x01	; 1
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	2d 91       	ld	r18, X+
     e8a:	e2 2f       	mov	r30, r18
     e8c:	e2 95       	swap	r30
     e8e:	ef 70       	andi	r30, 0x0F	; 15
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	61 a1       	lds	r22, 0x41
     e94:	2f 70       	andi	r18, 0x0F	; 15
     e96:	ea 01       	movw	r28, r20
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <unselect_rows+0x26>
     e9a:	cc 0f       	add	r28, r28
     e9c:	dd 1f       	adc	r29, r29
     e9e:	2a 95       	dec	r18
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <unselect_rows+0x22>
     ea2:	9e 01       	movw	r18, r28
     ea4:	3c 2f       	mov	r19, r28
     ea6:	30 95       	com	r19
     ea8:	63 23       	and	r22, r19
     eaa:	61 a3       	lds	r22, 0x51
        _SFR_IO8((row_pins[x] >> 4) + 2) |= _BV(row_pins[x] & 0xF);
     eac:	32 a1       	lds	r19, 0x42
     eae:	32 2b       	or	r19, r18
     eb0:	32 a3       	lds	r19, 0x52
    return result;
}

static void unselect_rows(void)
{
    for(int x = 0; x < ROWS_PER_HAND; x++) {
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	85 30       	cpi	r24, 0x05	; 5
     eb6:	91 05       	cpc	r25, r1
     eb8:	39 f7       	brne	.-50     	; 0xe88 <unselect_rows+0x10>
        _SFR_IO8((row_pins[x] >> 4) + 1) &=  ~_BV(row_pins[x] & 0xF);
        _SFR_IO8((row_pins[x] >> 4) + 2) |= _BV(row_pins[x] & 0xF);
    }
}
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <matrix_init>:
{
    return MATRIX_COLS;
}

void matrix_init(void)
{
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
    debug_enable = true;
     ec4:	80 91 25 02 	lds	r24, 0x0225
    debug_matrix = true;
    debug_mouse = true;
     ec8:	8b 60       	ori	r24, 0x0B	; 11
     eca:	80 93 25 02 	sts	0x0225, r24
    // initialize row and col
    unselect_rows();
     ece:	0e 94 3c 07 	call	0xe78	; 0xe78 <unselect_rows>
     ed2:	a0 e2       	ldi	r26, 0x20	; 32
     ed4:	b1 e0       	ldi	r27, 0x01	; 1
}


static void  init_cols(void)
{
    for(int x = 0; x < MATRIX_COLS; x++) {
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
        _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
     eda:	41 e0       	ldi	r20, 0x01	; 1
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	2d 91       	ld	r18, X+
     ee0:	e2 2f       	mov	r30, r18
     ee2:	e2 95       	swap	r30
     ee4:	ef 70       	andi	r30, 0x0F	; 15
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	61 a1       	lds	r22, 0x41
     eea:	2f 70       	andi	r18, 0x0F	; 15
     eec:	ea 01       	movw	r28, r20
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <matrix_init+0x34>
     ef0:	cc 0f       	add	r28, r28
     ef2:	dd 1f       	adc	r29, r29
     ef4:	2a 95       	dec	r18
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <matrix_init+0x30>
     ef8:	9e 01       	movw	r18, r28
     efa:	3c 2f       	mov	r19, r28
     efc:	30 95       	com	r19
     efe:	63 23       	and	r22, r19
     f00:	61 a3       	lds	r22, 0x51
        _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
     f02:	32 a1       	lds	r19, 0x42
     f04:	32 2b       	or	r19, r18
     f06:	32 a3       	lds	r19, 0x52
}


static void  init_cols(void)
{
    for(int x = 0; x < MATRIX_COLS; x++) {
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	86 30       	cpi	r24, 0x06	; 6
     f0c:	91 05       	cpc	r25, r1
     f0e:	39 f7       	brne	.-50     	; 0xede <matrix_init+0x1e>
     f10:	ac e4       	ldi	r26, 0x4C	; 76
     f12:	b1 e0       	ldi	r27, 0x01	; 1
     f14:	e6 e5       	ldi	r30, 0x56	; 86
     f16:	f1 e0       	ldi	r31, 0x01	; 1
     f18:	80 e0       	ldi	r24, 0x00	; 0

    TX_RX_LED_INIT;

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     f1a:	1d 92       	st	X+, r1
        matrix_debouncing[i] = 0;
     f1c:	11 92       	st	Z+, r1
    init_cols();

    TX_RX_LED_INIT;

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     f1e:	8f 5f       	subi	r24, 0xFF	; 255
     f20:	8a 30       	cpi	r24, 0x0A	; 10
     f22:	d9 f7       	brne	.-10     	; 0xf1a <matrix_init+0x5a>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	08 95       	ret

00000f2a <_matrix_scan>:

uint8_t _matrix_scan(void)
{
     f2a:	8f 92       	push	r8
     f2c:	9f 92       	push	r9
     f2e:	bf 92       	push	r11
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	00 d0       	rcall	.+0      	; 0xf42 <_matrix_scan+0x18>
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
    // Right hand is stored after the left in the matirx so, we need to offset it
    int offset = isLeftHand ? 0 : (ROWS_PER_HAND);
     f46:	80 91 01 01 	lds	r24, 0x0101
     f4a:	88 23       	and	r24, r24
     f4c:	19 f0       	breq	.+6      	; 0xf54 <_matrix_scan+0x2a>
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <_matrix_scan+0x2e>
     f54:	65 e0       	ldi	r22, 0x05	; 5
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	86 e1       	ldi	r24, 0x16	; 22
     f5a:	c8 2e       	mov	r12, r24
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	d8 2e       	mov	r13, r24
     f60:	88 24       	eor	r8, r8
     f62:	99 24       	eor	r9, r9
    }
}

static void select_row(uint8_t row)
{
    _SFR_IO8((row_pins[row] >> 4) + 1) |=  _BV(row_pins[row] & 0xF);
     f64:	01 e0       	ldi	r16, 0x01	; 1
     f66:	10 e0       	ldi	r17, 0x00	; 0
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}

uint8_t _matrix_scan(void)
     f68:	96 e5       	ldi	r25, 0x56	; 86
     f6a:	e9 2e       	mov	r14, r25
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	f9 2e       	mov	r15, r25
     f70:	e6 0e       	add	r14, r22
     f72:	f7 1e       	adc	r15, r23
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i+offset] != cols) {
            matrix_debouncing[i+offset] = cols;
            debouncing = DEBOUNCE;
     f74:	25 e0       	ldi	r18, 0x05	; 5
     f76:	b2 2e       	mov	r11, r18
    }
}

static void select_row(uint8_t row)
{
    _SFR_IO8((row_pins[row] >> 4) + 1) |=  _BV(row_pins[row] & 0xF);
     f78:	f6 01       	movw	r30, r12
     f7a:	81 91       	ld	r24, Z+
     f7c:	6f 01       	movw	r12, r30
     f7e:	e8 2f       	mov	r30, r24
     f80:	e2 95       	swap	r30
     f82:	ef 70       	andi	r30, 0x0F	; 15
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	21 a1       	lds	r18, 0x41
     f88:	8f 70       	andi	r24, 0x0F	; 15
     f8a:	a8 01       	movw	r20, r16
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <_matrix_scan+0x68>
     f8e:	44 0f       	add	r20, r20
     f90:	55 1f       	adc	r21, r21
     f92:	8a 95       	dec	r24
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <_matrix_scan+0x64>
     f96:	ca 01       	movw	r24, r20
     f98:	24 2b       	or	r18, r20
     f9a:	21 a3       	lds	r18, 0x51
    _SFR_IO8((row_pins[row] >> 4) + 2) &= ~_BV(row_pins[row] & 0xF);
     f9c:	92 a1       	lds	r25, 0x42
     f9e:	80 95       	com	r24
     fa0:	98 23       	and	r25, r24
     fa2:	92 a3       	lds	r25, 0x52
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fa4:	50 ea       	ldi	r21, 0xA0	; 160
     fa6:	5a 95       	dec	r21
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <_matrix_scan+0x7c>
     faa:	a0 e2       	ldi	r26, 0x20	; 32
     fac:	b1 e0       	ldi	r27, 0x01	; 1
}

static matrix_row_t read_cols(void)
{
    matrix_row_t result = 0;
    for(int x = 0; x < MATRIX_COLS; x++) {
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	50 e0       	ldi	r21, 0x00	; 0
    }
}

static matrix_row_t read_cols(void)
{
    matrix_row_t result = 0;
     fb2:	20 e0       	ldi	r18, 0x00	; 0
    for(int x = 0; x < MATRIX_COLS; x++) {
        result |= (_SFR_IO8(col_pins[x] >> 4) & _BV(col_pins[x] & 0xF)) ? 0 : (1 << x);
     fb4:	3d 91       	ld	r19, X+
     fb6:	e3 2f       	mov	r30, r19
     fb8:	e2 95       	swap	r30
     fba:	ef 70       	andi	r30, 0x0F	; 15
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 a1       	lds	r24, 0x40
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	3f 70       	andi	r19, 0x0F	; 15
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <_matrix_scan+0xa0>
     fc6:	95 95       	asr	r25
     fc8:	87 95       	ror	r24
     fca:	3a 95       	dec	r19
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <_matrix_scan+0x9c>
     fce:	80 fd       	sbrc	r24, 0
     fd0:	08 c0       	rjmp	.+16     	; 0xfe2 <_matrix_scan+0xb8>
     fd2:	c8 01       	movw	r24, r16
     fd4:	04 2e       	mov	r0, r20
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <_matrix_scan+0xb2>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <_matrix_scan+0xae>
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <_matrix_scan+0xba>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	28 2b       	or	r18, r24
}

static matrix_row_t read_cols(void)
{
    matrix_row_t result = 0;
    for(int x = 0; x < MATRIX_COLS; x++) {
     fe6:	4f 5f       	subi	r20, 0xFF	; 255
     fe8:	5f 4f       	sbci	r21, 0xFF	; 255
     fea:	46 30       	cpi	r20, 0x06	; 6
     fec:	51 05       	cpc	r21, r1
     fee:	11 f7       	brne	.-60     	; 0xfb4 <_matrix_scan+0x8a>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}

uint8_t _matrix_scan(void)
     ff0:	f7 01       	movw	r30, r14
     ff2:	e8 0d       	add	r30, r8
     ff4:	f9 1d       	adc	r31, r9

    for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i+offset] != cols) {
     ff6:	80 81       	ld	r24, Z
     ff8:	82 17       	cp	r24, r18
     ffa:	19 f0       	breq	.+6      	; 0x1002 <_matrix_scan+0xd8>
            matrix_debouncing[i+offset] = cols;
     ffc:	20 83       	st	Z, r18
            debouncing = DEBOUNCE;
     ffe:	b0 92 00 01 	sts	0x0100, r11
        }
        unselect_rows();
    1002:	69 83       	std	Y+1, r22	; 0x01
    1004:	7a 83       	std	Y+2, r23	; 0x02
    1006:	0e 94 3c 07 	call	0xe78	; 0xe78 <unselect_rows>
    100a:	08 94       	sec
    100c:	81 1c       	adc	r8, r1
    100e:	91 1c       	adc	r9, r1
uint8_t _matrix_scan(void)
{
    // Right hand is stored after the left in the matirx so, we need to offset it
    int offset = isLeftHand ? 0 : (ROWS_PER_HAND);

    for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
    1010:	69 81       	ldd	r22, Y+1	; 0x01
    1012:	7a 81       	ldd	r23, Y+2	; 0x02
    1014:	85 e0       	ldi	r24, 0x05	; 5
    1016:	88 16       	cp	r8, r24
    1018:	91 04       	cpc	r9, r1
    101a:	09 f0       	breq	.+2      	; 0x101e <_matrix_scan+0xf4>
    101c:	ad cf       	rjmp	.-166    	; 0xf78 <_matrix_scan+0x4e>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    101e:	80 91 00 01 	lds	r24, 0x0100
    1022:	88 23       	and	r24, r24
    1024:	e9 f0       	breq	.+58     	; 0x1060 <_matrix_scan+0x136>
        if (--debouncing) {
    1026:	81 50       	subi	r24, 0x01	; 1
    1028:	80 93 00 01 	sts	0x0100, r24
    102c:	88 23       	and	r24, r24
    102e:	39 f0       	breq	.+14     	; 0x103e <_matrix_scan+0x114>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1030:	ef e9       	ldi	r30, 0x9F	; 159
    1032:	ff e0       	ldi	r31, 0x0F	; 15
    1034:	31 97       	sbiw	r30, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <_matrix_scan+0x10a>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <_matrix_scan+0x110>
    103a:	00 00       	nop
    103c:	11 c0       	rjmp	.+34     	; 0x1060 <_matrix_scan+0x136>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}

uint8_t _matrix_scan(void)
    1042:	9b 01       	movw	r18, r22
    1044:	24 5b       	subi	r18, 0xB4	; 180
    1046:	3e 4f       	sbci	r19, 0xFE	; 254
    1048:	d9 01       	movw	r26, r18
    104a:	a8 0f       	add	r26, r24
    104c:	b9 1f       	adc	r27, r25
    104e:	f7 01       	movw	r30, r14
    1050:	e8 0f       	add	r30, r24
    1052:	f9 1f       	adc	r31, r25
    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
                matrix[i+offset] = matrix_debouncing[i+offset];
    1054:	40 81       	ld	r20, Z
    1056:	4c 93       	st	X, r20
    1058:	01 96       	adiw	r24, 0x01	; 1

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
    105a:	85 30       	cpi	r24, 0x05	; 5
    105c:	91 05       	cpc	r25, r1
    105e:	a1 f7       	brne	.-24     	; 0x1048 <_matrix_scan+0x11e>
            }
        }
    }

    return 1;
}
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	9f 90       	pop	r9
    107a:	8f 90       	pop	r8
    107c:	08 95       	ret

0000107e <serial_transaction>:
#endif

    return err;
}

int serial_transaction(void) {
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
    1082:	80 91 01 01 	lds	r24, 0x0101
    1086:	88 23       	and	r24, r24
    1088:	19 f0       	breq	.+6      	; 0x1090 <serial_transaction+0x12>
    108a:	c5 e0       	ldi	r28, 0x05	; 5
    108c:	d0 e0       	ldi	r29, 0x00	; 0
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <serial_transaction+0x16>
    1090:	c0 e0       	ldi	r28, 0x00	; 0
    1092:	d0 e0       	ldi	r29, 0x00	; 0

    if (serial_update_buffers()) {
    1094:	0e 94 30 0a 	call	0x1460	; 0x1460 <serial_update_buffers>
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	99 f4       	brne	.+38     	; 0x10c2 <serial_transaction+0x44>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
#endif

    return err;
}

int serial_transaction(void) {
    10a0:	c4 5b       	subi	r28, 0xB4	; 180
    10a2:	de 4f       	sbci	r29, 0xFE	; 254
    if (serial_update_buffers()) {
        return 1;
    }

    for (int i = 0; i < ROWS_PER_HAND; ++i) {
        matrix[slaveOffset+i] = serial_slave_buffer[i];
    10a4:	fc 01       	movw	r30, r24
    10a6:	eb 55       	subi	r30, 0x5B	; 91
    10a8:	fe 4f       	sbci	r31, 0xFE	; 254
    10aa:	20 81       	ld	r18, Z
#endif

    return err;
}

int serial_transaction(void) {
    10ac:	fe 01       	movw	r30, r28
    10ae:	e8 0f       	add	r30, r24
    10b0:	f9 1f       	adc	r31, r25
    if (serial_update_buffers()) {
        return 1;
    }

    for (int i = 0; i < ROWS_PER_HAND; ++i) {
        matrix[slaveOffset+i] = serial_slave_buffer[i];
    10b2:	20 83       	st	Z, r18

    if (serial_update_buffers()) {
        return 1;
    }

    for (int i = 0; i < ROWS_PER_HAND; ++i) {
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	85 30       	cpi	r24, 0x05	; 5
    10b8:	91 05       	cpc	r25, r1
    10ba:	a1 f7       	brne	.-24     	; 0x10a4 <serial_transaction+0x26>
        matrix[slaveOffset+i] = serial_slave_buffer[i];
    }
    return 0;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <serial_transaction+0x48>

int serial_transaction(void) {
    int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;

    if (serial_update_buffers()) {
        return 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0

    for (int i = 0; i < ROWS_PER_HAND; ++i) {
        matrix[slaveOffset+i] = serial_slave_buffer[i];
    }
    return 0;
}
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <matrix_scan>:

uint8_t matrix_scan(void)
{
    10cc:	cf 93       	push	r28
    int ret = _matrix_scan();
    10ce:	0e 94 95 07 	call	0xf2a	; 0xf2a <_matrix_scan>
    10d2:	c8 2f       	mov	r28, r24


#ifdef USE_I2C
    if( i2c_transaction() ) {
#else
    if( serial_transaction() ) {
    10d4:	0e 94 3f 08 	call	0x107e	; 0x107e <serial_transaction>
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	c1 f0       	breq	.+48     	; 0x110c <matrix_scan+0x40>
#endif
        // turn on the indicator led when halves are disconnected
        TXLED1;

        error_count++;
    10dc:	80 91 60 01 	lds	r24, 0x0160
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	80 93 60 01 	sts	0x0160, r24

        if (error_count > ERROR_DISCONNECT_COUNT) {
    10e6:	86 30       	cpi	r24, 0x06	; 6
    10e8:	98 f0       	brcs	.+38     	; 0x1110 <matrix_scan+0x44>
            // reset other half if disconnected
            int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
    10ea:	80 91 01 01 	lds	r24, 0x0101
    10ee:	88 23       	and	r24, r24
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <matrix_scan+0x2c>
    10f2:	e5 e0       	ldi	r30, 0x05	; 5
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <matrix_scan+0x30>
    10f8:	e0 e0       	ldi	r30, 0x00	; 0
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
            for (int i = 0; i < ROWS_PER_HAND; ++i) {
                matrix[slaveOffset+i] = 0;
    10fc:	e4 5b       	subi	r30, 0xB4	; 180
    10fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1100:	10 82       	st	Z, r1
    1102:	11 82       	std	Z+1, r1	; 0x01
    1104:	12 82       	std	Z+2, r1	; 0x02
    1106:	13 82       	std	Z+3, r1	; 0x03
    1108:	14 82       	std	Z+4, r1	; 0x04
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <matrix_scan+0x44>
            }
        }
    } else {
        // turn off the indicator led on no error
        TXLED0;
        error_count = 0;
    110c:	10 92 60 01 	sts	0x0160, r1
    }

    return ret;
}
    1110:	8c 2f       	mov	r24, r28
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <matrix_slave_scan>:

void matrix_slave_scan(void) {
    _matrix_scan();
    1116:	0e 94 95 07 	call	0xf2a	; 0xf2a <_matrix_scan>

    int offset = (isLeftHand) ? 0 : (MATRIX_ROWS / 2);
    111a:	80 91 01 01 	lds	r24, 0x0101
    111e:	88 23       	and	r24, r24
    1120:	19 f0       	breq	.+6      	; 0x1128 <matrix_slave_scan+0x12>
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	02 c0       	rjmp	.+4      	; 0x112c <matrix_slave_scan+0x16>
    1128:	25 e0       	ldi	r18, 0x05	; 5
    112a:	30 e0       	ldi	r19, 0x00	; 0
        RXLED0;
    }
#endif

#else
    for (int i = 0; i < ROWS_PER_HAND; ++i) {
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    }

    return ret;
}

void matrix_slave_scan(void) {
    1130:	24 5b       	subi	r18, 0xB4	; 180
    1132:	3e 4f       	sbci	r19, 0xFE	; 254
    1134:	f9 01       	movw	r30, r18
    1136:	e8 0f       	add	r30, r24
    1138:	f9 1f       	adc	r31, r25
    }
#endif

#else
    for (int i = 0; i < ROWS_PER_HAND; ++i) {
        serial_slave_buffer[i] = matrix[offset+i];
    113a:	40 81       	ld	r20, Z
    113c:	fc 01       	movw	r30, r24
    113e:	eb 55       	subi	r30, 0x5B	; 91
    1140:	fe 4f       	sbci	r31, 0xFE	; 254
    1142:	40 83       	st	Z, r20
        RXLED0;
    }
#endif

#else
    for (int i = 0; i < ROWS_PER_HAND; ++i) {
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	85 30       	cpi	r24, 0x05	; 5
    1148:	91 05       	cpc	r25, r1
    114a:	a1 f7       	brne	.-24     	; 0x1134 <matrix_slave_scan+0x1e>
        serial_slave_buffer[i] = matrix[offset+i];
    }
#endif

}
    114c:	08 95       	ret

0000114e <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    114e:	ec e4       	ldi	r30, 0x4C	; 76
    1150:	f1 e0       	ldi	r31, 0x01	; 1
    1152:	e8 0f       	add	r30, r24
    1154:	f1 1d       	adc	r31, r1
}
    1156:	80 81       	ld	r24, Z
    1158:	08 95       	ret

0000115a <matrix_print>:

void matrix_print(void)
{
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    116a:	84 e2       	ldi	r24, 0x24	; 36
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    1172:	0c e4       	ldi	r16, 0x4C	; 76
    1174:	11 e0       	ldi	r17, 0x01	; 1
    1176:	c0 e0       	ldi	r28, 0x00	; 0
    1178:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    117a:	3b e3       	ldi	r19, 0x3B	; 59
    117c:	e3 2e       	mov	r14, r19
    117e:	31 e0       	ldi	r19, 0x01	; 1
    1180:	f3 2e       	mov	r15, r19
        pbin_reverse16(matrix_get_row(row));
    1182:	43 e4       	ldi	r20, 0x43	; 67
    1184:	c4 2e       	mov	r12, r20
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	d4 2e       	mov	r13, r20

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    118a:	00 d0       	rcall	.+0      	; 0x118c <matrix_print+0x32>
    118c:	00 d0       	rcall	.+0      	; 0x118e <matrix_print+0x34>
    118e:	ed b7       	in	r30, 0x3d	; 61
    1190:	fe b7       	in	r31, 0x3e	; 62
    1192:	f2 82       	std	Z+2, r15	; 0x02
    1194:	e1 82       	std	Z+1, r14	; 0x01
    1196:	d4 83       	std	Z+4, r29	; 0x04
    1198:	c3 83       	std	Z+3, r28	; 0x03
    119a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	80 e4       	ldi	r24, 0x40	; 64
    11a8:	91 e0       	ldi	r25, 0x01	; 1
    11aa:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
        pbin_reverse16(matrix_get_row(row));
    11ae:	f8 01       	movw	r30, r16
    11b0:	81 91       	ld	r24, Z+
    11b2:	8f 01       	movw	r16, r30
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <bitrev16>
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <matrix_print+0x62>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <matrix_print+0x64>
    11be:	ed b7       	in	r30, 0x3d	; 61
    11c0:	fe b7       	in	r31, 0x3e	; 62
    11c2:	d2 82       	std	Z+2, r13	; 0x02
    11c4:	c1 82       	std	Z+1, r12	; 0x01
    11c6:	94 83       	std	Z+4, r25	; 0x04
    11c8:	83 83       	std	Z+3, r24	; 0x03
    11ca:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
        print("\n");
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	89 e4       	ldi	r24, 0x49	; 73
    11d8:	91 e0       	ldi	r25, 0x01	; 1
    11da:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    11de:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    11e0:	ca 30       	cpi	r28, 0x0A	; 10
    11e2:	d1 05       	cpc	r29, r1
    11e4:	91 f6       	brne	.-92     	; 0x118a <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	08 95       	ret

000011f8 <__vector_36>:
  TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
}

ISR(TWI_vect);

ISR(TWI_vect) {
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	8f 93       	push	r24
    1204:	9f 93       	push	r25
    1206:	ef 93       	push	r30
    1208:	ff 93       	push	r31
  uint8_t ack = 1;
  switch(TW_STATUS) {
    120a:	80 91 b9 00 	lds	r24, 0x00B9
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	88 7f       	andi	r24, 0xF8	; 248
    1212:	90 70       	andi	r25, 0x00	; 0
    1214:	80 38       	cpi	r24, 0x80	; 128
    1216:	91 05       	cpc	r25, r1
    1218:	99 f0       	breq	.+38     	; 0x1240 <__vector_36+0x48>
    121a:	81 38       	cpi	r24, 0x81	; 129
    121c:	91 05       	cpc	r25, r1
    121e:	34 f4       	brge	.+12     	; 0x122c <__vector_36+0x34>
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	e9 f1       	breq	.+122    	; 0x129e <__vector_36+0xa6>
    1224:	80 36       	cpi	r24, 0x60	; 96
    1226:	91 05       	cpc	r25, r1
    1228:	e1 f5       	brne	.+120    	; 0x12a2 <__vector_36+0xaa>
    122a:	07 c0       	rjmp	.+14     	; 0x123a <__vector_36+0x42>
    122c:	88 3a       	cpi	r24, 0xA8	; 168
    122e:	91 05       	cpc	r25, r1
    1230:	29 f1       	breq	.+74     	; 0x127c <__vector_36+0x84>
    1232:	88 3b       	cpi	r24, 0xB8	; 184
    1234:	91 05       	cpc	r25, r1
    1236:	a9 f5       	brne	.+106    	; 0x12a2 <__vector_36+0xaa>
    1238:	21 c0       	rjmp	.+66     	; 0x127c <__vector_36+0x84>
    case TW_SR_SLA_ACK:
      // this device has been addressed as a slave receiver
      slave_has_register_set = false;
    123a:	10 92 61 01 	sts	0x0161, r1
    123e:	31 c0       	rjmp	.+98     	; 0x12a2 <__vector_36+0xaa>
      // this device has received data as a slave receiver
      // The first byte that we receive in this transaction sets the location
      // of the read/write location of the slaves memory that it exposes over
      // i2c.  After that, bytes will be written at slave_buffer_pos, incrementing
      // slave_buffer_pos after each write.
      if(!slave_has_register_set) {
    1240:	80 91 61 01 	lds	r24, 0x0161
    1244:	88 23       	and	r24, r24
    1246:	89 f4       	brne	.+34     	; 0x126a <__vector_36+0x72>
        slave_buffer_pos = TWDR;
    1248:	80 91 bb 00 	lds	r24, 0x00BB
    124c:	80 93 62 01 	sts	0x0162, r24
        // don't acknowledge the master if this memory loctaion is out of bounds
        if ( slave_buffer_pos >= SLAVE_BUFFER_SIZE ) {
    1250:	80 91 62 01 	lds	r24, 0x0162
    1254:	80 34       	cpi	r24, 0x40	; 64
    1256:	20 f0       	brcs	.+8      	; 0x1260 <__vector_36+0x68>
          ack = 0;
          slave_buffer_pos = 0;
    1258:	10 92 62 01 	sts	0x0162, r1
      // slave_buffer_pos after each write.
      if(!slave_has_register_set) {
        slave_buffer_pos = TWDR;
        // don't acknowledge the master if this memory loctaion is out of bounds
        if ( slave_buffer_pos >= SLAVE_BUFFER_SIZE ) {
          ack = 0;
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <__vector_36+0x6a>
}

ISR(TWI_vect);

ISR(TWI_vect) {
  uint8_t ack = 1;
    1260:	81 e0       	ldi	r24, 0x01	; 1
        // don't acknowledge the master if this memory loctaion is out of bounds
        if ( slave_buffer_pos >= SLAVE_BUFFER_SIZE ) {
          ack = 0;
          slave_buffer_pos = 0;
        }
        slave_has_register_set = true;
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	90 93 61 01 	sts	0x0161, r25
    1268:	1d c0       	rjmp	.+58     	; 0x12a4 <__vector_36+0xac>
      } else {
        i2c_slave_buffer[slave_buffer_pos] = TWDR;
    126a:	e0 91 62 01 	lds	r30, 0x0162
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 91 bb 00 	lds	r24, 0x00BB
    1274:	ed 59       	subi	r30, 0x9D	; 157
    1276:	fe 4f       	sbci	r31, 0xFE	; 254
    1278:	80 83       	st	Z, r24
    127a:	08 c0       	rjmp	.+16     	; 0x128c <__vector_36+0x94>

    case TW_ST_SLA_ACK:
    case TW_ST_DATA_ACK:
      // master has addressed this device as a slave transmitter and is
      // requesting data.
      TWDR = i2c_slave_buffer[slave_buffer_pos];
    127c:	e0 91 62 01 	lds	r30, 0x0162
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	ed 59       	subi	r30, 0x9D	; 157
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	80 81       	ld	r24, Z
    1288:	80 93 bb 00 	sts	0x00BB, r24
      BUFFER_POS_INC();
    128c:	80 91 62 01 	lds	r24, 0x0162
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	8f 73       	andi	r24, 0x3F	; 63
    1296:	90 70       	andi	r25, 0x00	; 0
    1298:	80 93 62 01 	sts	0x0162, r24
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <__vector_36+0xaa>
      break;

    case TW_BUS_ERROR: // something went wrong, reset twi state
      TWCR = 0;
    129e:	10 92 bc 00 	sts	0x00BC, r1
}

ISR(TWI_vect);

ISR(TWI_vect) {
  uint8_t ack = 1;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
      TWCR = 0;
    default:
      break;
  }
  // Reset everything, so we are ready for the next TWI interrupt
  TWCR |= (1<<TWIE) | (1<<TWINT) | (ack<<TWEA) | (1<<TWEN);
    12a4:	90 91 bc 00 	lds	r25, 0x00BC
    12a8:	95 68       	ori	r25, 0x85	; 133
    12aa:	82 95       	swap	r24
    12ac:	88 0f       	add	r24, r24
    12ae:	88 0f       	add	r24, r24
    12b0:	80 7c       	andi	r24, 0xC0	; 192
    12b2:	89 2b       	or	r24, r25
    12b4:	80 93 bc 00 	sts	0x00BC, r24
}
    12b8:	ff 91       	pop	r31
    12ba:	ef 91       	pop	r30
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	0f 90       	pop	r0
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	0f 90       	pop	r0
    12c6:	1f 90       	pop	r1
    12c8:	18 95       	reti

000012ca <serial_output>:
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
    12ca:	50 9a       	sbi	0x0a, 0	; 10
}
    12cc:	08 95       	ret

000012ce <serial_input>:

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
    12ce:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
    12d0:	58 9a       	sbi	0x0b, 0	; 11
}
    12d2:	08 95       	ret

000012d4 <serial_high>:
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
    12d4:	58 9a       	sbi	0x0b, 0	; 11
}
    12d6:	08 95       	ret

000012d8 <sync_recv>:
}

// Used by the master to synchronize timing with the slave.
static
void sync_recv(void) {
  serial_input();
    12d8:	0e 94 67 09 	call	0x12ce	; 0x12ce <serial_input>
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
}

inline static
uint8_t serial_read_pin(void) {
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
    12dc:	89 b1       	in	r24, 0x09	; 9
static
void sync_recv(void) {
  serial_input();
  // This shouldn't hang if the slave disconnects because the
  // serial line will float to high if the slave does disconnect.
  while (!serial_read_pin());
    12de:	80 ff       	sbrs	r24, 0
    12e0:	fd cf       	rjmp	.-6      	; 0x12dc <sync_recv+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12e2:	80 e8       	ldi	r24, 0x80	; 128
    12e4:	8a 95       	dec	r24
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <sync_recv+0xc>
  serial_delay();
}
    12e8:	08 95       	ret

000012ea <sync_send>:

// Used by the slave to send a synchronization signal to the master.
static
void sync_send(void) {
  serial_output();
    12ea:	0e 94 65 09 	call	0x12ca	; 0x12ca <serial_output>
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
    12ee:	58 98       	cbi	0x0b, 0	; 11
    12f0:	80 e8       	ldi	r24, 0x80	; 128
    12f2:	8a 95       	dec	r24
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <sync_send+0x8>
  serial_output();

  serial_low();
  serial_delay();

  serial_high();
    12f6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <serial_high>
}
    12fa:	08 95       	ret

000012fc <serial_read_byte>:

// Reads a byte from the serial line
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
    12fc:	0e 94 67 09 	call	0x12ce	; 0x12ce <serial_input>
    1300:	98 e0       	ldi	r25, 0x08	; 8
}

// Reads a byte from the serial line
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
    1302:	80 e0       	ldi	r24, 0x00	; 0
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
}

inline static
uint8_t serial_read_pin(void) {
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
    1304:	29 b1       	in	r18, 0x09	; 9
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
  for ( uint8_t i = 0; i < 8; ++i) {
    byte = (byte << 1) | serial_read_pin();
    1306:	88 0f       	add	r24, r24
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
}

inline static
uint8_t serial_read_pin(void) {
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
    1308:	21 70       	andi	r18, 0x01	; 1
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
  for ( uint8_t i = 0; i < 8; ++i) {
    byte = (byte << 1) | serial_read_pin();
    130a:	82 2b       	or	r24, r18
    130c:	20 e8       	ldi	r18, 0x80	; 128
    130e:	2a 95       	dec	r18
    1310:	f1 f7       	brne	.-4      	; 0x130e <serial_read_byte+0x12>
    1312:	25 e0       	ldi	r18, 0x05	; 5
    1314:	2a 95       	dec	r18
    1316:	f1 f7       	brne	.-4      	; 0x1314 <serial_read_byte+0x18>
    1318:	00 00       	nop
    131a:	91 50       	subi	r25, 0x01	; 1
// Reads a byte from the serial line
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
  for ( uint8_t i = 0; i < 8; ++i) {
    131c:	99 f7       	brne	.-26     	; 0x1304 <serial_read_byte+0x8>
    serial_delay();
    _delay_us(1);
  }

  return byte;
}
    131e:	08 95       	ret

00001320 <serial_write_byte>:

// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	c8 2f       	mov	r28, r24
  uint8_t b = 8;
  serial_output();
    1328:	0e 94 65 09 	call	0x12ca	; 0x12ca <serial_output>
}

// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
    132c:	18 e0       	ldi	r17, 0x08	; 8
  serial_output();
  while( b-- ) {
    if(data & (1 << b)) {
    132e:	d0 e0       	ldi	r29, 0x00	; 0
// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
  serial_output();
  while( b-- ) {
    1330:	11 50       	subi	r17, 0x01	; 1
    if(data & (1 << b)) {
    1332:	ce 01       	movw	r24, r28
    1334:	01 2e       	mov	r0, r17
    1336:	02 c0       	rjmp	.+4      	; 0x133c <serial_write_byte+0x1c>
    1338:	95 95       	asr	r25
    133a:	87 95       	ror	r24
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <serial_write_byte+0x18>
    1340:	80 ff       	sbrs	r24, 0
    1342:	03 c0       	rjmp	.+6      	; 0x134a <serial_write_byte+0x2a>
      serial_high();
    1344:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <serial_high>
    1348:	01 c0       	rjmp	.+2      	; 0x134c <serial_write_byte+0x2c>
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
    134a:	58 98       	cbi	0x0b, 0	; 11
    134c:	80 e8       	ldi	r24, 0x80	; 128
    134e:	8a 95       	dec	r24
    1350:	f1 f7       	brne	.-4      	; 0x134e <serial_write_byte+0x2e>
// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
  serial_output();
  while( b-- ) {
    1352:	11 23       	and	r17, r17
    1354:	69 f7       	brne	.-38     	; 0x1330 <serial_write_byte+0x10>
    } else {
      serial_low();
    }
    serial_delay();
  }
}
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	08 95       	ret

0000135e <serial_master_init>:
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
}

void serial_master_init(void) {
  serial_output();
    135e:	0e 94 65 09 	call	0x12ca	; 0x12ca <serial_output>
  serial_high();
    1362:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <serial_high>
}
    1366:	08 95       	ret

00001368 <serial_slave_init>:

void serial_slave_init(void) {
  serial_input();
    1368:	0e 94 67 09 	call	0x12ce	; 0x12ce <serial_input>

  // Enable INT0
  EIMSK |= _BV(INT0);
    136c:	e8 9a       	sbi	0x1d, 0	; 29
  // Trigger on falling edge of INT0
  EICRA &= ~(_BV(ISC00) | _BV(ISC01));
    136e:	e9 e6       	ldi	r30, 0x69	; 105
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	8c 7f       	andi	r24, 0xFC	; 252
    1376:	80 83       	st	Z, r24
}
    1378:	08 95       	ret

0000137a <__vector_1>:
    serial_delay();
  }
}

// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
    137a:	1f 92       	push	r1
    137c:	0f 92       	push	r0
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	0f 92       	push	r0
    1382:	11 24       	eor	r1, r1
    1384:	cf 92       	push	r12
    1386:	df 92       	push	r13
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	2f 93       	push	r18
    1390:	3f 93       	push	r19
    1392:	4f 93       	push	r20
    1394:	5f 93       	push	r21
    1396:	6f 93       	push	r22
    1398:	7f 93       	push	r23
    139a:	8f 93       	push	r24
    139c:	9f 93       	push	r25
    139e:	af 93       	push	r26
    13a0:	bf 93       	push	r27
    13a2:	ef 93       	push	r30
    13a4:	ff 93       	push	r31
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	0f 92       	push	r0
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
  sync_send();
    13b0:	0e 94 75 09 	call	0x12ea	; 0x12ea <sync_send>

  uint8_t checksum = 0;
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    13b4:	00 e0       	ldi	r16, 0x00	; 0
    13b6:	10 e0       	ldi	r17, 0x00	; 0

// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
  sync_send();

  uint8_t checksum = 0;
    13b8:	ff 24       	eor	r15, r15
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_slave_buffer[i]);
    13ba:	85 ea       	ldi	r24, 0xA5	; 165
    13bc:	c8 2e       	mov	r12, r24
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	d8 2e       	mov	r13, r24
    13c2:	c0 0e       	add	r12, r16
    13c4:	d1 1e       	adc	r13, r17
    13c6:	f6 01       	movw	r30, r12
    13c8:	80 81       	ld	r24, Z
    13ca:	0e 94 90 09 	call	0x1320	; 0x1320 <serial_write_byte>
    sync_send();
    13ce:	0e 94 75 09 	call	0x12ea	; 0x12ea <sync_send>
    checksum += serial_slave_buffer[i];
    13d2:	f6 01       	movw	r30, r12
    13d4:	80 81       	ld	r24, Z
    13d6:	f8 0e       	add	r15, r24
// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
  sync_send();

  uint8_t checksum = 0;
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    13d8:	0f 5f       	subi	r16, 0xFF	; 255
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	05 30       	cpi	r16, 0x05	; 5
    13de:	11 05       	cpc	r17, r1
    13e0:	61 f7       	brne	.-40     	; 0x13ba <__vector_1+0x40>
    serial_write_byte(serial_slave_buffer[i]);
    sync_send();
    checksum += serial_slave_buffer[i];
  }
  serial_write_byte(checksum);
    13e2:	8f 2d       	mov	r24, r15
    13e4:	0e 94 90 09 	call	0x1320	; 0x1320 <serial_write_byte>
  sync_send();
    13e8:	0e 94 75 09 	call	0x12ea	; 0x12ea <sync_send>
    13ec:	f0 e8       	ldi	r31, 0x80	; 128
    13ee:	fa 95       	dec	r31
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <__vector_1+0x74>
    13f2:	80 e4       	ldi	r24, 0x40	; 64
    13f4:	8a 95       	dec	r24
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <__vector_1+0x7a>
  // read the middle of pulses
  _delay_us(SERIAL_DELAY/2);

  uint8_t checksum_computed = 0;
  for (int i = 0; i < SERIAL_MASTER_BUFFER_LENGTH; ++i) {
    serial_master_buffer[i] = serial_read_byte();
    13f8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <serial_read_byte>
    13fc:	80 93 a4 01 	sts	0x01A4, r24
    sync_send();
    1400:	0e 94 75 09 	call	0x12ea	; 0x12ea <sync_send>
    checksum_computed += serial_master_buffer[i];
    1404:	00 91 a4 01 	lds	r16, 0x01A4
  }
  uint8_t checksum_received = serial_read_byte();
    1408:	0e 94 7e 09 	call	0x12fc	; 0x12fc <serial_read_byte>
  sync_send();
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	0e 94 75 09 	call	0x12ea	; 0x12ea <sync_send>

  serial_input(); // end transaction
    1412:	0e 94 67 09 	call	0x12ce	; 0x12ce <serial_input>

  if ( checksum_computed != checksum_received ) {
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	08 17       	cp	r16, r24
    141a:	21 f0       	breq	.+8      	; 0x1424 <__vector_1+0xaa>
    status |= SLAVE_DATA_CORRUPT;
    141c:	80 91 a3 01 	lds	r24, 0x01A3
    1420:	81 60       	ori	r24, 0x01	; 1
    1422:	03 c0       	rjmp	.+6      	; 0x142a <__vector_1+0xb0>
  } else {
    status &= ~SLAVE_DATA_CORRUPT;
    1424:	80 91 a3 01 	lds	r24, 0x01A3
    1428:	8e 7f       	andi	r24, 0xFE	; 254
    142a:	80 93 a3 01 	sts	0x01A3, r24
  }
}
    142e:	0f 90       	pop	r0
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	ff 91       	pop	r31
    1436:	ef 91       	pop	r30
    1438:	bf 91       	pop	r27
    143a:	af 91       	pop	r26
    143c:	9f 91       	pop	r25
    143e:	8f 91       	pop	r24
    1440:	7f 91       	pop	r23
    1442:	6f 91       	pop	r22
    1444:	5f 91       	pop	r21
    1446:	4f 91       	pop	r20
    1448:	3f 91       	pop	r19
    144a:	2f 91       	pop	r18
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	ff 90       	pop	r15
    1452:	df 90       	pop	r13
    1454:	cf 90       	pop	r12
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	0f 90       	pop	r0
    145c:	1f 90       	pop	r1
    145e:	18 95       	reti

00001460 <serial_update_buffers>:
// serial_master_buffer to the slave.
//
// Returns:
// 0 => no error
// 1 => slave did not respond
int serial_update_buffers(void) {
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	0f 92       	push	r0
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
  // this code is very time dependent, so we need to disable interrupts
  cli();
    1474:	f8 94       	cli

  // signal to the slave that we want to start a transaction
  serial_output();
    1476:	0e 94 65 09 	call	0x12ca	; 0x12ca <serial_output>
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
    147a:	58 98       	cbi	0x0b, 0	; 11
    147c:	85 e0       	ldi	r24, 0x05	; 5
    147e:	8a 95       	dec	r24
    1480:	f1 f7       	brne	.-4      	; 0x147e <serial_update_buffers+0x1e>
    1482:	00 00       	nop
  serial_output();
  serial_low();
  _delay_us(1);

  // wait for the slaves response
  serial_input();
    1484:	0e 94 67 09 	call	0x12ce	; 0x12ce <serial_input>
  serial_high();
    1488:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <serial_high>
    148c:	e0 e8       	ldi	r30, 0x80	; 128
    148e:	ea 95       	dec	r30
    1490:	f1 f7       	brne	.-4      	; 0x148e <serial_update_buffers+0x2e>
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
}

inline static
uint8_t serial_read_pin(void) {
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
    1492:	89 b1       	in	r24, 0x09	; 9
  serial_input();
  serial_high();
  _delay_us(SERIAL_DELAY);

  // check if the slave is present
  if (serial_read_pin()) {
    1494:	80 fd       	sbrc	r24, 0
    1496:	34 c0       	rjmp	.+104    	; 0x1500 <serial_update_buffers+0xa0>
    sei();
    return 1;
  }

  // if the slave is present syncronize with it
  sync_recv();
    1498:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <sync_recv>

  uint8_t checksum_computed = 0;
  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    149c:	cc 24       	eor	r12, r12
    149e:	dd 24       	eor	r13, r13
  }

  // if the slave is present syncronize with it
  sync_recv();

  uint8_t checksum_computed = 0;
    14a0:	ff 24       	eor	r15, r15
  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_slave_buffer[i] = serial_read_byte();
    14a2:	0e 94 7e 09 	call	0x12fc	; 0x12fc <serial_read_byte>
    14a6:	86 01       	movw	r16, r12
    14a8:	0b 55       	subi	r16, 0x5B	; 91
    14aa:	1e 4f       	sbci	r17, 0xFE	; 254
    14ac:	f8 01       	movw	r30, r16
    14ae:	80 83       	st	Z, r24
    sync_recv();
    14b0:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <sync_recv>
    checksum_computed += serial_slave_buffer[i];
    14b4:	f8 01       	movw	r30, r16
    14b6:	80 81       	ld	r24, Z
    14b8:	f8 0e       	add	r15, r24
  // if the slave is present syncronize with it
  sync_recv();

  uint8_t checksum_computed = 0;
  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    14ba:	08 94       	sec
    14bc:	c1 1c       	adc	r12, r1
    14be:	d1 1c       	adc	r13, r1
    14c0:	f5 e0       	ldi	r31, 0x05	; 5
    14c2:	cf 16       	cp	r12, r31
    14c4:	d1 04       	cpc	r13, r1
    14c6:	69 f7       	brne	.-38     	; 0x14a2 <serial_update_buffers+0x42>
    serial_slave_buffer[i] = serial_read_byte();
    sync_recv();
    checksum_computed += serial_slave_buffer[i];
  }
  uint8_t checksum_received = serial_read_byte();
    14c8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <serial_read_byte>
  sync_recv();
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <sync_recv>

  if (checksum_computed != checksum_received) {
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	f8 16       	cp	r15, r24
    14d6:	a1 f4       	brne	.+40     	; 0x1500 <serial_update_buffers+0xa0>
  }

  uint8_t checksum = 0;
  // send data to the slave
  for (int i = 0; i < SERIAL_MASTER_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_master_buffer[i]);
    14d8:	80 91 a4 01 	lds	r24, 0x01A4
    14dc:	0e 94 90 09 	call	0x1320	; 0x1320 <serial_write_byte>
    sync_recv();
    14e0:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <sync_recv>
    checksum += serial_master_buffer[i];
    14e4:	80 91 a4 01 	lds	r24, 0x01A4
  }
  serial_write_byte(checksum);
    14e8:	0e 94 90 09 	call	0x1320	; 0x1320 <serial_write_byte>
  sync_recv();
    14ec:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <sync_recv>

  // always, release the line when not in use
  serial_output();
    14f0:	0e 94 65 09 	call	0x12ca	; 0x12ca <serial_output>
  serial_high();
    14f4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <serial_high>

  sei();
    14f8:	78 94       	sei
  return 0;
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	03 c0       	rjmp	.+6      	; 0x1506 <serial_update_buffers+0xa6>
  }
  uint8_t checksum_received = serial_read_byte();
  sync_recv();

  if (checksum_computed != checksum_received) {
    sei();
    1500:	78 94       	sei
    return 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
  serial_output();
  serial_high();

  sei();
  return 0;
}
    1506:	0f 90       	pop	r0
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	df 90       	pop	r13
    1514:	cf 90       	pop	r12
    1516:	08 95       	ret

00001518 <has_usb>:
    serial_slave_init();
#endif
}

bool has_usb(void) {
   USBCON |= (1 << OTGPADE); //enables VBUS pad
    1518:	e8 ed       	ldi	r30, 0xD8	; 216
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	80 61       	ori	r24, 0x10	; 16
    1520:	80 83       	st	Z, r24
    1522:	8a e1       	ldi	r24, 0x1A	; 26
    1524:	8a 95       	dec	r24
    1526:	f1 f7       	brne	.-4      	; 0x1524 <has_usb+0xc>
    1528:	00 c0       	rjmp	.+0      	; 0x152a <has_usb+0x12>
   _delay_us(5);
   return (USBSTA & (1<<VBUS));  //checks state of VBUS
    152a:	80 91 d9 00 	lds	r24, 0x00D9
}
    152e:	81 70       	andi	r24, 0x01	; 1
    1530:	08 95       	ret

00001532 <split_keyboard_setup>:
#include "config.h"

volatile bool isLeftHand = true;

static void setup_handedness(void) {
    isLeftHand = eeprom_read_byte(EECONFIG_HANDEDNESS);
    1532:	87 e0       	ldi	r24, 0x07	; 7
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__eerd_byte_m32u4>
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	88 23       	and	r24, r24
    153e:	09 f4       	brne	.+2      	; 0x1542 <split_keyboard_setup+0x10>
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	90 93 01 01 	sts	0x0101, r25
}

void split_keyboard_setup(void) {
   setup_handedness();

   if (has_usb()) {
    1546:	0e 94 8c 0a 	call	0x1518	; 0x1518 <has_usb>
    154a:	88 23       	and	r24, r24
    154c:	19 f0       	breq	.+6      	; 0x1554 <split_keyboard_setup+0x22>

static void keyboard_master_setup(void) {
#ifdef USE_I2C
    i2c_master_init();
#else
    serial_master_init();
    154e:	0e 94 af 09 	call	0x135e	; 0x135e <serial_master_init>
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <split_keyboard_setup+0x26>

static void keyboard_slave_setup(void) {
#ifdef USE_I2C
    i2c_slave_init(SLAVE_I2C_ADDRESS);
#else
    serial_slave_init();
    1554:	0e 94 b4 09 	call	0x1368	; 0x1368 <serial_slave_init>
   if (has_usb()) {
      keyboard_master_setup();
   } else {
      keyboard_slave_setup();
   }
   sei();
    1558:	78 94       	sei
}
    155a:	08 95       	ret

0000155c <keyboard_slave_loop>:

void keyboard_slave_loop(void) {
   matrix_init();
    155c:	0e 94 60 07 	call	0xec0	; 0xec0 <matrix_init>

   while (1) {
      matrix_slave_scan();
    1560:	0e 94 8b 08 	call	0x1116	; 0x1116 <matrix_slave_scan>
    1564:	fd cf       	rjmp	.-6      	; 0x1560 <keyboard_slave_loop+0x4>

00001566 <matrix_setup>:
   }
}

// this code runs before the usb and keyboard is initialized
void matrix_setup(void) {
    split_keyboard_setup();
    1566:	0e 94 99 0a 	call	0x1532	; 0x1532 <split_keyboard_setup>

    if (!has_usb()) {
    156a:	0e 94 8c 0a 	call	0x1518	; 0x1518 <has_usb>
    156e:	88 23       	and	r24, r24
    1570:	11 f4       	brne	.+4      	; 0x1576 <matrix_setup+0x10>
        keyboard_slave_loop();
    1572:	0e 94 ae 0a 	call	0x155c	; 0x155c <keyboard_slave_loop>
    1576:	08 95       	ret

00001578 <led_set>:
#include "stdint.h"
#include "led.h"

void led_set(uint8_t usb_led)
{
}
    1578:	08 95       	ret

0000157a <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    157a:	80 91 bb 01 	lds	r24, 0x01BB
    157e:	08 95       	ret

00001580 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1580:	9f b7       	in	r25, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	10 92 bd 01 	sts	0x01BD, r1
    1588:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    158a:	90 91 3c 02 	lds	r25, 0x023C
    158e:	94 30       	cpi	r25, 0x04	; 4
    1590:	09 f0       	breq	.+2      	; 0x1594 <sendchar+0x14>
    1592:	5a c0       	rjmp	.+180    	; 0x1648 <sendchar+0xc8>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1594:	90 91 e9 00 	lds	r25, 0x00E9
    1598:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    159a:	20 91 ec 00 	lds	r18, 0x00EC
    159e:	20 ff       	sbrs	r18, 0
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <sendchar+0x26>
    15a2:	20 e8       	ldi	r18, 0x80	; 128
    15a4:	01 c0       	rjmp	.+2      	; 0x15a8 <sendchar+0x28>
    15a6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    15a8:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15aa:	94 e0       	ldi	r25, 0x04	; 4
    15ac:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    15b0:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    15b4:	90 ff       	sbrs	r25, 0
    15b6:	43 c0       	rjmp	.+134    	; 0x163e <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    15b8:	90 91 ee 00 	lds	r25, 0x00EE
    15bc:	97 ff       	sbrs	r25, 7
    15be:	3f c0       	rjmp	.+126    	; 0x163e <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    15c0:	90 91 be 01 	lds	r25, 0x01BE
    15c4:	99 23       	and	r25, r25
    15c6:	21 f0       	breq	.+8      	; 0x15d0 <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15c8:	90 91 e8 00 	lds	r25, 0x00E8
    15cc:	95 ff       	sbrs	r25, 5
    15ce:	37 c0       	rjmp	.+110    	; 0x163e <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    15d0:	10 92 be 01 	sts	0x01BE, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    15d4:	96 e0       	ldi	r25, 0x06	; 6
    15d6:	14 c0       	rjmp	.+40     	; 0x1600 <sendchar+0x80>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    15d8:	30 91 3c 02 	lds	r19, 0x023C
    15dc:	34 30       	cpi	r19, 0x04	; 4
    15de:	79 f5       	brne	.+94     	; 0x163e <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    15e0:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    15e4:	35 fd       	sbrc	r19, 5
    15e6:	2b c0       	rjmp	.+86     	; 0x163e <sendchar+0xbe>
    15e8:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    15ea:	21 f4       	brne	.+8      	; 0x15f4 <sendchar+0x74>
            timeouted = true;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	80 93 be 01 	sts	0x01BE, r24
            goto ERROR_EXIT;
    15f2:	25 c0       	rjmp	.+74     	; 0x163e <sendchar+0xbe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15f4:	ef e9       	ldi	r30, 0x9F	; 159
    15f6:	ff e0       	ldi	r31, 0x0F	; 15
    15f8:	31 97       	sbiw	r30, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <sendchar+0x78>
    15fc:	00 c0       	rjmp	.+0      	; 0x15fe <sendchar+0x7e>
    15fe:	00 00       	nop
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1600:	30 91 e8 00 	lds	r19, 0x00E8
    }

    timeouted = false;

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1604:	35 ff       	sbrs	r19, 5
    1606:	e8 cf       	rjmp	.-48     	; 0x15d8 <sendchar+0x58>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1608:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    160c:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    1610:	85 fd       	sbrc	r24, 5
    1612:	0a c0       	rjmp	.+20     	; 0x1628 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1614:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1618:	80 ff       	sbrs	r24, 0
    161a:	fc cf       	rjmp	.-8      	; 0x1614 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    161c:	80 91 e8 00 	lds	r24, 0x00E8
    1620:	8e 77       	andi	r24, 0x7E	; 126
    1622:	80 93 e8 00 	sts	0x00E8, r24
    1626:	06 c0       	rjmp	.+12     	; 0x1634 <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1628:	8f b7       	in	r24, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	91 e0       	ldi	r25, 0x01	; 1
    162e:	90 93 bd 01 	sts	0x01BD, r25
    1632:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1634:	2f 70       	andi	r18, 0x0F	; 15
    1636:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	08 95       	ret
    163e:	2f 70       	andi	r18, 0x0F	; 15
    1640:	20 93 e9 00 	sts	0x00E9, r18
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	08 95       	ret
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    164a:	08 95       	ret

0000164c <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	00 d0       	rcall	.+0      	; 0x1652 <send_consumer+0x6>
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1658:	20 91 3c 02 	lds	r18, 0x023C
    165c:	24 30       	cpi	r18, 0x04	; 4
    165e:	21 f5       	brne	.+72     	; 0x16a8 <send_consumer+0x5c>
        return;

    report_extra_t r = {
    1660:	23 e0       	ldi	r18, 0x03	; 3
    1662:	29 83       	std	Y+1, r18	; 0x01
    1664:	9b 83       	std	Y+3, r25	; 0x03
    1666:	8a 83       	std	Y+2, r24	; 0x02
    1668:	20 93 e9 00 	sts	0x00E9, r18
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	06 c0       	rjmp	.+12     	; 0x167c <send_consumer+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1670:	95 ed       	ldi	r25, 0xD5	; 213
    1672:	9a 95       	dec	r25
    1674:	f1 f7       	brne	.-4      	; 0x1672 <send_consumer+0x26>
    1676:	00 00       	nop
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1678:	88 23       	and	r24, r24
    167a:	29 f0       	breq	.+10     	; 0x1686 <send_consumer+0x3a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    167c:	90 91 e8 00 	lds	r25, 0x00E8
    1680:	81 50       	subi	r24, 0x01	; 1
    1682:	95 ff       	sbrs	r25, 5
    1684:	f5 cf       	rjmp	.-22     	; 0x1670 <send_consumer+0x24>
    1686:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    168a:	85 ff       	sbrs	r24, 5
    168c:	0d c0       	rjmp	.+26     	; 0x16a8 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    168e:	ce 01       	movw	r24, r28
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	63 e0       	ldi	r22, 0x03	; 3
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    169e:	80 91 e8 00 	lds	r24, 0x00E8
    16a2:	8e 77       	andi	r24, 0x7E	; 126
    16a4:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	08 95       	ret

000016b4 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <send_system+0x6>
    16ba:	0f 92       	push	r0
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    16c0:	20 91 3c 02 	lds	r18, 0x023C
    16c4:	24 30       	cpi	r18, 0x04	; 4
    16c6:	29 f5       	brne	.+74     	; 0x1712 <send_system+0x5e>
        return;

    report_extra_t r = {
    16c8:	22 e0       	ldi	r18, 0x02	; 2
    16ca:	29 83       	std	Y+1, r18	; 0x01
    16cc:	9b 83       	std	Y+3, r25	; 0x03
    16ce:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16d0:	83 e0       	ldi	r24, 0x03	; 3
    16d2:	80 93 e9 00 	sts	0x00E9, r24
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <send_system+0x32>
    16da:	95 ed       	ldi	r25, 0xD5	; 213
    16dc:	9a 95       	dec	r25
    16de:	f1 f7       	brne	.-4      	; 0x16dc <send_system+0x28>
    16e0:	00 00       	nop
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    16e2:	88 23       	and	r24, r24
    16e4:	29 f0       	breq	.+10     	; 0x16f0 <send_system+0x3c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16e6:	90 91 e8 00 	lds	r25, 0x00E8
    16ea:	81 50       	subi	r24, 0x01	; 1
    16ec:	95 ff       	sbrs	r25, 5
    16ee:	f5 cf       	rjmp	.-22     	; 0x16da <send_system+0x26>
    16f0:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    16f4:	85 ff       	sbrs	r24, 5
    16f6:	0d c0       	rjmp	.+26     	; 0x1712 <send_system+0x5e>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    16f8:	ce 01       	movw	r24, r28
    16fa:	01 96       	adiw	r24, 0x01	; 1
    16fc:	63 e0       	ldi	r22, 0x03	; 3
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1708:	80 91 e8 00 	lds	r24, 0x00E8
    170c:	8e 77       	andi	r24, 0x7E	; 126
    170e:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    171e:	20 91 3c 02 	lds	r18, 0x023C
    1722:	24 30       	cpi	r18, 0x04	; 4
    1724:	f9 f4       	brne	.+62     	; 0x1764 <send_mouse+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1726:	22 e0       	ldi	r18, 0x02	; 2
    1728:	20 93 e9 00 	sts	0x00E9, r18
    172c:	2f ef       	ldi	r18, 0xFF	; 255
    172e:	06 c0       	rjmp	.+12     	; 0x173c <send_mouse+0x1e>
    1730:	35 ed       	ldi	r19, 0xD5	; 213
    1732:	3a 95       	dec	r19
    1734:	f1 f7       	brne	.-4      	; 0x1732 <send_mouse+0x14>
    1736:	00 00       	nop

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1738:	22 23       	and	r18, r18
    173a:	29 f0       	breq	.+10     	; 0x1746 <send_mouse+0x28>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    173c:	30 91 e8 00 	lds	r19, 0x00E8
    1740:	21 50       	subi	r18, 0x01	; 1
    1742:	35 ff       	sbrs	r19, 5
    1744:	f5 cf       	rjmp	.-22     	; 0x1730 <send_mouse+0x12>
    1746:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    174a:	25 ff       	sbrs	r18, 5
    174c:	0b c0       	rjmp	.+22     	; 0x1764 <send_mouse+0x46>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    174e:	65 e0       	ldi	r22, 0x05	; 5
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    175a:	80 91 e8 00 	lds	r24, 0x00E8
    175e:	8e 77       	andi	r24, 0x7E	; 126
    1760:	80 93 e8 00 	sts	0x00E8, r24
    1764:	08 95       	ret

00001766 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	d8 2f       	mov	r29, r24
    176c:	c9 2f       	mov	r28, r25
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    176e:	80 91 3c 02 	lds	r24, 0x023C
    1772:	84 30       	cpi	r24, 0x04	; 4
    1774:	09 f0       	breq	.+2      	; 0x1778 <send_keyboard+0x12>
    1776:	4b c0       	rjmp	.+150    	; 0x180e <send_keyboard+0xa8>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    1778:	80 91 0c 01 	lds	r24, 0x010C
    177c:	88 23       	and	r24, r24
    177e:	e9 f0       	breq	.+58     	; 0x17ba <send_keyboard+0x54>
    1780:	80 91 0d 01 	lds	r24, 0x010D
    1784:	88 23       	and	r24, r24
    1786:	c9 f0       	breq	.+50     	; 0x17ba <send_keyboard+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1788:	85 e0       	ldi	r24, 0x05	; 5
    178a:	80 93 e9 00 	sts	0x00E9, r24
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	06 c0       	rjmp	.+12     	; 0x179e <send_keyboard+0x38>
    1792:	95 e1       	ldi	r25, 0x15	; 21
    1794:	9a 95       	dec	r25
    1796:	f1 f7       	brne	.-4      	; 0x1794 <send_keyboard+0x2e>
    1798:	00 00       	nop
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    179a:	88 23       	and	r24, r24
    179c:	29 f0       	breq	.+10     	; 0x17a8 <send_keyboard+0x42>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    179e:	90 91 e8 00 	lds	r25, 0x00E8
    17a2:	81 50       	subi	r24, 0x01	; 1
    17a4:	95 ff       	sbrs	r25, 5
    17a6:	f5 cf       	rjmp	.-22     	; 0x1792 <send_keyboard+0x2c>
    17a8:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    17ac:	85 ff       	sbrs	r24, 5
    17ae:	2f c0       	rjmp	.+94     	; 0x180e <send_keyboard+0xa8>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    17b0:	8d 2f       	mov	r24, r29
    17b2:	9c 2f       	mov	r25, r28
    17b4:	60 e1       	ldi	r22, 0x10	; 16
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	18 c0       	rjmp	.+48     	; 0x17ea <send_keyboard+0x84>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	80 93 e9 00 	sts	0x00E9, r24
    17c0:	8f ef       	ldi	r24, 0xFF	; 255
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <send_keyboard+0x6a>
    17c4:	95 ed       	ldi	r25, 0xD5	; 213
    17c6:	9a 95       	dec	r25
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <send_keyboard+0x60>
    17ca:	00 00       	nop
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    17cc:	88 23       	and	r24, r24
    17ce:	29 f0       	breq	.+10     	; 0x17da <send_keyboard+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17d0:	90 91 e8 00 	lds	r25, 0x00E8
    17d4:	81 50       	subi	r24, 0x01	; 1
    17d6:	95 ff       	sbrs	r25, 5
    17d8:	f5 cf       	rjmp	.-22     	; 0x17c4 <send_keyboard+0x5e>
    17da:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    17de:	85 ff       	sbrs	r24, 5
    17e0:	16 c0       	rjmp	.+44     	; 0x180e <send_keyboard+0xa8>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    17e2:	8d 2f       	mov	r24, r29
    17e4:	9c 2f       	mov	r25, r28
    17e6:	68 e0       	ldi	r22, 0x08	; 8
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17f2:	80 91 e8 00 	lds	r24, 0x00E8
    17f6:	8e 77       	andi	r24, 0x7E	; 126
    17f8:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    17fc:	ab ea       	ldi	r26, 0xAB	; 171
    17fe:	b1 e0       	ldi	r27, 0x01	; 1
    1800:	ed 2f       	mov	r30, r29
    1802:	fc 2f       	mov	r31, r28
    1804:	80 e1       	ldi	r24, 0x10	; 16
    1806:	01 90       	ld	r0, Z+
    1808:	0d 92       	st	X+, r0
    180a:	81 50       	subi	r24, 0x01	; 1
    180c:	e1 f7       	brne	.-8      	; 0x1806 <send_keyboard+0xa0>
}
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret

00001814 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1814:	8b e4       	ldi	r24, 0x4B	; 75
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    181c:	80 91 3b 02 	lds	r24, 0x023B
    1820:	88 23       	and	r24, r24
    1822:	49 f4       	brne	.+18     	; 0x1836 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1824:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <USB_Disable>
        USB_Init();
    1828:	0e 94 12 10 	call	0x2024	; 0x2024 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    182c:	80 91 e2 00 	lds	r24, 0x00E2
    1830:	84 60       	ori	r24, 0x04	; 4
    1832:	80 93 e2 00 	sts	0x00E2, r24
    1836:	08 95       	ret

00001838 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1838:	8f e4       	ldi	r24, 0x4F	; 79
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1840:	10 92 3b 02 	sts	0x023B, r1
        USB_Disable();  // Disable all interrupts
	USB_Controller_Enable();
        USB_INT_Enable(USB_INT_VBUSTI);
    }
*/
}
    1844:	08 95       	ret

00001846 <EVENT_USB_Device_Reset>:

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1846:	83 e5       	ldi	r24, 0x53	; 83
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
}
    184e:	08 95       	ret

00001850 <EVENT_USB_Device_Suspend>:

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1850:	87 e5       	ldi	r24, 0x57	; 87
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
    1858:	0e 94 0c 2c 	call	0x5818	; 0x5818 <sleep_led_enable>
#endif
}
    185c:	08 95       	ret

0000185e <EVENT_USB_Device_WakeUp>:

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    185e:	8b e5       	ldi	r24, 0x5B	; 91
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    suspend_wakeup_init();
    1866:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <suspend_wakeup_init>

#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
    186a:	0e 94 12 2c 	call	0x5824	; 0x5824 <sleep_led_disable>
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
    186e:	0e 94 b2 12 	call	0x2564	; 0x2564 <host_keyboard_leds>
    1872:	0e 94 bc 0a 	call	0x1578	; 0x1578 <led_set>
#endif
}
    1876:	08 95       	ret

00001878 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1878:	80 91 bc 01 	lds	r24, 0x01BC
    187c:	8f 5f       	subi	r24, 0xFF	; 255
    187e:	80 93 bc 01 	sts	0x01BC, r24
    1882:	62 e3       	ldi	r22, 0x32	; 50
    1884:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodqi4>
    1888:	99 23       	and	r25, r25
    188a:	a9 f5       	brne	.+106    	; 0x18f6 <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    188c:	10 92 bc 01 	sts	0x01BC, r1

    if (!console_flush) return;
    1890:	80 91 bd 01 	lds	r24, 0x01BD
    1894:	88 23       	and	r24, r24
    1896:	79 f1       	breq	.+94     	; 0x18f6 <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1898:	80 91 3c 02 	lds	r24, 0x023C
    189c:	84 30       	cpi	r24, 0x04	; 4
    189e:	49 f5       	brne	.+82     	; 0x18f2 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    18a0:	80 91 e9 00 	lds	r24, 0x00E9
    18a4:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    18a6:	90 91 ec 00 	lds	r25, 0x00EC
    18aa:	90 ff       	sbrs	r25, 0
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <EVENT_USB_Device_StartOfFrame+0x3a>
    18ae:	90 e8       	ldi	r25, 0x80	; 128
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <EVENT_USB_Device_StartOfFrame+0x3c>
    18b2:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    18b4:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18b6:	84 e0       	ldi	r24, 0x04	; 4
    18b8:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    18bc:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    18c0:	80 ff       	sbrs	r24, 0
    18c2:	14 c0       	rjmp	.+40     	; 0x18ec <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    18c4:	80 91 ee 00 	lds	r24, 0x00EE
    18c8:	87 fd       	sbrc	r24, 7
    18ca:	03 c0       	rjmp	.+6      	; 0x18d2 <EVENT_USB_Device_StartOfFrame+0x5a>
    18cc:	0f c0       	rjmp	.+30     	; 0x18ec <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18ce:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18d2:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    18d6:	85 fd       	sbrc	r24, 5
    18d8:	fa cf       	rjmp	.-12     	; 0x18ce <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18da:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    18de:	80 ff       	sbrs	r24, 0
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18e2:	80 91 e8 00 	lds	r24, 0x00E8
    18e6:	8e 77       	andi	r24, 0x7E	; 126
    18e8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18ec:	9f 70       	andi	r25, 0x0F	; 15
    18ee:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    18f2:	10 92 bd 01 	sts	0x01BD, r1
    18f6:	08 95       	ret

000018f8 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	61 ec       	ldi	r22, 0xC1	; 193
    18fc:	42 e0       	ldi	r20, 0x02	; 2
    18fe:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Endpoint_ConfigureEndpoint_Prv>
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	61 ec       	ldi	r22, 0xC1	; 193
    1906:	42 e0       	ldi	r20, 0x02	; 2
    1908:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Endpoint_ConfigureEndpoint_Prv>
    190c:	83 e0       	ldi	r24, 0x03	; 3
    190e:	61 ec       	ldi	r22, 0xC1	; 193
    1910:	42 e0       	ldi	r20, 0x02	; 2
    1912:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Endpoint_ConfigureEndpoint_Prv>
    1916:	84 e0       	ldi	r24, 0x04	; 4
    1918:	61 ec       	ldi	r22, 0xC1	; 193
    191a:	42 e2       	ldi	r20, 0x22	; 34
    191c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Endpoint_ConfigureEndpoint_Prv>
    1920:	85 e0       	ldi	r24, 0x05	; 5
    1922:	61 ec       	ldi	r22, 0xC1	; 193
    1924:	42 e1       	ldi	r20, 0x12	; 18
    1926:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Endpoint_ConfigureEndpoint_Prv>
#ifdef NKRO_ENABLE
    /* Setup NKRO HID Report Endpoints */
    ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                     NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
#endif
}
    192a:	08 95       	ret

0000192c <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    192c:	80 91 3e 02 	lds	r24, 0x023E
    1930:	83 30       	cpi	r24, 0x03	; 3
    1932:	09 f4       	brne	.+2      	; 0x1936 <EVENT_USB_Device_ControlRequest+0xa>
    1934:	58 c0       	rjmp	.+176    	; 0x19e6 <EVENT_USB_Device_ControlRequest+0xba>
    1936:	84 30       	cpi	r24, 0x04	; 4
    1938:	30 f4       	brcc	.+12     	; 0x1946 <EVENT_USB_Device_ControlRequest+0x1a>
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	71 f0       	breq	.+28     	; 0x195a <EVENT_USB_Device_ControlRequest+0x2e>
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	09 f0       	breq	.+2      	; 0x1944 <EVENT_USB_Device_ControlRequest+0x18>
    1942:	b2 c0       	rjmp	.+356    	; 0x1aa8 <EVENT_USB_Device_ControlRequest+0x17c>
    1944:	99 c0       	rjmp	.+306    	; 0x1a78 <EVENT_USB_Device_ControlRequest+0x14c>
    1946:	8a 30       	cpi	r24, 0x0A	; 10
    1948:	09 f4       	brne	.+2      	; 0x194c <EVENT_USB_Device_ControlRequest+0x20>
    194a:	86 c0       	rjmp	.+268    	; 0x1a58 <EVENT_USB_Device_ControlRequest+0x12c>
    194c:	8b 30       	cpi	r24, 0x0B	; 11
    194e:	09 f4       	brne	.+2      	; 0x1952 <EVENT_USB_Device_ControlRequest+0x26>
    1950:	6b c0       	rjmp	.+214    	; 0x1a28 <EVENT_USB_Device_ControlRequest+0xfc>
    1952:	89 30       	cpi	r24, 0x09	; 9
    1954:	09 f0       	breq	.+2      	; 0x1958 <EVENT_USB_Device_ControlRequest+0x2c>
    1956:	a8 c0       	rjmp	.+336    	; 0x1aa8 <EVENT_USB_Device_ControlRequest+0x17c>
    1958:	20 c0       	rjmp	.+64     	; 0x199a <EVENT_USB_Device_ControlRequest+0x6e>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    195a:	80 91 3d 02 	lds	r24, 0x023D
    195e:	81 3a       	cpi	r24, 0xA1	; 161
    1960:	09 f0       	breq	.+2      	; 0x1964 <EVENT_USB_Device_ControlRequest+0x38>
    1962:	a2 c0       	rjmp	.+324    	; 0x1aa8 <EVENT_USB_Device_ControlRequest+0x17c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1964:	80 91 e8 00 	lds	r24, 0x00E8
    1968:	87 7f       	andi	r24, 0xF7	; 247
    196a:	80 93 e8 00 	sts	0x00E8, r24
    196e:	80 91 41 02 	lds	r24, 0x0241
    1972:	90 91 42 02 	lds	r25, 0x0242
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	21 f0       	breq	.+8      	; 0x1982 <EVENT_USB_Device_ControlRequest+0x56>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	03 c0       	rjmp	.+6      	; 0x1988 <EVENT_USB_Device_ControlRequest+0x5c>
    1982:	60 e1       	ldi	r22, 0x10	; 16
    1984:	8b ea       	ldi	r24, 0xAB	; 171
    1986:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    198e:	80 91 e8 00 	lds	r24, 0x00E8
    1992:	8b 77       	andi	r24, 0x7B	; 123
    1994:	80 93 e8 00 	sts	0x00E8, r24
    1998:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    199a:	80 91 3d 02 	lds	r24, 0x023D
    199e:	81 32       	cpi	r24, 0x21	; 33
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <EVENT_USB_Device_ControlRequest+0x78>
    19a2:	82 c0       	rjmp	.+260    	; 0x1aa8 <EVENT_USB_Device_ControlRequest+0x17c>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    19a4:	80 91 41 02 	lds	r24, 0x0241
    19a8:	90 91 42 02 	lds	r25, 0x0242
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	21 f0       	breq	.+8      	; 0x19b8 <EVENT_USB_Device_ControlRequest+0x8c>
    19b0:	84 30       	cpi	r24, 0x04	; 4
    19b2:	91 05       	cpc	r25, r1
    19b4:	09 f0       	breq	.+2      	; 0x19b8 <EVENT_USB_Device_ControlRequest+0x8c>
    19b6:	78 c0       	rjmp	.+240    	; 0x1aa8 <EVENT_USB_Device_ControlRequest+0x17c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19b8:	80 91 e8 00 	lds	r24, 0x00E8
    19bc:	87 7f       	andi	r24, 0xF7	; 247
    19be:	80 93 e8 00 	sts	0x00E8, r24
    19c2:	05 c0       	rjmp	.+10     	; 0x19ce <EVENT_USB_Device_ControlRequest+0xa2>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    19c4:	80 91 3c 02 	lds	r24, 0x023C
    19c8:	88 23       	and	r24, r24
    19ca:	09 f4       	brne	.+2      	; 0x19ce <EVENT_USB_Device_ControlRequest+0xa2>
    19cc:	6d c0       	rjmp	.+218    	; 0x1aa8 <EVENT_USB_Device_ControlRequest+0x17c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19ce:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    19d2:	82 ff       	sbrs	r24, 2
    19d4:	f7 cf       	rjmp	.-18     	; 0x19c4 <EVENT_USB_Device_ControlRequest+0x98>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    19d6:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    19da:	80 93 bb 01 	sts	0x01BB, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19de:	80 91 e8 00 	lds	r24, 0x00E8
    19e2:	8b 77       	andi	r24, 0x7B	; 123
    19e4:	1c c0       	rjmp	.+56     	; 0x1a1e <EVENT_USB_Device_ControlRequest+0xf2>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19e6:	80 91 3d 02 	lds	r24, 0x023D
    19ea:	81 3a       	cpi	r24, 0xA1	; 161
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <EVENT_USB_Device_ControlRequest+0xc4>
    19ee:	5c c0       	rjmp	.+184    	; 0x1aa8 <EVENT_USB_Device_ControlRequest+0x17c>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    19f0:	80 91 41 02 	lds	r24, 0x0241
    19f4:	90 91 42 02 	lds	r25, 0x0242
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	09 f0       	breq	.+2      	; 0x19fe <EVENT_USB_Device_ControlRequest+0xd2>
    19fc:	55 c0       	rjmp	.+170    	; 0x1aa8 <EVENT_USB_Device_ControlRequest+0x17c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19fe:	80 91 e8 00 	lds	r24, 0x00E8
    1a02:	87 7f       	andi	r24, 0xF7	; 247
    1a04:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a08:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1a0c:	80 ff       	sbrs	r24, 0
    1a0e:	fc cf       	rjmp	.-8      	; 0x1a08 <EVENT_USB_Device_ControlRequest+0xdc>
                    Endpoint_Write_8(keyboard_protocol);
    1a10:	80 91 0c 01 	lds	r24, 0x010C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a14:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a18:	80 91 e8 00 	lds	r24, 0x00E8
    1a1c:	8e 77       	andi	r24, 0x7E	; 126
    1a1e:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearIN();
                    Endpoint_ClearStatusStage();
    1a22:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <Endpoint_ClearStatusStage>
    1a26:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a28:	80 91 3d 02 	lds	r24, 0x023D
    1a2c:	81 32       	cpi	r24, 0x21	; 33
    1a2e:	e1 f5       	brne	.+120    	; 0x1aa8 <EVENT_USB_Device_ControlRequest+0x17c>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1a30:	80 91 41 02 	lds	r24, 0x0241
    1a34:	90 91 42 02 	lds	r25, 0x0242
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	b1 f5       	brne	.+108    	; 0x1aa8 <EVENT_USB_Device_ControlRequest+0x17c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a3c:	80 91 e8 00 	lds	r24, 0x00E8
    1a40:	87 7f       	andi	r24, 0xF7	; 247
    1a42:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1a46:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1a4a:	80 91 3f 02 	lds	r24, 0x023F
    1a4e:	80 93 0c 01 	sts	0x010C, r24
                    clear_keyboard();
    1a52:	0e 94 0f 18 	call	0x301e	; 0x301e <clear_keyboard>
    1a56:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a58:	80 91 3d 02 	lds	r24, 0x023D
    1a5c:	81 32       	cpi	r24, 0x21	; 33
    1a5e:	21 f5       	brne	.+72     	; 0x1aa8 <EVENT_USB_Device_ControlRequest+0x17c>
    1a60:	80 91 e8 00 	lds	r24, 0x00E8
    1a64:	87 7f       	andi	r24, 0xF7	; 247
    1a66:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1a6a:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1a6e:	80 91 40 02 	lds	r24, 0x0240
    1a72:	80 93 aa 01 	sts	0x01AA, r24
    1a76:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1a78:	80 91 3d 02 	lds	r24, 0x023D
    1a7c:	81 3a       	cpi	r24, 0xA1	; 161
    1a7e:	a1 f4       	brne	.+40     	; 0x1aa8 <EVENT_USB_Device_ControlRequest+0x17c>
    1a80:	80 91 e8 00 	lds	r24, 0x00E8
    1a84:	87 7f       	andi	r24, 0xF7	; 247
    1a86:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a8a:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1a8e:	80 ff       	sbrs	r24, 0
    1a90:	fc cf       	rjmp	.-8      	; 0x1a8a <EVENT_USB_Device_ControlRequest+0x15e>
                Endpoint_Write_8(keyboard_idle);
    1a92:	80 91 aa 01 	lds	r24, 0x01AA
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a96:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a9a:	80 91 e8 00 	lds	r24, 0x00E8
    1a9e:	8e 77       	andi	r24, 0x7E	; 126
    1aa0:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1aa4:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <Endpoint_ClearStatusStage>
    1aa8:	08 95       	ret

00001aaa <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1aaa:	84 b7       	in	r24, 0x34	; 52
    1aac:	87 7f       	andi	r24, 0xF7	; 247
    1aae:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1ab0:	88 e1       	ldi	r24, 0x18	; 24
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	80 93 60 00 	sts	0x0060, r24
    1aba:	10 92 60 00 	sts	0x0060, r1
    1abe:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	80 e8       	ldi	r24, 0x80	; 128
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	80 93 61 00 	sts	0x0061, r24
    1acc:	90 93 61 00 	sts	0x0061, r25
    1ad0:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
    1ad2:	0e 94 41 13 	call	0x2682	; 0x2682 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1ad6:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <USB_Disable>

    USB_Init();
    1ada:	0e 94 12 10 	call	0x2024	; 0x2024 <USB_Init>
    1ade:	80 91 e2 00 	lds	r24, 0x00E2
    1ae2:	84 60       	ori	r24, 0x04	; 4
    1ae4:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1ae8:	80 ec       	ldi	r24, 0xC0	; 192
    1aea:	9a e0       	ldi	r25, 0x0A	; 10
    1aec:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    1af0:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1af2:	80 91 3c 02 	lds	r24, 0x023C
    1af6:	84 30       	cpi	r24, 0x04	; 4
    1af8:	e1 f7       	brne	.-8      	; 0x1af2 <main+0x48>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1afa:	8f e5       	ldi	r24, 0x5F	; 95
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>

    /* init modules */
    keyboard_init();
    1b02:	0e 94 44 13 	call	0x2688	; 0x2688 <keyboard_init>
    host_set_driver(&lufa_driver);
    1b06:	82 e0       	ldi	r24, 0x02	; 2
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	0e 94 ad 12 	call	0x255a	; 0x255a <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
    1b0e:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <sleep_led_init>
#endif

    print("Keyboard start.\n");
    1b12:	80 e7       	ldi	r24, 0x70	; 112
    1b14:	91 e0       	ldi	r25, 0x01	; 1
    1b16:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    1b1a:	10 c0       	rjmp	.+32     	; 0x1b3c <main+0x92>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
    1b1c:	81 e8       	ldi	r24, 0x81	; 129
    1b1e:	91 e0       	ldi	r25, 0x01	; 1
    1b20:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            suspend_power_down();
    1b24:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1b28:	80 91 3a 02 	lds	r24, 0x023A
    1b2c:	88 23       	and	r24, r24
    1b2e:	31 f0       	breq	.+12     	; 0x1b3c <main+0x92>
    1b30:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <suspend_wakeup_condition>
    1b34:	88 23       	and	r24, r24
    1b36:	11 f0       	breq	.+4      	; 0x1b3c <main+0x92>
                    USB_Device_SendRemoteWakeup();
    1b38:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <USB_Device_SendRemoteWakeup>
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1b3c:	80 91 3c 02 	lds	r24, 0x023C
    1b40:	85 30       	cpi	r24, 0x05	; 5
    1b42:	61 f3       	breq	.-40     	; 0x1b1c <main+0x72>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
                    USB_Device_SendRemoteWakeup();
            }
        }

        keyboard_task();
    1b44:	0e 94 7d 13 	call	0x26fa	; 0x26fa <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1b48:	f9 cf       	rjmp	.-14     	; 0x1b3c <main+0x92>

00001b4a <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1b4a:	93 30       	cpi	r25, 0x03	; 3
    1b4c:	99 f0       	breq	.+38     	; 0x1b74 <CALLBACK_USB_GetDescriptor+0x2a>
    1b4e:	94 30       	cpi	r25, 0x04	; 4
    1b50:	38 f4       	brcc	.+14     	; 0x1b60 <CALLBACK_USB_GetDescriptor+0x16>
    1b52:	91 30       	cpi	r25, 0x01	; 1
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <CALLBACK_USB_GetDescriptor+0xe>
    1b56:	3e c0       	rjmp	.+124    	; 0x1bd4 <CALLBACK_USB_GetDescriptor+0x8a>
    1b58:	92 30       	cpi	r25, 0x02	; 2
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <CALLBACK_USB_GetDescriptor+0x14>
    1b5c:	40 c0       	rjmp	.+128    	; 0x1bde <CALLBACK_USB_GetDescriptor+0x94>
    1b5e:	05 c0       	rjmp	.+10     	; 0x1b6a <CALLBACK_USB_GetDescriptor+0x20>
    1b60:	91 32       	cpi	r25, 0x21	; 33
    1b62:	d1 f0       	breq	.+52     	; 0x1b98 <CALLBACK_USB_GetDescriptor+0x4e>
    1b64:	92 32       	cpi	r25, 0x22	; 34
    1b66:	d9 f5       	brne	.+118    	; 0x1bde <CALLBACK_USB_GetDescriptor+0x94>
    1b68:	25 c0       	rjmp	.+74     	; 0x1bb4 <CALLBACK_USB_GetDescriptor+0x6a>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1b6a:	8d e8       	ldi	r24, 0x8D	; 141
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1b6e:	e7 eb       	ldi	r30, 0xB7	; 183
    1b70:	f1 e0       	ldi	r31, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1b72:	39 c0       	rjmp	.+114    	; 0x1be6 <CALLBACK_USB_GetDescriptor+0x9c>
        case DTYPE_String:
            switch (DescriptorIndex )
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	41 f0       	breq	.+16     	; 0x1b88 <CALLBACK_USB_GetDescriptor+0x3e>
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	18 f0       	brcs	.+6      	; 0x1b82 <CALLBACK_USB_GetDescriptor+0x38>
    1b7c:	82 30       	cpi	r24, 0x02	; 2
    1b7e:	79 f5       	brne	.+94     	; 0x1bde <CALLBACK_USB_GetDescriptor+0x94>
    1b80:	06 c0       	rjmp	.+12     	; 0x1b8e <CALLBACK_USB_GetDescriptor+0x44>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1b82:	e3 eb       	ldi	r30, 0xB3	; 179
    1b84:	f1 e0       	ldi	r31, 0x01	; 1
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <CALLBACK_USB_GetDescriptor+0x48>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1b88:	e5 ea       	ldi	r30, 0xA5	; 165
    1b8a:	f1 e0       	ldi	r31, 0x01	; 1
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <CALLBACK_USB_GetDescriptor+0x48>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1b8e:	e5 e8       	ldi	r30, 0x85	; 133
    1b90:	f1 e0       	ldi	r31, 0x01	; 1
    1b92:	84 91       	lpm	r24, Z
    1b94:	90 e0       	ldi	r25, 0x00	; 0
                    break;
    1b96:	27 c0       	rjmp	.+78     	; 0x1be6 <CALLBACK_USB_GetDescriptor+0x9c>
    1b98:	65 30       	cpi	r22, 0x05	; 5
    1b9a:	08 f5       	brcc	.+66     	; 0x1bde <CALLBACK_USB_GetDescriptor+0x94>
    1b9c:	e6 2f       	mov	r30, r22
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	ee 0f       	add	r30, r30
    1ba2:	ff 1f       	adc	r31, r31
    1ba4:	ea 5d       	subi	r30, 0xDA	; 218
    1ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba8:	01 90       	ld	r0, Z+
    1baa:	f0 81       	ld	r31, Z
    1bac:	e0 2d       	mov	r30, r0
    1bae:	89 e0       	ldi	r24, 0x09	; 9
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	19 c0       	rjmp	.+50     	; 0x1be6 <CALLBACK_USB_GetDescriptor+0x9c>
    1bb4:	65 30       	cpi	r22, 0x05	; 5
    1bb6:	98 f4       	brcc	.+38     	; 0x1bde <CALLBACK_USB_GetDescriptor+0x94>
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	fb 01       	movw	r30, r22
    1bbc:	ee 0f       	add	r30, r30
    1bbe:	ff 1f       	adc	r31, r31
    1bc0:	e0 5d       	subi	r30, 0xD0	; 208
    1bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	f0 81       	ld	r31, Z
    1bc8:	e0 2d       	mov	r30, r0
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
    1bca:	66 5c       	subi	r22, 0xC6	; 198
    1bcc:	7e 4f       	sbci	r23, 0xFE	; 254
    1bce:	db 01       	movw	r26, r22
    1bd0:	8c 91       	ld	r24, X
    1bd2:	e0 cf       	rjmp	.-64     	; 0x1b94 <CALLBACK_USB_GetDescriptor+0x4a>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1bd4:	82 e1       	ldi	r24, 0x12	; 18
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1bd8:	e4 e4       	ldi	r30, 0x44	; 68
    1bda:	f2 e0       	ldi	r31, 0x02	; 2
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <CALLBACK_USB_GetDescriptor+0x9c>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	e0 e0       	ldi	r30, 0x00	; 0
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1be6:	da 01       	movw	r26, r20
    1be8:	11 96       	adiw	r26, 0x01	; 1
    1bea:	fc 93       	st	X, r31
    1bec:	ee 93       	st	-X, r30
    return Size;
}
    1bee:	08 95       	ret

00001bf0 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1bf0:	80 e1       	ldi	r24, 0x10	; 16
    1bf2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1bf4:	82 e1       	ldi	r24, 0x12	; 18
    1bf6:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1bf8:	09 b4       	in	r0, 0x29	; 41
    1bfa:	00 fe       	sbrs	r0, 0
    1bfc:	fd cf       	rjmp	.-6      	; 0x1bf8 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1bfe:	80 91 d8 00 	lds	r24, 0x00D8
    1c02:	8f 7d       	andi	r24, 0xDF	; 223
    1c04:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1c08:	80 91 e0 00 	lds	r24, 0x00E0
    1c0c:	82 60       	ori	r24, 0x02	; 2
    1c0e:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1c12:	80 91 e0 00 	lds	r24, 0x00E0
    1c16:	81 fd       	sbrc	r24, 1
    1c18:	fc cf       	rjmp	.-8      	; 0x1c12 <USB_Device_SendRemoteWakeup+0x22>
}
    1c1a:	08 95       	ret

00001c1c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1c1c:	af 92       	push	r10
    1c1e:	bf 92       	push	r11
    1c20:	cf 92       	push	r12
    1c22:	df 92       	push	r13
    1c24:	ef 92       	push	r14
    1c26:	ff 92       	push	r15
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	ec 01       	movw	r28, r24
    1c30:	7b 01       	movw	r14, r22
    1c32:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c34:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <Endpoint_WaitUntilReady>
    1c38:	18 2f       	mov	r17, r24
    1c3a:	88 23       	and	r24, r24
    1c3c:	a9 f5       	brne	.+106    	; 0x1ca8 <Endpoint_Write_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1c3e:	c1 14       	cp	r12, r1
    1c40:	d1 04       	cpc	r13, r1
    1c42:	39 f0       	breq	.+14     	; 0x1c52 <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
    1c44:	f6 01       	movw	r30, r12
    1c46:	20 81       	ld	r18, Z
    1c48:	31 81       	ldd	r19, Z+1	; 0x01
    1c4a:	e2 1a       	sub	r14, r18
    1c4c:	f3 0a       	sbc	r15, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1c4e:	c2 0f       	add	r28, r18
    1c50:	d3 1f       	adc	r29, r19

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1c52:	aa 24       	eor	r10, r10
    1c54:	bb 24       	eor	r11, r11
    1c56:	23 c0       	rjmp	.+70     	; 0x1c9e <Endpoint_Write_Stream_LE+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c58:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1c5c:	85 fd       	sbrc	r24, 5
    1c5e:	16 c0       	rjmp	.+44     	; 0x1c8c <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c60:	80 91 e8 00 	lds	r24, 0x00E8
    1c64:	8e 77       	andi	r24, 0x7E	; 126
    1c66:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1c6a:	c1 14       	cp	r12, r1
    1c6c:	d1 04       	cpc	r13, r1
    1c6e:	49 f0       	breq	.+18     	; 0x1c82 <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    1c70:	f6 01       	movw	r30, r12
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	8a 0d       	add	r24, r10
    1c78:	9b 1d       	adc	r25, r11
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1c7e:	15 e0       	ldi	r17, 0x05	; 5
    1c80:	13 c0       	rjmp	.+38     	; 0x1ca8 <Endpoint_Write_Stream_LE+0x8c>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c82:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <Endpoint_WaitUntilReady>
    1c86:	88 23       	and	r24, r24
    1c88:	51 f0       	breq	.+20     	; 0x1c9e <Endpoint_Write_Stream_LE+0x82>
    1c8a:	0d c0       	rjmp	.+26     	; 0x1ca6 <Endpoint_Write_Stream_LE+0x8a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1c8c:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c8e:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1c92:	08 94       	sec
    1c94:	e1 08       	sbc	r14, r1
    1c96:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1c98:	08 94       	sec
    1c9a:	a1 1c       	adc	r10, r1
    1c9c:	b1 1c       	adc	r11, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1c9e:	e1 14       	cp	r14, r1
    1ca0:	f1 04       	cpc	r15, r1
    1ca2:	d1 f6       	brne	.-76     	; 0x1c58 <Endpoint_Write_Stream_LE+0x3c>
    1ca4:	01 c0       	rjmp	.+2      	; 0x1ca8 <Endpoint_Write_Stream_LE+0x8c>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1ca6:	18 2f       	mov	r17, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1ca8:	81 2f       	mov	r24, r17
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	1f 91       	pop	r17
    1cb0:	ff 90       	pop	r15
    1cb2:	ef 90       	pop	r14
    1cb4:	df 90       	pop	r13
    1cb6:	cf 90       	pop	r12
    1cb8:	bf 90       	pop	r11
    1cba:	af 90       	pop	r10
    1cbc:	08 95       	ret

00001cbe <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1cbe:	40 91 43 02 	lds	r20, 0x0243
    1cc2:	50 91 44 02 	lds	r21, 0x0244
    1cc6:	46 17       	cp	r20, r22
    1cc8:	57 07       	cpc	r21, r23
    1cca:	20 f4       	brcc	.+8      	; 0x1cd4 <Endpoint_Write_Control_Stream_LE+0x16>
    1ccc:	ba 01       	movw	r22, r20
    1cce:	fc 01       	movw	r30, r24
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	3d c0       	rjmp	.+122    	; 0x1d4e <Endpoint_Write_Control_Stream_LE+0x90>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1cd4:	61 15       	cp	r22, r1
    1cd6:	71 05       	cpc	r23, r1
    1cd8:	d1 f7       	brne	.-12     	; 0x1cce <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cda:	40 91 e8 00 	lds	r20, 0x00E8
    1cde:	4e 77       	andi	r20, 0x7E	; 126
    1ce0:	40 93 e8 00 	sts	0x00E8, r20
    1ce4:	f4 cf       	rjmp	.-24     	; 0x1cce <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ce6:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1cea:	88 23       	and	r24, r24
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <Endpoint_Write_Control_Stream_LE+0x32>
    1cee:	47 c0       	rjmp	.+142    	; 0x1d7e <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1cf0:	85 30       	cpi	r24, 0x05	; 5
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <Endpoint_Write_Control_Stream_LE+0x38>
    1cf4:	46 c0       	rjmp	.+140    	; 0x1d82 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cf6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1cfa:	83 fd       	sbrc	r24, 3
    1cfc:	3e c0       	rjmp	.+124    	; 0x1d7a <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1cfe:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1d02:	82 fd       	sbrc	r24, 2
    1d04:	34 c0       	rjmp	.+104    	; 0x1d6e <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d06:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1d0a:	80 ff       	sbrs	r24, 0
    1d0c:	20 c0       	rjmp	.+64     	; 0x1d4e <Endpoint_Write_Control_Stream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1d0e:	90 91 f3 00 	lds	r25, 0x00F3
    1d12:	80 91 f2 00 	lds	r24, 0x00F2
    1d16:	39 2f       	mov	r19, r25
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	82 2b       	or	r24, r18
    1d1e:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1d20:	06 c0       	rjmp	.+12     	; 0x1d2e <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1d22:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d24:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1d28:	61 50       	subi	r22, 0x01	; 1
    1d2a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1d2c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1d2e:	61 15       	cp	r22, r1
    1d30:	71 05       	cpc	r23, r1
    1d32:	19 f0       	breq	.+6      	; 0x1d3a <Endpoint_Write_Control_Stream_LE+0x7c>
    1d34:	88 30       	cpi	r24, 0x08	; 8
    1d36:	91 05       	cpc	r25, r1
    1d38:	a0 f3       	brcs	.-24     	; 0x1d22 <Endpoint_Write_Control_Stream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	88 30       	cpi	r24, 0x08	; 8
    1d3e:	91 05       	cpc	r25, r1
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <Endpoint_Write_Control_Stream_LE+0x86>
    1d42:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d44:	80 91 e8 00 	lds	r24, 0x00E8
    1d48:	8e 77       	andi	r24, 0x7E	; 126
    1d4a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1d4e:	61 15       	cp	r22, r1
    1d50:	71 05       	cpc	r23, r1
    1d52:	49 f6       	brne	.-110    	; 0x1ce6 <Endpoint_Write_Control_Stream_LE+0x28>
    1d54:	44 23       	and	r20, r20
    1d56:	39 f6       	brne	.-114    	; 0x1ce6 <Endpoint_Write_Control_Stream_LE+0x28>
    1d58:	0a c0       	rjmp	.+20     	; 0x1d6e <Endpoint_Write_Control_Stream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d5a:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d5e:	88 23       	and	r24, r24
    1d60:	71 f0       	breq	.+28     	; 0x1d7e <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d62:	85 30       	cpi	r24, 0x05	; 5
    1d64:	71 f0       	breq	.+28     	; 0x1d82 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d66:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1d6a:	83 fd       	sbrc	r24, 3
    1d6c:	0c c0       	rjmp	.+24     	; 0x1d86 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d6e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1d72:	82 ff       	sbrs	r24, 2
    1d74:	f2 cf       	rjmp	.-28     	; 0x1d5a <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1d7e:	82 e0       	ldi	r24, 0x02	; 2
    1d80:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1d82:	83 e0       	ldi	r24, 0x03	; 3
    1d84:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1d88:	08 95       	ret

00001d8a <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1d8a:	40 91 43 02 	lds	r20, 0x0243
    1d8e:	50 91 44 02 	lds	r21, 0x0244
    1d92:	46 17       	cp	r20, r22
    1d94:	57 07       	cpc	r21, r23
    1d96:	20 f4       	brcc	.+8      	; 0x1da0 <Endpoint_Write_Control_PStream_LE+0x16>
    1d98:	ba 01       	movw	r22, r20
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	3e c0       	rjmp	.+124    	; 0x1e1c <Endpoint_Write_Control_PStream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1da0:	61 15       	cp	r22, r1
    1da2:	71 05       	cpc	r23, r1
    1da4:	d1 f7       	brne	.-12     	; 0x1d9a <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1da6:	40 91 e8 00 	lds	r20, 0x00E8
    1daa:	4e 77       	andi	r20, 0x7E	; 126
    1dac:	40 93 e8 00 	sts	0x00E8, r20
    1db0:	f4 cf       	rjmp	.-24     	; 0x1d9a <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1db2:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1db6:	88 23       	and	r24, r24
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <Endpoint_Write_Control_PStream_LE+0x32>
    1dba:	48 c0       	rjmp	.+144    	; 0x1e4c <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1dbc:	85 30       	cpi	r24, 0x05	; 5
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <Endpoint_Write_Control_PStream_LE+0x38>
    1dc0:	47 c0       	rjmp	.+142    	; 0x1e50 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1dc2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1dc6:	83 fd       	sbrc	r24, 3
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1dca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1dce:	82 fd       	sbrc	r24, 2
    1dd0:	35 c0       	rjmp	.+106    	; 0x1e3c <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1dd2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1dd6:	80 ff       	sbrs	r24, 0
    1dd8:	21 c0       	rjmp	.+66     	; 0x1e1c <Endpoint_Write_Control_PStream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1dda:	90 91 f3 00 	lds	r25, 0x00F3
    1dde:	80 91 f2 00 	lds	r24, 0x00F2
    1de2:	39 2f       	mov	r19, r25
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	82 2b       	or	r24, r18
    1dea:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1dec:	07 c0       	rjmp	.+14     	; 0x1dfc <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1dee:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1df0:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1df4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1df6:	61 50       	subi	r22, 0x01	; 1
    1df8:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1dfa:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1dfc:	61 15       	cp	r22, r1
    1dfe:	71 05       	cpc	r23, r1
    1e00:	19 f0       	breq	.+6      	; 0x1e08 <Endpoint_Write_Control_PStream_LE+0x7e>
    1e02:	88 30       	cpi	r24, 0x08	; 8
    1e04:	91 05       	cpc	r25, r1
    1e06:	98 f3       	brcs	.-26     	; 0x1dee <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	88 30       	cpi	r24, 0x08	; 8
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <Endpoint_Write_Control_PStream_LE+0x88>
    1e10:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e12:	80 91 e8 00 	lds	r24, 0x00E8
    1e16:	8e 77       	andi	r24, 0x7E	; 126
    1e18:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1e1c:	61 15       	cp	r22, r1
    1e1e:	71 05       	cpc	r23, r1
    1e20:	41 f6       	brne	.-112    	; 0x1db2 <Endpoint_Write_Control_PStream_LE+0x28>
    1e22:	44 23       	and	r20, r20
    1e24:	31 f6       	brne	.-116    	; 0x1db2 <Endpoint_Write_Control_PStream_LE+0x28>
    1e26:	0a c0       	rjmp	.+20     	; 0x1e3c <Endpoint_Write_Control_PStream_LE+0xb2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1e28:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1e2c:	88 23       	and	r24, r24
    1e2e:	71 f0       	breq	.+28     	; 0x1e4c <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1e30:	85 30       	cpi	r24, 0x05	; 5
    1e32:	71 f0       	breq	.+28     	; 0x1e50 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e34:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1e38:	83 fd       	sbrc	r24, 3
    1e3a:	0c c0       	rjmp	.+24     	; 0x1e54 <Endpoint_Write_Control_PStream_LE+0xca>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1e3c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1e40:	82 ff       	sbrs	r24, 2
    1e42:	f2 cf       	rjmp	.-28     	; 0x1e28 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1e56:	08 95       	ret

00001e58 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1e58:	98 2f       	mov	r25, r24
    1e5a:	2a c0       	rjmp	.+84     	; 0x1eb0 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e5c:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1e60:	98 17       	cp	r25, r24
    1e62:	39 f0       	breq	.+14     	; 0x1e72 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1e64:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1e68:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1e6c:	50 91 f0 00 	lds	r21, 0x00F0
    1e70:	03 c0       	rjmp	.+6      	; 0x1e78 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1e72:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1e74:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1e76:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1e78:	21 ff       	sbrs	r18, 1
    1e7a:	19 c0       	rjmp	.+50     	; 0x1eae <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1e7c:	30 91 eb 00 	lds	r19, 0x00EB
    1e80:	3e 7f       	andi	r19, 0xFE	; 254
    1e82:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1e86:	30 91 ed 00 	lds	r19, 0x00ED
    1e8a:	3d 7f       	andi	r19, 0xFD	; 253
    1e8c:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1e90:	30 91 eb 00 	lds	r19, 0x00EB
    1e94:	31 60       	ori	r19, 0x01	; 1
    1e96:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1e9a:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1e9e:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1ea2:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1ea6:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1eaa:	27 ff       	sbrs	r18, 7
    1eac:	08 c0       	rjmp	.+16     	; 0x1ebe <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1eae:	9f 5f       	subi	r25, 0xFF	; 255
    1eb0:	97 30       	cpi	r25, 0x07	; 7
    1eb2:	a0 f2       	brcs	.-88     	; 0x1e5c <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eb4:	8f 70       	andi	r24, 0x0F	; 15
    1eb6:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1ec0:	08 95       	ret

00001ec2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1ec2:	80 91 3d 02 	lds	r24, 0x023D
    1ec6:	87 ff       	sbrs	r24, 7
    1ec8:	13 c0       	rjmp	.+38     	; 0x1ef0 <Endpoint_ClearStatusStage+0x2e>
    1eca:	04 c0       	rjmp	.+8      	; 0x1ed4 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1ecc:	80 91 3c 02 	lds	r24, 0x023C
    1ed0:	88 23       	and	r24, r24
    1ed2:	b9 f0       	breq	.+46     	; 0x1f02 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ed4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1ed8:	82 ff       	sbrs	r24, 2
    1eda:	f8 cf       	rjmp	.-16     	; 0x1ecc <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1edc:	80 91 e8 00 	lds	r24, 0x00E8
    1ee0:	8b 77       	andi	r24, 0x7B	; 123
    1ee2:	80 93 e8 00 	sts	0x00E8, r24
    1ee6:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1ee8:	80 91 3c 02 	lds	r24, 0x023C
    1eec:	88 23       	and	r24, r24
    1eee:	49 f0       	breq	.+18     	; 0x1f02 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ef0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1ef4:	80 ff       	sbrs	r24, 0
    1ef6:	f8 cf       	rjmp	.-16     	; 0x1ee8 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ef8:	80 91 e8 00 	lds	r24, 0x00E8
    1efc:	8e 77       	andi	r24, 0x7E	; 126
    1efe:	80 93 e8 00 	sts	0x00E8, r24
    1f02:	08 95       	ret

00001f04 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1f04:	80 91 e4 00 	lds	r24, 0x00E4
    1f08:	90 91 e5 00 	lds	r25, 0x00E5
    1f0c:	45 e6       	ldi	r20, 0x65	; 101
    1f0e:	01 c0       	rjmp	.+2      	; 0x1f12 <Endpoint_WaitUntilReady+0xe>
    1f10:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f12:	20 91 ec 00 	lds	r18, 0x00EC
    1f16:	20 ff       	sbrs	r18, 0
    1f18:	23 c0       	rjmp	.+70     	; 0x1f60 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f1a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1f1e:	20 fd       	sbrc	r18, 0
    1f20:	15 c0       	rjmp	.+42     	; 0x1f4c <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1f22:	20 91 3c 02 	lds	r18, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1f26:	22 23       	and	r18, r18
    1f28:	99 f0       	breq	.+38     	; 0x1f50 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1f2a:	25 30       	cpi	r18, 0x05	; 5
    1f2c:	99 f0       	breq	.+38     	; 0x1f54 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f2e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1f32:	25 fd       	sbrc	r18, 5
    1f34:	11 c0       	rjmp	.+34     	; 0x1f58 <Endpoint_WaitUntilReady+0x54>
    1f36:	20 91 e4 00 	lds	r18, 0x00E4
    1f3a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1f3e:	28 17       	cp	r18, r24
    1f40:	39 07       	cpc	r19, r25
    1f42:	39 f3       	breq	.-50     	; 0x1f12 <Endpoint_WaitUntilReady+0xe>
    1f44:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1f46:	21 f7       	brne	.-56     	; 0x1f10 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    1f48:	84 e0       	ldi	r24, 0x04	; 4
    1f4a:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1f50:	82 e0       	ldi	r24, 0x02	; 2
    1f52:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1f54:	83 e0       	ldi	r24, 0x03	; 3
    1f56:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1f5c:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1f5e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f60:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1f64:	22 ff       	sbrs	r18, 2
    1f66:	dd cf       	rjmp	.-70     	; 0x1f22 <Endpoint_WaitUntilReady+0x1e>
    1f68:	f9 cf       	rjmp	.-14     	; 0x1f5c <Endpoint_WaitUntilReady+0x58>

00001f6a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1f6a:	0e 94 24 10 	call	0x2048	; 0x2048 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1f6e:	0e 94 2c 10 	call	0x2058	; 0x2058 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1f72:	e0 ee       	ldi	r30, 0xE0	; 224
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	81 60       	ori	r24, 0x01	; 1
    1f7a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1f7c:	e8 ed       	ldi	r30, 0xD8	; 216
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	8f 77       	andi	r24, 0x7F	; 127
    1f84:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1f86:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1f88:	a7 ed       	ldi	r26, 0xD7	; 215
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	8c 91       	ld	r24, X
    1f8e:	8e 7f       	andi	r24, 0xFE	; 254
    1f90:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1f92:	80 81       	ld	r24, Z
    1f94:	8f 7e       	andi	r24, 0xEF	; 239
    1f96:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1f98:	10 92 3b 02 	sts	0x023B, r1
}
    1f9c:	08 95       	ret

00001f9e <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1fa6:	0e 94 24 10 	call	0x2048	; 0x2048 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1faa:	0e 94 2c 10 	call	0x2058	; 0x2058 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1fae:	c8 ed       	ldi	r28, 0xD8	; 216
    1fb0:	d0 e0       	ldi	r29, 0x00	; 0
    1fb2:	88 81       	ld	r24, Y
    1fb4:	8f 77       	andi	r24, 0x7F	; 127
    1fb6:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1fb8:	88 81       	ld	r24, Y
    1fba:	80 68       	ori	r24, 0x80	; 128
    1fbc:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1fbe:	88 81       	ld	r24, Y
    1fc0:	8f 7d       	andi	r24, 0xDF	; 223
    1fc2:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1fc4:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1fc6:	10 92 3c 02 	sts	0x023C, r1
	USB_Device_ConfigurationNumber  = 0;
    1fca:	10 92 38 02 	sts	0x0238, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1fce:	10 92 3a 02 	sts	0x023A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1fd2:	10 92 39 02 	sts	0x0239, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1fd6:	00 ee       	ldi	r16, 0xE0	; 224
    1fd8:	10 e0       	ldi	r17, 0x00	; 0
    1fda:	f8 01       	movw	r30, r16
    1fdc:	80 81       	ld	r24, Z
    1fde:	8b 7f       	andi	r24, 0xFB	; 251
    1fe0:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1fe2:	88 81       	ld	r24, Y
    1fe4:	81 60       	ori	r24, 0x01	; 1
    1fe6:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	42 e0       	ldi	r20, 0x02	; 2
    1fee:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1ff2:	e1 ee       	ldi	r30, 0xE1	; 225
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	8e 7f       	andi	r24, 0xFE	; 254
    1ffa:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1ffc:	e2 ee       	ldi	r30, 0xE2	; 226
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	81 60       	ori	r24, 0x01	; 1
    2004:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2006:	80 81       	ld	r24, Z
    2008:	88 60       	ori	r24, 0x08	; 8
    200a:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    200c:	f8 01       	movw	r30, r16
    200e:	80 81       	ld	r24, Z
    2010:	8e 7f       	andi	r24, 0xFE	; 254
    2012:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2014:	88 81       	ld	r24, Y
    2016:	80 61       	ori	r24, 0x10	; 16
    2018:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	08 95       	ret

00002024 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2024:	e8 ed       	ldi	r30, 0xD8	; 216
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	8f 7e       	andi	r24, 0xEF	; 239
    202c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    202e:	e7 ed       	ldi	r30, 0xD7	; 215
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	81 60       	ori	r24, 0x01	; 1
    2036:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    2038:	84 e0       	ldi	r24, 0x04	; 4
    203a:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	80 93 3b 02 	sts	0x023B, r24

	USB_ResetInterface();
    2042:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <USB_ResetInterface>
}
    2046:	08 95       	ret

00002048 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    2048:	e8 ed       	ldi	r30, 0xD8	; 216
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	8e 7f       	andi	r24, 0xFE	; 254
    2050:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2052:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    2056:	08 95       	ret

00002058 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2058:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    205c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    2060:	08 95       	ret

00002062 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2062:	1f 92       	push	r1
    2064:	0f 92       	push	r0
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	0f 92       	push	r0
    206a:	11 24       	eor	r1, r1
    206c:	2f 93       	push	r18
    206e:	3f 93       	push	r19
    2070:	4f 93       	push	r20
    2072:	5f 93       	push	r21
    2074:	6f 93       	push	r22
    2076:	7f 93       	push	r23
    2078:	8f 93       	push	r24
    207a:	9f 93       	push	r25
    207c:	af 93       	push	r26
    207e:	bf 93       	push	r27
    2080:	ef 93       	push	r30
    2082:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    2084:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2088:	82 ff       	sbrs	r24, 2
    208a:	0b c0       	rjmp	.+22     	; 0x20a2 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    208c:	80 91 e2 00 	lds	r24, 0x00E2
    2090:	82 ff       	sbrs	r24, 2
    2092:	07 c0       	rjmp	.+14     	; 0x20a2 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    2094:	80 91 e1 00 	lds	r24, 0x00E1
    2098:	8b 7f       	andi	r24, 0xFB	; 251
    209a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    209e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    20a2:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    20a6:	80 ff       	sbrs	r24, 0
    20a8:	1f c0       	rjmp	.+62     	; 0x20e8 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    20aa:	80 91 d8 00 	lds	r24, 0x00D8
    20ae:	80 ff       	sbrs	r24, 0
    20b0:	1b c0       	rjmp	.+54     	; 0x20e8 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    20b2:	80 91 da 00 	lds	r24, 0x00DA
    20b6:	8e 7f       	andi	r24, 0xFE	; 254
    20b8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    20bc:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    20c0:	80 ff       	sbrs	r24, 0
    20c2:	0d c0       	rjmp	.+26     	; 0x20de <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    20c4:	80 e1       	ldi	r24, 0x10	; 16
    20c6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    20c8:	82 e1       	ldi	r24, 0x12	; 18
    20ca:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    20cc:	09 b4       	in	r0, 0x29	; 41
    20ce:	00 fe       	sbrs	r0, 0
    20d0:	fd cf       	rjmp	.-6      	; 0x20cc <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	80 93 3c 02 	sts	0x023C, r24
			EVENT_USB_Device_Connect();
    20d8:	0e 94 0a 0c 	call	0x1814	; 0x1814 <EVENT_USB_Device_Connect>
    20dc:	05 c0       	rjmp	.+10     	; 0x20e8 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    20de:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    20e0:	10 92 3c 02 	sts	0x023C, r1
			EVENT_USB_Device_Disconnect();
    20e4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    20e8:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    20ec:	80 ff       	sbrs	r24, 0
    20ee:	19 c0       	rjmp	.+50     	; 0x2122 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    20f0:	80 91 e2 00 	lds	r24, 0x00E2
    20f4:	80 ff       	sbrs	r24, 0
    20f6:	15 c0       	rjmp	.+42     	; 0x2122 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    20f8:	80 91 e2 00 	lds	r24, 0x00E2
    20fc:	8e 7f       	andi	r24, 0xFE	; 254
    20fe:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2102:	80 91 e2 00 	lds	r24, 0x00E2
    2106:	80 61       	ori	r24, 0x10	; 16
    2108:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    210c:	80 91 d8 00 	lds	r24, 0x00D8
    2110:	80 62       	ori	r24, 0x20	; 32
    2112:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2116:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2118:	85 e0       	ldi	r24, 0x05	; 5
    211a:	80 93 3c 02 	sts	0x023C, r24
		EVENT_USB_Device_Suspend();
    211e:	0e 94 28 0c 	call	0x1850	; 0x1850 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2122:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2126:	84 ff       	sbrs	r24, 4
    2128:	30 c0       	rjmp	.+96     	; 0x218a <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    212a:	80 91 e2 00 	lds	r24, 0x00E2
    212e:	84 ff       	sbrs	r24, 4
    2130:	2c c0       	rjmp	.+88     	; 0x218a <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2132:	80 e1       	ldi	r24, 0x10	; 16
    2134:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2136:	82 e1       	ldi	r24, 0x12	; 18
    2138:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    213a:	09 b4       	in	r0, 0x29	; 41
    213c:	00 fe       	sbrs	r0, 0
    213e:	fd cf       	rjmp	.-6      	; 0x213a <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2140:	80 91 d8 00 	lds	r24, 0x00D8
    2144:	8f 7d       	andi	r24, 0xDF	; 223
    2146:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    214a:	80 91 e1 00 	lds	r24, 0x00E1
    214e:	8f 7e       	andi	r24, 0xEF	; 239
    2150:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2154:	80 91 e2 00 	lds	r24, 0x00E2
    2158:	8f 7e       	andi	r24, 0xEF	; 239
    215a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    215e:	80 91 e2 00 	lds	r24, 0x00E2
    2162:	81 60       	ori	r24, 0x01	; 1
    2164:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2168:	80 91 38 02 	lds	r24, 0x0238
    216c:	88 23       	and	r24, r24
    216e:	11 f0       	breq	.+4      	; 0x2174 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2170:	84 e0       	ldi	r24, 0x04	; 4
    2172:	07 c0       	rjmp	.+14     	; 0x2182 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2174:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2178:	87 ff       	sbrs	r24, 7
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <__vector_10+0x11e>
    217c:	83 e0       	ldi	r24, 0x03	; 3
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <__vector_10+0x120>
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	80 93 3c 02 	sts	0x023C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2186:	0e 94 2f 0c 	call	0x185e	; 0x185e <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    218a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    218e:	83 ff       	sbrs	r24, 3
    2190:	29 c0       	rjmp	.+82     	; 0x21e4 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2192:	80 91 e2 00 	lds	r24, 0x00E2
    2196:	83 ff       	sbrs	r24, 3
    2198:	25 c0       	rjmp	.+74     	; 0x21e4 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    219a:	80 91 e1 00 	lds	r24, 0x00E1
    219e:	87 7f       	andi	r24, 0xF7	; 247
    21a0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	80 93 3c 02 	sts	0x023C, r24
		USB_Device_ConfigurationNumber = 0;
    21aa:	10 92 38 02 	sts	0x0238, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    21ae:	80 91 e1 00 	lds	r24, 0x00E1
    21b2:	8e 7f       	andi	r24, 0xFE	; 254
    21b4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    21b8:	80 91 e2 00 	lds	r24, 0x00E2
    21bc:	8e 7f       	andi	r24, 0xFE	; 254
    21be:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    21c2:	80 91 e2 00 	lds	r24, 0x00E2
    21c6:	80 61       	ori	r24, 0x10	; 16
    21c8:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	42 e0       	ldi	r20, 0x02	; 2
    21d2:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    21d6:	80 91 f0 00 	lds	r24, 0x00F0
    21da:	88 60       	ori	r24, 0x08	; 8
    21dc:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    21e0:	0e 94 23 0c 	call	0x1846	; 0x1846 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    21e4:	ff 91       	pop	r31
    21e6:	ef 91       	pop	r30
    21e8:	bf 91       	pop	r27
    21ea:	af 91       	pop	r26
    21ec:	9f 91       	pop	r25
    21ee:	8f 91       	pop	r24
    21f0:	7f 91       	pop	r23
    21f2:	6f 91       	pop	r22
    21f4:	5f 91       	pop	r21
    21f6:	4f 91       	pop	r20
    21f8:	3f 91       	pop	r19
    21fa:	2f 91       	pop	r18
    21fc:	0f 90       	pop	r0
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	0f 90       	pop	r0
    2202:	1f 90       	pop	r1
    2204:	18 95       	reti

00002206 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2206:	1f 92       	push	r1
    2208:	0f 92       	push	r0
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	0f 92       	push	r0
    220e:	11 24       	eor	r1, r1
    2210:	2f 93       	push	r18
    2212:	3f 93       	push	r19
    2214:	4f 93       	push	r20
    2216:	5f 93       	push	r21
    2218:	6f 93       	push	r22
    221a:	7f 93       	push	r23
    221c:	8f 93       	push	r24
    221e:	9f 93       	push	r25
    2220:	af 93       	push	r26
    2222:	bf 93       	push	r27
    2224:	cf 93       	push	r28
    2226:	ef 93       	push	r30
    2228:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    222a:	c0 91 e9 00 	lds	r28, 0x00E9
    222e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2230:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2234:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2238:	80 91 f0 00 	lds	r24, 0x00F0
    223c:	87 7f       	andi	r24, 0xF7	; 247
    223e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    2242:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    2244:	0e 94 3f 11 	call	0x227e	; 0x227e <USB_Device_ProcessControlRequest>
    2248:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    224c:	80 91 f0 00 	lds	r24, 0x00F0
    2250:	88 60       	ori	r24, 0x08	; 8
    2252:	80 93 f0 00 	sts	0x00F0, r24
    2256:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    225a:	ff 91       	pop	r31
    225c:	ef 91       	pop	r30
    225e:	cf 91       	pop	r28
    2260:	bf 91       	pop	r27
    2262:	af 91       	pop	r26
    2264:	9f 91       	pop	r25
    2266:	8f 91       	pop	r24
    2268:	7f 91       	pop	r23
    226a:	6f 91       	pop	r22
    226c:	5f 91       	pop	r21
    226e:	4f 91       	pop	r20
    2270:	3f 91       	pop	r19
    2272:	2f 91       	pop	r18
    2274:	0f 90       	pop	r0
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	0f 90       	pop	r0
    227a:	1f 90       	pop	r1
    227c:	18 95       	reti

0000227e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	ac 97       	sbiw	r28, 0x2c	; 44
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2294:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    2296:	ed e3       	ldi	r30, 0x3D	; 61
    2298:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    229a:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    229e:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    22a0:	8f 5f       	subi	r24, 0xFF	; 255
    22a2:	88 30       	cpi	r24, 0x08	; 8
    22a4:	d1 f7       	brne	.-12     	; 0x229a <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    22a6:	0e 94 96 0c 	call	0x192c	; 0x192c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    22aa:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    22ae:	83 ff       	sbrs	r24, 3
    22b0:	3c c1       	rjmp	.+632    	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    22b2:	80 91 3d 02 	lds	r24, 0x023D

		switch (USB_ControlRequest.bRequest)
    22b6:	20 91 3e 02 	lds	r18, 0x023E
    22ba:	25 30       	cpi	r18, 0x05	; 5
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <USB_Device_ProcessControlRequest+0x42>
    22be:	84 c0       	rjmp	.+264    	; 0x23c8 <USB_Device_ProcessControlRequest+0x14a>
    22c0:	26 30       	cpi	r18, 0x06	; 6
    22c2:	40 f4       	brcc	.+16     	; 0x22d4 <USB_Device_ProcessControlRequest+0x56>
    22c4:	21 30       	cpi	r18, 0x01	; 1
    22c6:	a1 f1       	breq	.+104    	; 0x2330 <USB_Device_ProcessControlRequest+0xb2>
    22c8:	21 30       	cpi	r18, 0x01	; 1
    22ca:	70 f0       	brcs	.+28     	; 0x22e8 <USB_Device_ProcessControlRequest+0x6a>
    22cc:	23 30       	cpi	r18, 0x03	; 3
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <USB_Device_ProcessControlRequest+0x54>
    22d0:	2c c1       	rjmp	.+600    	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
    22d2:	2e c0       	rjmp	.+92     	; 0x2330 <USB_Device_ProcessControlRequest+0xb2>
    22d4:	28 30       	cpi	r18, 0x08	; 8
    22d6:	09 f4       	brne	.+2      	; 0x22da <USB_Device_ProcessControlRequest+0x5c>
    22d8:	f7 c0       	rjmp	.+494    	; 0x24c8 <USB_Device_ProcessControlRequest+0x24a>
    22da:	29 30       	cpi	r18, 0x09	; 9
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <USB_Device_ProcessControlRequest+0x62>
    22de:	07 c1       	rjmp	.+526    	; 0x24ee <USB_Device_ProcessControlRequest+0x270>
    22e0:	26 30       	cpi	r18, 0x06	; 6
    22e2:	09 f0       	breq	.+2      	; 0x22e6 <USB_Device_ProcessControlRequest+0x68>
    22e4:	22 c1       	rjmp	.+580    	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
    22e6:	94 c0       	rjmp	.+296    	; 0x2410 <USB_Device_ProcessControlRequest+0x192>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    22e8:	80 38       	cpi	r24, 0x80	; 128
    22ea:	21 f0       	breq	.+8      	; 0x22f4 <USB_Device_ProcessControlRequest+0x76>
    22ec:	82 38       	cpi	r24, 0x82	; 130
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <USB_Device_ProcessControlRequest+0x74>
    22f0:	1c c1       	rjmp	.+568    	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
    22f2:	08 c0       	rjmp	.+16     	; 0x2304 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    22f4:	80 91 39 02 	lds	r24, 0x0239
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    22f8:	90 91 3a 02 	lds	r25, 0x023A
    22fc:	99 23       	and	r25, r25
    22fe:	71 f0       	breq	.+28     	; 0x231c <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2300:	82 60       	ori	r24, 0x02	; 2
    2302:	0c c0       	rjmp	.+24     	; 0x231c <USB_Device_ProcessControlRequest+0x9e>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2304:	80 91 41 02 	lds	r24, 0x0241
    2308:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    230a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    230e:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	95 ff       	sbrs	r25, 5
    2316:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2318:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    231c:	90 91 e8 00 	lds	r25, 0x00E8
    2320:	97 7f       	andi	r25, 0xF7	; 247
    2322:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2326:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    232a:	10 92 f1 00 	sts	0x00F1, r1
    232e:	d7 c0       	rjmp	.+430    	; 0x24de <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2330:	88 23       	and	r24, r24
    2332:	19 f0       	breq	.+6      	; 0x233a <USB_Device_ProcessControlRequest+0xbc>
    2334:	82 30       	cpi	r24, 0x02	; 2
    2336:	09 f0       	breq	.+2      	; 0x233a <USB_Device_ProcessControlRequest+0xbc>
    2338:	f8 c0       	rjmp	.+496    	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	8f 71       	andi	r24, 0x1F	; 31
    233e:	90 70       	andi	r25, 0x00	; 0
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	29 f0       	breq	.+10     	; 0x234e <USB_Device_ProcessControlRequest+0xd0>
    2344:	82 30       	cpi	r24, 0x02	; 2
    2346:	91 05       	cpc	r25, r1
    2348:	09 f0       	breq	.+2      	; 0x234c <USB_Device_ProcessControlRequest+0xce>
    234a:	ef c0       	rjmp	.+478    	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
    234c:	0b c0       	rjmp	.+22     	; 0x2364 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    234e:	80 91 3f 02 	lds	r24, 0x023F
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	09 f0       	breq	.+2      	; 0x2358 <USB_Device_ProcessControlRequest+0xda>
    2356:	e9 c0       	rjmp	.+466    	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2358:	23 30       	cpi	r18, 0x03	; 3
    235a:	09 f0       	breq	.+2      	; 0x235e <USB_Device_ProcessControlRequest+0xe0>
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	80 93 3a 02 	sts	0x023A, r24
    2362:	2c c0       	rjmp	.+88     	; 0x23bc <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2364:	80 91 3f 02 	lds	r24, 0x023F
    2368:	88 23       	and	r24, r24
    236a:	41 f5       	brne	.+80     	; 0x23bc <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    236c:	20 91 41 02 	lds	r18, 0x0241
    2370:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2372:	09 f4       	brne	.+2      	; 0x2376 <USB_Device_ProcessControlRequest+0xf8>
    2374:	da c0       	rjmp	.+436    	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2376:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    237a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    237e:	80 ff       	sbrs	r24, 0
    2380:	1d c0       	rjmp	.+58     	; 0x23bc <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2382:	80 91 3e 02 	lds	r24, 0x023E
    2386:	83 30       	cpi	r24, 0x03	; 3
    2388:	21 f4       	brne	.+8      	; 0x2392 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    238a:	80 91 eb 00 	lds	r24, 0x00EB
    238e:	80 62       	ori	r24, 0x20	; 32
    2390:	13 c0       	rjmp	.+38     	; 0x23b8 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2392:	80 91 eb 00 	lds	r24, 0x00EB
    2396:	80 61       	ori	r24, 0x10	; 16
    2398:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <USB_Device_ProcessControlRequest+0x128>
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	2a 95       	dec	r18
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <USB_Device_ProcessControlRequest+0x124>
    23aa:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    23ae:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    23b2:	80 91 eb 00 	lds	r24, 0x00EB
    23b6:	88 60       	ori	r24, 0x08	; 8
    23b8:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23bc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23c0:	80 91 e8 00 	lds	r24, 0x00E8
    23c4:	87 7f       	andi	r24, 0xF7	; 247
    23c6:	8e c0       	rjmp	.+284    	; 0x24e4 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    23c8:	88 23       	and	r24, r24
    23ca:	09 f0       	breq	.+2      	; 0x23ce <USB_Device_ProcessControlRequest+0x150>
    23cc:	ae c0       	rjmp	.+348    	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    23ce:	10 91 3f 02 	lds	r17, 0x023F
    23d2:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    23d4:	80 91 e3 00 	lds	r24, 0x00E3
    23d8:	80 78       	andi	r24, 0x80	; 128
    23da:	81 2b       	or	r24, r17
    23dc:	80 93 e3 00 	sts	0x00E3, r24
    23e0:	80 91 e8 00 	lds	r24, 0x00E8
    23e4:	87 7f       	andi	r24, 0xF7	; 247
    23e6:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    23ea:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    23ee:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    23f2:	80 ff       	sbrs	r24, 0
    23f4:	fc cf       	rjmp	.-8      	; 0x23ee <USB_Device_ProcessControlRequest+0x170>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    23f6:	80 91 e3 00 	lds	r24, 0x00E3
    23fa:	80 68       	ori	r24, 0x80	; 128
    23fc:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2400:	11 23       	and	r17, r17
    2402:	11 f0       	breq	.+4      	; 0x2408 <USB_Device_ProcessControlRequest+0x18a>
    2404:	83 e0       	ldi	r24, 0x03	; 3
    2406:	01 c0       	rjmp	.+2      	; 0x240a <USB_Device_ProcessControlRequest+0x18c>
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	80 93 3c 02 	sts	0x023C, r24
    240e:	8d c0       	rjmp	.+282    	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2410:	80 58       	subi	r24, 0x80	; 128
    2412:	82 30       	cpi	r24, 0x02	; 2
    2414:	08 f0       	brcs	.+2      	; 0x2418 <USB_Device_ProcessControlRequest+0x19a>
    2416:	89 c0       	rjmp	.+274    	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2418:	80 91 3f 02 	lds	r24, 0x023F
    241c:	90 91 40 02 	lds	r25, 0x0240
    2420:	23 e0       	ldi	r18, 0x03	; 3
    2422:	8c 3d       	cpi	r24, 0xDC	; 220
    2424:	92 07       	cpc	r25, r18
    2426:	b1 f5       	brne	.+108    	; 0x2494 <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2428:	83 e0       	ldi	r24, 0x03	; 3
    242a:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    242c:	8a e2       	ldi	r24, 0x2A	; 42
    242e:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2430:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2432:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2434:	de 01       	movw	r26, r28
    2436:	13 96       	adiw	r26, 0x03	; 3
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    243c:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    243e:	61 e2       	ldi	r22, 0x21	; 33
    2440:	e4 2f       	mov	r30, r20
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	60 93 57 00 	sts	0x0057, r22
    2448:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    244a:	80 ff       	sbrs	r24, 0
    244c:	03 c0       	rjmp	.+6      	; 0x2454 <USB_Device_ProcessControlRequest+0x1d6>
					{
						SerialByte >>= 4;
    244e:	e2 95       	swap	r30
    2450:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2452:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2454:	ef 70       	andi	r30, 0x0F	; 15
    2456:	2e 2f       	mov	r18, r30
    2458:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    245a:	ea 30       	cpi	r30, 0x0A	; 10
    245c:	18 f0       	brcs	.+6      	; 0x2464 <USB_Device_ProcessControlRequest+0x1e6>
    245e:	29 5c       	subi	r18, 0xC9	; 201
    2460:	3f 4f       	sbci	r19, 0xFF	; 255
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <USB_Device_ProcessControlRequest+0x1ea>
    2464:	20 5d       	subi	r18, 0xD0	; 208
    2466:	3f 4f       	sbci	r19, 0xFF	; 255
    2468:	13 96       	adiw	r26, 0x03	; 3
    246a:	3c 93       	st	X, r19
    246c:	2e 93       	st	-X, r18
    246e:	12 97       	sbiw	r26, 0x02	; 2
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	12 96       	adiw	r26, 0x02	; 2
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2474:	84 31       	cpi	r24, 0x14	; 20
    2476:	91 05       	cpc	r25, r1
    2478:	19 f7       	brne	.-58     	; 0x2440 <USB_Device_ProcessControlRequest+0x1c2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    247a:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    247c:	80 91 e8 00 	lds	r24, 0x00E8
    2480:	87 7f       	andi	r24, 0xF7	; 247
    2482:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2486:	ce 01       	movw	r24, r28
    2488:	03 96       	adiw	r24, 0x03	; 3
    248a:	6a e2       	ldi	r22, 0x2A	; 42
    248c:	70 e0       	ldi	r23, 0x00	; 0
    248e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <Endpoint_Write_Control_Stream_LE>
    2492:	14 c0       	rjmp	.+40     	; 0x24bc <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2494:	60 91 41 02 	lds	r22, 0x0241
    2498:	ae 01       	movw	r20, r28
    249a:	4f 5f       	subi	r20, 0xFF	; 255
    249c:	5f 4f       	sbci	r21, 0xFF	; 255
    249e:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <CALLBACK_USB_GetDescriptor>
    24a2:	bc 01       	movw	r22, r24
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	09 f4       	brne	.+2      	; 0x24aa <USB_Device_ProcessControlRequest+0x22c>
    24a8:	40 c0       	rjmp	.+128    	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
    24aa:	80 91 e8 00 	lds	r24, 0x00E8
    24ae:	87 7f       	andi	r24, 0xF7	; 247
    24b0:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    24bc:	80 91 e8 00 	lds	r24, 0x00E8
    24c0:	8b 77       	andi	r24, 0x7B	; 123
    24c2:	80 93 e8 00 	sts	0x00E8, r24
    24c6:	31 c0       	rjmp	.+98     	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    24c8:	80 38       	cpi	r24, 0x80	; 128
    24ca:	79 f5       	brne	.+94     	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24cc:	80 91 e8 00 	lds	r24, 0x00E8
    24d0:	87 7f       	andi	r24, 0xF7	; 247
    24d2:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    24d6:	80 91 38 02 	lds	r24, 0x0238
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    24da:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    24de:	80 91 e8 00 	lds	r24, 0x00E8
    24e2:	8e 77       	andi	r24, 0x7E	; 126
    24e4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    24e8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <Endpoint_ClearStatusStage>
    24ec:	1e c0       	rjmp	.+60     	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    24ee:	88 23       	and	r24, r24
    24f0:	e1 f4       	brne	.+56     	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    24f2:	90 91 3f 02 	lds	r25, 0x023F
    24f6:	92 30       	cpi	r25, 0x02	; 2
    24f8:	c0 f4       	brcc	.+48     	; 0x252a <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24fa:	80 91 e8 00 	lds	r24, 0x00E8
    24fe:	87 7f       	andi	r24, 0xF7	; 247
    2500:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2504:	90 93 38 02 	sts	0x0238, r25

	Endpoint_ClearStatusStage();
    2508:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    250c:	80 91 38 02 	lds	r24, 0x0238
    2510:	88 23       	and	r24, r24
    2512:	21 f4       	brne	.+8      	; 0x251c <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2514:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2518:	87 ff       	sbrs	r24, 7
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <USB_Device_ProcessControlRequest+0x2a2>
    251c:	84 e0       	ldi	r24, 0x04	; 4
    251e:	01 c0       	rjmp	.+2      	; 0x2522 <USB_Device_ProcessControlRequest+0x2a4>
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	80 93 3c 02 	sts	0x023C, r24

	EVENT_USB_Device_ConfigurationChanged();
    2526:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    252a:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    252e:	83 ff       	sbrs	r24, 3
    2530:	0a c0       	rjmp	.+20     	; 0x2546 <USB_Device_ProcessControlRequest+0x2c8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2532:	80 91 e8 00 	lds	r24, 0x00E8
    2536:	87 7f       	andi	r24, 0xF7	; 247
    2538:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    253c:	80 91 eb 00 	lds	r24, 0x00EB
    2540:	80 62       	ori	r24, 0x20	; 32
    2542:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2546:	ac 96       	adiw	r28, 0x2c	; 44
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	08 95       	ret

0000255a <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    255a:	90 93 c0 01 	sts	0x01C0, r25
    255e:	80 93 bf 01 	sts	0x01BF, r24
}
    2562:	08 95       	ret

00002564 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2564:	e0 91 bf 01 	lds	r30, 0x01BF
    2568:	f0 91 c0 01 	lds	r31, 0x01C0
    256c:	30 97       	sbiw	r30, 0x00	; 0
    256e:	29 f0       	breq	.+10     	; 0x257a <host_keyboard_leds+0x16>
    return (*driver->keyboard_leds)();
    2570:	01 90       	ld	r0, Z+
    2572:	f0 81       	ld	r31, Z
    2574:	e0 2d       	mov	r30, r0
    2576:	09 95       	icall
    2578:	08 95       	ret
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    257a:	80 e0       	ldi	r24, 0x00	; 0
    return (*driver->keyboard_leds)();
}
    257c:	08 95       	ret

0000257e <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    257e:	ff 92       	push	r15
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	18 2f       	mov	r17, r24
    258a:	09 2f       	mov	r16, r25
    if (!driver) return;
    258c:	e0 91 bf 01 	lds	r30, 0x01BF
    2590:	f0 91 c0 01 	lds	r31, 0x01C0
    2594:	30 97       	sbiw	r30, 0x00	; 0
    2596:	c1 f1       	breq	.+112    	; 0x2608 <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    2598:	02 80       	ldd	r0, Z+2	; 0x02
    259a:	f3 81       	ldd	r31, Z+3	; 0x03
    259c:	e0 2d       	mov	r30, r0
    259e:	09 95       	icall

    if (debug_keyboard) {
    25a0:	80 91 25 02 	lds	r24, 0x0225
    25a4:	82 ff       	sbrs	r24, 2
    25a6:	30 c0       	rjmp	.+96     	; 0x2608 <host_keyboard_send+0x8a>
        dprint("keyboard_report: ");
    25a8:	80 ff       	sbrs	r24, 0
    25aa:	04 c0       	rjmp	.+8      	; 0x25b4 <host_keyboard_send+0x36>
    25ac:	81 e7       	ldi	r24, 0x71	; 113
    25ae:	93 e0       	ldi	r25, 0x03	; 3
    25b0:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    25b4:	c1 2f       	mov	r28, r17
    25b6:	d0 2f       	mov	r29, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    25b8:	80 e1       	ldi	r24, 0x10	; 16
    25ba:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    25bc:	03 e8       	ldi	r16, 0x83	; 131
    25be:	13 e0       	ldi	r17, 0x03	; 3
    25c0:	80 91 25 02 	lds	r24, 0x0225
    25c4:	80 ff       	sbrs	r24, 0
    25c6:	14 c0       	rjmp	.+40     	; 0x25f0 <host_keyboard_send+0x72>
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <host_keyboard_send+0x4c>
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <host_keyboard_send+0x4e>
    25cc:	ed b7       	in	r30, 0x3d	; 61
    25ce:	fe b7       	in	r31, 0x3e	; 62
    25d0:	31 96       	adiw	r30, 0x01	; 1
    25d2:	ad b7       	in	r26, 0x3d	; 61
    25d4:	be b7       	in	r27, 0x3e	; 62
    25d6:	12 96       	adiw	r26, 0x02	; 2
    25d8:	1c 93       	st	X, r17
    25da:	0e 93       	st	-X, r16
    25dc:	11 97       	sbiw	r26, 0x01	; 1
    25de:	88 81       	ld	r24, Y
    25e0:	82 83       	std	Z+2, r24	; 0x02
    25e2:	13 82       	std	Z+3, r1	; 0x03
    25e4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	fa 94       	dec	r15
    25f2:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    25f4:	ff 20       	and	r15, r15
    25f6:	21 f7       	brne	.-56     	; 0x25c0 <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    25f8:	80 91 25 02 	lds	r24, 0x0225
    25fc:	80 ff       	sbrs	r24, 0
    25fe:	04 c0       	rjmp	.+8      	; 0x2608 <host_keyboard_send+0x8a>
    2600:	89 e8       	ldi	r24, 0x89	; 137
    2602:	93 e0       	ldi	r25, 0x03	; 3
    2604:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    }
}
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	1f 91       	pop	r17
    260e:	0f 91       	pop	r16
    2610:	ff 90       	pop	r15
    2612:	08 95       	ret

00002614 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2614:	e0 91 bf 01 	lds	r30, 0x01BF
    2618:	f0 91 c0 01 	lds	r31, 0x01C0
    261c:	30 97       	sbiw	r30, 0x00	; 0
    261e:	21 f0       	breq	.+8      	; 0x2628 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2620:	04 80       	ldd	r0, Z+4	; 0x04
    2622:	f5 81       	ldd	r31, Z+5	; 0x05
    2624:	e0 2d       	mov	r30, r0
    2626:	09 95       	icall
    2628:	08 95       	ret

0000262a <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    262a:	20 91 c1 01 	lds	r18, 0x01C1
    262e:	30 91 c2 01 	lds	r19, 0x01C2
    2632:	82 17       	cp	r24, r18
    2634:	93 07       	cpc	r25, r19
    2636:	71 f0       	breq	.+28     	; 0x2654 <host_system_send+0x2a>
    last_system_report = report;
    2638:	90 93 c2 01 	sts	0x01C2, r25
    263c:	80 93 c1 01 	sts	0x01C1, r24

    if (!driver) return;
    2640:	e0 91 bf 01 	lds	r30, 0x01BF
    2644:	f0 91 c0 01 	lds	r31, 0x01C0
    2648:	30 97       	sbiw	r30, 0x00	; 0
    264a:	21 f0       	breq	.+8      	; 0x2654 <host_system_send+0x2a>
    (*driver->send_system)(report);
    264c:	06 80       	ldd	r0, Z+6	; 0x06
    264e:	f7 81       	ldd	r31, Z+7	; 0x07
    2650:	e0 2d       	mov	r30, r0
    2652:	09 95       	icall
    2654:	08 95       	ret

00002656 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    2656:	20 91 c3 01 	lds	r18, 0x01C3
    265a:	30 91 c4 01 	lds	r19, 0x01C4
    265e:	82 17       	cp	r24, r18
    2660:	93 07       	cpc	r25, r19
    2662:	71 f0       	breq	.+28     	; 0x2680 <host_consumer_send+0x2a>
    last_consumer_report = report;
    2664:	90 93 c4 01 	sts	0x01C4, r25
    2668:	80 93 c3 01 	sts	0x01C3, r24

    if (!driver) return;
    266c:	e0 91 bf 01 	lds	r30, 0x01BF
    2670:	f0 91 c0 01 	lds	r31, 0x01C0
    2674:	30 97       	sbiw	r30, 0x00	; 0
    2676:	21 f0       	breq	.+8      	; 0x2680 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2678:	00 84       	ldd	r0, Z+8	; 0x08
    267a:	f1 85       	ldd	r31, Z+9	; 0x09
    267c:	e0 2d       	mov	r30, r0
    267e:	09 95       	icall
    2680:	08 95       	ret

00002682 <keyboard_setup>:


__attribute__ ((weak)) void matrix_setup(void) {}
void keyboard_setup(void)
{
    matrix_setup();
    2682:	0e 94 b3 0a 	call	0x1566	; 0x1566 <matrix_setup>
}
    2686:	08 95       	ret

00002688 <keyboard_init>:

void keyboard_init(void)
{
    timer_init();
    2688:	0e 94 65 1f 	call	0x3eca	; 0x3eca <timer_init>
    matrix_init();
    268c:	0e 94 60 07 	call	0xec0	; 0xec0 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    2690:	0e 94 5e 20 	call	0x40bc	; 0x40bc <bootmagic>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    2694:	08 95       	ret

00002696 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    2696:	cf 93       	push	r28
    2698:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    269a:	80 91 25 02 	lds	r24, 0x0225
    269e:	82 ff       	sbrs	r24, 2
    26a0:	27 c0       	rjmp	.+78     	; 0x26f0 <keyboard_set_leds+0x5a>
    26a2:	80 ff       	sbrs	r24, 0
    26a4:	04 c0       	rjmp	.+8      	; 0x26ae <keyboard_set_leds+0x18>
    26a6:	8b e8       	ldi	r24, 0x8B	; 139
    26a8:	93 e0       	ldi	r25, 0x03	; 3
    26aa:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    26ae:	80 91 25 02 	lds	r24, 0x0225
    26b2:	80 ff       	sbrs	r24, 0
    26b4:	15 c0       	rjmp	.+42     	; 0x26e0 <keyboard_set_leds+0x4a>
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <keyboard_set_leds+0x22>
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <keyboard_set_leds+0x24>
    26ba:	ed b7       	in	r30, 0x3d	; 61
    26bc:	fe b7       	in	r31, 0x3e	; 62
    26be:	31 96       	adiw	r30, 0x01	; 1
    26c0:	2e e9       	ldi	r18, 0x9E	; 158
    26c2:	33 e0       	ldi	r19, 0x03	; 3
    26c4:	ad b7       	in	r26, 0x3d	; 61
    26c6:	be b7       	in	r27, 0x3e	; 62
    26c8:	12 96       	adiw	r26, 0x02	; 2
    26ca:	3c 93       	st	X, r19
    26cc:	2e 93       	st	-X, r18
    26ce:	11 97       	sbiw	r26, 0x01	; 1
    26d0:	c2 83       	std	Z+2, r28	; 0x02
    26d2:	13 82       	std	Z+3, r1	; 0x03
    26d4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	80 91 25 02 	lds	r24, 0x0225
    26e4:	80 ff       	sbrs	r24, 0
    26e6:	04 c0       	rjmp	.+8      	; 0x26f0 <keyboard_set_leds+0x5a>
    26e8:	83 ea       	ldi	r24, 0xA3	; 163
    26ea:	93 e0       	ldi	r25, 0x03	; 3
    26ec:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    led_set(leds);
    26f0:	8c 2f       	mov	r24, r28
    26f2:	0e 94 bc 0a 	call	0x1578	; 0x1578 <led_set>
}
    26f6:	cf 91       	pop	r28
    26f8:	08 95       	ret

000026fa <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    26fa:	bf 92       	push	r11
    26fc:	cf 92       	push	r12
    26fe:	df 92       	push	r13
    2700:	ef 92       	push	r14
    2702:	ff 92       	push	r15
    2704:	0f 93       	push	r16
    2706:	1f 93       	push	r17
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	2a 97       	sbiw	r28, 0x0a	; 10
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    271c:	0e 94 66 08 	call	0x10cc	; 0x10cc <matrix_scan>
    2720:	05 ec       	ldi	r16, 0xC5	; 197
    2722:	11 e0       	ldi	r17, 0x01	; 1
    2724:	ee 24       	eor	r14, r14
    2726:	ff 24       	eor	r15, r15
    2728:	ce 2c       	mov	r12, r14
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    272a:	8e 2d       	mov	r24, r14
    272c:	0e 94 a7 08 	call	0x114e	; 0x114e <matrix_get_row>
    2730:	d8 2e       	mov	r13, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2732:	f8 01       	movw	r30, r16
    2734:	b1 90       	ld	r11, Z+
    2736:	8f 01       	movw	r16, r30
    2738:	b8 26       	eor	r11, r24
        if (matrix_change) {
    273a:	e9 f1       	breq	.+122    	; 0x27b6 <keyboard_task+0xbc>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    273c:	80 91 25 02 	lds	r24, 0x0225
    2740:	81 ff       	sbrs	r24, 1
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <keyboard_task+0x4e>
    2744:	0e 94 ad 08 	call	0x115a	; 0x115a <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    274c:	4b 2d       	mov	r20, r11
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	ca 01       	movw	r24, r20
    2752:	02 2e       	mov	r0, r18
    2754:	02 c0       	rjmp	.+4      	; 0x275a <keyboard_task+0x60>
    2756:	95 95       	asr	r25
    2758:	87 95       	ror	r24
    275a:	0a 94       	dec	r0
    275c:	e2 f7       	brpl	.-8      	; 0x2756 <keyboard_task+0x5c>
    275e:	80 ff       	sbrs	r24, 0
    2760:	25 c0       	rjmp	.+74     	; 0x27ac <keyboard_task+0xb2>
                    action_exec((keyevent_t){
    2762:	2e 83       	std	Y+6, r18	; 0x06
    2764:	cf 82       	std	Y+7, r12	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2766:	01 e0       	ldi	r16, 0x01	; 1
    2768:	10 e0       	ldi	r17, 0x00	; 0
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <keyboard_task+0x76>
    276c:	00 0f       	add	r16, r16
    276e:	11 1f       	adc	r17, r17
    2770:	2a 95       	dec	r18
    2772:	e2 f7       	brpl	.-8      	; 0x276c <keyboard_task+0x72>
    2774:	8d 2d       	mov	r24, r13
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	80 23       	and	r24, r16
    277a:	91 23       	and	r25, r17
    277c:	21 e0       	ldi	r18, 0x01	; 1
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	09 f4       	brne	.+2      	; 0x2784 <keyboard_task+0x8a>
    2782:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2784:	28 87       	std	Y+8, r18	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2786:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <timer_read>
    278a:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    278c:	78 2f       	mov	r23, r24
    278e:	9a 87       	std	Y+10, r25	; 0x0a
    2790:	89 87       	std	Y+9, r24	; 0x09
    2792:	4e 81       	ldd	r20, Y+6	; 0x06
    2794:	5f 81       	ldd	r21, Y+7	; 0x07
    2796:	68 85       	ldd	r22, Y+8	; 0x08
    2798:	8a 85       	ldd	r24, Y+10	; 0x0a
    279a:	0e 94 11 14 	call	0x2822	; 0x2822 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    279e:	f7 01       	movw	r30, r14
    27a0:	eb 53       	subi	r30, 0x3B	; 59
    27a2:	fe 4f       	sbci	r31, 0xFE	; 254
    27a4:	80 81       	ld	r24, Z
    27a6:	80 27       	eor	r24, r16
    27a8:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    27aa:	1d c0       	rjmp	.+58     	; 0x27e6 <keyboard_task+0xec>
    27ac:	2f 5f       	subi	r18, 0xFF	; 255
    27ae:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    27b0:	26 30       	cpi	r18, 0x06	; 6
    27b2:	31 05       	cpc	r19, r1
    27b4:	69 f6       	brne	.-102    	; 0x2750 <keyboard_task+0x56>
    27b6:	08 94       	sec
    27b8:	e1 1c       	adc	r14, r1
    27ba:	f1 1c       	adc	r15, r1
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    27bc:	fa e0       	ldi	r31, 0x0A	; 10
    27be:	ef 16       	cp	r14, r31
    27c0:	f1 04       	cpc	r15, r1
    27c2:	09 f0       	breq	.+2      	; 0x27c6 <keyboard_task+0xcc>
    27c4:	b1 cf       	rjmp	.-158    	; 0x2728 <keyboard_task+0x2e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    27c6:	8f ef       	ldi	r24, 0xFF	; 255
    27c8:	89 83       	std	Y+1, r24	; 0x01
    27ca:	8a 83       	std	Y+2, r24	; 0x02
    27cc:	1b 82       	std	Y+3, r1	; 0x03
    27ce:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <timer_read>
    27d2:	81 60       	ori	r24, 0x01	; 1
    27d4:	78 2f       	mov	r23, r24
    27d6:	9d 83       	std	Y+5, r25	; 0x05
    27d8:	8c 83       	std	Y+4, r24	; 0x04
    27da:	49 81       	ldd	r20, Y+1	; 0x01
    27dc:	5a 81       	ldd	r21, Y+2	; 0x02
    27de:	6b 81       	ldd	r22, Y+3	; 0x03
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	0e 94 11 14 	call	0x2822	; 0x2822 <action_exec>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    27e6:	0e 94 3d 24 	call	0x487a	; 0x487a <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    27ea:	00 91 cf 01 	lds	r16, 0x01CF
    27ee:	0e 94 b2 12 	call	0x2564	; 0x2564 <host_keyboard_leds>
    27f2:	08 17       	cp	r16, r24
    27f4:	31 f0       	breq	.+12     	; 0x2802 <keyboard_task+0x108>
        led_status = host_keyboard_leds();
    27f6:	0e 94 b2 12 	call	0x2564	; 0x2564 <host_keyboard_leds>
    27fa:	80 93 cf 01 	sts	0x01CF, r24
        keyboard_set_leds(led_status);
    27fe:	0e 94 4b 13 	call	0x2696	; 0x2696 <keyboard_set_leds>
    }
}
    2802:	2a 96       	adiw	r28, 0x0a	; 10
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	ff 90       	pop	r15
    2818:	ef 90       	pop	r14
    281a:	df 90       	pop	r13
    281c:	cf 90       	pop	r12
    281e:	bf 90       	pop	r11
    2820:	08 95       	ret

00002822 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	2b 97       	sbiw	r28, 0x0b	; 11
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	4f 83       	std	Y+7, r20	; 0x07
    2838:	58 87       	std	Y+8, r21	; 0x08
    283a:	69 87       	std	Y+9, r22	; 0x09
    283c:	7a 87       	std	Y+10, r23	; 0x0a
    283e:	8b 87       	std	Y+11, r24	; 0x0b
    2840:	97 2f       	mov	r25, r23
    2842:	28 2f       	mov	r18, r24
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2844:	de 01       	movw	r26, r28
    2846:	11 96       	adiw	r26, 0x01	; 1
    2848:	86 e0       	ldi	r24, 0x06	; 6
    284a:	fd 01       	movw	r30, r26
    284c:	11 92       	st	Z+, r1
    284e:	8a 95       	dec	r24
    2850:	e9 f7       	brne	.-6      	; 0x284c <action_exec+0x2a>
    2852:	fe 01       	movw	r30, r28
    2854:	37 96       	adiw	r30, 0x07	; 7
    2856:	85 e0       	ldi	r24, 0x05	; 5
    2858:	01 90       	ld	r0, Z+
    285a:	0d 92       	st	X+, r0
    285c:	81 50       	subi	r24, 0x01	; 1
    285e:	e1 f7       	brne	.-8      	; 0x2858 <action_exec+0x36>
    2860:	49 83       	std	Y+1, r20	; 0x01
    2862:	5a 83       	std	Y+2, r21	; 0x02
    2864:	79 2f       	mov	r23, r25
    2866:	9c 83       	std	Y+4, r25	; 0x04
    2868:	2d 83       	std	Y+5, r18	; 0x05

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    286a:	6b 81       	ldd	r22, Y+3	; 0x03
    286c:	82 2f       	mov	r24, r18
    286e:	9e 81       	ldd	r25, Y+6	; 0x06
    2870:	0e 94 10 1b 	call	0x3620	; 0x3620 <action_tapping_process>
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif

}
    2874:	2b 96       	adiw	r28, 0x0b	; 11
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	08 95       	ret

00002886 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2886:	cf 93       	push	r28
    2888:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    288a:	88 23       	and	r24, r24
    288c:	09 f4       	brne	.+2      	; 0x2890 <register_code+0xa>
    288e:	cc c0       	rjmp	.+408    	; 0x2a28 <register_code+0x1a2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2890:	82 38       	cpi	r24, 0x82	; 130
    2892:	59 f4       	brne	.+22     	; 0x28aa <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    2894:	0e 94 b2 12 	call	0x2564	; 0x2564 <host_keyboard_leds>
    2898:	81 fd       	sbrc	r24, 1
    289a:	c6 c0       	rjmp	.+396    	; 0x2a28 <register_code+0x1a2>
#endif
        add_key(KC_CAPSLOCK);
    289c:	89 e3       	ldi	r24, 0x39	; 57
    289e:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <add_key>
        send_keyboard_report();
    28a2:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    28a6:	89 e3       	ldi	r24, 0x39	; 57
    28a8:	0c c0       	rjmp	.+24     	; 0x28c2 <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    28aa:	83 38       	cpi	r24, 0x83	; 131
    28ac:	79 f4       	brne	.+30     	; 0x28cc <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    28ae:	0e 94 b2 12 	call	0x2564	; 0x2564 <host_keyboard_leds>
    28b2:	80 fd       	sbrc	r24, 0
    28b4:	b9 c0       	rjmp	.+370    	; 0x2a28 <register_code+0x1a2>
#endif
        add_key(KC_NUMLOCK);
    28b6:	83 e5       	ldi	r24, 0x53	; 83
    28b8:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <add_key>
        send_keyboard_report();
    28bc:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
        del_key(KC_NUMLOCK);
    28c0:	83 e5       	ldi	r24, 0x53	; 83
    28c2:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <del_key>
        send_keyboard_report();
    28c6:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
    28ca:	ae c0       	rjmp	.+348    	; 0x2a28 <register_code+0x1a2>
    }

    else if (KC_LOCKING_SCROLL == code) {
    28cc:	84 38       	cpi	r24, 0x84	; 132
    28ce:	59 f4       	brne	.+22     	; 0x28e6 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    28d0:	0e 94 b2 12 	call	0x2564	; 0x2564 <host_keyboard_leds>
    28d4:	82 fd       	sbrc	r24, 2
    28d6:	a8 c0       	rjmp	.+336    	; 0x2a28 <register_code+0x1a2>
#endif
        add_key(KC_SCROLLLOCK);
    28d8:	87 e4       	ldi	r24, 0x47	; 71
    28da:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <add_key>
        send_keyboard_report();
    28de:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    28e2:	87 e4       	ldi	r24, 0x47	; 71
    28e4:	ee cf       	rjmp	.-36     	; 0x28c2 <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    28e6:	84 50       	subi	r24, 0x04	; 4
    28e8:	81 3a       	cpi	r24, 0xA1	; 161
    28ea:	50 f4       	brcc	.+20     	; 0x2900 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    28ec:	8c 2f       	mov	r24, r28
    28ee:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <command_proc>
    28f2:	88 23       	and	r24, r24
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <register_code+0x72>
    28f6:	98 c0       	rjmp	.+304    	; 0x2a28 <register_code+0x1a2>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    28f8:	8c 2f       	mov	r24, r28
    28fa:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <add_key>
    28fe:	e3 cf       	rjmp	.-58     	; 0x28c6 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2900:	8c 2f       	mov	r24, r28
    2902:	80 5e       	subi	r24, 0xE0	; 224
    2904:	88 30       	cpi	r24, 0x08	; 8
    2906:	50 f4       	brcc	.+20     	; 0x291c <register_code+0x96>
        add_mods(MOD_BIT(code));
    2908:	c7 70       	andi	r28, 0x07	; 7
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	01 c0       	rjmp	.+2      	; 0x2912 <register_code+0x8c>
    2910:	88 0f       	add	r24, r24
    2912:	ca 95       	dec	r28
    2914:	ea f7       	brpl	.-6      	; 0x2910 <register_code+0x8a>
    2916:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <add_mods>
    291a:	d5 cf       	rjmp	.-86     	; 0x28c6 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    291c:	8c 2f       	mov	r24, r28
    291e:	85 5a       	subi	r24, 0xA5	; 165
    2920:	83 30       	cpi	r24, 0x03	; 3
    2922:	78 f4       	brcc	.+30     	; 0x2942 <register_code+0xbc>
        host_system_send(KEYCODE2SYSTEM(code));
    2924:	c5 3a       	cpi	r28, 0xA5	; 165
    2926:	29 f0       	breq	.+10     	; 0x2932 <register_code+0xac>
    2928:	c6 3a       	cpi	r28, 0xA6	; 166
    292a:	31 f4       	brne	.+12     	; 0x2938 <register_code+0xb2>
    292c:	82 e8       	ldi	r24, 0x82	; 130
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	05 c0       	rjmp	.+10     	; 0x293c <register_code+0xb6>
    2932:	81 e8       	ldi	r24, 0x81	; 129
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	02 c0       	rjmp	.+4      	; 0x293c <register_code+0xb6>
    2938:	83 e8       	ldi	r24, 0x83	; 131
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0e 94 15 13 	call	0x262a	; 0x262a <host_system_send>
    2940:	73 c0       	rjmp	.+230    	; 0x2a28 <register_code+0x1a2>
    }
    else if IS_CONSUMER(code) {
    2942:	8c 2f       	mov	r24, r28
    2944:	88 5a       	subi	r24, 0xA8	; 168
    2946:	85 31       	cpi	r24, 0x15	; 21
    2948:	08 f0       	brcs	.+2      	; 0x294c <register_code+0xc6>
    294a:	6e c0       	rjmp	.+220    	; 0x2a28 <register_code+0x1a2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    294c:	c8 3a       	cpi	r28, 0xA8	; 168
    294e:	61 f1       	breq	.+88     	; 0x29a8 <register_code+0x122>
    2950:	c9 3a       	cpi	r28, 0xA9	; 169
    2952:	69 f1       	breq	.+90     	; 0x29ae <register_code+0x128>
    2954:	ca 3a       	cpi	r28, 0xAA	; 170
    2956:	71 f1       	breq	.+92     	; 0x29b4 <register_code+0x12e>
    2958:	cb 3a       	cpi	r28, 0xAB	; 171
    295a:	79 f1       	breq	.+94     	; 0x29ba <register_code+0x134>
    295c:	cc 3a       	cpi	r28, 0xAC	; 172
    295e:	81 f1       	breq	.+96     	; 0x29c0 <register_code+0x13a>
    2960:	cd 3a       	cpi	r28, 0xAD	; 173
    2962:	89 f1       	breq	.+98     	; 0x29c6 <register_code+0x140>
    2964:	ce 3a       	cpi	r28, 0xAE	; 174
    2966:	91 f1       	breq	.+100    	; 0x29cc <register_code+0x146>
    2968:	cf 3a       	cpi	r28, 0xAF	; 175
    296a:	99 f1       	breq	.+102    	; 0x29d2 <register_code+0x14c>
    296c:	c1 3b       	cpi	r28, 0xB1	; 177
    296e:	a1 f1       	breq	.+104    	; 0x29d8 <register_code+0x152>
    2970:	c0 3b       	cpi	r28, 0xB0	; 176
    2972:	a9 f1       	breq	.+106    	; 0x29de <register_code+0x158>
    2974:	c2 3b       	cpi	r28, 0xB2	; 178
    2976:	b1 f1       	breq	.+108    	; 0x29e4 <register_code+0x15e>
    2978:	c3 3b       	cpi	r28, 0xB3	; 179
    297a:	b9 f1       	breq	.+110    	; 0x29ea <register_code+0x164>
    297c:	c4 3b       	cpi	r28, 0xB4	; 180
    297e:	c1 f1       	breq	.+112    	; 0x29f0 <register_code+0x16a>
    2980:	c5 3b       	cpi	r28, 0xB5	; 181
    2982:	c9 f1       	breq	.+114    	; 0x29f6 <register_code+0x170>
    2984:	c6 3b       	cpi	r28, 0xB6	; 182
    2986:	d1 f1       	breq	.+116    	; 0x29fc <register_code+0x176>
    2988:	c7 3b       	cpi	r28, 0xB7	; 183
    298a:	d9 f1       	breq	.+118    	; 0x2a02 <register_code+0x17c>
    298c:	c8 3b       	cpi	r28, 0xB8	; 184
    298e:	e1 f1       	breq	.+120    	; 0x2a08 <register_code+0x182>
    2990:	c9 3b       	cpi	r28, 0xB9	; 185
    2992:	e9 f1       	breq	.+122    	; 0x2a0e <register_code+0x188>
    2994:	ca 3b       	cpi	r28, 0xBA	; 186
    2996:	f1 f1       	breq	.+124    	; 0x2a14 <register_code+0x18e>
    2998:	cb 3b       	cpi	r28, 0xBB	; 187
    299a:	f9 f1       	breq	.+126    	; 0x2a1a <register_code+0x194>
    299c:	cc 3b       	cpi	r28, 0xBC	; 188
    299e:	09 f0       	breq	.+2      	; 0x29a2 <register_code+0x11c>
    29a0:	3f c0       	rjmp	.+126    	; 0x2a20 <register_code+0x19a>
    29a2:	8a e2       	ldi	r24, 0x2A	; 42
    29a4:	92 e0       	ldi	r25, 0x02	; 2
    29a6:	3e c0       	rjmp	.+124    	; 0x2a24 <register_code+0x19e>
    29a8:	82 ee       	ldi	r24, 0xE2	; 226
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	3b c0       	rjmp	.+118    	; 0x2a24 <register_code+0x19e>
    29ae:	89 ee       	ldi	r24, 0xE9	; 233
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	38 c0       	rjmp	.+112    	; 0x2a24 <register_code+0x19e>
    29b4:	8a ee       	ldi	r24, 0xEA	; 234
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	35 c0       	rjmp	.+106    	; 0x2a24 <register_code+0x19e>
    29ba:	85 eb       	ldi	r24, 0xB5	; 181
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	32 c0       	rjmp	.+100    	; 0x2a24 <register_code+0x19e>
    29c0:	86 eb       	ldi	r24, 0xB6	; 182
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	2f c0       	rjmp	.+94     	; 0x2a24 <register_code+0x19e>
    29c6:	83 eb       	ldi	r24, 0xB3	; 179
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	2c c0       	rjmp	.+88     	; 0x2a24 <register_code+0x19e>
    29cc:	84 eb       	ldi	r24, 0xB4	; 180
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	29 c0       	rjmp	.+82     	; 0x2a24 <register_code+0x19e>
    29d2:	87 eb       	ldi	r24, 0xB7	; 183
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	26 c0       	rjmp	.+76     	; 0x2a24 <register_code+0x19e>
    29d8:	8c ec       	ldi	r24, 0xCC	; 204
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	23 c0       	rjmp	.+70     	; 0x2a24 <register_code+0x19e>
    29de:	8d ec       	ldi	r24, 0xCD	; 205
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	20 c0       	rjmp	.+64     	; 0x2a24 <register_code+0x19e>
    29e4:	83 e8       	ldi	r24, 0x83	; 131
    29e6:	91 e0       	ldi	r25, 0x01	; 1
    29e8:	1d c0       	rjmp	.+58     	; 0x2a24 <register_code+0x19e>
    29ea:	8a e8       	ldi	r24, 0x8A	; 138
    29ec:	91 e0       	ldi	r25, 0x01	; 1
    29ee:	1a c0       	rjmp	.+52     	; 0x2a24 <register_code+0x19e>
    29f0:	82 e9       	ldi	r24, 0x92	; 146
    29f2:	91 e0       	ldi	r25, 0x01	; 1
    29f4:	17 c0       	rjmp	.+46     	; 0x2a24 <register_code+0x19e>
    29f6:	84 e9       	ldi	r24, 0x94	; 148
    29f8:	91 e0       	ldi	r25, 0x01	; 1
    29fa:	14 c0       	rjmp	.+40     	; 0x2a24 <register_code+0x19e>
    29fc:	81 e2       	ldi	r24, 0x21	; 33
    29fe:	92 e0       	ldi	r25, 0x02	; 2
    2a00:	11 c0       	rjmp	.+34     	; 0x2a24 <register_code+0x19e>
    2a02:	83 e2       	ldi	r24, 0x23	; 35
    2a04:	92 e0       	ldi	r25, 0x02	; 2
    2a06:	0e c0       	rjmp	.+28     	; 0x2a24 <register_code+0x19e>
    2a08:	84 e2       	ldi	r24, 0x24	; 36
    2a0a:	92 e0       	ldi	r25, 0x02	; 2
    2a0c:	0b c0       	rjmp	.+22     	; 0x2a24 <register_code+0x19e>
    2a0e:	85 e2       	ldi	r24, 0x25	; 37
    2a10:	92 e0       	ldi	r25, 0x02	; 2
    2a12:	08 c0       	rjmp	.+16     	; 0x2a24 <register_code+0x19e>
    2a14:	86 e2       	ldi	r24, 0x26	; 38
    2a16:	92 e0       	ldi	r25, 0x02	; 2
    2a18:	05 c0       	rjmp	.+10     	; 0x2a24 <register_code+0x19e>
    2a1a:	87 e2       	ldi	r24, 0x27	; 39
    2a1c:	92 e0       	ldi	r25, 0x02	; 2
    2a1e:	02 c0       	rjmp	.+4      	; 0x2a24 <register_code+0x19e>
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 2b 13 	call	0x2656	; 0x2656 <host_consumer_send>
    }
}
    2a28:	cf 91       	pop	r28
    2a2a:	08 95       	ret

00002a2c <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2a2c:	88 23       	and	r24, r24
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <unregister_code+0x6>
    2a30:	4e c0       	rjmp	.+156    	; 0x2ace <unregister_code+0xa2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2a32:	82 38       	cpi	r24, 0x82	; 130
    2a34:	59 f4       	brne	.+22     	; 0x2a4c <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2a36:	0e 94 b2 12 	call	0x2564	; 0x2564 <host_keyboard_leds>
    2a3a:	81 ff       	sbrs	r24, 1
    2a3c:	48 c0       	rjmp	.+144    	; 0x2ace <unregister_code+0xa2>
#endif
        add_key(KC_CAPSLOCK);
    2a3e:	89 e3       	ldi	r24, 0x39	; 57
    2a40:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <add_key>
        send_keyboard_report();
    2a44:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2a48:	89 e3       	ldi	r24, 0x39	; 57
    2a4a:	0c c0       	rjmp	.+24     	; 0x2a64 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2a4c:	83 38       	cpi	r24, 0x83	; 131
    2a4e:	69 f4       	brne	.+26     	; 0x2a6a <unregister_code+0x3e>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2a50:	0e 94 b2 12 	call	0x2564	; 0x2564 <host_keyboard_leds>
    2a54:	80 ff       	sbrs	r24, 0
    2a56:	3b c0       	rjmp	.+118    	; 0x2ace <unregister_code+0xa2>
#endif
        add_key(KC_NUMLOCK);
    2a58:	83 e5       	ldi	r24, 0x53	; 83
    2a5a:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <add_key>
        send_keyboard_report();
    2a5e:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2a62:	83 e5       	ldi	r24, 0x53	; 83
    2a64:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <del_key>
    2a68:	1f c0       	rjmp	.+62     	; 0x2aa8 <unregister_code+0x7c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_SCROLL == code) {
    2a6a:	84 38       	cpi	r24, 0x84	; 132
    2a6c:	59 f4       	brne	.+22     	; 0x2a84 <unregister_code+0x58>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2a6e:	0e 94 b2 12 	call	0x2564	; 0x2564 <host_keyboard_leds>
    2a72:	82 ff       	sbrs	r24, 2
    2a74:	2c c0       	rjmp	.+88     	; 0x2ace <unregister_code+0xa2>
#endif
        add_key(KC_SCROLLLOCK);
    2a76:	87 e4       	ldi	r24, 0x47	; 71
    2a78:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <add_key>
        send_keyboard_report();
    2a7c:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2a80:	87 e4       	ldi	r24, 0x47	; 71
    2a82:	f0 cf       	rjmp	.-32     	; 0x2a64 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2a84:	98 2f       	mov	r25, r24
    2a86:	94 50       	subi	r25, 0x04	; 4
    2a88:	91 3a       	cpi	r25, 0xA1	; 161
    2a8a:	60 f3       	brcs	.-40     	; 0x2a64 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2a8c:	98 2f       	mov	r25, r24
    2a8e:	90 5e       	subi	r25, 0xE0	; 224
    2a90:	98 30       	cpi	r25, 0x08	; 8
    2a92:	68 f4       	brcc	.+26     	; 0x2aae <unregister_code+0x82>
        del_mods(MOD_BIT(code));
    2a94:	28 2f       	mov	r18, r24
    2a96:	27 70       	andi	r18, 0x07	; 7
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	01 c0       	rjmp	.+2      	; 0x2aa0 <unregister_code+0x74>
    2a9e:	88 0f       	add	r24, r24
    2aa0:	2a 95       	dec	r18
    2aa2:	ea f7       	brpl	.-6      	; 0x2a9e <unregister_code+0x72>
    2aa4:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <del_mods>
        send_keyboard_report();
    2aa8:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
    2aac:	08 95       	ret
    }
    else if IS_SYSTEM(code) {
    2aae:	98 2f       	mov	r25, r24
    2ab0:	95 5a       	subi	r25, 0xA5	; 165
    2ab2:	93 30       	cpi	r25, 0x03	; 3
    2ab4:	28 f4       	brcc	.+10     	; 0x2ac0 <unregister_code+0x94>
        host_system_send(0);
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	0e 94 15 13 	call	0x262a	; 0x262a <host_system_send>
    2abe:	08 95       	ret
    }
    else if IS_CONSUMER(code) {
    2ac0:	88 5a       	subi	r24, 0xA8	; 168
    2ac2:	85 31       	cpi	r24, 0x15	; 21
    2ac4:	20 f4       	brcc	.+8      	; 0x2ace <unregister_code+0xa2>
        host_consumer_send(0);
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	0e 94 2b 13 	call	0x2656	; 0x2656 <host_consumer_send>
    2ace:	08 95       	ret

00002ad0 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2ad0:	88 23       	and	r24, r24
    2ad2:	21 f0       	breq	.+8      	; 0x2adc <register_mods+0xc>
        add_mods(mods);
    2ad4:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <add_mods>
        send_keyboard_report();
    2ad8:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
    2adc:	08 95       	ret

00002ade <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2ade:	88 23       	and	r24, r24
    2ae0:	21 f0       	breq	.+8      	; 0x2aea <unregister_mods+0xc>
        del_mods(mods);
    2ae2:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <del_mods>
        send_keyboard_report();
    2ae6:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
    2aea:	08 95       	ret

00002aec <process_action>:
#endif

}

void process_action(keyrecord_t *record)
{
    2aec:	9f 92       	push	r9
    2aee:	af 92       	push	r10
    2af0:	bf 92       	push	r11
    2af2:	cf 92       	push	r12
    2af4:	df 92       	push	r13
    2af6:	ef 92       	push	r14
    2af8:	ff 92       	push	r15
    2afa:	0f 93       	push	r16
    2afc:	1f 93       	push	r17
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	00 d0       	rcall	.+0      	; 0x2b04 <process_action+0x18>
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <process_action+0x1a>
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <process_action+0x1c>
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	5c 01       	movw	r10, r24
    bool do_release_oneshot = false;
    keyevent_t event = record->event;
    2b0e:	de 01       	movw	r26, r28
    2b10:	11 96       	adiw	r26, 0x01	; 1
    2b12:	fc 01       	movw	r30, r24
    2b14:	85 e0       	ldi	r24, 0x05	; 5
    2b16:	01 90       	ld	r0, Z+
    2b18:	0d 92       	st	X+, r0
    2b1a:	81 50       	subi	r24, 0x01	; 1
    2b1c:	e1 f7       	brne	.-8      	; 0x2b16 <process_action+0x2a>
    2b1e:	f5 01       	movw	r30, r10
    2b20:	30 81       	ld	r19, Z
    2b22:	21 81       	ldd	r18, Z+1	; 0x01
    2b24:	c2 80       	ldd	r12, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2b26:	15 81       	ldd	r17, Z+5	; 0x05
    2b28:	12 95       	swap	r17
    2b2a:	1f 70       	andi	r17, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2b2c:	83 81       	ldd	r24, Z+3	; 0x03
    2b2e:	94 81       	ldd	r25, Z+4	; 0x04
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	09 f4       	brne	.+2      	; 0x2b36 <process_action+0x4a>
    2b34:	4f c2       	rjmp	.+1182   	; 0x2fd4 <process_action+0x4e8>
    2b36:	2f 3f       	cpi	r18, 0xFF	; 255
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <process_action+0x50>
    2b3a:	39 c2       	rjmp	.+1138   	; 0x2fae <process_action+0x4c2>
    2b3c:	3f 3f       	cpi	r19, 0xFF	; 255
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <process_action+0x56>
    2b40:	36 c2       	rjmp	.+1132   	; 0x2fae <process_action+0x4c2>
    2b42:	48 c2       	rjmp	.+1168   	; 0x2fd4 <process_action+0x4e8>
#endif
    dprintln();


#ifndef NO_ACTION_ONESHOT
    if (is_oneshot_layer_active() && event.pressed) {
    2b44:	cc 20       	and	r12, r12
    2b46:	59 f0       	breq	.+22     	; 0x2b5e <process_action+0x72>
        clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
    2b48:	82 e0       	ldi	r24, 0x02	; 2
    2b4a:	9e 83       	std	Y+6, r25	; 0x06
    2b4c:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <clear_oneshot_layer_state>
        do_release_oneshot = !is_oneshot_layer_active();
    2b50:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <is_oneshot_layer_active>
    2b54:	99 24       	eor	r9, r9
    2b56:	93 94       	inc	r9
    2b58:	98 26       	eor	r9, r24
    2b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5c:	01 c0       	rjmp	.+2      	; 0x2b60 <process_action+0x74>

}

void process_action(keyrecord_t *record)
{
    bool do_release_oneshot = false;
    2b5e:	99 24       	eor	r9, r9
        clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
        do_release_oneshot = !is_oneshot_layer_active();
    }
#endif

    switch (action.kind.id) {
    2b60:	29 2f       	mov	r18, r25
    2b62:	22 95       	swap	r18
    2b64:	2f 70       	andi	r18, 0x0F	; 15
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	25 30       	cpi	r18, 0x05	; 5
    2b6a:	31 05       	cpc	r19, r1
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <process_action+0x84>
    2b6e:	ad c0       	rjmp	.+346    	; 0x2cca <process_action+0x1de>
    2b70:	26 30       	cpi	r18, 0x06	; 6
    2b72:	31 05       	cpc	r19, r1
    2b74:	6c f4       	brge	.+26     	; 0x2b90 <process_action+0xa4>
    2b76:	24 30       	cpi	r18, 0x04	; 4
    2b78:	31 05       	cpc	r19, r1
    2b7a:	0c f0       	brlt	.+2      	; 0x2b7e <process_action+0x92>
    2b7c:	85 c0       	rjmp	.+266    	; 0x2c88 <process_action+0x19c>
    2b7e:	89 2f       	mov	r24, r25
    2b80:	80 7f       	andi	r24, 0xF0	; 240
    2b82:	4f e0       	ldi	r20, 0x0F	; 15
    2b84:	f4 2e       	mov	r15, r20
    2b86:	f9 22       	and	r15, r25
    2b88:	22 30       	cpi	r18, 0x02	; 2
    2b8a:	31 05       	cpc	r19, r1
    2b8c:	94 f5       	brge	.+100    	; 0x2bf2 <process_action+0x106>
    2b8e:	15 c0       	rjmp	.+42     	; 0x2bba <process_action+0xce>
    2b90:	2c 30       	cpi	r18, 0x0C	; 12
    2b92:	31 05       	cpc	r19, r1
    2b94:	4c f4       	brge	.+18     	; 0x2ba8 <process_action+0xbc>
    2b96:	2a 30       	cpi	r18, 0x0A	; 10
    2b98:	31 05       	cpc	r19, r1
    2b9a:	0c f0       	brlt	.+2      	; 0x2b9e <process_action+0xb2>
    2b9c:	56 c1       	rjmp	.+684    	; 0x2e4a <process_action+0x35e>
    2b9e:	28 30       	cpi	r18, 0x08	; 8
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	09 f0       	breq	.+2      	; 0x2ba6 <process_action+0xba>
    2ba4:	f0 c1       	rjmp	.+992    	; 0x2f86 <process_action+0x49a>
    2ba6:	9c c0       	rjmp	.+312    	; 0x2ce0 <process_action+0x1f4>
    2ba8:	2c 30       	cpi	r18, 0x0C	; 12
    2baa:	31 05       	cpc	r19, r1
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <process_action+0xc4>
    2bae:	dc c1       	rjmp	.+952    	; 0x2f68 <process_action+0x47c>
    2bb0:	2f 30       	cpi	r18, 0x0F	; 15
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	09 f0       	breq	.+2      	; 0x2bb8 <process_action+0xcc>
    2bb6:	e7 c1       	rjmp	.+974    	; 0x2f86 <process_action+0x49a>
    2bb8:	e0 c1       	rjmp	.+960    	; 0x2f7a <process_action+0x48e>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2bba:	88 23       	and	r24, r24
    2bbc:	19 f0       	breq	.+6      	; 0x2bc4 <process_action+0xd8>
    2bbe:	f2 94       	swap	r15
    2bc0:	90 ef       	ldi	r25, 0xF0	; 240
    2bc2:	f9 22       	and	r15, r25
                                                                action.key.mods<<4;
                if (event.pressed) {
    2bc4:	cc 20       	and	r12, r12
    2bc6:	49 f0       	breq	.+18     	; 0x2bda <process_action+0xee>
                    if (mods) {
    2bc8:	ff 20       	and	r15, r15
    2bca:	09 f4       	brne	.+2      	; 0x2bce <process_action+0xe2>
    2bcc:	b9 c1       	rjmp	.+882    	; 0x2f40 <process_action+0x454>
                        add_weak_mods(mods);
    2bce:	8f 2d       	mov	r24, r15
    2bd0:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <add_weak_mods>
                        send_keyboard_report();
    2bd4:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
    2bd8:	b3 c1       	rjmp	.+870    	; 0x2f40 <process_action+0x454>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2bda:	80 2f       	mov	r24, r16
    2bdc:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <unregister_code>
                    if (mods) {
    2be0:	ff 20       	and	r15, r15
    2be2:	09 f4       	brne	.+2      	; 0x2be6 <process_action+0xfa>
    2be4:	d0 c1       	rjmp	.+928    	; 0x2f86 <process_action+0x49a>
                        del_weak_mods(mods);
    2be6:	8f 2d       	mov	r24, r15
    2be8:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <del_weak_mods>
                        send_keyboard_report();
    2bec:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
    2bf0:	ca c1       	rjmp	.+916    	; 0x2f86 <process_action+0x49a>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2bf2:	80 32       	cpi	r24, 0x20	; 32
    2bf4:	19 f0       	breq	.+6      	; 0x2bfc <process_action+0x110>
    2bf6:	f2 94       	swap	r15
    2bf8:	80 ef       	ldi	r24, 0xF0	; 240
    2bfa:	f8 22       	and	r15, r24
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2bfc:	00 23       	and	r16, r16
    2bfe:	19 f0       	breq	.+6      	; 0x2c06 <process_action+0x11a>
    2c00:	01 30       	cpi	r16, 0x01	; 1
    2c02:	79 f5       	brne	.+94     	; 0x2c62 <process_action+0x176>
    2c04:	24 c0       	rjmp	.+72     	; 0x2c4e <process_action+0x162>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2c06:	cc 20       	and	r12, r12
    2c08:	81 f0       	breq	.+32     	; 0x2c2a <process_action+0x13e>
                            if (tap_count == 0) {
    2c0a:	11 23       	and	r17, r17
    2c0c:	a1 f1       	breq	.+104    	; 0x2c76 <process_action+0x18a>
                                dprint("MODS_TAP: Oneshot: 0\n");
                                register_mods(mods);
                            } else if (tap_count == 1) {
    2c0e:	11 30       	cpi	r17, 0x01	; 1
    2c10:	21 f4       	brne	.+8      	; 0x2c1a <process_action+0x12e>
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2c12:	8f 2d       	mov	r24, r15
    2c14:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <set_oneshot_mods>
    2c18:	b6 c1       	rjmp	.+876    	; 0x2f86 <process_action+0x49a>
                    #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
                            } else if (tap_count == ONESHOT_TAP_TOGGLE) {
    2c1a:	12 30       	cpi	r17, 0x02	; 2
    2c1c:	61 f5       	brne	.+88     	; 0x2c76 <process_action+0x18a>
                                dprint("MODS_TAP: Toggling oneshot");
                                clear_oneshot_mods();
    2c1e:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <clear_oneshot_mods>
                                set_oneshot_locked_mods(mods);
    2c22:	8f 2d       	mov	r24, r15
    2c24:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <set_oneshot_locked_mods>
    2c28:	26 c0       	rjmp	.+76     	; 0x2c76 <process_action+0x18a>
                    #endif
                            } else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2c2a:	11 23       	and	r17, r17
    2c2c:	69 f0       	breq	.+26     	; 0x2c48 <process_action+0x15c>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            } else if (tap_count == 1) {
    2c2e:	11 30       	cpi	r17, 0x01	; 1
    2c30:	41 f4       	brne	.+16     	; 0x2c42 <process_action+0x156>
                                // Retain Oneshot mods
                    #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
                                if (mods & get_mods()) {
    2c32:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <get_mods>
    2c36:	8f 21       	and	r24, r15
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <process_action+0x150>
    2c3a:	a5 c1       	rjmp	.+842    	; 0x2f86 <process_action+0x49a>
                                    clear_oneshot_locked_mods();
    2c3c:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <clear_oneshot_locked_mods>
    2c40:	03 c0       	rjmp	.+6      	; 0x2c48 <process_action+0x15c>
                                    clear_oneshot_mods();
                                    unregister_mods(mods);
                                }
                            } else if (tap_count == ONESHOT_TAP_TOGGLE) {
    2c42:	12 30       	cpi	r17, 0x02	; 2
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <process_action+0x15c>
    2c46:	9f c1       	rjmp	.+830    	; 0x2f86 <process_action+0x49a>
                                // Toggle Oneshot Layer
                    #endif
                            } else {
                                clear_oneshot_mods();
    2c48:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <clear_oneshot_mods>
    2c4c:	1b c0       	rjmp	.+54     	; 0x2c84 <process_action+0x198>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2c4e:	cc 20       	and	r12, r12
    2c50:	21 f0       	breq	.+8      	; 0x2c5a <process_action+0x16e>
                            if (tap_count <= TAPPING_TOGGLE) {
    2c52:	16 30       	cpi	r17, 0x06	; 6
    2c54:	08 f0       	brcs	.+2      	; 0x2c58 <process_action+0x16c>
    2c56:	97 c1       	rjmp	.+814    	; 0x2f86 <process_action+0x49a>
    2c58:	0e c0       	rjmp	.+28     	; 0x2c76 <process_action+0x18a>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2c5a:	15 30       	cpi	r17, 0x05	; 5
    2c5c:	08 f0       	brcs	.+2      	; 0x2c60 <process_action+0x174>
    2c5e:	93 c1       	rjmp	.+806    	; 0x2f86 <process_action+0x49a>
    2c60:	11 c0       	rjmp	.+34     	; 0x2c84 <process_action+0x198>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2c62:	cc 20       	and	r12, r12
    2c64:	61 f0       	breq	.+24     	; 0x2c7e <process_action+0x192>
                            if (tap_count > 0) {
    2c66:	11 23       	and	r17, r17
    2c68:	31 f0       	breq	.+12     	; 0x2c76 <process_action+0x18a>
                                if (record->tap.interrupted) {
    2c6a:	f5 01       	movw	r30, r10
    2c6c:	85 81       	ldd	r24, Z+5	; 0x05
    2c6e:	80 ff       	sbrs	r24, 0
    2c70:	67 c1       	rjmp	.+718    	; 0x2f40 <process_action+0x454>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2c72:	8f 70       	andi	r24, 0x0F	; 15
    2c74:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    2c76:	8f 2d       	mov	r24, r15
    2c78:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <register_mods>
    2c7c:	84 c1       	rjmp	.+776    	; 0x2f86 <process_action+0x49a>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2c7e:	11 23       	and	r17, r17
    2c80:	09 f0       	breq	.+2      	; 0x2c84 <process_action+0x198>
    2c82:	69 c1       	rjmp	.+722    	; 0x2f56 <process_action+0x46a>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    2c84:	8f 2d       	mov	r24, r15
    2c86:	ff c0       	rjmp	.+510    	; 0x2e86 <process_action+0x39a>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2c88:	29 2f       	mov	r18, r25
    2c8a:	26 95       	lsr	r18
    2c8c:	26 95       	lsr	r18
    2c8e:	23 70       	andi	r18, 0x03	; 3
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	21 15       	cp	r18, r1
    2c94:	31 05       	cpc	r19, r1
    2c96:	29 f0       	breq	.+10     	; 0x2ca2 <process_action+0x1b6>
    2c98:	21 30       	cpi	r18, 0x01	; 1
    2c9a:	31 05       	cpc	r19, r1
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <process_action+0x1b4>
    2c9e:	73 c1       	rjmp	.+742    	; 0x2f86 <process_action+0x49a>
    2ca0:	0a c0       	rjmp	.+20     	; 0x2cb6 <process_action+0x1ca>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2ca2:	cc 20       	and	r12, r12
    2ca4:	19 f0       	breq	.+6      	; 0x2cac <process_action+0x1c0>
                        host_system_send(action.usage.code);
    2ca6:	80 2f       	mov	r24, r16
    2ca8:	93 70       	andi	r25, 0x03	; 3
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <process_action+0x1c4>
                    } else {
                        host_system_send(0);
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0e 94 15 13 	call	0x262a	; 0x262a <host_system_send>
    2cb4:	68 c1       	rjmp	.+720    	; 0x2f86 <process_action+0x49a>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2cb6:	cc 20       	and	r12, r12
    2cb8:	19 f0       	breq	.+6      	; 0x2cc0 <process_action+0x1d4>
                        host_consumer_send(action.usage.code);
    2cba:	80 2f       	mov	r24, r16
    2cbc:	93 70       	andi	r25, 0x03	; 3
    2cbe:	02 c0       	rjmp	.+4      	; 0x2cc4 <process_action+0x1d8>
                    } else {
                        host_consumer_send(0);
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	0e 94 2b 13 	call	0x2656	; 0x2656 <host_consumer_send>
    2cc8:	5e c1       	rjmp	.+700    	; 0x2f86 <process_action+0x49a>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2cca:	80 2f       	mov	r24, r16
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2ccc:	cc 20       	and	r12, r12
    2cce:	19 f0       	breq	.+6      	; 0x2cd6 <process_action+0x1ea>
                mousekey_on(action.key.code);
    2cd0:	0e 94 7d 22 	call	0x44fa	; 0x44fa <mousekey_on>
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <process_action+0x1ee>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2cd6:	0e 94 e7 22 	call	0x45ce	; 0x45ce <mousekey_off>
                mousekey_send();
    2cda:	0e 94 6d 23 	call	0x46da	; 0x46da <mousekey_send>
    2cde:	53 c1       	rjmp	.+678    	; 0x2f86 <process_action+0x49a>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2ce0:	89 2f       	mov	r24, r25
    2ce2:	83 70       	andi	r24, 0x03	; 3
    2ce4:	09 f0       	breq	.+2      	; 0x2ce8 <process_action+0x1fc>
    2ce6:	55 c0       	rjmp	.+170    	; 0x2d92 <process_action+0x2a6>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2ce8:	cc 20       	and	r12, r12
    2cea:	09 f0       	breq	.+2      	; 0x2cee <process_action+0x202>
    2cec:	4c c1       	rjmp	.+664    	; 0x2f86 <process_action+0x49a>
                    uint8_t shift = action.layer_bitop.part*4;
    2cee:	80 2f       	mov	r24, r16
    2cf0:	82 95       	swap	r24
    2cf2:	86 95       	lsr	r24
    2cf4:	87 70       	andi	r24, 0x07	; 7
    2cf6:	88 0f       	add	r24, r24
    2cf8:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2cfa:	20 2f       	mov	r18, r16
    2cfc:	2f 70       	andi	r18, 0x0F	; 15
    2cfe:	c2 2e       	mov	r12, r18
    2d00:	dd 24       	eor	r13, r13
    2d02:	ee 24       	eor	r14, r14
    2d04:	ff 24       	eor	r15, r15
    2d06:	08 2e       	mov	r0, r24
    2d08:	04 c0       	rjmp	.+8      	; 0x2d12 <process_action+0x226>
    2d0a:	cc 0c       	add	r12, r12
    2d0c:	dd 1c       	adc	r13, r13
    2d0e:	ee 1c       	adc	r14, r14
    2d10:	ff 1c       	adc	r15, r15
    2d12:	0a 94       	dec	r0
    2d14:	d2 f7       	brpl	.-12     	; 0x2d0a <process_action+0x21e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2d16:	04 ff       	sbrs	r16, 4
    2d18:	10 c0       	rjmp	.+32     	; 0x2d3a <process_action+0x24e>
    2d1a:	0f e0       	ldi	r16, 0x0F	; 15
    2d1c:	10 e0       	ldi	r17, 0x00	; 0
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	04 c0       	rjmp	.+8      	; 0x2d2c <process_action+0x240>
    2d24:	00 0f       	add	r16, r16
    2d26:	11 1f       	adc	r17, r17
    2d28:	22 1f       	adc	r18, r18
    2d2a:	33 1f       	adc	r19, r19
    2d2c:	8a 95       	dec	r24
    2d2e:	d2 f7       	brpl	.-12     	; 0x2d24 <process_action+0x238>
    2d30:	00 95       	com	r16
    2d32:	10 95       	com	r17
    2d34:	20 95       	com	r18
    2d36:	30 95       	com	r19
    2d38:	03 c0       	rjmp	.+6      	; 0x2d40 <process_action+0x254>
    2d3a:	00 e0       	ldi	r16, 0x00	; 0
    2d3c:	10 e0       	ldi	r17, 0x00	; 0
    2d3e:	98 01       	movw	r18, r16
                    switch (action.layer_bitop.op) {
    2d40:	96 95       	lsr	r25
    2d42:	96 95       	lsr	r25
    2d44:	93 70       	andi	r25, 0x03	; 3
    2d46:	89 2f       	mov	r24, r25
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	82 30       	cpi	r24, 0x02	; 2
    2d4c:	91 05       	cpc	r25, r1
    2d4e:	79 f0       	breq	.+30     	; 0x2d6e <process_action+0x282>
    2d50:	83 30       	cpi	r24, 0x03	; 3
    2d52:	91 05       	cpc	r25, r1
    2d54:	a9 f0       	breq	.+42     	; 0x2d80 <process_action+0x294>
    2d56:	c0 2a       	or	r12, r16
    2d58:	d1 2a       	or	r13, r17
    2d5a:	e2 2a       	or	r14, r18
    2d5c:	f3 2a       	or	r15, r19
    2d5e:	81 30       	cpi	r24, 0x01	; 1
    2d60:	91 05       	cpc	r25, r1
    2d62:	91 f0       	breq	.+36     	; 0x2d88 <process_action+0x29c>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2d64:	c7 01       	movw	r24, r14
    2d66:	b6 01       	movw	r22, r12
    2d68:	0e 94 80 1c 	call	0x3900	; 0x3900 <default_layer_and>
    2d6c:	0c c1       	rjmp	.+536    	; 0x2f86 <process_action+0x49a>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2d6e:	c0 2a       	or	r12, r16
    2d70:	d1 2a       	or	r13, r17
    2d72:	e2 2a       	or	r14, r18
    2d74:	f3 2a       	or	r15, r19
    2d76:	c7 01       	movw	r24, r14
    2d78:	b6 01       	movw	r22, r12
    2d7a:	0e 94 93 1c 	call	0x3926	; 0x3926 <default_layer_xor>
    2d7e:	03 c1       	rjmp	.+518    	; 0x2f86 <process_action+0x49a>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2d80:	c9 01       	movw	r24, r18
    2d82:	b8 01       	movw	r22, r16
    2d84:	0e 94 80 1c 	call	0x3900	; 0x3900 <default_layer_and>
    2d88:	c7 01       	movw	r24, r14
    2d8a:	b6 01       	movw	r22, r12
    2d8c:	0e 94 6d 1c 	call	0x38da	; 0x38da <default_layer_or>
    2d90:	fa c0       	rjmp	.+500    	; 0x2f86 <process_action+0x49a>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2d92:	cc 20       	and	r12, r12
    2d94:	19 f0       	breq	.+6      	; 0x2d9c <process_action+0x2b0>
    2d96:	80 ff       	sbrs	r24, 0
    2d98:	f6 c0       	rjmp	.+492    	; 0x2f86 <process_action+0x49a>
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <process_action+0x2b4>
    2d9c:	81 ff       	sbrs	r24, 1
    2d9e:	f3 c0       	rjmp	.+486    	; 0x2f86 <process_action+0x49a>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2da0:	80 2f       	mov	r24, r16
    2da2:	82 95       	swap	r24
    2da4:	86 95       	lsr	r24
    2da6:	87 70       	andi	r24, 0x07	; 7
    2da8:	88 0f       	add	r24, r24
    2daa:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2dac:	40 2f       	mov	r20, r16
    2dae:	4f 70       	andi	r20, 0x0F	; 15
    2db0:	c4 2e       	mov	r12, r20
    2db2:	dd 24       	eor	r13, r13
    2db4:	ee 24       	eor	r14, r14
    2db6:	ff 24       	eor	r15, r15
    2db8:	08 2e       	mov	r0, r24
    2dba:	04 c0       	rjmp	.+8      	; 0x2dc4 <process_action+0x2d8>
    2dbc:	cc 0c       	add	r12, r12
    2dbe:	dd 1c       	adc	r13, r13
    2dc0:	ee 1c       	adc	r14, r14
    2dc2:	ff 1c       	adc	r15, r15
    2dc4:	0a 94       	dec	r0
    2dc6:	d2 f7       	brpl	.-12     	; 0x2dbc <process_action+0x2d0>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2dc8:	04 ff       	sbrs	r16, 4
    2dca:	10 c0       	rjmp	.+32     	; 0x2dec <process_action+0x300>
    2dcc:	4f e0       	ldi	r20, 0x0F	; 15
    2dce:	50 e0       	ldi	r21, 0x00	; 0
    2dd0:	60 e0       	ldi	r22, 0x00	; 0
    2dd2:	70 e0       	ldi	r23, 0x00	; 0
    2dd4:	04 c0       	rjmp	.+8      	; 0x2dde <process_action+0x2f2>
    2dd6:	44 0f       	add	r20, r20
    2dd8:	55 1f       	adc	r21, r21
    2dda:	66 1f       	adc	r22, r22
    2ddc:	77 1f       	adc	r23, r23
    2dde:	8a 95       	dec	r24
    2de0:	d2 f7       	brpl	.-12     	; 0x2dd6 <process_action+0x2ea>
    2de2:	40 95       	com	r20
    2de4:	50 95       	com	r21
    2de6:	60 95       	com	r22
    2de8:	70 95       	com	r23
    2dea:	03 c0       	rjmp	.+6      	; 0x2df2 <process_action+0x306>
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	50 e0       	ldi	r21, 0x00	; 0
    2df0:	ba 01       	movw	r22, r20
                    switch (action.layer_bitop.op) {
    2df2:	96 95       	lsr	r25
    2df4:	96 95       	lsr	r25
    2df6:	93 70       	andi	r25, 0x03	; 3
    2df8:	89 2f       	mov	r24, r25
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	82 30       	cpi	r24, 0x02	; 2
    2dfe:	91 05       	cpc	r25, r1
    2e00:	91 f0       	breq	.+36     	; 0x2e26 <process_action+0x33a>
    2e02:	83 30       	cpi	r24, 0x03	; 3
    2e04:	91 05       	cpc	r25, r1
    2e06:	c1 f0       	breq	.+48     	; 0x2e38 <process_action+0x34c>
    2e08:	4c 29       	or	r20, r12
    2e0a:	5d 29       	or	r21, r13
    2e0c:	6e 29       	or	r22, r14
    2e0e:	7f 29       	or	r23, r15
    2e10:	81 30       	cpi	r24, 0x01	; 1
    2e12:	91 05       	cpc	r25, r1
    2e14:	29 f0       	breq	.+10     	; 0x2e20 <process_action+0x334>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2e16:	cb 01       	movw	r24, r22
    2e18:	ba 01       	movw	r22, r20
    2e1a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <layer_and>
    2e1e:	b3 c0       	rjmp	.+358    	; 0x2f86 <process_action+0x49a>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    2e20:	cb 01       	movw	r24, r22
    2e22:	ba 01       	movw	r22, r20
    2e24:	0f c0       	rjmp	.+30     	; 0x2e44 <process_action+0x358>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2e26:	4c 29       	or	r20, r12
    2e28:	5d 29       	or	r21, r13
    2e2a:	6e 29       	or	r22, r14
    2e2c:	7f 29       	or	r23, r15
    2e2e:	cb 01       	movw	r24, r22
    2e30:	ba 01       	movw	r22, r20
    2e32:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <layer_xor>
    2e36:	a7 c0       	rjmp	.+334    	; 0x2f86 <process_action+0x49a>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2e38:	cb 01       	movw	r24, r22
    2e3a:	ba 01       	movw	r22, r20
    2e3c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <layer_and>
    2e40:	c7 01       	movw	r24, r14
    2e42:	b6 01       	movw	r22, r12
    2e44:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <layer_or>
    2e48:	9e c0       	rjmp	.+316    	; 0x2f86 <process_action+0x49a>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2e4a:	01 3f       	cpi	r16, 0xF1	; 241
    2e4c:	69 f1       	breq	.+90     	; 0x2ea8 <process_action+0x3bc>
    2e4e:	02 3f       	cpi	r16, 0xF2	; 242
    2e50:	30 f4       	brcc	.+12     	; 0x2e5e <process_action+0x372>
    2e52:	00 3e       	cpi	r16, 0xE0	; 224
    2e54:	08 f4       	brcc	.+2      	; 0x2e58 <process_action+0x36c>
    2e56:	70 c0       	rjmp	.+224    	; 0x2f38 <process_action+0x44c>
    2e58:	00 3f       	cpi	r16, 0xF0	; 240
    2e5a:	48 f0       	brcs	.+18     	; 0x2e6e <process_action+0x382>
    2e5c:	17 c0       	rjmp	.+46     	; 0x2e8c <process_action+0x3a0>
    2e5e:	03 3f       	cpi	r16, 0xF3	; 243
    2e60:	79 f1       	breq	.+94     	; 0x2ec0 <process_action+0x3d4>
    2e62:	03 3f       	cpi	r16, 0xF3	; 243
    2e64:	38 f1       	brcs	.+78     	; 0x2eb4 <process_action+0x3c8>
    2e66:	04 3f       	cpi	r16, 0xF4	; 244
    2e68:	09 f0       	breq	.+2      	; 0x2e6c <process_action+0x380>
    2e6a:	66 c0       	rjmp	.+204    	; 0x2f38 <process_action+0x44c>
    2e6c:	33 c0       	rjmp	.+102    	; 0x2ed4 <process_action+0x3e8>
    2e6e:	0f 70       	andi	r16, 0x0F	; 15
    2e70:	89 2f       	mov	r24, r25
    2e72:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2e74:	cc 20       	and	r12, r12
    2e76:	21 f0       	breq	.+8      	; 0x2e80 <process_action+0x394>
                        layer_on(action.layer_tap.val);
    2e78:	0e 94 bc 1c 	call	0x3978	; 0x3978 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2e7c:	80 2f       	mov	r24, r16
    2e7e:	fc ce       	rjmp	.-520    	; 0x2c78 <process_action+0x18c>
                    } else {
                        layer_off(action.layer_tap.val);
    2e80:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2e84:	80 2f       	mov	r24, r16
    2e86:	0e 94 6f 15 	call	0x2ade	; 0x2ade <unregister_mods>
    2e8a:	7d c0       	rjmp	.+250    	; 0x2f86 <process_action+0x49a>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2e8c:	cc 20       	and	r12, r12
    2e8e:	21 f0       	breq	.+8      	; 0x2e98 <process_action+0x3ac>
                        if (tap_count < TAPPING_TOGGLE) {
    2e90:	15 30       	cpi	r17, 0x05	; 5
    2e92:	08 f0       	brcs	.+2      	; 0x2e96 <process_action+0x3aa>
    2e94:	78 c0       	rjmp	.+240    	; 0x2f86 <process_action+0x49a>
    2e96:	03 c0       	rjmp	.+6      	; 0x2e9e <process_action+0x3b2>
                            layer_invert(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2e98:	16 30       	cpi	r17, 0x06	; 6
    2e9a:	08 f0       	brcs	.+2      	; 0x2e9e <process_action+0x3b2>
    2e9c:	74 c0       	rjmp	.+232    	; 0x2f86 <process_action+0x49a>
                            layer_invert(action.layer_tap.val);
    2e9e:	89 2f       	mov	r24, r25
    2ea0:	8f 71       	andi	r24, 0x1F	; 31
    2ea2:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <layer_invert>
    2ea6:	6f c0       	rjmp	.+222    	; 0x2f86 <process_action+0x49a>
    2ea8:	89 2f       	mov	r24, r25
    2eaa:	8f 71       	andi	r24, 0x1F	; 31
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2eac:	cc 20       	and	r12, r12
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <process_action+0x3c6>
    2eb0:	58 c0       	rjmp	.+176    	; 0x2f62 <process_action+0x476>
    2eb2:	4c c0       	rjmp	.+152    	; 0x2f4c <process_action+0x460>
    2eb4:	89 2f       	mov	r24, r25
    2eb6:	8f 71       	andi	r24, 0x1F	; 31
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2eb8:	cc 20       	and	r12, r12
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <process_action+0x3d2>
    2ebc:	47 c0       	rjmp	.+142    	; 0x2f4c <process_action+0x460>
    2ebe:	51 c0       	rjmp	.+162    	; 0x2f62 <process_action+0x476>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2ec0:	cc 20       	and	r12, r12
    2ec2:	29 f0       	breq	.+10     	; 0x2ece <process_action+0x3e2>
    2ec4:	89 2f       	mov	r24, r25
    2ec6:	8f 71       	andi	r24, 0x1F	; 31
    2ec8:	0e 94 ac 1c 	call	0x3958	; 0x3958 <layer_move>
    2ecc:	5c c0       	rjmp	.+184    	; 0x2f86 <process_action+0x49a>
                                    layer_clear();
    2ece:	0e 94 a6 1c 	call	0x394c	; 0x394c <layer_clear>
    2ed2:	59 c0       	rjmp	.+178    	; 0x2f86 <process_action+0x49a>
                case OP_ONESHOT:
                    // Oneshot modifier
                #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
                    do_release_oneshot = false;
                    if (event.pressed) {
                        del_mods(get_oneshot_locked_mods());
    2ed4:	9e 83       	std	Y+6, r25	; 0x06
            #ifndef NO_ACTION_ONESHOT
                case OP_ONESHOT:
                    // Oneshot modifier
                #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
                    do_release_oneshot = false;
                    if (event.pressed) {
    2ed6:	cc 20       	and	r12, r12
    2ed8:	d1 f0       	breq	.+52     	; 0x2f0e <process_action+0x422>
                        del_mods(get_oneshot_locked_mods());
    2eda:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <get_oneshot_locked_mods>
    2ede:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <del_mods>
                        if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
    2ee2:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <get_oneshot_layer_state>
    2ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee8:	84 30       	cpi	r24, 0x04	; 4
    2eea:	31 f4       	brne	.+12     	; 0x2ef8 <process_action+0x40c>
                            reset_oneshot_layer();
    2eec:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <reset_oneshot_layer>
                            layer_off(action.layer_tap.val);
    2ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef2:	89 2f       	mov	r24, r25
    2ef4:	8f 71       	andi	r24, 0x1F	; 31
    2ef6:	58 c0       	rjmp	.+176    	; 0x2fa8 <process_action+0x4bc>
                            break;
                        } else if (tap_count < ONESHOT_TAP_TOGGLE) {
    2ef8:	12 30       	cpi	r17, 0x02	; 2
    2efa:	08 f0       	brcs	.+2      	; 0x2efe <process_action+0x412>
    2efc:	6b c0       	rjmp	.+214    	; 0x2fd4 <process_action+0x4e8>
                            layer_on(action.layer_tap.val);
    2efe:	19 2f       	mov	r17, r25
    2f00:	1f 71       	andi	r17, 0x1F	; 31
    2f02:	81 2f       	mov	r24, r17
    2f04:	0e 94 bc 1c 	call	0x3978	; 0x3978 <layer_on>
                            set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
    2f08:	81 2f       	mov	r24, r17
    2f0a:	63 e0       	ldi	r22, 0x03	; 3
    2f0c:	0e c0       	rjmp	.+28     	; 0x2f2a <process_action+0x43e>
                        }
                    } else {
                        add_mods(get_oneshot_locked_mods());
    2f0e:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <get_oneshot_locked_mods>
    2f12:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <add_mods>
                        if (tap_count >= ONESHOT_TAP_TOGGLE) {
    2f16:	12 30       	cpi	r17, 0x02	; 2
    2f18:	58 f0       	brcs	.+22     	; 0x2f30 <process_action+0x444>
                            reset_oneshot_layer();
    2f1a:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <reset_oneshot_layer>
                            clear_oneshot_locked_mods();
    2f1e:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <clear_oneshot_locked_mods>
                            set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
    2f22:	9e 81       	ldd	r25, Y+6	; 0x06
    2f24:	89 2f       	mov	r24, r25
    2f26:	8f 71       	andi	r24, 0x1F	; 31
    2f28:	64 e0       	ldi	r22, 0x04	; 4
    2f2a:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <set_oneshot_layer>
    2f2e:	52 c0       	rjmp	.+164    	; 0x2fd4 <process_action+0x4e8>
                        } else {
                            clear_oneshot_layer_state(ONESHOT_PRESSED);
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <clear_oneshot_layer_state>
    2f36:	4e c0       	rjmp	.+156    	; 0x2fd4 <process_action+0x4e8>
                #endif
                    break;
            #endif
                default:
                    /* tap key */
                    if (event.pressed) {
    2f38:	cc 20       	and	r12, r12
    2f3a:	59 f0       	breq	.+22     	; 0x2f52 <process_action+0x466>
                        if (tap_count > 0) {
    2f3c:	11 23       	and	r17, r17
    2f3e:	21 f0       	breq	.+8      	; 0x2f48 <process_action+0x45c>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2f40:	80 2f       	mov	r24, r16
    2f42:	0e 94 43 14 	call	0x2886	; 0x2886 <register_code>
    2f46:	1f c0       	rjmp	.+62     	; 0x2f86 <process_action+0x49a>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
    2f48:	89 2f       	mov	r24, r25
    2f4a:	8f 71       	andi	r24, 0x1F	; 31
    2f4c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <layer_on>
    2f50:	1a c0       	rjmp	.+52     	; 0x2f86 <process_action+0x49a>
                        }
                    } else {
                        if (tap_count > 0) {
    2f52:	11 23       	and	r17, r17
    2f54:	21 f0       	breq	.+8      	; 0x2f5e <process_action+0x472>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2f56:	80 2f       	mov	r24, r16
    2f58:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <unregister_code>
    2f5c:	14 c0       	rjmp	.+40     	; 0x2f86 <process_action+0x49a>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
                            layer_off(action.layer_tap.val);
    2f5e:	89 2f       	mov	r24, r25
    2f60:	8f 71       	andi	r24, 0x1F	; 31
    2f62:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <layer_off>
    2f66:	0f c0       	rjmp	.+30     	; 0x2f86 <process_action+0x49a>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2f68:	49 2f       	mov	r20, r25
    2f6a:	4f 70       	andi	r20, 0x0F	; 15
    2f6c:	c5 01       	movw	r24, r10
    2f6e:	60 2f       	mov	r22, r16
    2f70:	0e 94 05 20 	call	0x400a	; 0x400a <action_get_macro>
    2f74:	0e 94 cd 1b 	call	0x379a	; 0x379a <action_macro_play>
            break;
    2f78:	06 c0       	rjmp	.+12     	; 0x2f86 <process_action+0x49a>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2f7a:	49 2f       	mov	r20, r25
    2f7c:	4f 70       	andi	r20, 0x0F	; 15
    2f7e:	c5 01       	movw	r24, r10
    2f80:	60 2f       	mov	r22, r16
    2f82:	0e 94 03 07 	call	0xe06	; 0xe06 <action_function>

#ifndef NO_ACTION_ONESHOT
    /* Because we switch layers after a oneshot event, we need to release the
     * key before we leave the layer or no key up event will be generated.
     */
    if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
    2f86:	99 20       	and	r9, r9
    2f88:	29 f1       	breq	.+74     	; 0x2fd4 <process_action+0x4e8>
    2f8a:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <get_oneshot_layer_state>
    2f8e:	80 fd       	sbrc	r24, 0
    2f90:	21 c0       	rjmp	.+66     	; 0x2fd4 <process_action+0x4e8>
        record->event.pressed = false;
    2f92:	f5 01       	movw	r30, r10
    2f94:	12 82       	std	Z+2, r1	; 0x02
        layer_on(get_oneshot_layer());
    2f96:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <get_oneshot_layer>
    2f9a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <layer_on>
        process_action(record);
    2f9e:	c5 01       	movw	r24, r10
    2fa0:	0e 94 76 15 	call	0x2aec	; 0x2aec <process_action>
        layer_off(get_oneshot_layer());
    2fa4:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <get_oneshot_layer>
    2fa8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <layer_off>
    2fac:	13 c0       	rjmp	.+38     	; 0x2fd4 <process_action+0x4e8>
        dprintf("Oneshot layer: timeout\n");
        clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
    }
#endif

    action_t action = layer_switch_get_action(event.key);
    2fae:	39 83       	std	Y+1, r19	; 0x01
    2fb0:	2a 83       	std	Y+2, r18	; 0x02
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb6:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <layer_switch_get_action>
    2fba:	08 2f       	mov	r16, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2fc2:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <default_layer_debug>
#endif
    dprintln();


#ifndef NO_ACTION_ONESHOT
    if (is_oneshot_layer_active() && event.pressed) {
    2fc6:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <is_oneshot_layer_active>
    2fca:	9e 81       	ldd	r25, Y+6	; 0x06
    2fcc:	88 23       	and	r24, r24
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <process_action+0x4e6>
    2fd0:	b9 cd       	rjmp	.-1166   	; 0x2b44 <process_action+0x58>
    2fd2:	c5 cd       	rjmp	.-1142   	; 0x2b5e <process_action+0x72>
        layer_on(get_oneshot_layer());
        process_action(record);
        layer_off(get_oneshot_layer());
    }
#endif
}
    2fd4:	26 96       	adiw	r28, 0x06	; 6
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	ff 90       	pop	r15
    2fea:	ef 90       	pop	r14
    2fec:	df 90       	pop	r13
    2fee:	cf 90       	pop	r12
    2ff0:	bf 90       	pop	r11
    2ff2:	af 90       	pop	r10
    2ff4:	9f 90       	pop	r9
    2ff6:	08 95       	ret

00002ff8 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2ff8:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <clear_weak_mods>
    clear_keys();
    2ffc:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <clear_keys>
    send_keyboard_report();
    3000:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    3004:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <mousekey_clear>
    mousekey_send();
    3008:	0e 94 6d 23 	call	0x46da	; 0x46da <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	0e 94 15 13 	call	0x262a	; 0x262a <host_system_send>
    host_consumer_send(0);
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	0e 94 2b 13 	call	0x2656	; 0x2656 <host_consumer_send>
#endif
}
    301c:	08 95       	ret

0000301e <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    301e:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <clear_mods>
    clear_keyboard_but_mods();
    3022:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <clear_keyboard_but_mods>
}
    3026:	08 95       	ret

00003028 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    3028:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <layer_switch_get_action>

    switch (action.kind.id) {
    302c:	29 2f       	mov	r18, r25
    302e:	22 95       	swap	r18
    3030:	2f 70       	andi	r18, 0x0F	; 15
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	2c 30       	cpi	r18, 0x0C	; 12
    3036:	31 05       	cpc	r19, r1
    3038:	4c f4       	brge	.+18     	; 0x304c <is_tap_key+0x24>
    303a:	2a 30       	cpi	r18, 0x0A	; 10
    303c:	31 05       	cpc	r19, r1
    303e:	6c f4       	brge	.+26     	; 0x305a <is_tap_key+0x32>
    3040:	22 50       	subi	r18, 0x02	; 2
    3042:	30 40       	sbci	r19, 0x00	; 0
    3044:	22 30       	cpi	r18, 0x02	; 2
    3046:	31 05       	cpc	r19, r1
    3048:	b8 f4       	brcc	.+46     	; 0x3078 <is_tap_key+0x50>
    304a:	07 c0       	rjmp	.+14     	; 0x305a <is_tap_key+0x32>
    304c:	2c 30       	cpi	r18, 0x0C	; 12
    304e:	31 05       	cpc	r19, r1
    3050:	79 f0       	breq	.+30     	; 0x3070 <is_tap_key+0x48>
    3052:	2f 30       	cpi	r18, 0x0F	; 15
    3054:	31 05       	cpc	r19, r1
    3056:	81 f4       	brne	.+32     	; 0x3078 <is_tap_key+0x50>
    3058:	0b c0       	rjmp	.+22     	; 0x3070 <is_tap_key+0x48>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    305a:	80 3f       	cpi	r24, 0xF0	; 240
    305c:	39 f0       	breq	.+14     	; 0x306c <is_tap_key+0x44>
    305e:	81 3f       	cpi	r24, 0xF1	; 241
    3060:	18 f4       	brcc	.+6      	; 0x3068 <is_tap_key+0x40>
    3062:	80 3e       	cpi	r24, 0xE0	; 224
    3064:	58 f4       	brcc	.+22     	; 0x307c <is_tap_key+0x54>
    3066:	02 c0       	rjmp	.+4      	; 0x306c <is_tap_key+0x44>
    3068:	84 3f       	cpi	r24, 0xF4	; 244
    306a:	41 f4       	brne	.+16     	; 0x307c <is_tap_key+0x54>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                case OP_ONESHOT:
                    return true;
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    3070:	9f 70       	andi	r25, 0x0F	; 15
    host_system_send(0);
    host_consumer_send(0);
#endif
}

bool is_tap_key(keypos_t key)
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	93 fd       	sbrc	r25, 3
    3076:	03 c0       	rjmp	.+6      	; 0x307e <is_tap_key+0x56>
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	08 95       	ret
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                case OP_ONESHOT:
                    return true;
            }
            return false;
    307c:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    307e:	08 95       	ret

00003080 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	00 d0       	rcall	.+0      	; 0x3086 <debug_event+0x6>
    3086:	00 d0       	rcall	.+0      	; 0x3088 <debug_event+0x8>
    3088:	0f 92       	push	r0
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	08 95       	ret

0000309e <debug_record>:

void debug_record(keyrecord_t record)
{
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	00 d0       	rcall	.+0      	; 0x30a4 <debug_record+0x6>
    30a4:	00 d0       	rcall	.+0      	; 0x30a6 <debug_record+0x8>
    30a6:	00 d0       	rcall	.+0      	; 0x30a8 <debug_record+0xa>
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    30ac:	26 96       	adiw	r28, 0x06	; 6
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	f8 94       	cli
    30b2:	de bf       	out	0x3e, r29	; 62
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	cd bf       	out	0x3d, r28	; 61
    30b8:	df 91       	pop	r29
    30ba:	cf 91       	pop	r28
    30bc:	08 95       	ret

000030be <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30c2:	c0 91 d6 01 	lds	r28, 0x01D6
    30c6:	14 c0       	rjmp	.+40     	; 0x30f0 <debug_waiting_buffer+0x32>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    30c8:	d0 e0       	ldi	r29, 0x00	; 0
    30ca:	fe 01       	movw	r30, r28
    30cc:	ee 0f       	add	r30, r30
    30ce:	ff 1f       	adc	r31, r31
    30d0:	ec 0f       	add	r30, r28
    30d2:	fd 1f       	adc	r31, r29
    30d4:	ee 0f       	add	r30, r30
    30d6:	ff 1f       	adc	r31, r31
    30d8:	e9 52       	subi	r30, 0x29	; 41
    30da:	fe 4f       	sbci	r31, 0xFE	; 254
    30dc:	40 81       	ld	r20, Z
    30de:	51 81       	ldd	r21, Z+1	; 0x01
    30e0:	62 81       	ldd	r22, Z+2	; 0x02
    30e2:	73 81       	ldd	r23, Z+3	; 0x03
    30e4:	84 81       	ldd	r24, Z+4	; 0x04
    30e6:	95 81       	ldd	r25, Z+5	; 0x05
    30e8:	0e 94 4f 18 	call	0x309e	; 0x309e <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30ec:	21 96       	adiw	r28, 0x01	; 1
    30ee:	c7 70       	andi	r28, 0x07	; 7
    30f0:	80 91 07 02 	lds	r24, 0x0207
    30f4:	c8 17       	cp	r28, r24
    30f6:	41 f7       	brne	.-48     	; 0x30c8 <debug_waiting_buffer+0xa>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	08 95       	ret

000030fe <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    30fe:	40 91 d0 01 	lds	r20, 0x01D0
    3102:	50 91 d1 01 	lds	r21, 0x01D1
    3106:	60 91 d2 01 	lds	r22, 0x01D2
    310a:	70 91 d3 01 	lds	r23, 0x01D3
    310e:	80 91 d4 01 	lds	r24, 0x01D4
    3112:	90 91 d5 01 	lds	r25, 0x01D5
    3116:	0e 94 4f 18 	call	0x309e	; 0x309e <debug_record>
}
    311a:	08 95       	ret

0000311c <IS_NOEVENT.isra.0>:
    311c:	41 15       	cp	r20, r1
    311e:	51 05       	cpc	r21, r1
    3120:	51 f0       	breq	.+20     	; 0x3136 <IS_NOEVENT.isra.0+0x1a>
    3122:	6f 3f       	cpi	r22, 0xFF	; 255
    3124:	59 f4       	brne	.+22     	; 0x313c <IS_NOEVENT.isra.0+0x20>
    3126:	21 e0       	ldi	r18, 0x01	; 1
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	8f 3f       	cpi	r24, 0xFF	; 255
    312c:	11 f0       	breq	.+4      	; 0x3132 <IS_NOEVENT.isra.0+0x16>
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	c9 01       	movw	r24, r18
    3134:	08 95       	ret
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	08 95       	ret
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	08 95       	ret

00003142 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    3142:	cf 92       	push	r12
    3144:	df 92       	push	r13
    3146:	ef 92       	push	r14
    3148:	ff 92       	push	r15
    314a:	0f 93       	push	r16
    314c:	1f 93       	push	r17
    314e:	cf 93       	push	r28
    3150:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    3152:	80 91 d5 01 	lds	r24, 0x01D5
    3156:	82 95       	swap	r24
    3158:	8f 70       	andi	r24, 0x0F	; 15
    315a:	09 f0       	breq	.+2      	; 0x315e <waiting_buffer_scan_tap+0x1c>
    315c:	5c c0       	rjmp	.+184    	; 0x3216 <waiting_buffer_scan_tap+0xd4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    315e:	80 91 d2 01 	lds	r24, 0x01D2
    3162:	88 23       	and	r24, r24
    3164:	09 f4       	brne	.+2      	; 0x3168 <waiting_buffer_scan_tap+0x26>
    3166:	57 c0       	rjmp	.+174    	; 0x3216 <waiting_buffer_scan_tap+0xd4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3168:	c0 91 d6 01 	lds	r28, 0x01D6
    316c:	e0 90 07 02 	lds	r14, 0x0207
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3170:	d0 91 d0 01 	lds	r29, 0x01D0
    3174:	f0 90 d1 01 	lds	r15, 0x01D1
    3178:	00 91 d3 01 	lds	r16, 0x01D3
    317c:	10 91 d4 01 	lds	r17, 0x01D4
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    3180:	68 01       	movw	r12, r16
    3182:	c0 94       	com	r12
    3184:	d0 94       	com	r13
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3186:	44 c0       	rjmp	.+136    	; 0x3210 <waiting_buffer_scan_tap+0xce>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3188:	8d 2f       	mov	r24, r29
    318a:	6f 2d       	mov	r22, r15
    318c:	a8 01       	movw	r20, r16
    318e:	0e 94 8e 18 	call	0x311c	; 0x311c <IS_NOEVENT.isra.0>
    3192:	88 23       	and	r24, r24
    3194:	d9 f5       	brne	.+118    	; 0x320c <waiting_buffer_scan_tap+0xca>
    3196:	2c 2f       	mov	r18, r28
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	f9 01       	movw	r30, r18
    319c:	ee 0f       	add	r30, r30
    319e:	ff 1f       	adc	r31, r31
    31a0:	e2 0f       	add	r30, r18
    31a2:	f3 1f       	adc	r31, r19
    31a4:	ee 0f       	add	r30, r30
    31a6:	ff 1f       	adc	r31, r31
    31a8:	e9 52       	subi	r30, 0x29	; 41
    31aa:	fe 4f       	sbci	r31, 0xFE	; 254
    31ac:	81 81       	ldd	r24, Z+1	; 0x01
    31ae:	f8 16       	cp	r15, r24
    31b0:	69 f5       	brne	.+90     	; 0x320c <waiting_buffer_scan_tap+0xca>
    31b2:	80 81       	ld	r24, Z
    31b4:	d8 17       	cp	r29, r24
    31b6:	51 f5       	brne	.+84     	; 0x320c <waiting_buffer_scan_tap+0xca>
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	88 23       	and	r24, r24
    31bc:	39 f5       	brne	.+78     	; 0x320c <waiting_buffer_scan_tap+0xca>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    31be:	83 81       	ldd	r24, Z+3	; 0x03
    31c0:	94 81       	ldd	r25, Z+4	; 0x04
    31c2:	80 17       	cp	r24, r16
    31c4:	91 07       	cpc	r25, r17
    31c6:	18 f0       	brcs	.+6      	; 0x31ce <waiting_buffer_scan_tap+0x8c>
    31c8:	80 1b       	sub	r24, r16
    31ca:	91 0b       	sbc	r25, r17
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <waiting_buffer_scan_tap+0x90>
    31ce:	8c 0d       	add	r24, r12
    31d0:	9d 1d       	adc	r25, r13
    31d2:	88 3c       	cpi	r24, 0xC8	; 200
    31d4:	91 05       	cpc	r25, r1
    31d6:	d0 f4       	brcc	.+52     	; 0x320c <waiting_buffer_scan_tap+0xca>
            tapping_key.tap.count = 1;
    31d8:	80 91 d5 01 	lds	r24, 0x01D5
    31dc:	8f 70       	andi	r24, 0x0F	; 15
    31de:	80 61       	ori	r24, 0x10	; 16
    31e0:	80 93 d5 01 	sts	0x01D5, r24
            waiting_buffer[i].tap.count = 1;
    31e4:	f9 01       	movw	r30, r18
    31e6:	ee 0f       	add	r30, r30
    31e8:	ff 1f       	adc	r31, r31
    31ea:	e2 0f       	add	r30, r18
    31ec:	f3 1f       	adc	r31, r19
    31ee:	ee 0f       	add	r30, r30
    31f0:	ff 1f       	adc	r31, r31
    31f2:	e4 52       	subi	r30, 0x24	; 36
    31f4:	fe 4f       	sbci	r31, 0xFE	; 254
    31f6:	80 81       	ld	r24, Z
    31f8:	8f 70       	andi	r24, 0x0F	; 15
    31fa:	80 61       	ori	r24, 0x10	; 16
    31fc:	80 83       	st	Z, r24
            process_action(&tapping_key);
    31fe:	80 ed       	ldi	r24, 0xD0	; 208
    3200:	91 e0       	ldi	r25, 0x01	; 1
    3202:	0e 94 76 15 	call	0x2aec	; 0x2aec <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    3206:	0e 94 5f 18 	call	0x30be	; 0x30be <debug_waiting_buffer>
            return;
    320a:	05 c0       	rjmp	.+10     	; 0x3216 <waiting_buffer_scan_tap+0xd4>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    320c:	cf 5f       	subi	r28, 0xFF	; 255
    320e:	c7 70       	andi	r28, 0x07	; 7
    3210:	ce 15       	cp	r28, r14
    3212:	09 f0       	breq	.+2      	; 0x3216 <waiting_buffer_scan_tap+0xd4>
    3214:	b9 cf       	rjmp	.-142    	; 0x3188 <waiting_buffer_scan_tap+0x46>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    3216:	df 91       	pop	r29
    3218:	cf 91       	pop	r28
    321a:	1f 91       	pop	r17
    321c:	0f 91       	pop	r16
    321e:	ff 90       	pop	r15
    3220:	ef 90       	pop	r14
    3222:	df 90       	pop	r13
    3224:	cf 90       	pop	r12
    3226:	08 95       	ret

00003228 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    3228:	7f 92       	push	r7
    322a:	8f 92       	push	r8
    322c:	9f 92       	push	r9
    322e:	af 92       	push	r10
    3230:	bf 92       	push	r11
    3232:	cf 92       	push	r12
    3234:	df 92       	push	r13
    3236:	ef 92       	push	r14
    3238:	ff 92       	push	r15
    323a:	0f 93       	push	r16
    323c:	1f 93       	push	r17
    323e:	cf 93       	push	r28
    3240:	df 93       	push	r29
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
    3246:	61 97       	sbiw	r28, 0x11	; 17
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	5c 01       	movw	r10, r24
    keyevent_t event = keyp->event;
    3254:	de 01       	movw	r26, r28
    3256:	11 96       	adiw	r26, 0x01	; 1
    3258:	fc 01       	movw	r30, r24
    325a:	85 e0       	ldi	r24, 0x05	; 5
    325c:	01 90       	ld	r0, Z+
    325e:	0d 92       	st	X+, r0
    3260:	81 50       	subi	r24, 0x01	; 1
    3262:	e1 f7       	brne	.-8      	; 0x325c <process_tapping+0x34>
    3264:	d5 01       	movw	r26, r10
    3266:	ec 90       	ld	r14, X
    3268:	11 96       	adiw	r26, 0x01	; 1
    326a:	dc 90       	ld	r13, X
    326c:	11 97       	sbiw	r26, 0x01	; 1
    326e:	12 96       	adiw	r26, 0x02	; 2
    3270:	fc 90       	ld	r15, X
    3272:	12 97       	sbiw	r26, 0x02	; 2
    3274:	13 96       	adiw	r26, 0x03	; 3
    3276:	8d 90       	ld	r8, X+
    3278:	9c 90       	ld	r9, X
    327a:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    327c:	70 90 d0 01 	lds	r7, 0x01D0
    3280:	c0 90 d1 01 	lds	r12, 0x01D1
    3284:	00 91 d3 01 	lds	r16, 0x01D3
    3288:	10 91 d4 01 	lds	r17, 0x01D4
    328c:	87 2d       	mov	r24, r7
    328e:	6c 2d       	mov	r22, r12
    3290:	a8 01       	movw	r20, r16
    3292:	0e 94 8e 18 	call	0x311c	; 0x311c <IS_NOEVENT.isra.0>
    3296:	88 23       	and	r24, r24
    3298:	09 f0       	breq	.+2      	; 0x329c <process_tapping+0x74>
    329a:	7f c1       	rjmp	.+766    	; 0x359a <process_tapping+0x372>
    329c:	80 91 d2 01 	lds	r24, 0x01D2
    32a0:	88 23       	and	r24, r24
    32a2:	09 f4       	brne	.+2      	; 0x32a6 <process_tapping+0x7e>
    32a4:	08 c1       	rjmp	.+528    	; 0x34b6 <process_tapping+0x28e>
        if (WITHIN_TAPPING_TERM(event)) {
    32a6:	80 16       	cp	r8, r16
    32a8:	91 06       	cpc	r9, r17
    32aa:	38 f0       	brcs	.+14     	; 0x32ba <process_tapping+0x92>
    32ac:	c4 01       	movw	r24, r8
    32ae:	80 1b       	sub	r24, r16
    32b0:	91 0b       	sbc	r25, r17
    32b2:	88 3c       	cpi	r24, 0xC8	; 200
    32b4:	91 05       	cpc	r25, r1
    32b6:	48 f0       	brcs	.+18     	; 0x32ca <process_tapping+0xa2>
    32b8:	a6 c0       	rjmp	.+332    	; 0x3406 <process_tapping+0x1de>
    32ba:	00 95       	com	r16
    32bc:	10 95       	com	r17
    32be:	08 0d       	add	r16, r8
    32c0:	19 1d       	adc	r17, r9
    32c2:	08 3c       	cpi	r16, 0xC8	; 200
    32c4:	11 05       	cpc	r17, r1
    32c6:	08 f0       	brcs	.+2      	; 0x32ca <process_tapping+0xa2>
    32c8:	9e c0       	rjmp	.+316    	; 0x3406 <process_tapping+0x1de>
            if (tapping_key.tap.count == 0) {
    32ca:	80 91 d5 01 	lds	r24, 0x01D5
    32ce:	98 2f       	mov	r25, r24
    32d0:	90 7f       	andi	r25, 0xF0	; 240
    32d2:	09 f0       	breq	.+2      	; 0x32d6 <process_tapping+0xae>
    32d4:	58 c0       	rjmp	.+176    	; 0x3386 <process_tapping+0x15e>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    32d6:	cd 14       	cp	r12, r13
    32d8:	99 f4       	brne	.+38     	; 0x3300 <process_tapping+0xd8>
    32da:	7e 14       	cp	r7, r14
    32dc:	89 f4       	brne	.+34     	; 0x3300 <process_tapping+0xd8>
    32de:	ff 20       	and	r15, r15
    32e0:	79 f4       	brne	.+30     	; 0x3300 <process_tapping+0xd8>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    32e2:	8f 70       	andi	r24, 0x0F	; 15
    32e4:	80 61       	ori	r24, 0x10	; 16
    32e6:	80 93 d5 01 	sts	0x01D5, r24
                    debug_tapping_key();
    32ea:	0e 94 7f 18 	call	0x30fe	; 0x30fe <debug_tapping_key>
                    process_action(&tapping_key);
    32ee:	80 ed       	ldi	r24, 0xD0	; 208
    32f0:	91 e0       	ldi	r25, 0x01	; 1
    32f2:	0e 94 76 15 	call	0x2aec	; 0x2aec <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    32f6:	80 91 d5 01 	lds	r24, 0x01D5
    32fa:	f5 01       	movw	r30, r10
    32fc:	85 83       	std	Z+5, r24	; 0x05
    32fe:	69 c1       	rjmp	.+722    	; 0x35d2 <process_tapping+0x3aa>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    3300:	8e 2d       	mov	r24, r14
    3302:	6d 2d       	mov	r22, r13
    3304:	a4 01       	movw	r20, r8
    3306:	0e 94 8e 18 	call	0x311c	; 0x311c <IS_NOEVENT.isra.0>
    330a:	88 23       	and	r24, r24
    330c:	99 f5       	brne	.+102    	; 0x3374 <process_tapping+0x14c>
    330e:	ff 20       	and	r15, r15
    3310:	a1 f5       	brne	.+104    	; 0x337a <process_tapping+0x152>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3312:	80 91 d6 01 	lds	r24, 0x01D6
    3316:	20 91 07 02 	lds	r18, 0x0207
    331a:	16 c0       	rjmp	.+44     	; 0x3348 <process_tapping+0x120>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	fc 01       	movw	r30, r24
    3320:	ee 0f       	add	r30, r30
    3322:	ff 1f       	adc	r31, r31
    3324:	e8 0f       	add	r30, r24
    3326:	f9 1f       	adc	r31, r25
    3328:	ee 0f       	add	r30, r30
    332a:	ff 1f       	adc	r31, r31
    332c:	e9 52       	subi	r30, 0x29	; 41
    332e:	fe 4f       	sbci	r31, 0xFE	; 254
    3330:	31 81       	ldd	r19, Z+1	; 0x01
    3332:	d3 16       	cp	r13, r19
    3334:	39 f4       	brne	.+14     	; 0x3344 <process_tapping+0x11c>
    3336:	30 81       	ld	r19, Z
    3338:	e3 16       	cp	r14, r19
    333a:	21 f4       	brne	.+8      	; 0x3344 <process_tapping+0x11c>
    333c:	32 81       	ldd	r19, Z+2	; 0x02
    333e:	33 23       	and	r19, r19
    3340:	09 f0       	breq	.+2      	; 0x3344 <process_tapping+0x11c>
    3342:	47 c1       	rjmp	.+654    	; 0x35d2 <process_tapping+0x3aa>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3344:	01 96       	adiw	r24, 0x01	; 1
    3346:	87 70       	andi	r24, 0x07	; 7
    3348:	82 17       	cp	r24, r18
    334a:	41 f7       	brne	.-48     	; 0x331c <process_tapping+0xf4>
    334c:	57 c1       	rjmp	.+686    	; 0x35fc <process_tapping+0x3d4>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    334e:	9f 70       	andi	r25, 0x0F	; 15
    3350:	61 f0       	breq	.+24     	; 0x336a <process_tapping+0x142>
    3352:	88 23       	and	r24, r24
    3354:	51 f4       	brne	.+20     	; 0x336a <process_tapping+0x142>
    3356:	3d c1       	rjmp	.+634    	; 0x35d2 <process_tapping+0x3aa>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3358:	9f 70       	andi	r25, 0x0F	; 15
    335a:	39 f0       	breq	.+14     	; 0x336a <process_tapping+0x142>
    335c:	d5 01       	movw	r26, r10
    335e:	15 96       	adiw	r26, 0x05	; 5
    3360:	9c 91       	ld	r25, X
    3362:	15 97       	sbiw	r26, 0x05	; 5
    3364:	90 7f       	andi	r25, 0xF0	; 240
    3366:	09 f4       	brne	.+2      	; 0x336a <process_tapping+0x142>
    3368:	34 c1       	rjmp	.+616    	; 0x35d2 <process_tapping+0x3aa>
                            if (IS_MOD(action.key.code)) return false;
    336a:	80 5e       	subi	r24, 0xE0	; 224
    336c:	88 30       	cpi	r24, 0x08	; 8
    336e:	08 f4       	brcc	.+2      	; 0x3372 <process_tapping+0x14a>
    3370:	30 c1       	rjmp	.+608    	; 0x35d2 <process_tapping+0x3aa>
    3372:	2a c1       	rjmp	.+596    	; 0x35c8 <process_tapping+0x3a0>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3374:	ff 20       	and	r15, r15
    3376:	09 f4       	brne	.+2      	; 0x337a <process_tapping+0x152>
    3378:	2c c1       	rjmp	.+600    	; 0x35d2 <process_tapping+0x3aa>
                        tapping_key.tap.interrupted = true;
    337a:	80 91 d5 01 	lds	r24, 0x01D5
    337e:	81 60       	ori	r24, 0x01	; 1
    3380:	80 93 d5 01 	sts	0x01D5, r24
    3384:	26 c1       	rjmp	.+588    	; 0x35d2 <process_tapping+0x3aa>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3386:	cd 14       	cp	r12, r13
    3388:	91 f4       	brne	.+36     	; 0x33ae <process_tapping+0x186>
    338a:	7e 14       	cp	r7, r14
    338c:	81 f4       	brne	.+32     	; 0x33ae <process_tapping+0x186>
    338e:	ff 20       	and	r15, r15
    3390:	71 f4       	brne	.+28     	; 0x33ae <process_tapping+0x186>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3392:	f5 01       	movw	r30, r10
    3394:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    3396:	c5 01       	movw	r24, r10
    3398:	0e 94 76 15 	call	0x2aec	; 0x2aec <process_action>
                    tapping_key = *keyp;
    339c:	a0 ed       	ldi	r26, 0xD0	; 208
    339e:	b1 e0       	ldi	r27, 0x01	; 1
    33a0:	f5 01       	movw	r30, r10
    33a2:	86 e0       	ldi	r24, 0x06	; 6
    33a4:	01 90       	ld	r0, Z+
    33a6:	0d 92       	st	X+, r0
    33a8:	81 50       	subi	r24, 0x01	; 1
    33aa:	e1 f7       	brne	.-8      	; 0x33a4 <process_tapping+0x17c>
    33ac:	0a c1       	rjmp	.+532    	; 0x35c2 <process_tapping+0x39a>
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    33ae:	e9 82       	std	Y+1, r14	; 0x01
    33b0:	da 82       	std	Y+2, r13	; 0x02
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	9a 81       	ldd	r25, Y+2	; 0x02
    33b6:	0e 94 14 18 	call	0x3028	; 0x3028 <is_tap_key>
    33ba:	88 23       	and	r24, r24
    33bc:	09 f4       	brne	.+2      	; 0x33c0 <process_tapping+0x198>
    33be:	04 c1       	rjmp	.+520    	; 0x35c8 <process_tapping+0x3a0>
    33c0:	ff 20       	and	r15, r15
    33c2:	09 f4       	brne	.+2      	; 0x33c6 <process_tapping+0x19e>
    33c4:	01 c1       	rjmp	.+514    	; 0x35c8 <process_tapping+0x3a0>
                    if (tapping_key.tap.count > 1) {
    33c6:	20 91 d5 01 	lds	r18, 0x01D5
    33ca:	82 2f       	mov	r24, r18
    33cc:	82 95       	swap	r24
    33ce:	8f 70       	andi	r24, 0x0F	; 15
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	82 30       	cpi	r24, 0x02	; 2
    33d4:	91 05       	cpc	r25, r1
    33d6:	74 f0       	brlt	.+28     	; 0x33f4 <process_tapping+0x1cc>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    33d8:	80 91 d0 01 	lds	r24, 0x01D0
    33dc:	90 91 d1 01 	lds	r25, 0x01D1
    33e0:	9d 87       	std	Y+13, r25	; 0x0d
    33e2:	8c 87       	std	Y+12, r24	; 0x0c
    33e4:	1e 86       	std	Y+14, r1	; 0x0e
    33e6:	98 8a       	std	Y+16, r9	; 0x10
    33e8:	8f 86       	std	Y+15, r8	; 0x0f
    33ea:	29 8b       	std	Y+17, r18	; 0x11
    33ec:	ce 01       	movw	r24, r28
    33ee:	0c 96       	adiw	r24, 0x0c	; 12
    33f0:	0e 94 76 15 	call	0x2aec	; 0x2aec <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    33f4:	a0 ed       	ldi	r26, 0xD0	; 208
    33f6:	b1 e0       	ldi	r27, 0x01	; 1
    33f8:	f5 01       	movw	r30, r10
    33fa:	86 e0       	ldi	r24, 0x06	; 6
    33fc:	01 90       	ld	r0, Z+
    33fe:	0d 92       	st	X+, r0
    3400:	81 50       	subi	r24, 0x01	; 1
    3402:	e1 f7       	brne	.-8      	; 0x33fc <process_tapping+0x1d4>
    3404:	dc c0       	rjmp	.+440    	; 0x35be <process_tapping+0x396>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    3406:	80 91 d5 01 	lds	r24, 0x01D5
    340a:	98 2f       	mov	r25, r24
    340c:	90 7f       	andi	r25, 0xF0	; 240
    340e:	a1 f4       	brne	.+40     	; 0x3438 <process_tapping+0x210>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    3410:	e9 82       	std	Y+1, r14	; 0x01
    3412:	da 82       	std	Y+2, r13	; 0x02
    3414:	fb 82       	std	Y+3, r15	; 0x03
    3416:	78 2d       	mov	r23, r8
    3418:	9d 82       	std	Y+5, r9	; 0x05
    341a:	8c 82       	std	Y+4, r8	; 0x04
    341c:	4e 2d       	mov	r20, r14
    341e:	5d 2d       	mov	r21, r13
    3420:	6f 2d       	mov	r22, r15
    3422:	8d 81       	ldd	r24, Y+5	; 0x05
    3424:	0e 94 40 18 	call	0x3080	; 0x3080 <debug_event>
                process_action(&tapping_key);
    3428:	00 ed       	ldi	r16, 0xD0	; 208
    342a:	11 e0       	ldi	r17, 0x01	; 1
    342c:	c8 01       	movw	r24, r16
    342e:	0e 94 76 15 	call	0x2aec	; 0x2aec <process_action>
                tapping_key = (keyrecord_t){};
    3432:	86 e0       	ldi	r24, 0x06	; 6
    3434:	d8 01       	movw	r26, r16
    3436:	ab c0       	rjmp	.+342    	; 0x358e <process_tapping+0x366>
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3438:	cd 14       	cp	r12, r13
    343a:	89 f4       	brne	.+34     	; 0x345e <process_tapping+0x236>
    343c:	7e 14       	cp	r7, r14
    343e:	79 f4       	brne	.+30     	; 0x345e <process_tapping+0x236>
    3440:	ff 20       	and	r15, r15
    3442:	69 f4       	brne	.+26     	; 0x345e <process_tapping+0x236>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    3444:	f5 01       	movw	r30, r10
    3446:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    3448:	c5 01       	movw	r24, r10
    344a:	0e 94 76 15 	call	0x2aec	; 0x2aec <process_action>
                    tapping_key = (keyrecord_t){};
    344e:	e0 ed       	ldi	r30, 0xD0	; 208
    3450:	f1 e0       	ldi	r31, 0x01	; 1
    3452:	86 e0       	ldi	r24, 0x06	; 6
    3454:	df 01       	movw	r26, r30
    3456:	1d 92       	st	X+, r1
    3458:	8a 95       	dec	r24
    345a:	e9 f7       	brne	.-6      	; 0x3456 <process_tapping+0x22e>
    345c:	b8 c0       	rjmp	.+368    	; 0x35ce <process_tapping+0x3a6>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    345e:	e9 82       	std	Y+1, r14	; 0x01
    3460:	da 82       	std	Y+2, r13	; 0x02
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	9a 81       	ldd	r25, Y+2	; 0x02
    3466:	0e 94 14 18 	call	0x3028	; 0x3028 <is_tap_key>
    346a:	88 23       	and	r24, r24
    346c:	09 f4       	brne	.+2      	; 0x3470 <process_tapping+0x248>
    346e:	ac c0       	rjmp	.+344    	; 0x35c8 <process_tapping+0x3a0>
    3470:	ff 20       	and	r15, r15
    3472:	09 f4       	brne	.+2      	; 0x3476 <process_tapping+0x24e>
    3474:	a9 c0       	rjmp	.+338    	; 0x35c8 <process_tapping+0x3a0>
                    if (tapping_key.tap.count > 1) {
    3476:	20 91 d5 01 	lds	r18, 0x01D5
    347a:	82 2f       	mov	r24, r18
    347c:	82 95       	swap	r24
    347e:	8f 70       	andi	r24, 0x0F	; 15
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	82 30       	cpi	r24, 0x02	; 2
    3484:	91 05       	cpc	r25, r1
    3486:	74 f0       	brlt	.+28     	; 0x34a4 <process_tapping+0x27c>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3488:	80 91 d0 01 	lds	r24, 0x01D0
    348c:	90 91 d1 01 	lds	r25, 0x01D1
    3490:	9f 83       	std	Y+7, r25	; 0x07
    3492:	8e 83       	std	Y+6, r24	; 0x06
    3494:	18 86       	std	Y+8, r1	; 0x08
    3496:	9a 86       	std	Y+10, r9	; 0x0a
    3498:	89 86       	std	Y+9, r8	; 0x09
    349a:	2b 87       	std	Y+11, r18	; 0x0b
    349c:	ce 01       	movw	r24, r28
    349e:	06 96       	adiw	r24, 0x06	; 6
    34a0:	0e 94 76 15 	call	0x2aec	; 0x2aec <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    34a4:	a0 ed       	ldi	r26, 0xD0	; 208
    34a6:	b1 e0       	ldi	r27, 0x01	; 1
    34a8:	f5 01       	movw	r30, r10
    34aa:	86 e0       	ldi	r24, 0x06	; 6
    34ac:	01 90       	ld	r0, Z+
    34ae:	0d 92       	st	X+, r0
    34b0:	81 50       	subi	r24, 0x01	; 1
    34b2:	e1 f7       	brne	.-8      	; 0x34ac <process_tapping+0x284>
    34b4:	84 c0       	rjmp	.+264    	; 0x35be <process_tapping+0x396>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    34b6:	80 16       	cp	r8, r16
    34b8:	91 06       	cpc	r9, r17
    34ba:	38 f0       	brcs	.+14     	; 0x34ca <process_tapping+0x2a2>
    34bc:	c4 01       	movw	r24, r8
    34be:	80 1b       	sub	r24, r16
    34c0:	91 0b       	sbc	r25, r17
    34c2:	88 3c       	cpi	r24, 0xC8	; 200
    34c4:	91 05       	cpc	r25, r1
    34c6:	48 f0       	brcs	.+18     	; 0x34da <process_tapping+0x2b2>
    34c8:	52 c0       	rjmp	.+164    	; 0x356e <process_tapping+0x346>
    34ca:	00 95       	com	r16
    34cc:	10 95       	com	r17
    34ce:	08 0d       	add	r16, r8
    34d0:	19 1d       	adc	r17, r9
    34d2:	08 3c       	cpi	r16, 0xC8	; 200
    34d4:	11 05       	cpc	r17, r1
    34d6:	08 f0       	brcs	.+2      	; 0x34da <process_tapping+0x2b2>
    34d8:	4a c0       	rjmp	.+148    	; 0x356e <process_tapping+0x346>
            if (event.pressed) {
    34da:	ff 20       	and	r15, r15
    34dc:	09 f4       	brne	.+2      	; 0x34e0 <process_tapping+0x2b8>
    34de:	74 c0       	rjmp	.+232    	; 0x35c8 <process_tapping+0x3a0>
                if (IS_TAPPING_KEY(event.key)) {
    34e0:	cd 14       	cp	r12, r13
    34e2:	71 f5       	brne	.+92     	; 0x3540 <process_tapping+0x318>
    34e4:	7e 14       	cp	r7, r14
    34e6:	61 f5       	brne	.+88     	; 0x3540 <process_tapping+0x318>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    34e8:	20 91 d5 01 	lds	r18, 0x01D5
    34ec:	20 fd       	sbrc	r18, 0
    34ee:	1f c0       	rjmp	.+62     	; 0x352e <process_tapping+0x306>
    34f0:	32 2f       	mov	r19, r18
    34f2:	32 95       	swap	r19
    34f4:	3f 70       	andi	r19, 0x0F	; 15
    34f6:	83 2f       	mov	r24, r19
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	c1 f0       	breq	.+48     	; 0x352e <process_tapping+0x306>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    34fe:	f5 01       	movw	r30, r10
    3500:	25 83       	std	Z+5, r18	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3502:	8f 30       	cpi	r24, 0x0F	; 15
    3504:	91 05       	cpc	r25, r1
    3506:	39 f0       	breq	.+14     	; 0x3516 <process_tapping+0x2ee>
    3508:	83 2f       	mov	r24, r19
    350a:	8f 5f       	subi	r24, 0xFF	; 255
    350c:	82 95       	swap	r24
    350e:	80 7f       	andi	r24, 0xF0	; 240
    3510:	2f 70       	andi	r18, 0x0F	; 15
    3512:	28 2b       	or	r18, r24
    3514:	25 83       	std	Z+5, r18	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    3516:	c5 01       	movw	r24, r10
    3518:	0e 94 76 15 	call	0x2aec	; 0x2aec <process_action>
                        tapping_key = *keyp;
    351c:	a0 ed       	ldi	r26, 0xD0	; 208
    351e:	b1 e0       	ldi	r27, 0x01	; 1
    3520:	f5 01       	movw	r30, r10
    3522:	86 e0       	ldi	r24, 0x06	; 6
    3524:	01 90       	ld	r0, Z+
    3526:	0d 92       	st	X+, r0
    3528:	81 50       	subi	r24, 0x01	; 1
    352a:	e1 f7       	brne	.-8      	; 0x3524 <process_tapping+0x2fc>
    352c:	4a c0       	rjmp	.+148    	; 0x35c2 <process_tapping+0x39a>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    352e:	a0 ed       	ldi	r26, 0xD0	; 208
    3530:	b1 e0       	ldi	r27, 0x01	; 1
    3532:	f5 01       	movw	r30, r10
    3534:	86 e0       	ldi	r24, 0x06	; 6
    3536:	01 90       	ld	r0, Z+
    3538:	0d 92       	st	X+, r0
    353a:	81 50       	subi	r24, 0x01	; 1
    353c:	e1 f7       	brne	.-8      	; 0x3536 <process_tapping+0x30e>
    353e:	47 c0       	rjmp	.+142    	; 0x35ce <process_tapping+0x3a6>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    3540:	e9 82       	std	Y+1, r14	; 0x01
    3542:	da 82       	std	Y+2, r13	; 0x02
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	9a 81       	ldd	r25, Y+2	; 0x02
    3548:	0e 94 14 18 	call	0x3028	; 0x3028 <is_tap_key>
    354c:	88 23       	and	r24, r24
    354e:	49 f0       	breq	.+18     	; 0x3562 <process_tapping+0x33a>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    3550:	a0 ed       	ldi	r26, 0xD0	; 208
    3552:	b1 e0       	ldi	r27, 0x01	; 1
    3554:	f5 01       	movw	r30, r10
    3556:	86 e0       	ldi	r24, 0x06	; 6
    3558:	01 90       	ld	r0, Z+
    355a:	0d 92       	st	X+, r0
    355c:	81 50       	subi	r24, 0x01	; 1
    355e:	e1 f7       	brne	.-8      	; 0x3558 <process_tapping+0x330>
    3560:	2e c0       	rjmp	.+92     	; 0x35be <process_tapping+0x396>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3562:	80 91 d5 01 	lds	r24, 0x01D5
    3566:	81 60       	ori	r24, 0x01	; 1
    3568:	80 93 d5 01 	sts	0x01D5, r24
    356c:	2d c0       	rjmp	.+90     	; 0x35c8 <process_tapping+0x3a0>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    356e:	e9 82       	std	Y+1, r14	; 0x01
    3570:	da 82       	std	Y+2, r13	; 0x02
    3572:	fb 82       	std	Y+3, r15	; 0x03
    3574:	78 2d       	mov	r23, r8
    3576:	9d 82       	std	Y+5, r9	; 0x05
    3578:	8c 82       	std	Y+4, r8	; 0x04
    357a:	4e 2d       	mov	r20, r14
    357c:	5d 2d       	mov	r21, r13
    357e:	6f 2d       	mov	r22, r15
    3580:	8d 81       	ldd	r24, Y+5	; 0x05
    3582:	0e 94 40 18 	call	0x3080	; 0x3080 <debug_event>
            tapping_key = (keyrecord_t){};
    3586:	e0 ed       	ldi	r30, 0xD0	; 208
    3588:	f1 e0       	ldi	r31, 0x01	; 1
    358a:	86 e0       	ldi	r24, 0x06	; 6
    358c:	df 01       	movw	r26, r30
    358e:	1d 92       	st	X+, r1
    3590:	8a 95       	dec	r24
    3592:	e9 f7       	brne	.-6      	; 0x358e <process_tapping+0x366>
            debug_tapping_key();
    3594:	0e 94 7f 18 	call	0x30fe	; 0x30fe <debug_tapping_key>
    3598:	1c c0       	rjmp	.+56     	; 0x35d2 <process_tapping+0x3aa>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    359a:	ff 20       	and	r15, r15
    359c:	a9 f0       	breq	.+42     	; 0x35c8 <process_tapping+0x3a0>
    359e:	e9 82       	std	Y+1, r14	; 0x01
    35a0:	da 82       	std	Y+2, r13	; 0x02
    35a2:	89 81       	ldd	r24, Y+1	; 0x01
    35a4:	9a 81       	ldd	r25, Y+2	; 0x02
    35a6:	0e 94 14 18 	call	0x3028	; 0x3028 <is_tap_key>
    35aa:	88 23       	and	r24, r24
    35ac:	69 f0       	breq	.+26     	; 0x35c8 <process_tapping+0x3a0>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    35ae:	a0 ed       	ldi	r26, 0xD0	; 208
    35b0:	b1 e0       	ldi	r27, 0x01	; 1
    35b2:	f5 01       	movw	r30, r10
    35b4:	86 e0       	ldi	r24, 0x06	; 6
    35b6:	01 90       	ld	r0, Z+
    35b8:	0d 92       	st	X+, r0
    35ba:	81 50       	subi	r24, 0x01	; 1
    35bc:	e1 f7       	brne	.-8      	; 0x35b6 <process_tapping+0x38e>
            waiting_buffer_scan_tap();
    35be:	0e 94 a1 18 	call	0x3142	; 0x3142 <waiting_buffer_scan_tap>
            debug_tapping_key();
    35c2:	0e 94 7f 18 	call	0x30fe	; 0x30fe <debug_tapping_key>
    35c6:	03 c0       	rjmp	.+6      	; 0x35ce <process_tapping+0x3a6>
            return true;
        } else {
            process_action(keyp);
    35c8:	c5 01       	movw	r24, r10
    35ca:	0e 94 76 15 	call	0x2aec	; 0x2aec <process_action>
            return true;
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	01 c0       	rjmp	.+2      	; 0x35d4 <process_tapping+0x3ac>
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
                        tapping_key.tap.interrupted = true;
                    }
                    // enqueue 
                    return false;
    35d2:	80 e0       	ldi	r24, 0x00	; 0
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    35d4:	61 96       	adiw	r28, 0x11	; 17
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	1f 91       	pop	r17
    35e6:	0f 91       	pop	r16
    35e8:	ff 90       	pop	r15
    35ea:	ef 90       	pop	r14
    35ec:	df 90       	pop	r13
    35ee:	cf 90       	pop	r12
    35f0:	bf 90       	pop	r11
    35f2:	af 90       	pop	r10
    35f4:	9f 90       	pop	r9
    35f6:	8f 90       	pop	r8
    35f8:	7f 90       	pop	r7
    35fa:	08 95       	ret
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    35fc:	e9 82       	std	Y+1, r14	; 0x01
    35fe:	da 82       	std	Y+2, r13	; 0x02
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	9a 81       	ldd	r25, Y+2	; 0x02
    3604:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <layer_switch_get_action>
                    switch (action.kind.id) {
    3608:	29 2f       	mov	r18, r25
    360a:	22 95       	swap	r18
    360c:	2f 70       	andi	r18, 0x0F	; 15
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	22 30       	cpi	r18, 0x02	; 2
    3612:	31 05       	cpc	r19, r1
    3614:	0c f4       	brge	.+2      	; 0x3618 <process_tapping+0x3f0>
    3616:	9b ce       	rjmp	.-714    	; 0x334e <process_tapping+0x126>
    3618:	24 30       	cpi	r18, 0x04	; 4
    361a:	31 05       	cpc	r19, r1
    361c:	ac f6       	brge	.-86     	; 0x35c8 <process_tapping+0x3a0>
    361e:	9c ce       	rjmp	.-712    	; 0x3358 <process_tapping+0x130>

00003620 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3620:	ef 92       	push	r14
    3622:	ff 92       	push	r15
    3624:	0f 93       	push	r16
    3626:	1f 93       	push	r17
    3628:	cf 93       	push	r28
    362a:	df 93       	push	r29
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	2c 97       	sbiw	r28, 0x0c	; 12
    3632:	0f b6       	in	r0, 0x3f	; 63
    3634:	f8 94       	cli
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	cd bf       	out	0x3d, r28	; 61
    363c:	4f 83       	std	Y+7, r20	; 0x07
    363e:	58 87       	std	Y+8, r21	; 0x08
    3640:	69 87       	std	Y+9, r22	; 0x09
    3642:	7a 87       	std	Y+10, r23	; 0x0a
    3644:	8b 87       	std	Y+11, r24	; 0x0b
    3646:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3648:	ce 01       	movw	r24, r28
    364a:	07 96       	adiw	r24, 0x07	; 7
    364c:	0e 94 14 19 	call	0x3228	; 0x3228 <process_tapping>
    3650:	88 23       	and	r24, r24
    3652:	91 f0       	breq	.+36     	; 0x3678 <action_tapping_process+0x58>
        if (!IS_NOEVENT(record.event)) {
    3654:	4a 85       	ldd	r20, Y+10	; 0x0a
    3656:	5b 85       	ldd	r21, Y+11	; 0x0b
    3658:	8f 81       	ldd	r24, Y+7	; 0x07
    365a:	68 85       	ldd	r22, Y+8	; 0x08
    365c:	0e 94 8e 18 	call	0x311c	; 0x311c <IS_NOEVENT.isra.0>
    3660:	88 23       	and	r24, r24
    3662:	09 f0       	breq	.+2      	; 0x3666 <action_tapping_process+0x46>
    3664:	78 c0       	rjmp	.+240    	; 0x3756 <action_tapping_process+0x136>
            debug("processed: "); debug_record(record); debug("\n");
    3666:	4f 81       	ldd	r20, Y+7	; 0x07
    3668:	58 85       	ldd	r21, Y+8	; 0x08
    366a:	69 85       	ldd	r22, Y+9	; 0x09
    366c:	7a 85       	ldd	r23, Y+10	; 0x0a
    366e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3670:	9c 85       	ldd	r25, Y+12	; 0x0c
    3672:	0e 94 4f 18 	call	0x309e	; 0x309e <debug_record>
    3676:	6f c0       	rjmp	.+222    	; 0x3756 <action_tapping_process+0x136>
    3678:	de 01       	movw	r26, r28
    367a:	11 96       	adiw	r26, 0x01	; 1
    367c:	fe 01       	movw	r30, r28
    367e:	37 96       	adiw	r30, 0x07	; 7
    3680:	86 e0       	ldi	r24, 0x06	; 6
    3682:	01 90       	ld	r0, Z+
    3684:	0d 92       	st	X+, r0
    3686:	81 50       	subi	r24, 0x01	; 1
    3688:	e1 f7       	brne	.-8      	; 0x3682 <action_tapping_process+0x62>
    368a:	1f 81       	ldd	r17, Y+7	; 0x07
    368c:	08 85       	ldd	r16, Y+8	; 0x08
    368e:	ea 84       	ldd	r14, Y+10	; 0x0a
    3690:	fb 84       	ldd	r15, Y+11	; 0x0b
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    3692:	81 2f       	mov	r24, r17
    3694:	60 2f       	mov	r22, r16
    3696:	a7 01       	movw	r20, r14
    3698:	0e 94 8e 18 	call	0x311c	; 0x311c <IS_NOEVENT.isra.0>
    369c:	88 23       	and	r24, r24
    369e:	09 f0       	breq	.+2      	; 0x36a2 <action_tapping_process+0x82>
    36a0:	5a c0       	rjmp	.+180    	; 0x3756 <action_tapping_process+0x136>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    36a2:	80 91 07 02 	lds	r24, 0x0207
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	ac 01       	movw	r20, r24
    36aa:	4f 5f       	subi	r20, 0xFF	; 255
    36ac:	5f 4f       	sbci	r21, 0xFF	; 255
    36ae:	47 70       	andi	r20, 0x07	; 7
    36b0:	50 70       	andi	r21, 0x00	; 0
    36b2:	20 91 d6 01 	lds	r18, 0x01D6
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	42 17       	cp	r20, r18
    36ba:	53 07       	cpc	r21, r19
    36bc:	09 f4       	brne	.+2      	; 0x36c0 <action_tapping_process+0xa0>
    36be:	52 c0       	rjmp	.+164    	; 0x3764 <action_tapping_process+0x144>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    36c0:	9c 01       	movw	r18, r24
    36c2:	22 0f       	add	r18, r18
    36c4:	33 1f       	adc	r19, r19
    36c6:	f9 01       	movw	r30, r18
    36c8:	e8 0f       	add	r30, r24
    36ca:	f9 1f       	adc	r31, r25
    36cc:	ee 0f       	add	r30, r30
    36ce:	ff 1f       	adc	r31, r31
    36d0:	e9 52       	subi	r30, 0x29	; 41
    36d2:	fe 4f       	sbci	r31, 0xFE	; 254
    36d4:	de 01       	movw	r26, r28
    36d6:	11 96       	adiw	r26, 0x01	; 1
    36d8:	66 e0       	ldi	r22, 0x06	; 6
    36da:	0d 90       	ld	r0, X+
    36dc:	01 92       	st	Z+, r0
    36de:	61 50       	subi	r22, 0x01	; 1
    36e0:	e1 f7       	brne	.-8      	; 0x36da <action_tapping_process+0xba>
    36e2:	f9 01       	movw	r30, r18
    36e4:	e8 0f       	add	r30, r24
    36e6:	f9 1f       	adc	r31, r25
    36e8:	ee 0f       	add	r30, r30
    36ea:	ff 1f       	adc	r31, r31
    36ec:	e9 52       	subi	r30, 0x29	; 41
    36ee:	fe 4f       	sbci	r31, 0xFE	; 254
    36f0:	10 83       	st	Z, r17
    36f2:	01 83       	std	Z+1, r16	; 0x01
    36f4:	f4 82       	std	Z+4, r15	; 0x04
    36f6:	e3 82       	std	Z+3, r14	; 0x03
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    36f8:	40 93 07 02 	sts	0x0207, r20

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    36fc:	0e 94 5f 18 	call	0x30be	; 0x30be <debug_waiting_buffer>
    3700:	2a c0       	rjmp	.+84     	; 0x3756 <action_tapping_process+0x136>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	c9 01       	movw	r24, r18
    3706:	88 0f       	add	r24, r24
    3708:	99 1f       	adc	r25, r25
    370a:	82 0f       	add	r24, r18
    370c:	93 1f       	adc	r25, r19
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	89 52       	subi	r24, 0x29	; 41
    3714:	9e 4f       	sbci	r25, 0xFE	; 254
    3716:	0e 94 14 19 	call	0x3228	; 0x3228 <process_tapping>
    371a:	88 23       	and	r24, r24
    371c:	89 f1       	breq	.+98     	; 0x3780 <action_tapping_process+0x160>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    371e:	80 91 d6 01 	lds	r24, 0x01D6
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	fc 01       	movw	r30, r24
    3726:	ee 0f       	add	r30, r30
    3728:	ff 1f       	adc	r31, r31
    372a:	e8 0f       	add	r30, r24
    372c:	f9 1f       	adc	r31, r25
    372e:	ee 0f       	add	r30, r30
    3730:	ff 1f       	adc	r31, r31
    3732:	e9 52       	subi	r30, 0x29	; 41
    3734:	fe 4f       	sbci	r31, 0xFE	; 254
    3736:	40 81       	ld	r20, Z
    3738:	51 81       	ldd	r21, Z+1	; 0x01
    373a:	62 81       	ldd	r22, Z+2	; 0x02
    373c:	73 81       	ldd	r23, Z+3	; 0x03
    373e:	84 81       	ldd	r24, Z+4	; 0x04
    3740:	95 81       	ldd	r25, Z+5	; 0x05
    3742:	0e 94 4f 18 	call	0x309e	; 0x309e <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3746:	80 91 d6 01 	lds	r24, 0x01D6
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	01 96       	adiw	r24, 0x01	; 1
    374e:	87 70       	andi	r24, 0x07	; 7
    3750:	90 70       	andi	r25, 0x00	; 0
    3752:	80 93 d6 01 	sts	0x01D6, r24
    3756:	20 91 d6 01 	lds	r18, 0x01D6
    375a:	80 91 07 02 	lds	r24, 0x0207
    375e:	28 17       	cp	r18, r24
    3760:	81 f6       	brne	.-96     	; 0x3702 <action_tapping_process+0xe2>
    3762:	0e c0       	rjmp	.+28     	; 0x3780 <action_tapping_process+0x160>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3764:	0e 94 0f 18 	call	0x301e	; 0x301e <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3768:	10 92 07 02 	sts	0x0207, r1
    waiting_buffer_tail = 0;
    376c:	10 92 d6 01 	sts	0x01D6, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3770:	e0 ed       	ldi	r30, 0xD0	; 208
    3772:	f1 e0       	ldi	r31, 0x01	; 1
    3774:	86 e0       	ldi	r24, 0x06	; 6
    3776:	df 01       	movw	r26, r30
    3778:	1d 92       	st	X+, r1
    377a:	8a 95       	dec	r24
    377c:	e9 f7       	brne	.-6      	; 0x3778 <action_tapping_process+0x158>
    377e:	eb cf       	rjmp	.-42     	; 0x3756 <action_tapping_process+0x136>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3780:	2c 96       	adiw	r28, 0x0c	; 12
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	f8 94       	cli
    3786:	de bf       	out	0x3e, r29	; 62
    3788:	0f be       	out	0x3f, r0	; 63
    378a:	cd bf       	out	0x3d, r28	; 61
    378c:	df 91       	pop	r29
    378e:	cf 91       	pop	r28
    3790:	1f 91       	pop	r17
    3792:	0f 91       	pop	r16
    3794:	ff 90       	pop	r15
    3796:	ef 90       	pop	r14
    3798:	08 95       	ret

0000379a <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    379a:	df 92       	push	r13
    379c:	ef 92       	push	r14
    379e:	ff 92       	push	r15
    37a0:	0f 93       	push	r16
    37a2:	1f 93       	push	r17
    37a4:	cf 93       	push	r28
    37a6:	df 93       	push	r29
    37a8:	ec 01       	movw	r28, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    37aa:	00 97       	sbiw	r24, 0x00	; 0
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <action_macro_play+0x16>
    37ae:	6f c0       	rjmp	.+222    	; 0x388e <action_macro_play+0xf4>
    37b0:	dd 24       	eor	r13, r13
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	e8 2e       	mov	r14, r24
    37b6:	f1 2c       	mov	r15, r1
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    37b8:	8e 01       	movw	r16, r28
    37ba:	0f 5f       	subi	r16, 0xFF	; 255
    37bc:	1f 4f       	sbci	r17, 0xFF	; 255
    37be:	fe 01       	movw	r30, r28
    37c0:	84 91       	lpm	r24, Z
    37c2:	84 37       	cpi	r24, 0x74	; 116
    37c4:	48 f4       	brcc	.+18     	; 0x37d8 <action_macro_play+0x3e>
    37c6:	84 30       	cpi	r24, 0x04	; 4
    37c8:	08 f0       	brcs	.+2      	; 0x37cc <action_macro_play+0x32>
    37ca:	4d c0       	rjmp	.+154    	; 0x3866 <action_macro_play+0xcc>
    37cc:	81 30       	cpi	r24, 0x01	; 1
    37ce:	79 f0       	breq	.+30     	; 0x37ee <action_macro_play+0x54>
    37d0:	82 30       	cpi	r24, 0x02	; 2
    37d2:	09 f0       	breq	.+2      	; 0x37d6 <action_macro_play+0x3c>
    37d4:	5c c0       	rjmp	.+184    	; 0x388e <action_macro_play+0xf4>
    37d6:	1f c0       	rjmp	.+62     	; 0x3816 <action_macro_play+0x7c>
    37d8:	85 37       	cpi	r24, 0x75	; 117
    37da:	09 f4       	brne	.+2      	; 0x37de <action_macro_play+0x44>
    37dc:	40 c0       	rjmp	.+128    	; 0x385e <action_macro_play+0xc4>
    37de:	85 37       	cpi	r24, 0x75	; 117
    37e0:	80 f1       	brcs	.+96     	; 0x3842 <action_macro_play+0xa8>
    37e2:	98 2f       	mov	r25, r24
    37e4:	94 58       	subi	r25, 0x84	; 132
    37e6:	90 37       	cpi	r25, 0x70	; 112
    37e8:	08 f0       	brcs	.+2      	; 0x37ec <action_macro_play+0x52>
    37ea:	51 c0       	rjmp	.+162    	; 0x388e <action_macro_play+0xf4>
    37ec:	3f c0       	rjmp	.+126    	; 0x386c <action_macro_play+0xd2>
            case KEY_DOWN:
                MACRO_READ();
    37ee:	22 96       	adiw	r28, 0x02	; 2
    37f0:	f8 01       	movw	r30, r16
    37f2:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    37f4:	98 2f       	mov	r25, r24
    37f6:	90 5e       	subi	r25, 0xE0	; 224
    37f8:	98 30       	cpi	r25, 0x08	; 8
    37fa:	50 f4       	brcc	.+20     	; 0x3810 <action_macro_play+0x76>
                    add_weak_mods(MOD_BIT(macro));
    37fc:	87 70       	andi	r24, 0x07	; 7
    37fe:	fe 2d       	mov	r31, r14
    3800:	01 c0       	rjmp	.+2      	; 0x3804 <action_macro_play+0x6a>
    3802:	ff 0f       	add	r31, r31
    3804:	8a 95       	dec	r24
    3806:	ea f7       	brpl	.-6      	; 0x3802 <action_macro_play+0x68>
    3808:	8f 2f       	mov	r24, r31
    380a:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <add_weak_mods>
    380e:	13 c0       	rjmp	.+38     	; 0x3836 <action_macro_play+0x9c>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3810:	0e 94 43 14 	call	0x2886	; 0x2886 <register_code>
    3814:	2f c0       	rjmp	.+94     	; 0x3874 <action_macro_play+0xda>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3816:	22 96       	adiw	r28, 0x02	; 2
    3818:	f8 01       	movw	r30, r16
    381a:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    381c:	98 2f       	mov	r25, r24
    381e:	90 5e       	subi	r25, 0xE0	; 224
    3820:	98 30       	cpi	r25, 0x08	; 8
    3822:	60 f4       	brcc	.+24     	; 0x383c <action_macro_play+0xa2>
                    del_weak_mods(MOD_BIT(macro));
    3824:	87 70       	andi	r24, 0x07	; 7
    3826:	fe 2d       	mov	r31, r14
    3828:	01 c0       	rjmp	.+2      	; 0x382c <action_macro_play+0x92>
    382a:	ff 0f       	add	r31, r31
    382c:	8a 95       	dec	r24
    382e:	ea f7       	brpl	.-6      	; 0x382a <action_macro_play+0x90>
    3830:	8f 2f       	mov	r24, r31
    3832:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <del_weak_mods>
                    send_keyboard_report();
    3836:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <send_keyboard_report>
    383a:	1c c0       	rjmp	.+56     	; 0x3874 <action_macro_play+0xda>
                } else {
                    unregister_code(macro);
    383c:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <unregister_code>
    3840:	19 c0       	rjmp	.+50     	; 0x3874 <action_macro_play+0xda>
                }
                break;
            case WAIT:
                MACRO_READ();
    3842:	22 96       	adiw	r28, 0x02	; 2
    3844:	f8 01       	movw	r30, r16
    3846:	04 91       	lpm	r16, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3848:	07 c0       	rjmp	.+14     	; 0x3858 <action_macro_play+0xbe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    384a:	8f e9       	ldi	r24, 0x9F	; 159
    384c:	9f e0       	ldi	r25, 0x0F	; 15
    384e:	01 97       	sbiw	r24, 0x01	; 1
    3850:	f1 f7       	brne	.-4      	; 0x384e <action_macro_play+0xb4>
    3852:	00 c0       	rjmp	.+0      	; 0x3854 <action_macro_play+0xba>
    3854:	00 00       	nop
    3856:	01 50       	subi	r16, 0x01	; 1
    3858:	00 23       	and	r16, r16
    385a:	b9 f7       	brne	.-18     	; 0x384a <action_macro_play+0xb0>
    385c:	0b c0       	rjmp	.+22     	; 0x3874 <action_macro_play+0xda>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    385e:	22 96       	adiw	r28, 0x02	; 2
    3860:	f8 01       	movw	r30, r16
    3862:	d4 90       	lpm	r13, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    3864:	07 c0       	rjmp	.+14     	; 0x3874 <action_macro_play+0xda>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3866:	0e 94 43 14 	call	0x2886	; 0x2886 <register_code>
    386a:	03 c0       	rjmp	.+6      	; 0x3872 <action_macro_play+0xd8>
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    386c:	8f 77       	andi	r24, 0x7F	; 127
    386e:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <unregister_code>
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3872:	e8 01       	movw	r28, r16
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3874:	8d 2d       	mov	r24, r13
    3876:	07 c0       	rjmp	.+14     	; 0x3886 <action_macro_play+0xec>
    3878:	ef e9       	ldi	r30, 0x9F	; 159
    387a:	ff e0       	ldi	r31, 0x0F	; 15
    387c:	31 97       	sbiw	r30, 0x01	; 1
    387e:	f1 f7       	brne	.-4      	; 0x387c <action_macro_play+0xe2>
    3880:	00 c0       	rjmp	.+0      	; 0x3882 <action_macro_play+0xe8>
    3882:	00 00       	nop
    3884:	81 50       	subi	r24, 0x01	; 1
    3886:	88 23       	and	r24, r24
    3888:	09 f4       	brne	.+2      	; 0x388c <action_macro_play+0xf2>
    388a:	96 cf       	rjmp	.-212    	; 0x37b8 <action_macro_play+0x1e>
    388c:	f5 cf       	rjmp	.-22     	; 0x3878 <action_macro_play+0xde>
    }
}
    388e:	df 91       	pop	r29
    3890:	cf 91       	pop	r28
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	ff 90       	pop	r15
    3898:	ef 90       	pop	r14
    389a:	df 90       	pop	r13
    389c:	08 95       	ret

0000389e <default_layer_state_set>:
 * Default Layer State
 */
uint32_t default_layer_state = 0;

static void default_layer_state_set(uint32_t state)
{
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    38a2:	80 93 0c 02 	sts	0x020C, r24
    38a6:	90 93 0d 02 	sts	0x020D, r25
    38aa:	a0 93 0e 02 	sts	0x020E, r26
    38ae:	b0 93 0f 02 	sts	0x020F, r27
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    38b2:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <clear_keyboard_but_mods>
}
    38b6:	08 95       	ret

000038b8 <layer_state_set>:
 * Keymap Layer State
 */
uint32_t layer_state = 0;

static void layer_state_set(uint32_t state)
{
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    38bc:	80 93 08 02 	sts	0x0208, r24
    38c0:	90 93 09 02 	sts	0x0209, r25
    38c4:	a0 93 0a 02 	sts	0x020A, r26
    38c8:	b0 93 0b 02 	sts	0x020B, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    38cc:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <clear_keyboard_but_mods>
}
    38d0:	08 95       	ret

000038d2 <default_layer_debug>:
}

void default_layer_debug(void)
{
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}
    38d2:	08 95       	ret

000038d4 <default_layer_set>:

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    38d4:	0e 94 4f 1c 	call	0x389e	; 0x389e <default_layer_state_set>
}
    38d8:	08 95       	ret

000038da <default_layer_or>:

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    38da:	0f 93       	push	r16
    38dc:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    38de:	00 91 0c 02 	lds	r16, 0x020C
    38e2:	10 91 0d 02 	lds	r17, 0x020D
    38e6:	20 91 0e 02 	lds	r18, 0x020E
    38ea:	30 91 0f 02 	lds	r19, 0x020F
    38ee:	60 2b       	or	r22, r16
    38f0:	71 2b       	or	r23, r17
    38f2:	82 2b       	or	r24, r18
    38f4:	93 2b       	or	r25, r19
    38f6:	0e 94 4f 1c 	call	0x389e	; 0x389e <default_layer_state_set>
}
    38fa:	1f 91       	pop	r17
    38fc:	0f 91       	pop	r16
    38fe:	08 95       	ret

00003900 <default_layer_and>:
void default_layer_and(uint32_t state)
{
    3900:	0f 93       	push	r16
    3902:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3904:	00 91 0c 02 	lds	r16, 0x020C
    3908:	10 91 0d 02 	lds	r17, 0x020D
    390c:	20 91 0e 02 	lds	r18, 0x020E
    3910:	30 91 0f 02 	lds	r19, 0x020F
    3914:	60 23       	and	r22, r16
    3916:	71 23       	and	r23, r17
    3918:	82 23       	and	r24, r18
    391a:	93 23       	and	r25, r19
    391c:	0e 94 4f 1c 	call	0x389e	; 0x389e <default_layer_state_set>
}
    3920:	1f 91       	pop	r17
    3922:	0f 91       	pop	r16
    3924:	08 95       	ret

00003926 <default_layer_xor>:
void default_layer_xor(uint32_t state)
{
    3926:	0f 93       	push	r16
    3928:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    392a:	00 91 0c 02 	lds	r16, 0x020C
    392e:	10 91 0d 02 	lds	r17, 0x020D
    3932:	20 91 0e 02 	lds	r18, 0x020E
    3936:	30 91 0f 02 	lds	r19, 0x020F
    393a:	60 27       	eor	r22, r16
    393c:	71 27       	eor	r23, r17
    393e:	82 27       	eor	r24, r18
    3940:	93 27       	eor	r25, r19
    3942:	0e 94 4f 1c 	call	0x389e	; 0x389e <default_layer_state_set>
}
    3946:	1f 91       	pop	r17
    3948:	0f 91       	pop	r16
    394a:	08 95       	ret

0000394c <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	70 e0       	ldi	r23, 0x00	; 0
    3950:	cb 01       	movw	r24, r22
    3952:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <layer_state_set>
}
    3956:	08 95       	ret

00003958 <layer_move>:

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3958:	41 e0       	ldi	r20, 0x01	; 1
    395a:	50 e0       	ldi	r21, 0x00	; 0
    395c:	60 e0       	ldi	r22, 0x00	; 0
    395e:	70 e0       	ldi	r23, 0x00	; 0
    3960:	04 c0       	rjmp	.+8      	; 0x396a <layer_move+0x12>
    3962:	44 0f       	add	r20, r20
    3964:	55 1f       	adc	r21, r21
    3966:	66 1f       	adc	r22, r22
    3968:	77 1f       	adc	r23, r23
    396a:	8a 95       	dec	r24
    396c:	d2 f7       	brpl	.-12     	; 0x3962 <layer_move+0xa>
    396e:	cb 01       	movw	r24, r22
    3970:	ba 01       	movw	r22, r20
    3972:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <layer_state_set>
}
    3976:	08 95       	ret

00003978 <layer_on>:

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3978:	41 e0       	ldi	r20, 0x01	; 1
    397a:	50 e0       	ldi	r21, 0x00	; 0
    397c:	60 e0       	ldi	r22, 0x00	; 0
    397e:	70 e0       	ldi	r23, 0x00	; 0
    3980:	04 c0       	rjmp	.+8      	; 0x398a <layer_on+0x12>
    3982:	44 0f       	add	r20, r20
    3984:	55 1f       	adc	r21, r21
    3986:	66 1f       	adc	r22, r22
    3988:	77 1f       	adc	r23, r23
    398a:	8a 95       	dec	r24
    398c:	d2 f7       	brpl	.-12     	; 0x3982 <layer_on+0xa>
    398e:	80 91 08 02 	lds	r24, 0x0208
    3992:	90 91 09 02 	lds	r25, 0x0209
    3996:	a0 91 0a 02 	lds	r26, 0x020A
    399a:	b0 91 0b 02 	lds	r27, 0x020B
    399e:	48 2b       	or	r20, r24
    39a0:	59 2b       	or	r21, r25
    39a2:	6a 2b       	or	r22, r26
    39a4:	7b 2b       	or	r23, r27
    39a6:	cb 01       	movw	r24, r22
    39a8:	ba 01       	movw	r22, r20
    39aa:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <layer_state_set>
}
    39ae:	08 95       	ret

000039b0 <layer_off>:

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    39b0:	41 e0       	ldi	r20, 0x01	; 1
    39b2:	50 e0       	ldi	r21, 0x00	; 0
    39b4:	60 e0       	ldi	r22, 0x00	; 0
    39b6:	70 e0       	ldi	r23, 0x00	; 0
    39b8:	04 c0       	rjmp	.+8      	; 0x39c2 <layer_off+0x12>
    39ba:	44 0f       	add	r20, r20
    39bc:	55 1f       	adc	r21, r21
    39be:	66 1f       	adc	r22, r22
    39c0:	77 1f       	adc	r23, r23
    39c2:	8a 95       	dec	r24
    39c4:	d2 f7       	brpl	.-12     	; 0x39ba <layer_off+0xa>
    39c6:	40 95       	com	r20
    39c8:	50 95       	com	r21
    39ca:	60 95       	com	r22
    39cc:	70 95       	com	r23
    39ce:	80 91 08 02 	lds	r24, 0x0208
    39d2:	90 91 09 02 	lds	r25, 0x0209
    39d6:	a0 91 0a 02 	lds	r26, 0x020A
    39da:	b0 91 0b 02 	lds	r27, 0x020B
    39de:	48 23       	and	r20, r24
    39e0:	59 23       	and	r21, r25
    39e2:	6a 23       	and	r22, r26
    39e4:	7b 23       	and	r23, r27
    39e6:	cb 01       	movw	r24, r22
    39e8:	ba 01       	movw	r22, r20
    39ea:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <layer_state_set>
}
    39ee:	08 95       	ret

000039f0 <layer_invert>:

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    39f0:	41 e0       	ldi	r20, 0x01	; 1
    39f2:	50 e0       	ldi	r21, 0x00	; 0
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	04 c0       	rjmp	.+8      	; 0x3a02 <layer_invert+0x12>
    39fa:	44 0f       	add	r20, r20
    39fc:	55 1f       	adc	r21, r21
    39fe:	66 1f       	adc	r22, r22
    3a00:	77 1f       	adc	r23, r23
    3a02:	8a 95       	dec	r24
    3a04:	d2 f7       	brpl	.-12     	; 0x39fa <layer_invert+0xa>
    3a06:	80 91 08 02 	lds	r24, 0x0208
    3a0a:	90 91 09 02 	lds	r25, 0x0209
    3a0e:	a0 91 0a 02 	lds	r26, 0x020A
    3a12:	b0 91 0b 02 	lds	r27, 0x020B
    3a16:	48 27       	eor	r20, r24
    3a18:	59 27       	eor	r21, r25
    3a1a:	6a 27       	eor	r22, r26
    3a1c:	7b 27       	eor	r23, r27
    3a1e:	cb 01       	movw	r24, r22
    3a20:	ba 01       	movw	r22, r20
    3a22:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <layer_state_set>
}
    3a26:	08 95       	ret

00003a28 <layer_or>:

void layer_or(uint32_t state)
{
    3a28:	0f 93       	push	r16
    3a2a:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3a2c:	00 91 08 02 	lds	r16, 0x0208
    3a30:	10 91 09 02 	lds	r17, 0x0209
    3a34:	20 91 0a 02 	lds	r18, 0x020A
    3a38:	30 91 0b 02 	lds	r19, 0x020B
    3a3c:	60 2b       	or	r22, r16
    3a3e:	71 2b       	or	r23, r17
    3a40:	82 2b       	or	r24, r18
    3a42:	93 2b       	or	r25, r19
    3a44:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <layer_state_set>
}
    3a48:	1f 91       	pop	r17
    3a4a:	0f 91       	pop	r16
    3a4c:	08 95       	ret

00003a4e <layer_and>:
void layer_and(uint32_t state)
{
    3a4e:	0f 93       	push	r16
    3a50:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3a52:	00 91 08 02 	lds	r16, 0x0208
    3a56:	10 91 09 02 	lds	r17, 0x0209
    3a5a:	20 91 0a 02 	lds	r18, 0x020A
    3a5e:	30 91 0b 02 	lds	r19, 0x020B
    3a62:	60 23       	and	r22, r16
    3a64:	71 23       	and	r23, r17
    3a66:	82 23       	and	r24, r18
    3a68:	93 23       	and	r25, r19
    3a6a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <layer_state_set>
}
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	08 95       	ret

00003a74 <layer_xor>:
void layer_xor(uint32_t state)
{
    3a74:	0f 93       	push	r16
    3a76:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3a78:	00 91 08 02 	lds	r16, 0x0208
    3a7c:	10 91 09 02 	lds	r17, 0x0209
    3a80:	20 91 0a 02 	lds	r18, 0x020A
    3a84:	30 91 0b 02 	lds	r19, 0x020B
    3a88:	60 27       	eor	r22, r16
    3a8a:	71 27       	eor	r23, r17
    3a8c:	82 27       	eor	r24, r18
    3a8e:	93 27       	eor	r25, r19
    3a90:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <layer_state_set>
}
    3a94:	1f 91       	pop	r17
    3a96:	0f 91       	pop	r16
    3a98:	08 95       	ret

00003a9a <layer_debug>:

void layer_debug(void)
{
    dprintf("%08lX(%u)", layer_state, biton32(layer_state));
}
    3a9a:	08 95       	ret

00003a9c <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3a9c:	cf 92       	push	r12
    3a9e:	df 92       	push	r13
    3aa0:	ef 92       	push	r14
    3aa2:	ff 92       	push	r15
    3aa4:	0f 93       	push	r16
    3aa6:	1f 93       	push	r17
    3aa8:	cf 93       	push	r28
    3aaa:	df 93       	push	r29
    3aac:	8c 01       	movw	r16, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3aae:	c0 90 0c 02 	lds	r12, 0x020C
    3ab2:	d0 90 0d 02 	lds	r13, 0x020D
    3ab6:	e0 90 0e 02 	lds	r14, 0x020E
    3aba:	f0 90 0f 02 	lds	r15, 0x020F
    3abe:	80 91 08 02 	lds	r24, 0x0208
    3ac2:	90 91 09 02 	lds	r25, 0x0209
    3ac6:	a0 91 0a 02 	lds	r26, 0x020A
    3aca:	b0 91 0b 02 	lds	r27, 0x020B
    3ace:	c8 2a       	or	r12, r24
    3ad0:	d9 2a       	or	r13, r25
    3ad2:	ea 2a       	or	r14, r26
    3ad4:	fb 2a       	or	r15, r27
    3ad6:	cf e1       	ldi	r28, 0x1F	; 31
    3ad8:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3ada:	d7 01       	movw	r26, r14
    3adc:	c6 01       	movw	r24, r12
    3ade:	0c 2e       	mov	r0, r28
    3ae0:	04 c0       	rjmp	.+8      	; 0x3aea <layer_switch_get_action+0x4e>
    3ae2:	b6 95       	lsr	r27
    3ae4:	a7 95       	ror	r26
    3ae6:	97 95       	ror	r25
    3ae8:	87 95       	ror	r24
    3aea:	0a 94       	dec	r0
    3aec:	d2 f7       	brpl	.-12     	; 0x3ae2 <layer_switch_get_action+0x46>
    3aee:	81 70       	andi	r24, 0x01	; 1
    3af0:	90 70       	andi	r25, 0x00	; 0
    3af2:	00 97       	sbiw	r24, 0x00	; 0
    3af4:	39 f0       	breq	.+14     	; 0x3b04 <layer_switch_get_action+0x68>
            action = action_for_key(i, key);
    3af6:	8c 2f       	mov	r24, r28
    3af8:	b8 01       	movw	r22, r16
    3afa:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3afe:	81 30       	cpi	r24, 0x01	; 1
    3b00:	91 05       	cpc	r25, r1
    3b02:	49 f4       	brne	.+18     	; 0x3b16 <layer_switch_get_action+0x7a>
                return action;
    3b04:	21 97       	sbiw	r28, 0x01	; 1
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
    3b06:	8f ef       	ldi	r24, 0xFF	; 255
    3b08:	cf 3f       	cpi	r28, 0xFF	; 255
    3b0a:	d8 07       	cpc	r29, r24
    3b0c:	31 f7       	brne	.-52     	; 0x3ada <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3b0e:	80 e0       	ldi	r24, 0x00	; 0
    3b10:	b8 01       	movw	r22, r16
    3b12:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3b16:	df 91       	pop	r29
    3b18:	cf 91       	pop	r28
    3b1a:	1f 91       	pop	r17
    3b1c:	0f 91       	pop	r16
    3b1e:	ff 90       	pop	r15
    3b20:	ef 90       	pop	r14
    3b22:	df 90       	pop	r13
    3b24:	cf 90       	pop	r12
    3b26:	08 95       	ret

00003b28 <get_oneshot_locked_mods>:
report_keyboard_t *keyboard_report = &(report_keyboard_t){};

#ifndef NO_ACTION_ONESHOT
static int8_t oneshot_mods = 0;
static int8_t oneshot_locked_mods = 0;
int8_t get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
    3b28:	80 91 10 02 	lds	r24, 0x0210
    3b2c:	08 95       	ret

00003b2e <set_oneshot_locked_mods>:
void set_oneshot_locked_mods(int8_t mods) { oneshot_locked_mods = mods; }
    3b2e:	80 93 10 02 	sts	0x0210, r24
    3b32:	08 95       	ret

00003b34 <clear_oneshot_locked_mods>:
void clear_oneshot_locked_mods(void) { oneshot_locked_mods = 0; }
    3b34:	10 92 10 02 	sts	0x0210, r1
    3b38:	08 95       	ret

00003b3a <get_oneshot_layer>:
*   L => are layer bits
*   S => oneshot state bits
*/
static int8_t oneshot_layer_data = 0;

inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
    3b3a:	80 91 11 02 	lds	r24, 0x0211
    3b3e:	85 95       	asr	r24
    3b40:	85 95       	asr	r24
    3b42:	85 95       	asr	r24
    3b44:	08 95       	ret

00003b46 <get_oneshot_layer_state>:
inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
    3b46:	80 91 11 02 	lds	r24, 0x0211
    3b4a:	87 70       	andi	r24, 0x07	; 7
    3b4c:	08 95       	ret

00003b4e <set_oneshot_layer>:
#endif

/* Oneshot layer */
void set_oneshot_layer(uint8_t layer, uint8_t state)
{
    oneshot_layer_data = layer << 3 | state;
    3b4e:	98 2f       	mov	r25, r24
    3b50:	99 0f       	add	r25, r25
    3b52:	99 0f       	add	r25, r25
    3b54:	99 0f       	add	r25, r25
    3b56:	96 2b       	or	r25, r22
    3b58:	90 93 11 02 	sts	0x0211, r25
    layer_on(layer);
    3b5c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <layer_on>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_layer_time = timer_read();
#endif
}
    3b60:	08 95       	ret

00003b62 <reset_oneshot_layer>:
void reset_oneshot_layer(void) {
    oneshot_layer_data = 0;
    3b62:	10 92 11 02 	sts	0x0211, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_layer_time = 0;
#endif
}
    3b66:	08 95       	ret

00003b68 <clear_oneshot_layer_state>:
void clear_oneshot_layer_state(oneshot_fullfillment_t state)
{
    uint8_t start_state = oneshot_layer_data;
    3b68:	40 91 11 02 	lds	r20, 0x0211
    oneshot_layer_data &= ~state;
    3b6c:	80 95       	com	r24
    3b6e:	84 23       	and	r24, r20
    3b70:	80 93 11 02 	sts	0x0211, r24
*   S => oneshot state bits
*/
static int8_t oneshot_layer_data = 0;

inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
    3b74:	98 2f       	mov	r25, r24
    3b76:	97 70       	andi	r25, 0x07	; 7
}
void clear_oneshot_layer_state(oneshot_fullfillment_t state)
{
    uint8_t start_state = oneshot_layer_data;
    oneshot_layer_data &= ~state;
    if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
    3b78:	69 f4       	brne	.+26     	; 0x3b94 <clear_oneshot_layer_state+0x2c>
    3b7a:	50 e0       	ldi	r21, 0x00	; 0
    3b7c:	28 2f       	mov	r18, r24
    3b7e:	33 27       	eor	r19, r19
    3b80:	27 fd       	sbrc	r18, 7
    3b82:	30 95       	com	r19
    3b84:	42 17       	cp	r20, r18
    3b86:	53 07       	cpc	r21, r19
    3b88:	29 f0       	breq	.+10     	; 0x3b94 <clear_oneshot_layer_state+0x2c>
        layer_off(get_oneshot_layer());
    3b8a:	85 95       	asr	r24
    3b8c:	85 95       	asr	r24
    3b8e:	85 95       	asr	r24
    3b90:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <layer_off>
    3b94:	08 95       	ret

00003b96 <is_oneshot_layer_active>:
*   S => oneshot state bits
*/
static int8_t oneshot_layer_data = 0;

inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
    3b96:	90 91 11 02 	lds	r25, 0x0211
    3b9a:	97 70       	andi	r25, 0x07	; 7
#endif
    }
}
bool is_oneshot_layer_active(void)
{
    return get_oneshot_layer_state();
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	09 f4       	brne	.+2      	; 0x3ba2 <is_oneshot_layer_active+0xc>
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
}
    3ba2:	08 95       	ret

00003ba4 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3ba4:	90 91 0c 01 	lds	r25, 0x010C
    3ba8:	99 23       	and	r25, r25
    3baa:	b1 f1       	breq	.+108    	; 0x3c18 <add_key+0x74>
    3bac:	90 91 0d 01 	lds	r25, 0x010D
    3bb0:	99 23       	and	r25, r25
    3bb2:	91 f1       	breq	.+100    	; 0x3c18 <add_key+0x74>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3bb4:	98 2f       	mov	r25, r24
    3bb6:	96 95       	lsr	r25
    3bb8:	96 95       	lsr	r25
    3bba:	96 95       	lsr	r25
    3bbc:	9f 30       	cpi	r25, 0x0F	; 15
    3bbe:	90 f4       	brcc	.+36     	; 0x3be4 <add_key+0x40>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3bc0:	e0 91 0e 01 	lds	r30, 0x010E
    3bc4:	f0 91 0f 01 	lds	r31, 0x010F
    3bc8:	e9 0f       	add	r30, r25
    3bca:	f1 1d       	adc	r31, r1
    3bcc:	87 70       	andi	r24, 0x07	; 7
    3bce:	21 e0       	ldi	r18, 0x01	; 1
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	02 c0       	rjmp	.+4      	; 0x3bd8 <add_key+0x34>
    3bd4:	22 0f       	add	r18, r18
    3bd6:	33 1f       	adc	r19, r19
    3bd8:	8a 95       	dec	r24
    3bda:	e2 f7       	brpl	.-8      	; 0x3bd4 <add_key+0x30>
    3bdc:	81 81       	ldd	r24, Z+1	; 0x01
    3bde:	82 2b       	or	r24, r18
    3be0:	81 83       	std	Z+1, r24	; 0x01
    3be2:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3be4:	90 91 25 02 	lds	r25, 0x0225
    3be8:	90 ff       	sbrs	r25, 0
    3bea:	39 c0       	rjmp	.+114    	; 0x3c5e <add_key+0xba>
    3bec:	00 d0       	rcall	.+0      	; 0x3bee <add_key+0x4a>
    3bee:	00 d0       	rcall	.+0      	; 0x3bf0 <add_key+0x4c>
    3bf0:	ed b7       	in	r30, 0x3d	; 61
    3bf2:	fe b7       	in	r31, 0x3e	; 62
    3bf4:	31 96       	adiw	r30, 0x01	; 1
    3bf6:	25 ea       	ldi	r18, 0xA5	; 165
    3bf8:	33 e0       	ldi	r19, 0x03	; 3
    3bfa:	ad b7       	in	r26, 0x3d	; 61
    3bfc:	be b7       	in	r27, 0x3e	; 62
    3bfe:	12 96       	adiw	r26, 0x02	; 2
    3c00:	3c 93       	st	X, r19
    3c02:	2e 93       	st	-X, r18
    3c04:	11 97       	sbiw	r26, 0x01	; 1
    3c06:	82 83       	std	Z+2, r24	; 0x02
    3c08:	13 82       	std	Z+3, r1	; 0x03
    3c0a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    3c0e:	0f 90       	pop	r0
    3c10:	0f 90       	pop	r0
    3c12:	0f 90       	pop	r0
    3c14:	0f 90       	pop	r0
    3c16:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3c18:	40 91 0e 01 	lds	r20, 0x010E
    3c1c:	50 91 0f 01 	lds	r21, 0x010F
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	ef ef       	ldi	r30, 0xFF	; 255
#endif
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
    3c26:	da 01       	movw	r26, r20
    3c28:	a2 0f       	add	r26, r18
    3c2a:	b3 1f       	adc	r27, r19
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3c2c:	12 96       	adiw	r26, 0x02	; 2
    3c2e:	9c 91       	ld	r25, X
    3c30:	12 97       	sbiw	r26, 0x02	; 2
    3c32:	98 17       	cp	r25, r24
    3c34:	a1 f0       	breq	.+40     	; 0x3c5e <add_key+0xba>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3c36:	ef 3f       	cpi	r30, 0xFF	; 255
    3c38:	19 f4       	brne	.+6      	; 0x3c40 <add_key+0x9c>
    3c3a:	99 23       	and	r25, r25
    3c3c:	09 f4       	brne	.+2      	; 0x3c40 <add_key+0x9c>
    3c3e:	e2 2f       	mov	r30, r18
    3c40:	2f 5f       	subi	r18, 0xFF	; 255
    3c42:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3c44:	2e 30       	cpi	r18, 0x0E	; 14
    3c46:	31 05       	cpc	r19, r1
    3c48:	71 f7       	brne	.-36     	; 0x3c26 <add_key+0x82>
    3c4a:	07 c0       	rjmp	.+14     	; 0x3c5a <add_key+0xb6>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
            keyboard_report->keys[empty] = code;
    3c4c:	ff 27       	eor	r31, r31
    3c4e:	e7 fd       	sbrc	r30, 7
    3c50:	f0 95       	com	r31
    3c52:	e4 0f       	add	r30, r20
    3c54:	f5 1f       	adc	r31, r21
    3c56:	82 83       	std	Z+2, r24	; 0x02
    3c58:	08 95       	ret
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3c5a:	ef 3f       	cpi	r30, 0xFF	; 255
    3c5c:	b9 f7       	brne	.-18     	; 0x3c4c <add_key+0xa8>
    3c5e:	08 95       	ret

00003c60 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3c60:	90 91 0c 01 	lds	r25, 0x010C
    3c64:	99 23       	and	r25, r25
    3c66:	b9 f1       	breq	.+110    	; 0x3cd6 <del_key+0x76>
    3c68:	90 91 0d 01 	lds	r25, 0x010D
    3c6c:	99 23       	and	r25, r25
    3c6e:	99 f1       	breq	.+102    	; 0x3cd6 <del_key+0x76>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3c70:	98 2f       	mov	r25, r24
    3c72:	96 95       	lsr	r25
    3c74:	96 95       	lsr	r25
    3c76:	96 95       	lsr	r25
    3c78:	9f 30       	cpi	r25, 0x0F	; 15
    3c7a:	98 f4       	brcc	.+38     	; 0x3ca2 <del_key+0x42>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3c7c:	e0 91 0e 01 	lds	r30, 0x010E
    3c80:	f0 91 0f 01 	lds	r31, 0x010F
    3c84:	e9 0f       	add	r30, r25
    3c86:	f1 1d       	adc	r31, r1
    3c88:	87 70       	andi	r24, 0x07	; 7
    3c8a:	21 e0       	ldi	r18, 0x01	; 1
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <del_key+0x34>
    3c90:	22 0f       	add	r18, r18
    3c92:	33 1f       	adc	r19, r19
    3c94:	8a 95       	dec	r24
    3c96:	e2 f7       	brpl	.-8      	; 0x3c90 <del_key+0x30>
    3c98:	20 95       	com	r18
    3c9a:	81 81       	ldd	r24, Z+1	; 0x01
    3c9c:	28 23       	and	r18, r24
    3c9e:	21 83       	std	Z+1, r18	; 0x01
    3ca0:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3ca2:	90 91 25 02 	lds	r25, 0x0225
    3ca6:	90 ff       	sbrs	r25, 0
    3ca8:	25 c0       	rjmp	.+74     	; 0x3cf4 <del_key+0x94>
    3caa:	00 d0       	rcall	.+0      	; 0x3cac <del_key+0x4c>
    3cac:	00 d0       	rcall	.+0      	; 0x3cae <del_key+0x4e>
    3cae:	ed b7       	in	r30, 0x3d	; 61
    3cb0:	fe b7       	in	r31, 0x3e	; 62
    3cb2:	31 96       	adiw	r30, 0x01	; 1
    3cb4:	23 ec       	ldi	r18, 0xC3	; 195
    3cb6:	33 e0       	ldi	r19, 0x03	; 3
    3cb8:	ad b7       	in	r26, 0x3d	; 61
    3cba:	be b7       	in	r27, 0x3e	; 62
    3cbc:	12 96       	adiw	r26, 0x02	; 2
    3cbe:	3c 93       	st	X, r19
    3cc0:	2e 93       	st	-X, r18
    3cc2:	11 97       	sbiw	r26, 0x01	; 1
    3cc4:	82 83       	std	Z+2, r24	; 0x02
    3cc6:	13 82       	std	Z+3, r1	; 0x03
    3cc8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    3ccc:	0f 90       	pop	r0
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3cd6:	20 91 0e 01 	lds	r18, 0x010E
    3cda:	30 91 0f 01 	lds	r19, 0x010F
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	f9 01       	movw	r30, r18
    3ce2:	e9 0f       	add	r30, r25
    3ce4:	f1 1d       	adc	r31, r1
    3ce6:	42 81       	ldd	r20, Z+2	; 0x02
    3ce8:	48 17       	cp	r20, r24
    3cea:	09 f4       	brne	.+2      	; 0x3cee <del_key+0x8e>
            keyboard_report->keys[i] = 0;
    3cec:	12 82       	std	Z+2, r1	; 0x02
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3cee:	9f 5f       	subi	r25, 0xFF	; 255
    3cf0:	9e 30       	cpi	r25, 0x0E	; 14
    3cf2:	b1 f7       	brne	.-20     	; 0x3ce0 <del_key+0x80>
    3cf4:	08 95       	ret

00003cf6 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3cfa:	e0 91 0e 01 	lds	r30, 0x010E
    3cfe:	f0 91 0f 01 	lds	r31, 0x010F
    3d02:	e8 0f       	add	r30, r24
    3d04:	f9 1f       	adc	r31, r25
    3d06:	10 82       	st	Z, r1
    3d08:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3d0a:	80 31       	cpi	r24, 0x10	; 16
    3d0c:	91 05       	cpc	r25, r1
    3d0e:	a9 f7       	brne	.-22     	; 0x3cfa <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3d10:	08 95       	ret

00003d12 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    3d12:	80 91 12 02 	lds	r24, 0x0212
    3d16:	08 95       	ret

00003d18 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3d18:	90 91 12 02 	lds	r25, 0x0212
    3d1c:	98 2b       	or	r25, r24
    3d1e:	90 93 12 02 	sts	0x0212, r25
    3d22:	08 95       	ret

00003d24 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3d24:	80 95       	com	r24
    3d26:	90 91 12 02 	lds	r25, 0x0212
    3d2a:	98 23       	and	r25, r24
    3d2c:	90 93 12 02 	sts	0x0212, r25
    3d30:	08 95       	ret

00003d32 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3d32:	10 92 12 02 	sts	0x0212, r1
    3d36:	08 95       	ret

00003d38 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3d38:	90 91 13 02 	lds	r25, 0x0213
    3d3c:	98 2b       	or	r25, r24
    3d3e:	90 93 13 02 	sts	0x0213, r25
    3d42:	08 95       	ret

00003d44 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3d44:	80 95       	com	r24
    3d46:	90 91 13 02 	lds	r25, 0x0213
    3d4a:	98 23       	and	r25, r24
    3d4c:	90 93 13 02 	sts	0x0213, r25
    3d50:	08 95       	ret

00003d52 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3d52:	10 92 13 02 	sts	0x0213, r1
    3d56:	08 95       	ret

00003d58 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3d58:	80 93 14 02 	sts	0x0214, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
#endif
}
    3d5c:	08 95       	ret

00003d5e <clear_oneshot_mods>:
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3d5e:	10 92 14 02 	sts	0x0214, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
#endif
}
    3d62:	08 95       	ret

00003d64 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3d64:	40 91 0e 01 	lds	r20, 0x010E
    3d68:	50 91 0f 01 	lds	r21, 0x010F
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3d70:	80 e0       	ldi	r24, 0x00	; 0
#endif

/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
    3d72:	fa 01       	movw	r30, r20
    3d74:	e2 0f       	add	r30, r18
    3d76:	f3 1f       	adc	r31, r19
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3d78:	91 81       	ldd	r25, Z+1	; 0x01
    3d7a:	91 11       	cpse	r25, r1
            cnt++;
    3d7c:	8f 5f       	subi	r24, 0xFF	; 255
    3d7e:	2f 5f       	subi	r18, 0xFF	; 255
    3d80:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3d82:	2f 30       	cpi	r18, 0x0F	; 15
    3d84:	31 05       	cpc	r19, r1
    3d86:	a9 f7       	brne	.-22     	; 0x3d72 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3d88:	08 95       	ret

00003d8a <send_keyboard_report>:
    return get_oneshot_layer_state();
}
#endif

void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3d8a:	e0 91 0e 01 	lds	r30, 0x010E
    3d8e:	f0 91 0f 01 	lds	r31, 0x010F
    3d92:	80 91 12 02 	lds	r24, 0x0212
    3d96:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3d98:	e0 91 0e 01 	lds	r30, 0x010E
    3d9c:	f0 91 0f 01 	lds	r31, 0x010F
    3da0:	80 81       	ld	r24, Z
    3da2:	90 91 13 02 	lds	r25, 0x0213
    3da6:	89 2b       	or	r24, r25
    3da8:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3daa:	90 91 14 02 	lds	r25, 0x0214
    3dae:	99 23       	and	r25, r25
    3db0:	69 f0       	breq	.+26     	; 0x3dcc <send_keyboard_report+0x42>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3db2:	e0 91 0e 01 	lds	r30, 0x010E
    3db6:	f0 91 0f 01 	lds	r31, 0x010F
    3dba:	80 81       	ld	r24, Z
    3dbc:	89 2b       	or	r24, r25
    3dbe:	80 83       	st	Z, r24
        if (has_anykey()) {
    3dc0:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <has_anykey>
    3dc4:	88 23       	and	r24, r24
    3dc6:	11 f0       	breq	.+4      	; 0x3dcc <send_keyboard_report+0x42>
            clear_oneshot_mods();
    3dc8:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <clear_oneshot_mods>
        }
    }

#endif
    host_keyboard_send(keyboard_report);
    3dcc:	80 91 0e 01 	lds	r24, 0x010E
    3dd0:	90 91 0f 01 	lds	r25, 0x010F
    3dd4:	0e 94 bf 12 	call	0x257e	; 0x257e <host_keyboard_send>
}
    3dd8:	08 95       	ret

00003dda <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3dda:	90 93 4b 01 	sts	0x014B, r25
    3dde:	80 93 4a 01 	sts	0x014A, r24
}
    3de2:	08 95       	ret

00003de4 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3de4:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	9c 01       	movw	r18, r24
    3dea:	2c 7c       	andi	r18, 0xCC	; 204
    3dec:	30 70       	andi	r19, 0x00	; 0
    3dee:	35 95       	asr	r19
    3df0:	27 95       	ror	r18
    3df2:	35 95       	asr	r19
    3df4:	27 95       	ror	r18
    3df6:	83 73       	andi	r24, 0x33	; 51
    3df8:	90 70       	andi	r25, 0x00	; 0
    3dfa:	88 0f       	add	r24, r24
    3dfc:	99 1f       	adc	r25, r25
    3dfe:	88 0f       	add	r24, r24
    3e00:	99 1f       	adc	r25, r25
    3e02:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	c9 01       	movw	r24, r18
    3e08:	8a 7a       	andi	r24, 0xAA	; 170
    3e0a:	90 70       	andi	r25, 0x00	; 0
    3e0c:	95 95       	asr	r25
    3e0e:	87 95       	ror	r24
    3e10:	25 75       	andi	r18, 0x55	; 85
    3e12:	30 70       	andi	r19, 0x00	; 0
    3e14:	22 0f       	add	r18, r18
    3e16:	33 1f       	adc	r19, r19
    return bits;
}
    3e18:	82 2b       	or	r24, r18
    3e1a:	08 95       	ret

00003e1c <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3e1c:	1f 93       	push	r17
    3e1e:	cf 93       	push	r28
    3e20:	df 93       	push	r29
    3e22:	0f 92       	push	r0
    3e24:	cd b7       	in	r28, 0x3d	; 61
    3e26:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3e28:	99 83       	std	Y+1, r25	; 0x01
    3e2a:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <bitrev>
    3e2e:	18 2f       	mov	r17, r24
    3e30:	99 81       	ldd	r25, Y+1	; 0x01
    3e32:	89 2f       	mov	r24, r25
    3e34:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <bitrev>
    3e38:	31 2f       	mov	r19, r17
    3e3a:	20 e0       	ldi	r18, 0x00	; 0
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	82 2b       	or	r24, r18
    3e40:	93 2b       	or	r25, r19
    return bits;
}
    3e42:	0f 90       	pop	r0
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	1f 91       	pop	r17
    3e4a:	08 95       	ret

00003e4c <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3e4c:	80 91 3c 02 	lds	r24, 0x023C
    3e50:	84 30       	cpi	r24, 0x04	; 4
    3e52:	09 f1       	breq	.+66     	; 0x3e96 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3e54:	10 92 26 02 	sts	0x0226, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3e58:	20 e4       	ldi	r18, 0x40	; 64
    3e5a:	88 e1       	ldi	r24, 0x18	; 24
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	f8 94       	cli
    3e62:	a8 95       	wdr
    3e64:	80 93 60 00 	sts	0x0060, r24
    3e68:	0f be       	out	0x3f, r0	; 63
    3e6a:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3e6e:	83 b7       	in	r24, 0x33	; 51
    3e70:	81 7f       	andi	r24, 0xF1	; 241
    3e72:	84 60       	ori	r24, 0x04	; 4
    3e74:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3e76:	83 b7       	in	r24, 0x33	; 51
    3e78:	81 60       	ori	r24, 0x01	; 1
    3e7a:	83 bf       	out	0x33, r24	; 51
    sei();
    3e7c:	78 94       	sei
    sleep_cpu();
    3e7e:	88 95       	sleep
    sleep_disable();
    3e80:	83 b7       	in	r24, 0x33	; 51
    3e82:	8e 7f       	andi	r24, 0xFE	; 254
    3e84:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3e86:	88 e1       	ldi	r24, 0x18	; 24
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	f8 94       	cli
    3e8c:	80 93 60 00 	sts	0x0060, r24
    3e90:	10 92 60 00 	sts	0x0060, r1
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	08 95       	ret

00003e98 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3e98:	08 95       	ret

00003e9a <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3e9a:	08 95       	ret

00003e9c <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3e9c:	cf 93       	push	r28
    matrix_power_up();
    3e9e:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <matrix_power_up>
    matrix_scan();
    3ea2:	0e 94 66 08 	call	0x10cc	; 0x10cc <matrix_scan>
    matrix_power_down();
    3ea6:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3eaa:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3eac:	8c 2f       	mov	r24, r28
    3eae:	0e 94 a7 08 	call	0x114e	; 0x114e <matrix_get_row>
    3eb2:	88 23       	and	r24, r24
    3eb4:	21 f4       	brne	.+8      	; 0x3ebe <suspend_wakeup_condition+0x22>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3eb6:	cf 5f       	subi	r28, 0xFF	; 255
    3eb8:	ca 30       	cpi	r28, 0x0A	; 10
    3eba:	c1 f7       	brne	.-16     	; 0x3eac <suspend_wakeup_condition+0x10>
    3ebc:	01 c0       	rjmp	.+2      	; 0x3ec0 <suspend_wakeup_condition+0x24>
        if (matrix_get_row(r)) return true;
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3ec0:	cf 91       	pop	r28
    3ec2:	08 95       	ret

00003ec4 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3ec4:	0e 94 0f 18 	call	0x301e	; 0x301e <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    3ec8:	08 95       	ret

00003eca <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3eca:	82 e0       	ldi	r24, 0x02	; 2
    3ecc:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3ece:	93 e0       	ldi	r25, 0x03	; 3
    3ed0:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3ed2:	9a ef       	ldi	r25, 0xFA	; 250
    3ed4:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3ed6:	80 93 6e 00 	sts	0x006E, r24
}
    3eda:	08 95       	ret

00003edc <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3edc:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3ede:	f8 94       	cli
    t = timer_count;
    3ee0:	40 91 27 02 	lds	r20, 0x0227
    3ee4:	50 91 28 02 	lds	r21, 0x0228
    3ee8:	60 91 29 02 	lds	r22, 0x0229
    3eec:	70 91 2a 02 	lds	r23, 0x022A
    SREG = sreg;
    3ef0:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    3ef2:	ca 01       	movw	r24, r20
    3ef4:	08 95       	ret

00003ef6 <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    3ef6:	0f 93       	push	r16
    3ef8:	1f 93       	push	r17
    3efa:	fc 01       	movw	r30, r24
    uint32_t t;

    uint8_t sreg = SREG;
    3efc:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3efe:	f8 94       	cli
    t = timer_count;
    3f00:	00 91 27 02 	lds	r16, 0x0227
    3f04:	10 91 28 02 	lds	r17, 0x0228
    3f08:	20 91 29 02 	lds	r18, 0x0229
    3f0c:	30 91 2a 02 	lds	r19, 0x022A
    SREG = sreg;
    3f10:	8f bf       	out	0x3f, r24	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3f12:	b9 01       	movw	r22, r18
    3f14:	a8 01       	movw	r20, r16
    3f16:	60 70       	andi	r22, 0x00	; 0
    3f18:	70 70       	andi	r23, 0x00	; 0
    3f1a:	cf 01       	movw	r24, r30
    3f1c:	a0 e0       	ldi	r26, 0x00	; 0
    3f1e:	b0 e0       	ldi	r27, 0x00	; 0
    3f20:	48 17       	cp	r20, r24
    3f22:	59 07       	cpc	r21, r25
    3f24:	6a 07       	cpc	r22, r26
    3f26:	7b 07       	cpc	r23, r27
    3f28:	20 f0       	brcs	.+8      	; 0x3f32 <timer_elapsed+0x3c>
    3f2a:	c8 01       	movw	r24, r16
    3f2c:	8e 1b       	sub	r24, r30
    3f2e:	9f 0b       	sbc	r25, r31
    3f30:	05 c0       	rjmp	.+10     	; 0x3f3c <timer_elapsed+0x46>
    3f32:	cf 01       	movw	r24, r30
    3f34:	80 95       	com	r24
    3f36:	90 95       	com	r25
    3f38:	80 0f       	add	r24, r16
    3f3a:	91 1f       	adc	r25, r17
}
    3f3c:	1f 91       	pop	r17
    3f3e:	0f 91       	pop	r16
    3f40:	08 95       	ret

00003f42 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3f42:	1f 92       	push	r1
    3f44:	0f 92       	push	r0
    3f46:	0f b6       	in	r0, 0x3f	; 63
    3f48:	0f 92       	push	r0
    3f4a:	11 24       	eor	r1, r1
    3f4c:	8f 93       	push	r24
    3f4e:	9f 93       	push	r25
    3f50:	af 93       	push	r26
    3f52:	bf 93       	push	r27
    timer_count++;
    3f54:	80 91 27 02 	lds	r24, 0x0227
    3f58:	90 91 28 02 	lds	r25, 0x0228
    3f5c:	a0 91 29 02 	lds	r26, 0x0229
    3f60:	b0 91 2a 02 	lds	r27, 0x022A
    3f64:	01 96       	adiw	r24, 0x01	; 1
    3f66:	a1 1d       	adc	r26, r1
    3f68:	b1 1d       	adc	r27, r1
    3f6a:	80 93 27 02 	sts	0x0227, r24
    3f6e:	90 93 28 02 	sts	0x0228, r25
    3f72:	a0 93 29 02 	sts	0x0229, r26
    3f76:	b0 93 2a 02 	sts	0x022A, r27
}
    3f7a:	bf 91       	pop	r27
    3f7c:	af 91       	pop	r26
    3f7e:	9f 91       	pop	r25
    3f80:	8f 91       	pop	r24
    3f82:	0f 90       	pop	r0
    3f84:	0f be       	out	0x3f, r0	; 63
    3f86:	0f 90       	pop	r0
    3f88:	1f 90       	pop	r1
    3f8a:	18 95       	reti

00003f8c <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3f8c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <USB_Disable>
    cli();
    3f90:	f8 94       	cli
    3f92:	8f ef       	ldi	r24, 0xFF	; 255
    3f94:	97 ea       	ldi	r25, 0xA7	; 167
    3f96:	a1 e6       	ldi	r26, 0x61	; 97
    3f98:	81 50       	subi	r24, 0x01	; 1
    3f9a:	90 40       	sbci	r25, 0x00	; 0
    3f9c:	a0 40       	sbci	r26, 0x00	; 0
    3f9e:	e1 f7       	brne	.-8      	; 0x3f98 <bootloader_jump+0xc>
    3fa0:	00 c0       	rjmp	.+0      	; 0x3fa2 <bootloader_jump+0x16>
    3fa2:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3fa4:	87 e0       	ldi	r24, 0x07	; 7
    3fa6:	90 eb       	ldi	r25, 0xB0	; 176
    3fa8:	dc 01       	movw	r26, r24
    3faa:	80 93 46 02 	sts	0x0246, r24
    3fae:	90 93 47 02 	sts	0x0247, r25
    3fb2:	a0 93 48 02 	sts	0x0248, r26
    3fb6:	b0 93 49 02 	sts	0x0249, r27
    wdt_enable(WDTO_250MS);
    3fba:	2c e0       	ldi	r18, 0x0C	; 12
    3fbc:	88 e1       	ldi	r24, 0x18	; 24
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	0f b6       	in	r0, 0x3f	; 63
    3fc2:	f8 94       	cli
    3fc4:	a8 95       	wdr
    3fc6:	80 93 60 00 	sts	0x0060, r24
    3fca:	0f be       	out	0x3f, r0	; 63
    3fcc:	20 93 60 00 	sts	0x0060, r18
    3fd0:	ff cf       	rjmp	.-2      	; 0x3fd0 <bootloader_jump+0x44>

00003fd2 <action_for_key>:

/* Converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    return (action_t){ .code = pgm_read_word(&actionmaps[(layer)][(key.row)][(key.col)]) };
    3fd2:	e6 2f       	mov	r30, r22
    3fd4:	f0 e0       	ldi	r31, 0x00	; 0
    3fd6:	ee 0f       	add	r30, r30
    3fd8:	ff 1f       	adc	r31, r31
    3fda:	47 2f       	mov	r20, r23
    3fdc:	50 e0       	ldi	r21, 0x00	; 0
    3fde:	9a 01       	movw	r18, r20
    3fe0:	22 0f       	add	r18, r18
    3fe2:	33 1f       	adc	r19, r19
    3fe4:	24 0f       	add	r18, r20
    3fe6:	35 1f       	adc	r19, r21
    3fe8:	22 0f       	add	r18, r18
    3fea:	33 1f       	adc	r19, r19
    3fec:	22 0f       	add	r18, r18
    3fee:	33 1f       	adc	r19, r19
    3ff0:	e2 0f       	add	r30, r18
    3ff2:	f3 1f       	adc	r31, r19
    3ff4:	98 e7       	ldi	r25, 0x78	; 120
    3ff6:	89 9f       	mul	r24, r25
    3ff8:	c0 01       	movw	r24, r0
    3ffa:	11 24       	eor	r1, r1
    3ffc:	e8 0f       	add	r30, r24
    3ffe:	f9 1f       	adc	r31, r25
    4000:	e4 55       	subi	r30, 0x54	; 84
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	85 91       	lpm	r24, Z+
    4006:	94 91       	lpm	r25, Z
//    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
}
    4008:	08 95       	ret

0000400a <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	08 95       	ret

00004010 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    4010:	cf 92       	push	r12
    4012:	df 92       	push	r13
    4014:	ef 92       	push	r14
    4016:	ff 92       	push	r15
    4018:	0f 93       	push	r16
    401a:	1f 93       	push	r17
    401c:	cf 93       	push	r28
    401e:	7c 01       	movw	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4020:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    4022:	8c 2f       	mov	r24, r28
    4024:	0e 94 a7 08 	call	0x114e	; 0x114e <matrix_get_row>
    4028:	00 e0       	ldi	r16, 0x00	; 0
    402a:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    402c:	c8 2e       	mov	r12, r24
    402e:	dd 24       	eor	r13, r13
    4030:	c6 01       	movw	r24, r12
    4032:	00 2e       	mov	r0, r16
    4034:	02 c0       	rjmp	.+4      	; 0x403a <scan_key+0x2a>
    4036:	95 95       	asr	r25
    4038:	87 95       	ror	r24
    403a:	0a 94       	dec	r0
    403c:	e2 f7       	brpl	.-8      	; 0x4036 <scan_key+0x26>
    403e:	80 ff       	sbrs	r24, 0
    4040:	19 c0       	rjmp	.+50     	; 0x4074 <scan_key+0x64>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    4042:	80 e0       	ldi	r24, 0x00	; 0
    4044:	60 2f       	mov	r22, r16
    4046:	7c 2f       	mov	r23, r28
    4048:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <action_for_key>
                if (action.code == code ||
    404c:	8e 15       	cp	r24, r14
    404e:	9f 05       	cpc	r25, r15
    4050:	d9 f0       	breq	.+54     	; 0x4088 <scan_key+0x78>
                    ((action.kind.id == ACT_LMODS ||
    4052:	29 2f       	mov	r18, r25
    4054:	20 7f       	andi	r18, 0xF0	; 240
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
                if (action.code == code ||
    4056:	51 f0       	breq	.+20     	; 0x406c <scan_key+0x5c>
                    ((action.kind.id == ACT_LMODS ||
    4058:	20 31       	cpi	r18, 0x10	; 16
    405a:	41 f0       	breq	.+16     	; 0x406c <scan_key+0x5c>
                      action.kind.id == ACT_RMODS ||
    405c:	20 32       	cpi	r18, 0x20	; 32
    405e:	31 f0       	breq	.+12     	; 0x406c <scan_key+0x5c>
                      action.kind.id == ACT_LMODS_TAP ||
    4060:	20 33       	cpi	r18, 0x30	; 48
    4062:	21 f0       	breq	.+8      	; 0x406c <scan_key+0x5c>
                      action.kind.id == ACT_RMODS_TAP ||
    4064:	20 3a       	cpi	r18, 0xA0	; 160
    4066:	11 f0       	breq	.+4      	; 0x406c <scan_key+0x5c>
                      action.kind.id == ACT_LAYER_TAP ||
    4068:	20 3b       	cpi	r18, 0xB0	; 176
    406a:	21 f4       	brne	.+8      	; 0x4074 <scan_key+0x64>
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    406c:	90 e0       	ldi	r25, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    406e:	8e 15       	cp	r24, r14
    4070:	9f 05       	cpc	r25, r15
    4072:	51 f0       	breq	.+20     	; 0x4088 <scan_key+0x78>
    4074:	0f 5f       	subi	r16, 0xFF	; 255
    4076:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4078:	06 30       	cpi	r16, 0x06	; 6
    407a:	11 05       	cpc	r17, r1
    407c:	c9 f6       	brne	.-78     	; 0x4030 <scan_key+0x20>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    407e:	cf 5f       	subi	r28, 0xFF	; 255
    4080:	ca 30       	cpi	r28, 0x0A	; 10
    4082:	79 f6       	brne	.-98     	; 0x4022 <scan_key+0x12>
                    return true;
                }
            }
        }
    }
    return false;
    4084:	80 e0       	ldi	r24, 0x00	; 0
    4086:	01 c0       	rjmp	.+2      	; 0x408a <scan_key+0x7a>
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
                    return true;
    4088:	81 e0       	ldi	r24, 0x01	; 1
                }
            }
        }
    }
    return false;
}
    408a:	cf 91       	pop	r28
    408c:	1f 91       	pop	r17
    408e:	0f 91       	pop	r16
    4090:	ff 90       	pop	r15
    4092:	ef 90       	pop	r14
    4094:	df 90       	pop	r13
    4096:	cf 90       	pop	r12
    4098:	08 95       	ret

0000409a <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    409a:	cf 93       	push	r28
    409c:	df 93       	push	r29
    409e:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    40a0:	8c e2       	ldi	r24, 0x2C	; 44
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	0e 94 08 20 	call	0x4010	; 0x4010 <scan_key>
    40a8:	88 23       	and	r24, r24
    40aa:	21 f0       	breq	.+8      	; 0x40b4 <bootmagic_scan_key+0x1a>

    return scan_key(code);
    40ac:	ce 01       	movw	r24, r28
    40ae:	0e 94 08 20 	call	0x4010	; 0x4010 <scan_key>
    40b2:	01 c0       	rjmp	.+2      	; 0x40b6 <bootmagic_scan_key+0x1c>
    return false;
}

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    40b4:	80 e0       	ldi	r24, 0x00	; 0

    return scan_key(code);
}
    40b6:	df 91       	pop	r29
    40b8:	cf 91       	pop	r28
    40ba:	08 95       	ret

000040bc <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    40bc:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    40be:	0e 94 b9 21 	call	0x4372	; 0x4372 <eeconfig_is_enabled>
    40c2:	88 23       	and	r24, r24
    40c4:	11 f4       	brne	.+4      	; 0x40ca <bootmagic+0xe>
        eeconfig_init();
    40c6:	0e 94 9e 21 	call	0x433c	; 0x433c <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    40ca:	81 ee       	ldi	r24, 0xE1	; 225
    40cc:	93 e0       	ldi	r25, 0x03	; 3
    40ce:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    40d2:	c5 e6       	ldi	r28, 0x65	; 101
    40d4:	08 c0       	rjmp	.+16     	; 0x40e6 <bootmagic+0x2a>
    40d6:	0e 94 66 08 	call	0x10cc	; 0x10cc <matrix_scan>
    40da:	8f e3       	ldi	r24, 0x3F	; 63
    40dc:	9c e9       	ldi	r25, 0x9C	; 156
    40de:	01 97       	sbiw	r24, 0x01	; 1
    40e0:	f1 f7       	brne	.-4      	; 0x40de <bootmagic+0x22>
    40e2:	00 c0       	rjmp	.+0      	; 0x40e4 <bootmagic+0x28>
    40e4:	00 00       	nop
    40e6:	c1 50       	subi	r28, 0x01	; 1
    40e8:	b1 f7       	brne	.-20     	; 0x40d6 <bootmagic+0x1a>
    print("done.\n");
    40ea:	86 ef       	ldi	r24, 0xF6	; 246
    40ec:	93 e0       	ldi	r25, 0x03	; 3
    40ee:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    40f2:	89 e2       	ldi	r24, 0x29	; 41
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    40fa:	88 23       	and	r24, r24
    40fc:	09 f0       	breq	.+2      	; 0x4100 <bootmagic+0x44>
    40fe:	1c c1       	rjmp	.+568    	; 0x4338 <bootmagic+0x27c>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4100:	8a e2       	ldi	r24, 0x2A	; 42
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    4108:	88 23       	and	r24, r24
    410a:	11 f0       	breq	.+4      	; 0x4110 <bootmagic+0x54>
        eeconfig_init();
    410c:	0e 94 9e 21 	call	0x433c	; 0x433c <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    4110:	85 e0       	ldi	r24, 0x05	; 5
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    4118:	88 23       	and	r24, r24
    411a:	11 f0       	breq	.+4      	; 0x4120 <bootmagic+0x64>
        bootloader_jump();
    411c:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    4120:	0e 94 c5 21 	call	0x438a	; 0x438a <eeconfig_read_debug>
    4124:	80 93 25 02 	sts	0x0225, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    4128:	87 e0       	ldi	r24, 0x07	; 7
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    4130:	88 23       	and	r24, r24
    4132:	89 f1       	breq	.+98     	; 0x4196 <bootmagic+0xda>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    4134:	8b e1       	ldi	r24, 0x1B	; 27
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    413c:	88 23       	and	r24, r24
    413e:	39 f0       	breq	.+14     	; 0x414e <bootmagic+0x92>
            debug_config.matrix = !debug_config.matrix;
    4140:	80 91 25 02 	lds	r24, 0x0225
    4144:	98 2f       	mov	r25, r24
    4146:	90 95       	com	r25
    4148:	92 70       	andi	r25, 0x02	; 2
    414a:	8d 7f       	andi	r24, 0xFD	; 253
    414c:	0c c0       	rjmp	.+24     	; 0x4166 <bootmagic+0xaa>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    414e:	8e e0       	ldi	r24, 0x0E	; 14
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    4156:	88 23       	and	r24, r24
    4158:	51 f0       	breq	.+20     	; 0x416e <bootmagic+0xb2>
            debug_config.keyboard = !debug_config.keyboard;
    415a:	80 91 25 02 	lds	r24, 0x0225
    415e:	98 2f       	mov	r25, r24
    4160:	90 95       	com	r25
    4162:	94 70       	andi	r25, 0x04	; 4
    4164:	8b 7f       	andi	r24, 0xFB	; 251
    4166:	89 2b       	or	r24, r25
    4168:	80 93 25 02 	sts	0x0225, r24
    416c:	14 c0       	rjmp	.+40     	; 0x4196 <bootmagic+0xda>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    416e:	80 e1       	ldi	r24, 0x10	; 16
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    4176:	90 91 25 02 	lds	r25, 0x0225
    417a:	88 23       	and	r24, r24
    417c:	29 f0       	breq	.+10     	; 0x4188 <bootmagic+0xcc>
            debug_config.mouse = !debug_config.mouse;
    417e:	89 2f       	mov	r24, r25
    4180:	80 95       	com	r24
    4182:	88 70       	andi	r24, 0x08	; 8
    4184:	97 7f       	andi	r25, 0xF7	; 247
    4186:	04 c0       	rjmp	.+8      	; 0x4190 <bootmagic+0xd4>
        } else {
            debug_config.enable = !debug_config.enable;
    4188:	89 2f       	mov	r24, r25
    418a:	80 95       	com	r24
    418c:	81 70       	andi	r24, 0x01	; 1
    418e:	9e 7f       	andi	r25, 0xFE	; 254
    4190:	98 2b       	or	r25, r24
    4192:	90 93 25 02 	sts	0x0225, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    4196:	80 91 25 02 	lds	r24, 0x0225
    419a:	0e 94 ca 21 	call	0x4394	; 0x4394 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    419e:	0e 94 db 21 	call	0x43b6	; 0x43b6 <eeconfig_read_keymap>
    41a2:	80 93 45 02 	sts	0x0245, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    41a6:	80 ee       	ldi	r24, 0xE0	; 224
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    41ae:	88 23       	and	r24, r24
    41b0:	49 f0       	breq	.+18     	; 0x41c4 <bootmagic+0x108>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    41b2:	80 91 45 02 	lds	r24, 0x0245
    41b6:	98 2f       	mov	r25, r24
    41b8:	90 95       	com	r25
    41ba:	91 70       	andi	r25, 0x01	; 1
    41bc:	8e 7f       	andi	r24, 0xFE	; 254
    41be:	89 2b       	or	r24, r25
    41c0:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    41c4:	89 e3       	ldi	r24, 0x39	; 57
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    41cc:	88 23       	and	r24, r24
    41ce:	49 f0       	breq	.+18     	; 0x41e2 <bootmagic+0x126>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    41d0:	80 91 45 02 	lds	r24, 0x0245
    41d4:	98 2f       	mov	r25, r24
    41d6:	90 95       	com	r25
    41d8:	92 70       	andi	r25, 0x02	; 2
    41da:	8d 7f       	andi	r24, 0xFD	; 253
    41dc:	89 2b       	or	r24, r25
    41de:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    41e2:	82 ee       	ldi	r24, 0xE2	; 226
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    41ea:	88 23       	and	r24, r24
    41ec:	49 f0       	breq	.+18     	; 0x4200 <bootmagic+0x144>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    41ee:	80 91 45 02 	lds	r24, 0x0245
    41f2:	98 2f       	mov	r25, r24
    41f4:	90 95       	com	r25
    41f6:	94 70       	andi	r25, 0x04	; 4
    41f8:	8b 7f       	andi	r24, 0xFB	; 251
    41fa:	89 2b       	or	r24, r25
    41fc:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    4200:	86 ee       	ldi	r24, 0xE6	; 230
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    4208:	88 23       	and	r24, r24
    420a:	49 f0       	breq	.+18     	; 0x421e <bootmagic+0x162>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    420c:	80 91 45 02 	lds	r24, 0x0245
    4210:	98 2f       	mov	r25, r24
    4212:	90 95       	com	r25
    4214:	98 70       	andi	r25, 0x08	; 8
    4216:	87 7f       	andi	r24, 0xF7	; 247
    4218:	89 2b       	or	r24, r25
    421a:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    421e:	83 ee       	ldi	r24, 0xE3	; 227
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    4226:	88 23       	and	r24, r24
    4228:	49 f0       	breq	.+18     	; 0x423c <bootmagic+0x180>
        keymap_config.no_gui = !keymap_config.no_gui;
    422a:	80 91 45 02 	lds	r24, 0x0245
    422e:	98 2f       	mov	r25, r24
    4230:	90 95       	com	r25
    4232:	90 71       	andi	r25, 0x10	; 16
    4234:	8f 7e       	andi	r24, 0xEF	; 239
    4236:	89 2b       	or	r24, r25
    4238:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    423c:	85 e3       	ldi	r24, 0x35	; 53
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    4244:	88 23       	and	r24, r24
    4246:	49 f0       	breq	.+18     	; 0x425a <bootmagic+0x19e>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    4248:	80 91 45 02 	lds	r24, 0x0245
    424c:	98 2f       	mov	r25, r24
    424e:	90 95       	com	r25
    4250:	90 72       	andi	r25, 0x20	; 32
    4252:	8f 7d       	andi	r24, 0xDF	; 223
    4254:	89 2b       	or	r24, r25
    4256:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    425a:	81 e3       	ldi	r24, 0x31	; 49
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    4262:	88 23       	and	r24, r24
    4264:	49 f0       	breq	.+18     	; 0x4278 <bootmagic+0x1bc>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4266:	80 91 45 02 	lds	r24, 0x0245
    426a:	98 2f       	mov	r25, r24
    426c:	90 95       	com	r25
    426e:	90 74       	andi	r25, 0x40	; 64
    4270:	8f 7b       	andi	r24, 0xBF	; 191
    4272:	89 2b       	or	r24, r25
    4274:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4278:	89 e1       	ldi	r24, 0x19	; 25
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    4280:	88 23       	and	r24, r24
    4282:	79 f0       	breq	.+30     	; 0x42a2 <bootmagic+0x1e6>
        keymap_config.nkro = !keymap_config.nkro;
    4284:	90 91 45 02 	lds	r25, 0x0245
    4288:	89 2f       	mov	r24, r25
    428a:	88 1f       	adc	r24, r24
    428c:	88 27       	eor	r24, r24
    428e:	88 1f       	adc	r24, r24
    4290:	21 e0       	ldi	r18, 0x01	; 1
    4292:	82 27       	eor	r24, r18
    4294:	87 95       	ror	r24
    4296:	88 27       	eor	r24, r24
    4298:	87 95       	ror	r24
    429a:	9f 77       	andi	r25, 0x7F	; 127
    429c:	98 2b       	or	r25, r24
    429e:	90 93 45 02 	sts	0x0245, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    42a2:	80 91 45 02 	lds	r24, 0x0245
    42a6:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    42aa:	80 91 45 02 	lds	r24, 0x0245
    42ae:	88 1f       	adc	r24, r24
    42b0:	88 27       	eor	r24, r24
    42b2:	88 1f       	adc	r24, r24
    42b4:	80 93 0d 01 	sts	0x010D, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    42b8:	8d e1       	ldi	r24, 0x1D	; 29
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    42c0:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    42c2:	8b e1       	ldi	r24, 0x1B	; 27
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    42ca:	81 11       	cpse	r24, r1
    42cc:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    42ce:	86 e0       	ldi	r24, 0x06	; 6
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    42d6:	81 11       	cpse	r24, r1
    42d8:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    42da:	80 e2       	ldi	r24, 0x20	; 32
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    42e2:	81 11       	cpse	r24, r1
    42e4:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    42e6:	81 e2       	ldi	r24, 0x21	; 33
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    42ee:	81 11       	cpse	r24, r1
    42f0:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    42f2:	82 e2       	ldi	r24, 0x22	; 34
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    42fa:	81 11       	cpse	r24, r1
    42fc:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    42fe:	83 e2       	ldi	r24, 0x23	; 35
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    4306:	81 11       	cpse	r24, r1
    4308:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    430a:	84 e2       	ldi	r24, 0x24	; 36
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	0e 94 4d 20 	call	0x409a	; 0x409a <bootmagic_scan_key>
    4312:	88 23       	and	r24, r24
    4314:	11 f0       	breq	.+4      	; 0x431a <bootmagic+0x25e>
    4316:	c0 68       	ori	r28, 0x80	; 128
    4318:	02 c0       	rjmp	.+4      	; 0x431e <bootmagic+0x262>
    if (default_layer) {
    431a:	cc 23       	and	r28, r28
    431c:	29 f0       	breq	.+10     	; 0x4328 <bootmagic+0x26c>
        eeconfig_write_default_layer(default_layer);
    431e:	8c 2f       	mov	r24, r28
    4320:	0e 94 d5 21 	call	0x43aa	; 0x43aa <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4324:	6c 2f       	mov	r22, r28
    4326:	03 c0       	rjmp	.+6      	; 0x432e <bootmagic+0x272>
    } else {
        default_layer = eeconfig_read_default_layer();
    4328:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    432c:	68 2f       	mov	r22, r24
    432e:	70 e0       	ldi	r23, 0x00	; 0
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <default_layer_set>
    }
}
    4338:	cf 91       	pop	r28
    433a:	08 95       	ret

0000433c <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    433c:	80 e0       	ldi	r24, 0x00	; 0
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	6d ee       	ldi	r22, 0xED	; 237
    4342:	7e ef       	ldi	r23, 0xFE	; 254
    4344:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4348:	82 e0       	ldi	r24, 0x02	; 2
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	60 e0       	ldi	r22, 0x00	; 0
    434e:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4352:	83 e0       	ldi	r24, 0x03	; 3
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	60 e0       	ldi	r22, 0x00	; 0
    4358:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    435c:	84 e0       	ldi	r24, 0x04	; 4
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	60 e0       	ldi	r22, 0x00	; 0
    4362:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4366:	85 e0       	ldi	r24, 0x05	; 5
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	60 e0       	ldi	r22, 0x00	; 0
    436c:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <__eewr_byte_m32u4>
#ifdef BACKLIGHT_ENABLE
    eeprom_write_byte(EECONFIG_BACKLIGHT,      0);
#endif
}
    4370:	08 95       	ret

00004372 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4372:	80 e0       	ldi	r24, 0x00	; 0
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <__eerd_word_m32u4>
    437a:	21 e0       	ldi	r18, 0x01	; 1
    437c:	3e ef       	ldi	r19, 0xFE	; 254
    437e:	8d 3e       	cpi	r24, 0xED	; 237
    4380:	93 07       	cpc	r25, r19
    4382:	09 f0       	breq	.+2      	; 0x4386 <eeconfig_is_enabled+0x14>
    4384:	20 e0       	ldi	r18, 0x00	; 0
}
    4386:	82 2f       	mov	r24, r18
    4388:	08 95       	ret

0000438a <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    438a:	82 e0       	ldi	r24, 0x02	; 2
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__eerd_byte_m32u4>
    4392:	08 95       	ret

00004394 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4394:	68 2f       	mov	r22, r24
    4396:	82 e0       	ldi	r24, 0x02	; 2
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <__eewr_byte_m32u4>
    439e:	08 95       	ret

000043a0 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    43a0:	83 e0       	ldi	r24, 0x03	; 3
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__eerd_byte_m32u4>
    43a8:	08 95       	ret

000043aa <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    43aa:	68 2f       	mov	r22, r24
    43ac:	83 e0       	ldi	r24, 0x03	; 3
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <__eewr_byte_m32u4>
    43b4:	08 95       	ret

000043b6 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    43b6:	84 e0       	ldi	r24, 0x04	; 4
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__eerd_byte_m32u4>
    43be:	08 95       	ret

000043c0 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    43c0:	68 2f       	mov	r22, r24
    43c2:	84 e0       	ldi	r24, 0x04	; 4
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <__eewr_byte_m32u4>
    43ca:	08 95       	ret

000043cc <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    43cc:	80 91 33 02 	lds	r24, 0x0233
    43d0:	80 ff       	sbrs	r24, 0
    43d2:	0f c0       	rjmp	.+30     	; 0x43f2 <move_unit+0x26>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    43d4:	80 91 13 01 	lds	r24, 0x0113
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	bc 01       	movw	r22, r24
    43dc:	66 0f       	add	r22, r22
    43de:	77 1f       	adc	r23, r23
    43e0:	66 0f       	add	r22, r22
    43e2:	77 1f       	adc	r23, r23
    43e4:	68 0f       	add	r22, r24
    43e6:	79 1f       	adc	r23, r25
    43e8:	75 95       	asr	r23
    43ea:	67 95       	ror	r22
    43ec:	75 95       	asr	r23
    43ee:	67 95       	ror	r22
    43f0:	3a c0       	rjmp	.+116    	; 0x4466 <move_unit+0x9a>
    } else if (mousekey_accel & (1<<1)) {
    43f2:	81 ff       	sbrs	r24, 1
    43f4:	0d c0       	rjmp	.+26     	; 0x4410 <move_unit+0x44>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    43f6:	80 91 13 01 	lds	r24, 0x0113
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	bc 01       	movw	r22, r24
    43fe:	66 0f       	add	r22, r22
    4400:	77 1f       	adc	r23, r23
    4402:	66 0f       	add	r22, r22
    4404:	77 1f       	adc	r23, r23
    4406:	68 0f       	add	r22, r24
    4408:	79 1f       	adc	r23, r25
    440a:	75 95       	asr	r23
    440c:	67 95       	ror	r22
    440e:	2b c0       	rjmp	.+86     	; 0x4466 <move_unit+0x9a>
    } else if (mousekey_accel & (1<<2)) {
    4410:	82 ff       	sbrs	r24, 2
    4412:	04 c0       	rjmp	.+8      	; 0x441c <move_unit+0x50>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4414:	80 91 13 01 	lds	r24, 0x0113
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	0b c0       	rjmp	.+22     	; 0x4432 <move_unit+0x66>
    } else if (mousekey_repeat == 0) {
    441c:	40 91 2d 02 	lds	r20, 0x022D
    4420:	44 23       	and	r20, r20
    4422:	41 f1       	breq	.+80     	; 0x4474 <move_unit+0xa8>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4424:	60 91 12 01 	lds	r22, 0x0112
    4428:	80 91 13 01 	lds	r24, 0x0113
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    442c:	90 e0       	ldi	r25, 0x00	; 0
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    442e:	46 17       	cp	r20, r22
    4430:	40 f0       	brcs	.+16     	; 0x4442 <move_unit+0x76>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    4432:	bc 01       	movw	r22, r24
    4434:	66 0f       	add	r22, r22
    4436:	77 1f       	adc	r23, r23
    4438:	66 0f       	add	r22, r22
    443a:	77 1f       	adc	r23, r23
    443c:	68 0f       	add	r22, r24
    443e:	79 1f       	adc	r23, r25
    4440:	12 c0       	rjmp	.+36     	; 0x4466 <move_unit+0x9a>
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4442:	9c 01       	movw	r18, r24
    4444:	22 0f       	add	r18, r18
    4446:	33 1f       	adc	r19, r19
    4448:	22 0f       	add	r18, r18
    444a:	33 1f       	adc	r19, r19
    444c:	28 0f       	add	r18, r24
    444e:	39 1f       	adc	r19, r25
    4450:	50 e0       	ldi	r21, 0x00	; 0
    4452:	24 9f       	mul	r18, r20
    4454:	c0 01       	movw	r24, r0
    4456:	25 9f       	mul	r18, r21
    4458:	90 0d       	add	r25, r0
    445a:	34 9f       	mul	r19, r20
    445c:	90 0d       	add	r25, r0
    445e:	11 24       	eor	r1, r1
    4460:	70 e0       	ldi	r23, 0x00	; 0
    4462:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4466:	60 38       	cpi	r22, 0x80	; 128
    4468:	71 05       	cpc	r23, r1
    446a:	40 f4       	brcc	.+16     	; 0x447c <move_unit+0xb0>
    446c:	61 15       	cp	r22, r1
    446e:	71 05       	cpc	r23, r1
    4470:	39 f0       	breq	.+14     	; 0x4480 <move_unit+0xb4>
    4472:	02 c0       	rjmp	.+4      	; 0x4478 <move_unit+0xac>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4474:	65 e0       	ldi	r22, 0x05	; 5
    4476:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4478:	86 2f       	mov	r24, r22
    447a:	08 95       	ret
    447c:	8f e7       	ldi	r24, 0x7F	; 127
    447e:	08 95       	ret
    4480:	81 e0       	ldi	r24, 0x01	; 1
}
    4482:	08 95       	ret

00004484 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4484:	80 91 33 02 	lds	r24, 0x0233
    4488:	80 ff       	sbrs	r24, 0
    448a:	08 c0       	rjmp	.+16     	; 0x449c <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    448c:	60 91 11 01 	lds	r22, 0x0111
    4490:	70 e0       	ldi	r23, 0x00	; 0
    4492:	75 95       	asr	r23
    4494:	67 95       	ror	r22
    4496:	75 95       	asr	r23
    4498:	67 95       	ror	r22
    449a:	23 c0       	rjmp	.+70     	; 0x44e2 <wheel_unit+0x5e>
    } else if (mousekey_accel & (1<<1)) {
    449c:	81 ff       	sbrs	r24, 1
    449e:	06 c0       	rjmp	.+12     	; 0x44ac <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    44a0:	60 91 11 01 	lds	r22, 0x0111
    44a4:	70 e0       	ldi	r23, 0x00	; 0
    44a6:	75 95       	asr	r23
    44a8:	67 95       	ror	r22
    44aa:	1b c0       	rjmp	.+54     	; 0x44e2 <wheel_unit+0x5e>
    } else if (mousekey_accel & (1<<2)) {
    44ac:	82 ff       	sbrs	r24, 2
    44ae:	03 c0       	rjmp	.+6      	; 0x44b6 <wheel_unit+0x32>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    44b0:	60 91 11 01 	lds	r22, 0x0111
    44b4:	0b c0       	rjmp	.+22     	; 0x44cc <wheel_unit+0x48>
    } else if (mousekey_repeat == 0) {
    44b6:	80 91 2d 02 	lds	r24, 0x022D
    44ba:	88 23       	and	r24, r24
    44bc:	d9 f0       	breq	.+54     	; 0x44f4 <wheel_unit+0x70>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    44be:	60 91 10 01 	lds	r22, 0x0110
    44c2:	90 91 11 01 	lds	r25, 0x0111
    44c6:	86 17       	cp	r24, r22
    44c8:	18 f0       	brcs	.+6      	; 0x44d0 <wheel_unit+0x4c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    44ca:	69 2f       	mov	r22, r25
    44cc:	70 e0       	ldi	r23, 0x00	; 0
    44ce:	06 c0       	rjmp	.+12     	; 0x44dc <wheel_unit+0x58>
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    44d0:	98 9f       	mul	r25, r24
    44d2:	c0 01       	movw	r24, r0
    44d4:	11 24       	eor	r1, r1
    44d6:	70 e0       	ldi	r23, 0x00	; 0
    44d8:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    44dc:	60 38       	cpi	r22, 0x80	; 128
    44de:	71 05       	cpc	r23, r1
    44e0:	28 f4       	brcc	.+10     	; 0x44ec <wheel_unit+0x68>
    44e2:	61 15       	cp	r22, r1
    44e4:	71 05       	cpc	r23, r1
    44e6:	21 f0       	breq	.+8      	; 0x44f0 <wheel_unit+0x6c>
    44e8:	86 2f       	mov	r24, r22
    44ea:	08 95       	ret
    44ec:	8f e7       	ldi	r24, 0x7F	; 127
    44ee:	08 95       	ret
    44f0:	81 e0       	ldi	r24, 0x01	; 1
}
    44f2:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    44f4:	61 e0       	ldi	r22, 0x01	; 1
    44f6:	70 e0       	ldi	r23, 0x00	; 0
    44f8:	f4 cf       	rjmp	.-24     	; 0x44e2 <wheel_unit+0x5e>

000044fa <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    44fa:	80 3f       	cpi	r24, 0xF0	; 240
    44fc:	21 f4       	brne	.+8      	; 0x4506 <mousekey_on+0xc>
    44fe:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    4502:	81 95       	neg	r24
    4504:	04 c0       	rjmp	.+8      	; 0x450e <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4506:	81 3f       	cpi	r24, 0xF1	; 241
    4508:	29 f4       	brne	.+10     	; 0x4514 <mousekey_on+0x1a>
    450a:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    450e:	80 93 30 02 	sts	0x0230, r24
    4512:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4514:	82 3f       	cpi	r24, 0xF2	; 242
    4516:	21 f4       	brne	.+8      	; 0x4520 <mousekey_on+0x26>
    4518:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    451c:	81 95       	neg	r24
    451e:	04 c0       	rjmp	.+8      	; 0x4528 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4520:	83 3f       	cpi	r24, 0xF3	; 243
    4522:	29 f4       	brne	.+10     	; 0x452e <mousekey_on+0x34>
    4524:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    4528:	80 93 2f 02 	sts	0x022F, r24
    452c:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    452e:	89 3f       	cpi	r24, 0xF9	; 249
    4530:	19 f4       	brne	.+6      	; 0x4538 <mousekey_on+0x3e>
    4532:	0e 94 42 22 	call	0x4484	; 0x4484 <wheel_unit>
    4536:	05 c0       	rjmp	.+10     	; 0x4542 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4538:	8a 3f       	cpi	r24, 0xFA	; 250
    453a:	31 f4       	brne	.+12     	; 0x4548 <mousekey_on+0x4e>
    453c:	0e 94 42 22 	call	0x4484	; 0x4484 <wheel_unit>
    4540:	81 95       	neg	r24
    4542:	80 93 31 02 	sts	0x0231, r24
    4546:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4548:	8b 3f       	cpi	r24, 0xFB	; 251
    454a:	21 f4       	brne	.+8      	; 0x4554 <mousekey_on+0x5a>
    454c:	0e 94 42 22 	call	0x4484	; 0x4484 <wheel_unit>
    4550:	81 95       	neg	r24
    4552:	04 c0       	rjmp	.+8      	; 0x455c <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4554:	8c 3f       	cpi	r24, 0xFC	; 252
    4556:	29 f4       	brne	.+10     	; 0x4562 <mousekey_on+0x68>
    4558:	0e 94 42 22 	call	0x4484	; 0x4484 <wheel_unit>
    455c:	80 93 32 02 	sts	0x0232, r24
    4560:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4562:	84 3f       	cpi	r24, 0xF4	; 244
    4564:	21 f4       	brne	.+8      	; 0x456e <mousekey_on+0x74>
    4566:	80 91 2e 02 	lds	r24, 0x022E
    456a:	81 60       	ori	r24, 0x01	; 1
    456c:	17 c0       	rjmp	.+46     	; 0x459c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    456e:	85 3f       	cpi	r24, 0xF5	; 245
    4570:	21 f4       	brne	.+8      	; 0x457a <mousekey_on+0x80>
    4572:	80 91 2e 02 	lds	r24, 0x022E
    4576:	82 60       	ori	r24, 0x02	; 2
    4578:	11 c0       	rjmp	.+34     	; 0x459c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    457a:	86 3f       	cpi	r24, 0xF6	; 246
    457c:	21 f4       	brne	.+8      	; 0x4586 <mousekey_on+0x8c>
    457e:	80 91 2e 02 	lds	r24, 0x022E
    4582:	84 60       	ori	r24, 0x04	; 4
    4584:	0b c0       	rjmp	.+22     	; 0x459c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4586:	87 3f       	cpi	r24, 0xF7	; 247
    4588:	21 f4       	brne	.+8      	; 0x4592 <mousekey_on+0x98>
    458a:	80 91 2e 02 	lds	r24, 0x022E
    458e:	88 60       	ori	r24, 0x08	; 8
    4590:	05 c0       	rjmp	.+10     	; 0x459c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4592:	88 3f       	cpi	r24, 0xF8	; 248
    4594:	31 f4       	brne	.+12     	; 0x45a2 <mousekey_on+0xa8>
    4596:	80 91 2e 02 	lds	r24, 0x022E
    459a:	80 61       	ori	r24, 0x10	; 16
    459c:	80 93 2e 02 	sts	0x022E, r24
    45a0:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    45a2:	8d 3f       	cpi	r24, 0xFD	; 253
    45a4:	21 f4       	brne	.+8      	; 0x45ae <mousekey_on+0xb4>
    45a6:	80 91 33 02 	lds	r24, 0x0233
    45aa:	81 60       	ori	r24, 0x01	; 1
    45ac:	05 c0       	rjmp	.+10     	; 0x45b8 <mousekey_on+0xbe>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    45ae:	8e 3f       	cpi	r24, 0xFE	; 254
    45b0:	31 f4       	brne	.+12     	; 0x45be <mousekey_on+0xc4>
    45b2:	80 91 33 02 	lds	r24, 0x0233
    45b6:	82 60       	ori	r24, 0x02	; 2
    45b8:	80 93 33 02 	sts	0x0233, r24
    45bc:	08 95       	ret
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    45be:	8f 3f       	cpi	r24, 0xFF	; 255
    45c0:	29 f4       	brne	.+10     	; 0x45cc <mousekey_on+0xd2>
    45c2:	80 91 33 02 	lds	r24, 0x0233
    45c6:	84 60       	ori	r24, 0x04	; 4
    45c8:	80 93 33 02 	sts	0x0233, r24
    45cc:	08 95       	ret

000045ce <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    45ce:	80 3f       	cpi	r24, 0xF0	; 240
    45d0:	29 f4       	brne	.+10     	; 0x45dc <mousekey_off+0xe>
    45d2:	80 91 30 02 	lds	r24, 0x0230
    45d6:	87 ff       	sbrs	r24, 7
    45d8:	6d c0       	rjmp	.+218    	; 0x46b4 <mousekey_off+0xe6>
    45da:	07 c0       	rjmp	.+14     	; 0x45ea <mousekey_off+0x1c>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    45dc:	81 3f       	cpi	r24, 0xF1	; 241
    45de:	41 f4       	brne	.+16     	; 0x45f0 <mousekey_off+0x22>
    45e0:	80 91 30 02 	lds	r24, 0x0230
    45e4:	18 16       	cp	r1, r24
    45e6:	0c f0       	brlt	.+2      	; 0x45ea <mousekey_off+0x1c>
    45e8:	65 c0       	rjmp	.+202    	; 0x46b4 <mousekey_off+0xe6>
    45ea:	10 92 30 02 	sts	0x0230, r1
    45ee:	62 c0       	rjmp	.+196    	; 0x46b4 <mousekey_off+0xe6>
    45f0:	90 91 2f 02 	lds	r25, 0x022F
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    45f4:	82 3f       	cpi	r24, 0xF2	; 242
    45f6:	19 f4       	brne	.+6      	; 0x45fe <mousekey_off+0x30>
    45f8:	97 ff       	sbrs	r25, 7
    45fa:	5c c0       	rjmp	.+184    	; 0x46b4 <mousekey_off+0xe6>
    45fc:	05 c0       	rjmp	.+10     	; 0x4608 <mousekey_off+0x3a>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    45fe:	83 3f       	cpi	r24, 0xF3	; 243
    4600:	31 f4       	brne	.+12     	; 0x460e <mousekey_off+0x40>
    4602:	19 16       	cp	r1, r25
    4604:	0c f0       	brlt	.+2      	; 0x4608 <mousekey_off+0x3a>
    4606:	56 c0       	rjmp	.+172    	; 0x46b4 <mousekey_off+0xe6>
    4608:	10 92 2f 02 	sts	0x022F, r1
    460c:	53 c0       	rjmp	.+166    	; 0x46b4 <mousekey_off+0xe6>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    460e:	89 3f       	cpi	r24, 0xF9	; 249
    4610:	29 f4       	brne	.+10     	; 0x461c <mousekey_off+0x4e>
    4612:	80 91 31 02 	lds	r24, 0x0231
    4616:	18 16       	cp	r1, r24
    4618:	3c f0       	brlt	.+14     	; 0x4628 <mousekey_off+0x5a>
    461a:	4c c0       	rjmp	.+152    	; 0x46b4 <mousekey_off+0xe6>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    461c:	8a 3f       	cpi	r24, 0xFA	; 250
    461e:	39 f4       	brne	.+14     	; 0x462e <mousekey_off+0x60>
    4620:	80 91 31 02 	lds	r24, 0x0231
    4624:	87 ff       	sbrs	r24, 7
    4626:	46 c0       	rjmp	.+140    	; 0x46b4 <mousekey_off+0xe6>
    4628:	10 92 31 02 	sts	0x0231, r1
    462c:	43 c0       	rjmp	.+134    	; 0x46b4 <mousekey_off+0xe6>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    462e:	8b 3f       	cpi	r24, 0xFB	; 251
    4630:	29 f4       	brne	.+10     	; 0x463c <mousekey_off+0x6e>
    4632:	80 91 32 02 	lds	r24, 0x0232
    4636:	87 ff       	sbrs	r24, 7
    4638:	3d c0       	rjmp	.+122    	; 0x46b4 <mousekey_off+0xe6>
    463a:	06 c0       	rjmp	.+12     	; 0x4648 <mousekey_off+0x7a>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    463c:	8c 3f       	cpi	r24, 0xFC	; 252
    463e:	39 f4       	brne	.+14     	; 0x464e <mousekey_off+0x80>
    4640:	80 91 32 02 	lds	r24, 0x0232
    4644:	18 16       	cp	r1, r24
    4646:	b4 f5       	brge	.+108    	; 0x46b4 <mousekey_off+0xe6>
    4648:	10 92 32 02 	sts	0x0232, r1
    464c:	33 c0       	rjmp	.+102    	; 0x46b4 <mousekey_off+0xe6>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    464e:	84 3f       	cpi	r24, 0xF4	; 244
    4650:	21 f4       	brne	.+8      	; 0x465a <mousekey_off+0x8c>
    4652:	80 91 2e 02 	lds	r24, 0x022E
    4656:	8e 7f       	andi	r24, 0xFE	; 254
    4658:	05 c0       	rjmp	.+10     	; 0x4664 <mousekey_off+0x96>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    465a:	85 3f       	cpi	r24, 0xF5	; 245
    465c:	31 f4       	brne	.+12     	; 0x466a <mousekey_off+0x9c>
    465e:	80 91 2e 02 	lds	r24, 0x022E
    4662:	8d 7f       	andi	r24, 0xFD	; 253
    4664:	80 93 2e 02 	sts	0x022E, r24
    4668:	25 c0       	rjmp	.+74     	; 0x46b4 <mousekey_off+0xe6>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    466a:	86 3f       	cpi	r24, 0xF6	; 246
    466c:	21 f4       	brne	.+8      	; 0x4676 <mousekey_off+0xa8>
    466e:	80 91 2e 02 	lds	r24, 0x022E
    4672:	8b 7f       	andi	r24, 0xFB	; 251
    4674:	f7 cf       	rjmp	.-18     	; 0x4664 <mousekey_off+0x96>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4676:	87 3f       	cpi	r24, 0xF7	; 247
    4678:	21 f4       	brne	.+8      	; 0x4682 <mousekey_off+0xb4>
    467a:	80 91 2e 02 	lds	r24, 0x022E
    467e:	87 7f       	andi	r24, 0xF7	; 247
    4680:	f1 cf       	rjmp	.-30     	; 0x4664 <mousekey_off+0x96>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4682:	88 3f       	cpi	r24, 0xF8	; 248
    4684:	21 f4       	brne	.+8      	; 0x468e <mousekey_off+0xc0>
    4686:	80 91 2e 02 	lds	r24, 0x022E
    468a:	8f 7e       	andi	r24, 0xEF	; 239
    468c:	eb cf       	rjmp	.-42     	; 0x4664 <mousekey_off+0x96>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    468e:	8d 3f       	cpi	r24, 0xFD	; 253
    4690:	21 f4       	brne	.+8      	; 0x469a <mousekey_off+0xcc>
    4692:	80 91 33 02 	lds	r24, 0x0233
    4696:	8e 7f       	andi	r24, 0xFE	; 254
    4698:	0b c0       	rjmp	.+22     	; 0x46b0 <mousekey_off+0xe2>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    469a:	8e 3f       	cpi	r24, 0xFE	; 254
    469c:	21 f4       	brne	.+8      	; 0x46a6 <mousekey_off+0xd8>
    469e:	80 91 33 02 	lds	r24, 0x0233
    46a2:	8d 7f       	andi	r24, 0xFD	; 253
    46a4:	05 c0       	rjmp	.+10     	; 0x46b0 <mousekey_off+0xe2>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    46a6:	8f 3f       	cpi	r24, 0xFF	; 255
    46a8:	29 f4       	brne	.+10     	; 0x46b4 <mousekey_off+0xe6>
    46aa:	80 91 33 02 	lds	r24, 0x0233
    46ae:	8b 7f       	andi	r24, 0xFB	; 251
    46b0:	80 93 33 02 	sts	0x0233, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    46b4:	80 91 2f 02 	lds	r24, 0x022F
    46b8:	88 23       	and	r24, r24
    46ba:	71 f4       	brne	.+28     	; 0x46d8 <mousekey_off+0x10a>
    46bc:	80 91 30 02 	lds	r24, 0x0230
    46c0:	88 23       	and	r24, r24
    46c2:	51 f4       	brne	.+20     	; 0x46d8 <mousekey_off+0x10a>
    46c4:	80 91 31 02 	lds	r24, 0x0231
    46c8:	88 23       	and	r24, r24
    46ca:	31 f4       	brne	.+12     	; 0x46d8 <mousekey_off+0x10a>
    46cc:	80 91 32 02 	lds	r24, 0x0232
    46d0:	88 23       	and	r24, r24
    46d2:	11 f4       	brne	.+4      	; 0x46d8 <mousekey_off+0x10a>
        mousekey_repeat = 0;
    46d4:	10 92 2d 02 	sts	0x022D, r1
    46d8:	08 95       	ret

000046da <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    46da:	80 91 25 02 	lds	r24, 0x0225
    46de:	83 ff       	sbrs	r24, 3
    46e0:	c1 c0       	rjmp	.+386    	; 0x4864 <mousekey_send+0x18a>
    print("mousekey [btn|x y v h](rep/acl): [");
    46e2:	8d ef       	ldi	r24, 0xFD	; 253
    46e4:	93 e0       	ldi	r25, 0x03	; 3
    46e6:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    phex(mouse_report.buttons); print("|");
    46ea:	00 d0       	rcall	.+0      	; 0x46ec <mousekey_send+0x12>
    46ec:	00 d0       	rcall	.+0      	; 0x46ee <mousekey_send+0x14>
    46ee:	ed b7       	in	r30, 0x3d	; 61
    46f0:	fe b7       	in	r31, 0x3e	; 62
    46f2:	31 96       	adiw	r30, 0x01	; 1
    46f4:	80 e2       	ldi	r24, 0x20	; 32
    46f6:	94 e0       	ldi	r25, 0x04	; 4
    46f8:	ad b7       	in	r26, 0x3d	; 61
    46fa:	be b7       	in	r27, 0x3e	; 62
    46fc:	12 96       	adiw	r26, 0x02	; 2
    46fe:	9c 93       	st	X, r25
    4700:	8e 93       	st	-X, r24
    4702:	11 97       	sbiw	r26, 0x01	; 1
    4704:	80 91 2e 02 	lds	r24, 0x022E
    4708:	82 83       	std	Z+2, r24	; 0x02
    470a:	13 82       	std	Z+3, r1	; 0x03
    470c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4710:	0f 90       	pop	r0
    4712:	0f 90       	pop	r0
    4714:	0f 90       	pop	r0
    4716:	0f 90       	pop	r0
    4718:	85 e2       	ldi	r24, 0x25	; 37
    471a:	94 e0       	ldi	r25, 0x04	; 4
    471c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print_decs(mouse_report.x); print(" ");
    4720:	00 d0       	rcall	.+0      	; 0x4722 <mousekey_send+0x48>
    4722:	00 d0       	rcall	.+0      	; 0x4724 <mousekey_send+0x4a>
    4724:	87 e2       	ldi	r24, 0x27	; 39
    4726:	94 e0       	ldi	r25, 0x04	; 4
    4728:	ed b7       	in	r30, 0x3d	; 61
    472a:	fe b7       	in	r31, 0x3e	; 62
    472c:	92 83       	std	Z+2, r25	; 0x02
    472e:	81 83       	std	Z+1, r24	; 0x01
    4730:	80 91 2f 02 	lds	r24, 0x022F
    4734:	99 27       	eor	r25, r25
    4736:	87 fd       	sbrc	r24, 7
    4738:	90 95       	com	r25
    473a:	94 83       	std	Z+4, r25	; 0x04
    473c:	83 83       	std	Z+3, r24	; 0x03
    473e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4742:	0f 90       	pop	r0
    4744:	0f 90       	pop	r0
    4746:	0f 90       	pop	r0
    4748:	0f 90       	pop	r0
    474a:	8a e2       	ldi	r24, 0x2A	; 42
    474c:	94 e0       	ldi	r25, 0x04	; 4
    474e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print_decs(mouse_report.y); print(" ");
    4752:	00 d0       	rcall	.+0      	; 0x4754 <mousekey_send+0x7a>
    4754:	00 d0       	rcall	.+0      	; 0x4756 <mousekey_send+0x7c>
    4756:	8c e2       	ldi	r24, 0x2C	; 44
    4758:	94 e0       	ldi	r25, 0x04	; 4
    475a:	ad b7       	in	r26, 0x3d	; 61
    475c:	be b7       	in	r27, 0x3e	; 62
    475e:	12 96       	adiw	r26, 0x02	; 2
    4760:	9c 93       	st	X, r25
    4762:	8e 93       	st	-X, r24
    4764:	11 97       	sbiw	r26, 0x01	; 1
    4766:	80 91 30 02 	lds	r24, 0x0230
    476a:	99 27       	eor	r25, r25
    476c:	87 fd       	sbrc	r24, 7
    476e:	90 95       	com	r25
    4770:	14 96       	adiw	r26, 0x04	; 4
    4772:	9c 93       	st	X, r25
    4774:	8e 93       	st	-X, r24
    4776:	13 97       	sbiw	r26, 0x03	; 3
    4778:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    477c:	0f 90       	pop	r0
    477e:	0f 90       	pop	r0
    4780:	0f 90       	pop	r0
    4782:	0f 90       	pop	r0
    4784:	8f e2       	ldi	r24, 0x2F	; 47
    4786:	94 e0       	ldi	r25, 0x04	; 4
    4788:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print_decs(mouse_report.v); print(" ");
    478c:	00 d0       	rcall	.+0      	; 0x478e <mousekey_send+0xb4>
    478e:	00 d0       	rcall	.+0      	; 0x4790 <mousekey_send+0xb6>
    4790:	81 e3       	ldi	r24, 0x31	; 49
    4792:	94 e0       	ldi	r25, 0x04	; 4
    4794:	ed b7       	in	r30, 0x3d	; 61
    4796:	fe b7       	in	r31, 0x3e	; 62
    4798:	92 83       	std	Z+2, r25	; 0x02
    479a:	81 83       	std	Z+1, r24	; 0x01
    479c:	80 91 31 02 	lds	r24, 0x0231
    47a0:	99 27       	eor	r25, r25
    47a2:	87 fd       	sbrc	r24, 7
    47a4:	90 95       	com	r25
    47a6:	94 83       	std	Z+4, r25	; 0x04
    47a8:	83 83       	std	Z+3, r24	; 0x03
    47aa:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    47ae:	0f 90       	pop	r0
    47b0:	0f 90       	pop	r0
    47b2:	0f 90       	pop	r0
    47b4:	0f 90       	pop	r0
    47b6:	84 e3       	ldi	r24, 0x34	; 52
    47b8:	94 e0       	ldi	r25, 0x04	; 4
    47ba:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print_decs(mouse_report.h); print("](");
    47be:	00 d0       	rcall	.+0      	; 0x47c0 <mousekey_send+0xe6>
    47c0:	00 d0       	rcall	.+0      	; 0x47c2 <mousekey_send+0xe8>
    47c2:	86 e3       	ldi	r24, 0x36	; 54
    47c4:	94 e0       	ldi	r25, 0x04	; 4
    47c6:	ad b7       	in	r26, 0x3d	; 61
    47c8:	be b7       	in	r27, 0x3e	; 62
    47ca:	12 96       	adiw	r26, 0x02	; 2
    47cc:	9c 93       	st	X, r25
    47ce:	8e 93       	st	-X, r24
    47d0:	11 97       	sbiw	r26, 0x01	; 1
    47d2:	80 91 32 02 	lds	r24, 0x0232
    47d6:	99 27       	eor	r25, r25
    47d8:	87 fd       	sbrc	r24, 7
    47da:	90 95       	com	r25
    47dc:	14 96       	adiw	r26, 0x04	; 4
    47de:	9c 93       	st	X, r25
    47e0:	8e 93       	st	-X, r24
    47e2:	13 97       	sbiw	r26, 0x03	; 3
    47e4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    47e8:	0f 90       	pop	r0
    47ea:	0f 90       	pop	r0
    47ec:	0f 90       	pop	r0
    47ee:	0f 90       	pop	r0
    47f0:	89 e3       	ldi	r24, 0x39	; 57
    47f2:	94 e0       	ldi	r25, 0x04	; 4
    47f4:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print_dec(mousekey_repeat); print("/");
    47f8:	00 d0       	rcall	.+0      	; 0x47fa <mousekey_send+0x120>
    47fa:	00 d0       	rcall	.+0      	; 0x47fc <mousekey_send+0x122>
    47fc:	ed b7       	in	r30, 0x3d	; 61
    47fe:	fe b7       	in	r31, 0x3e	; 62
    4800:	31 96       	adiw	r30, 0x01	; 1
    4802:	8c e3       	ldi	r24, 0x3C	; 60
    4804:	94 e0       	ldi	r25, 0x04	; 4
    4806:	ad b7       	in	r26, 0x3d	; 61
    4808:	be b7       	in	r27, 0x3e	; 62
    480a:	12 96       	adiw	r26, 0x02	; 2
    480c:	9c 93       	st	X, r25
    480e:	8e 93       	st	-X, r24
    4810:	11 97       	sbiw	r26, 0x01	; 1
    4812:	80 91 2d 02 	lds	r24, 0x022D
    4816:	82 83       	std	Z+2, r24	; 0x02
    4818:	13 82       	std	Z+3, r1	; 0x03
    481a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    481e:	0f 90       	pop	r0
    4820:	0f 90       	pop	r0
    4822:	0f 90       	pop	r0
    4824:	0f 90       	pop	r0
    4826:	8f e3       	ldi	r24, 0x3F	; 63
    4828:	94 e0       	ldi	r25, 0x04	; 4
    482a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print_dec(mousekey_accel); print(")\n");
    482e:	00 d0       	rcall	.+0      	; 0x4830 <mousekey_send+0x156>
    4830:	00 d0       	rcall	.+0      	; 0x4832 <mousekey_send+0x158>
    4832:	ed b7       	in	r30, 0x3d	; 61
    4834:	fe b7       	in	r31, 0x3e	; 62
    4836:	31 96       	adiw	r30, 0x01	; 1
    4838:	81 e4       	ldi	r24, 0x41	; 65
    483a:	94 e0       	ldi	r25, 0x04	; 4
    483c:	ad b7       	in	r26, 0x3d	; 61
    483e:	be b7       	in	r27, 0x3e	; 62
    4840:	12 96       	adiw	r26, 0x02	; 2
    4842:	9c 93       	st	X, r25
    4844:	8e 93       	st	-X, r24
    4846:	11 97       	sbiw	r26, 0x01	; 1
    4848:	80 91 33 02 	lds	r24, 0x0233
    484c:	82 83       	std	Z+2, r24	; 0x02
    484e:	13 82       	std	Z+3, r1	; 0x03
    4850:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4854:	0f 90       	pop	r0
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
    485a:	0f 90       	pop	r0
    485c:	84 e4       	ldi	r24, 0x44	; 68
    485e:	94 e0       	ldi	r25, 0x04	; 4
    4860:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4864:	8e e2       	ldi	r24, 0x2E	; 46
    4866:	92 e0       	ldi	r25, 0x02	; 2
    4868:	0e 94 0a 13 	call	0x2614	; 0x2614 <host_mouse_send>
    last_timer = timer_read();
    486c:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <timer_read>
    4870:	90 93 2c 02 	sts	0x022C, r25
    4874:	80 93 2b 02 	sts	0x022B, r24
}
    4878:	08 95       	ret

0000487a <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    487a:	cf 93       	push	r28
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    487c:	80 91 2b 02 	lds	r24, 0x022B
    4880:	90 91 2c 02 	lds	r25, 0x022C
    4884:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <timer_elapsed>
    4888:	60 91 2d 02 	lds	r22, 0x022D
    488c:	66 23       	and	r22, r22
    488e:	21 f0       	breq	.+8      	; 0x4898 <mousekey_task+0x1e>
    4890:	20 91 14 01 	lds	r18, 0x0114
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	0d c0       	rjmp	.+26     	; 0x48b2 <mousekey_task+0x38>
    4898:	40 91 15 01 	lds	r20, 0x0115
    489c:	50 e0       	ldi	r21, 0x00	; 0
    489e:	9a 01       	movw	r18, r20
    48a0:	22 0f       	add	r18, r18
    48a2:	33 1f       	adc	r19, r19
    48a4:	e3 e0       	ldi	r30, 0x03	; 3
    48a6:	44 0f       	add	r20, r20
    48a8:	55 1f       	adc	r21, r21
    48aa:	ea 95       	dec	r30
    48ac:	e1 f7       	brne	.-8      	; 0x48a6 <mousekey_task+0x2c>
    48ae:	24 0f       	add	r18, r20
    48b0:	35 1f       	adc	r19, r21
    48b2:	82 17       	cp	r24, r18
    48b4:	93 07       	cpc	r25, r19
    48b6:	08 f4       	brcc	.+2      	; 0x48ba <mousekey_task+0x40>
    48b8:	85 c0       	rjmp	.+266    	; 0x49c4 <mousekey_task+0x14a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    48ba:	80 91 2f 02 	lds	r24, 0x022F
    48be:	88 23       	and	r24, r24
    48c0:	69 f4       	brne	.+26     	; 0x48dc <mousekey_task+0x62>
    48c2:	90 91 30 02 	lds	r25, 0x0230
    48c6:	99 23       	and	r25, r25
    48c8:	49 f4       	brne	.+18     	; 0x48dc <mousekey_task+0x62>
    48ca:	90 91 31 02 	lds	r25, 0x0231
    48ce:	99 23       	and	r25, r25
    48d0:	29 f4       	brne	.+10     	; 0x48dc <mousekey_task+0x62>
    48d2:	90 91 32 02 	lds	r25, 0x0232
    48d6:	99 23       	and	r25, r25
    48d8:	09 f4       	brne	.+2      	; 0x48dc <mousekey_task+0x62>
    48da:	74 c0       	rjmp	.+232    	; 0x49c4 <mousekey_task+0x14a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    48dc:	6f 3f       	cpi	r22, 0xFF	; 255
    48de:	19 f0       	breq	.+6      	; 0x48e6 <mousekey_task+0x6c>
        mousekey_repeat++;
    48e0:	6f 5f       	subi	r22, 0xFF	; 255
    48e2:	60 93 2d 02 	sts	0x022D, r22


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    48e6:	18 16       	cp	r1, r24
    48e8:	24 f4       	brge	.+8      	; 0x48f2 <mousekey_task+0x78>
    48ea:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    48ee:	80 93 2f 02 	sts	0x022F, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    48f2:	80 91 2f 02 	lds	r24, 0x022F
    48f6:	87 ff       	sbrs	r24, 7
    48f8:	05 c0       	rjmp	.+10     	; 0x4904 <mousekey_task+0x8a>
    48fa:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    48fe:	81 95       	neg	r24
    4900:	80 93 2f 02 	sts	0x022F, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4904:	80 91 30 02 	lds	r24, 0x0230
    4908:	18 16       	cp	r1, r24
    490a:	24 f4       	brge	.+8      	; 0x4914 <mousekey_task+0x9a>
    490c:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    4910:	80 93 30 02 	sts	0x0230, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4914:	80 91 30 02 	lds	r24, 0x0230
    4918:	87 ff       	sbrs	r24, 7
    491a:	05 c0       	rjmp	.+10     	; 0x4926 <mousekey_task+0xac>
    491c:	0e 94 e6 21 	call	0x43cc	; 0x43cc <move_unit>
    4920:	81 95       	neg	r24
    4922:	80 93 30 02 	sts	0x0230, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4926:	60 91 2f 02 	lds	r22, 0x022F
    492a:	66 23       	and	r22, r22
    492c:	39 f1       	breq	.+78     	; 0x497c <mousekey_task+0x102>
    492e:	c0 91 30 02 	lds	r28, 0x0230
    4932:	cc 23       	and	r28, r28
    4934:	19 f1       	breq	.+70     	; 0x497c <mousekey_task+0x102>
        mouse_report.x *= 0.7;
    4936:	77 27       	eor	r23, r23
    4938:	67 fd       	sbrc	r22, 7
    493a:	70 95       	com	r23
    493c:	87 2f       	mov	r24, r23
    493e:	97 2f       	mov	r25, r23
    4940:	0e 94 91 2c 	call	0x5922	; 0x5922 <__floatsisf>
    4944:	23 e3       	ldi	r18, 0x33	; 51
    4946:	33 e3       	ldi	r19, 0x33	; 51
    4948:	43 e3       	ldi	r20, 0x33	; 51
    494a:	5f e3       	ldi	r21, 0x3F	; 63
    494c:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <__mulsf3>
    4950:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <__fixsfsi>
    4954:	60 93 2f 02 	sts	0x022F, r22
        mouse_report.y *= 0.7;
    4958:	6c 2f       	mov	r22, r28
    495a:	77 27       	eor	r23, r23
    495c:	67 fd       	sbrc	r22, 7
    495e:	70 95       	com	r23
    4960:	87 2f       	mov	r24, r23
    4962:	97 2f       	mov	r25, r23
    4964:	0e 94 91 2c 	call	0x5922	; 0x5922 <__floatsisf>
    4968:	23 e3       	ldi	r18, 0x33	; 51
    496a:	33 e3       	ldi	r19, 0x33	; 51
    496c:	43 e3       	ldi	r20, 0x33	; 51
    496e:	5f e3       	ldi	r21, 0x3F	; 63
    4970:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <__mulsf3>
    4974:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <__fixsfsi>
    4978:	60 93 30 02 	sts	0x0230, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    497c:	80 91 31 02 	lds	r24, 0x0231
    4980:	18 16       	cp	r1, r24
    4982:	24 f4       	brge	.+8      	; 0x498c <mousekey_task+0x112>
    4984:	0e 94 42 22 	call	0x4484	; 0x4484 <wheel_unit>
    4988:	80 93 31 02 	sts	0x0231, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    498c:	80 91 31 02 	lds	r24, 0x0231
    4990:	87 ff       	sbrs	r24, 7
    4992:	05 c0       	rjmp	.+10     	; 0x499e <mousekey_task+0x124>
    4994:	0e 94 42 22 	call	0x4484	; 0x4484 <wheel_unit>
    4998:	81 95       	neg	r24
    499a:	80 93 31 02 	sts	0x0231, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    499e:	80 91 32 02 	lds	r24, 0x0232
    49a2:	18 16       	cp	r1, r24
    49a4:	24 f4       	brge	.+8      	; 0x49ae <mousekey_task+0x134>
    49a6:	0e 94 42 22 	call	0x4484	; 0x4484 <wheel_unit>
    49aa:	80 93 32 02 	sts	0x0232, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    49ae:	80 91 32 02 	lds	r24, 0x0232
    49b2:	87 ff       	sbrs	r24, 7
    49b4:	05 c0       	rjmp	.+10     	; 0x49c0 <mousekey_task+0x146>
    49b6:	0e 94 42 22 	call	0x4484	; 0x4484 <wheel_unit>
    49ba:	81 95       	neg	r24
    49bc:	80 93 32 02 	sts	0x0232, r24

    mousekey_send();
    49c0:	0e 94 6d 23 	call	0x46da	; 0x46da <mousekey_send>
}
    49c4:	cf 91       	pop	r28
    49c6:	08 95       	ret

000049c8 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    49c8:	ee e2       	ldi	r30, 0x2E	; 46
    49ca:	f2 e0       	ldi	r31, 0x02	; 2
    49cc:	85 e0       	ldi	r24, 0x05	; 5
    49ce:	df 01       	movw	r26, r30
    49d0:	1d 92       	st	X+, r1
    49d2:	8a 95       	dec	r24
    49d4:	e9 f7       	brne	.-6      	; 0x49d0 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    49d6:	10 92 2d 02 	sts	0x022D, r1
    mousekey_accel = 0;
    49da:	10 92 33 02 	sts	0x0233, r1
}
    49de:	08 95       	ret

000049e0 <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    49e0:	88 e7       	ldi	r24, 0x78	; 120
    49e2:	98 e0       	ldi	r25, 0x08	; 8
    49e4:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
          "ESC/q:	quit\n"
#ifdef MOUSEKEY_ENABLE
          "m:	mousekey\n"
#endif
    );
}
    49e8:	08 95       	ret

000049ea <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    49ea:	8e ea       	ldi	r24, 0xAE	; 174
    49ec:	98 e0       	ldi	r25, 0x08	; 8
    49ee:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    49f2:	00 d0       	rcall	.+0      	; 0x49f4 <mousekey_console_help+0xa>
    49f4:	00 d0       	rcall	.+0      	; 0x49f6 <mousekey_console_help+0xc>
    49f6:	00 d0       	rcall	.+0      	; 0x49f8 <mousekey_console_help+0xe>
    49f8:	ed b7       	in	r30, 0x3d	; 61
    49fa:	fe b7       	in	r31, 0x3e	; 62
    49fc:	31 96       	adiw	r30, 0x01	; 1
    49fe:	89 ea       	ldi	r24, 0xA9	; 169
    4a00:	99 e0       	ldi	r25, 0x09	; 9
    4a02:	ad b7       	in	r26, 0x3d	; 61
    4a04:	be b7       	in	r27, 0x3e	; 62
    4a06:	12 96       	adiw	r26, 0x02	; 2
    4a08:	9c 93       	st	X, r25
    4a0a:	8e 93       	st	-X, r24
    4a0c:	11 97       	sbiw	r26, 0x01	; 1
    4a0e:	85 e0       	ldi	r24, 0x05	; 5
    4a10:	90 e0       	ldi	r25, 0x00	; 0
    4a12:	93 83       	std	Z+3, r25	; 0x03
    4a14:	82 83       	std	Z+2, r24	; 0x02
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	95 83       	std	Z+5, r25	; 0x05
    4a1c:	84 83       	std	Z+4, r24	; 0x04
    4a1e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4a22:	8d b7       	in	r24, 0x3d	; 61
    4a24:	9e b7       	in	r25, 0x3e	; 62
    4a26:	06 96       	adiw	r24, 0x06	; 6
    4a28:	0f b6       	in	r0, 0x3f	; 63
    4a2a:	f8 94       	cli
    4a2c:	9e bf       	out	0x3e, r25	; 62
    4a2e:	0f be       	out	0x3f, r0	; 63
    4a30:	8d bf       	out	0x3d, r24	; 61
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    4a32:	08 95       	ret

00004a34 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4a34:	83 30       	cpi	r24, 0x03	; 3
    4a36:	09 f4       	brne	.+2      	; 0x4a3a <mousekey_param_inc+0x6>
    4a38:	52 c0       	rjmp	.+164    	; 0x4ade <mousekey_param_inc+0xaa>
    4a3a:	84 30       	cpi	r24, 0x04	; 4
    4a3c:	30 f4       	brcc	.+12     	; 0x4a4a <mousekey_param_inc+0x16>
    4a3e:	81 30       	cpi	r24, 0x01	; 1
    4a40:	71 f0       	breq	.+28     	; 0x4a5e <mousekey_param_inc+0x2a>
    4a42:	82 30       	cpi	r24, 0x02	; 2
    4a44:	09 f0       	breq	.+2      	; 0x4a48 <mousekey_param_inc+0x14>
    4a46:	da c0       	rjmp	.+436    	; 0x4bfc <mousekey_param_inc+0x1c8>
    4a48:	2a c0       	rjmp	.+84     	; 0x4a9e <mousekey_param_inc+0x6a>
    4a4a:	85 30       	cpi	r24, 0x05	; 5
    4a4c:	09 f4       	brne	.+2      	; 0x4a50 <mousekey_param_inc+0x1c>
    4a4e:	87 c0       	rjmp	.+270    	; 0x4b5e <mousekey_param_inc+0x12a>
    4a50:	85 30       	cpi	r24, 0x05	; 5
    4a52:	08 f4       	brcc	.+2      	; 0x4a56 <mousekey_param_inc+0x22>
    4a54:	64 c0       	rjmp	.+200    	; 0x4b1e <mousekey_param_inc+0xea>
    4a56:	86 30       	cpi	r24, 0x06	; 6
    4a58:	09 f0       	breq	.+2      	; 0x4a5c <mousekey_param_inc+0x28>
    4a5a:	d0 c0       	rjmp	.+416    	; 0x4bfc <mousekey_param_inc+0x1c8>
    4a5c:	a8 c0       	rjmp	.+336    	; 0x4bae <mousekey_param_inc+0x17a>
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4a5e:	20 91 15 01 	lds	r18, 0x0115
    4a62:	86 2f       	mov	r24, r22
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	82 0f       	add	r24, r18
    4a68:	91 1d       	adc	r25, r1
    4a6a:	8f 3f       	cpi	r24, 0xFF	; 255
    4a6c:	91 05       	cpc	r25, r1
    4a6e:	20 f4       	brcc	.+8      	; 0x4a78 <mousekey_param_inc+0x44>
                mk_delay += inc;
    4a70:	62 0f       	add	r22, r18
    4a72:	60 93 15 01 	sts	0x0115, r22
    4a76:	03 c0       	rjmp	.+6      	; 0x4a7e <mousekey_param_inc+0x4a>
            else
                mk_delay = UINT8_MAX;
    4a78:	8f ef       	ldi	r24, 0xFF	; 255
    4a7a:	80 93 15 01 	sts	0x0115, r24
            PRINT_SET_VAL(mk_delay);
    4a7e:	00 d0       	rcall	.+0      	; 0x4a80 <mousekey_param_inc+0x4c>
    4a80:	00 d0       	rcall	.+0      	; 0x4a82 <mousekey_param_inc+0x4e>
    4a82:	ed b7       	in	r30, 0x3d	; 61
    4a84:	fe b7       	in	r31, 0x3e	; 62
    4a86:	31 96       	adiw	r30, 0x01	; 1
    4a88:	8f ea       	ldi	r24, 0xAF	; 175
    4a8a:	9a e0       	ldi	r25, 0x0A	; 10
    4a8c:	ad b7       	in	r26, 0x3d	; 61
    4a8e:	be b7       	in	r27, 0x3e	; 62
    4a90:	12 96       	adiw	r26, 0x02	; 2
    4a92:	9c 93       	st	X, r25
    4a94:	8e 93       	st	-X, r24
    4a96:	11 97       	sbiw	r26, 0x01	; 1
    4a98:	80 91 15 01 	lds	r24, 0x0115
    4a9c:	7f c0       	rjmp	.+254    	; 0x4b9c <mousekey_param_inc+0x168>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4a9e:	20 91 14 01 	lds	r18, 0x0114
    4aa2:	86 2f       	mov	r24, r22
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	82 0f       	add	r24, r18
    4aa8:	91 1d       	adc	r25, r1
    4aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    4aac:	91 05       	cpc	r25, r1
    4aae:	20 f4       	brcc	.+8      	; 0x4ab8 <mousekey_param_inc+0x84>
                mk_interval += inc;
    4ab0:	62 0f       	add	r22, r18
    4ab2:	60 93 14 01 	sts	0x0114, r22
    4ab6:	03 c0       	rjmp	.+6      	; 0x4abe <mousekey_param_inc+0x8a>
            else
                mk_interval = UINT8_MAX;
    4ab8:	8f ef       	ldi	r24, 0xFF	; 255
    4aba:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_interval);
    4abe:	00 d0       	rcall	.+0      	; 0x4ac0 <mousekey_param_inc+0x8c>
    4ac0:	00 d0       	rcall	.+0      	; 0x4ac2 <mousekey_param_inc+0x8e>
    4ac2:	ed b7       	in	r30, 0x3d	; 61
    4ac4:	fe b7       	in	r31, 0x3e	; 62
    4ac6:	31 96       	adiw	r30, 0x01	; 1
    4ac8:	8e eb       	ldi	r24, 0xBE	; 190
    4aca:	9a e0       	ldi	r25, 0x0A	; 10
    4acc:	ad b7       	in	r26, 0x3d	; 61
    4ace:	be b7       	in	r27, 0x3e	; 62
    4ad0:	12 96       	adiw	r26, 0x02	; 2
    4ad2:	9c 93       	st	X, r25
    4ad4:	8e 93       	st	-X, r24
    4ad6:	11 97       	sbiw	r26, 0x01	; 1
    4ad8:	80 91 14 01 	lds	r24, 0x0114
    4adc:	5f c0       	rjmp	.+190    	; 0x4b9c <mousekey_param_inc+0x168>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4ade:	20 91 13 01 	lds	r18, 0x0113
    4ae2:	86 2f       	mov	r24, r22
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	82 0f       	add	r24, r18
    4ae8:	91 1d       	adc	r25, r1
    4aea:	8f 3f       	cpi	r24, 0xFF	; 255
    4aec:	91 05       	cpc	r25, r1
    4aee:	20 f4       	brcc	.+8      	; 0x4af8 <mousekey_param_inc+0xc4>
                mk_max_speed += inc;
    4af0:	62 0f       	add	r22, r18
    4af2:	60 93 13 01 	sts	0x0113, r22
    4af6:	03 c0       	rjmp	.+6      	; 0x4afe <mousekey_param_inc+0xca>
            else
                mk_max_speed = UINT8_MAX;
    4af8:	8f ef       	ldi	r24, 0xFF	; 255
    4afa:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_max_speed);
    4afe:	00 d0       	rcall	.+0      	; 0x4b00 <mousekey_param_inc+0xcc>
    4b00:	00 d0       	rcall	.+0      	; 0x4b02 <mousekey_param_inc+0xce>
    4b02:	ed b7       	in	r30, 0x3d	; 61
    4b04:	fe b7       	in	r31, 0x3e	; 62
    4b06:	31 96       	adiw	r30, 0x01	; 1
    4b08:	80 ed       	ldi	r24, 0xD0	; 208
    4b0a:	9a e0       	ldi	r25, 0x0A	; 10
    4b0c:	ad b7       	in	r26, 0x3d	; 61
    4b0e:	be b7       	in	r27, 0x3e	; 62
    4b10:	12 96       	adiw	r26, 0x02	; 2
    4b12:	9c 93       	st	X, r25
    4b14:	8e 93       	st	-X, r24
    4b16:	11 97       	sbiw	r26, 0x01	; 1
    4b18:	80 91 13 01 	lds	r24, 0x0113
    4b1c:	3f c0       	rjmp	.+126    	; 0x4b9c <mousekey_param_inc+0x168>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4b1e:	20 91 12 01 	lds	r18, 0x0112
    4b22:	86 2f       	mov	r24, r22
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	82 0f       	add	r24, r18
    4b28:	91 1d       	adc	r25, r1
    4b2a:	8f 3f       	cpi	r24, 0xFF	; 255
    4b2c:	91 05       	cpc	r25, r1
    4b2e:	20 f4       	brcc	.+8      	; 0x4b38 <mousekey_param_inc+0x104>
                mk_time_to_max += inc;
    4b30:	62 0f       	add	r22, r18
    4b32:	60 93 12 01 	sts	0x0112, r22
    4b36:	03 c0       	rjmp	.+6      	; 0x4b3e <mousekey_param_inc+0x10a>
            else
                mk_time_to_max = UINT8_MAX;
    4b38:	8f ef       	ldi	r24, 0xFF	; 255
    4b3a:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_time_to_max);
    4b3e:	00 d0       	rcall	.+0      	; 0x4b40 <mousekey_param_inc+0x10c>
    4b40:	00 d0       	rcall	.+0      	; 0x4b42 <mousekey_param_inc+0x10e>
    4b42:	ed b7       	in	r30, 0x3d	; 61
    4b44:	fe b7       	in	r31, 0x3e	; 62
    4b46:	31 96       	adiw	r30, 0x01	; 1
    4b48:	83 ee       	ldi	r24, 0xE3	; 227
    4b4a:	9a e0       	ldi	r25, 0x0A	; 10
    4b4c:	ad b7       	in	r26, 0x3d	; 61
    4b4e:	be b7       	in	r27, 0x3e	; 62
    4b50:	12 96       	adiw	r26, 0x02	; 2
    4b52:	9c 93       	st	X, r25
    4b54:	8e 93       	st	-X, r24
    4b56:	11 97       	sbiw	r26, 0x01	; 1
    4b58:	80 91 12 01 	lds	r24, 0x0112
    4b5c:	1f c0       	rjmp	.+62     	; 0x4b9c <mousekey_param_inc+0x168>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4b5e:	20 91 11 01 	lds	r18, 0x0111
    4b62:	86 2f       	mov	r24, r22
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	82 0f       	add	r24, r18
    4b68:	91 1d       	adc	r25, r1
    4b6a:	8f 3f       	cpi	r24, 0xFF	; 255
    4b6c:	91 05       	cpc	r25, r1
    4b6e:	20 f4       	brcc	.+8      	; 0x4b78 <mousekey_param_inc+0x144>
                mk_wheel_max_speed += inc;
    4b70:	62 0f       	add	r22, r18
    4b72:	60 93 11 01 	sts	0x0111, r22
    4b76:	03 c0       	rjmp	.+6      	; 0x4b7e <mousekey_param_inc+0x14a>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4b78:	8f ef       	ldi	r24, 0xFF	; 255
    4b7a:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4b7e:	00 d0       	rcall	.+0      	; 0x4b80 <mousekey_param_inc+0x14c>
    4b80:	00 d0       	rcall	.+0      	; 0x4b82 <mousekey_param_inc+0x14e>
    4b82:	ed b7       	in	r30, 0x3d	; 61
    4b84:	fe b7       	in	r31, 0x3e	; 62
    4b86:	31 96       	adiw	r30, 0x01	; 1
    4b88:	88 ef       	ldi	r24, 0xF8	; 248
    4b8a:	9a e0       	ldi	r25, 0x0A	; 10
    4b8c:	ad b7       	in	r26, 0x3d	; 61
    4b8e:	be b7       	in	r27, 0x3e	; 62
    4b90:	12 96       	adiw	r26, 0x02	; 2
    4b92:	9c 93       	st	X, r25
    4b94:	8e 93       	st	-X, r24
    4b96:	11 97       	sbiw	r26, 0x01	; 1
    4b98:	80 91 11 01 	lds	r24, 0x0111
    4b9c:	82 83       	std	Z+2, r24	; 0x02
    4b9e:	13 82       	std	Z+3, r1	; 0x03
    4ba0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
            break;
    4ba4:	0f 90       	pop	r0
    4ba6:	0f 90       	pop	r0
    4ba8:	0f 90       	pop	r0
    4baa:	0f 90       	pop	r0
    4bac:	08 95       	ret
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4bae:	20 91 10 01 	lds	r18, 0x0110
    4bb2:	86 2f       	mov	r24, r22
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	82 0f       	add	r24, r18
    4bb8:	91 1d       	adc	r25, r1
    4bba:	8f 3f       	cpi	r24, 0xFF	; 255
    4bbc:	91 05       	cpc	r25, r1
    4bbe:	20 f4       	brcc	.+8      	; 0x4bc8 <mousekey_param_inc+0x194>
                mk_wheel_time_to_max += inc;
    4bc0:	62 0f       	add	r22, r18
    4bc2:	60 93 10 01 	sts	0x0110, r22
    4bc6:	03 c0       	rjmp	.+6      	; 0x4bce <mousekey_param_inc+0x19a>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4bc8:	8f ef       	ldi	r24, 0xFF	; 255
    4bca:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4bce:	00 d0       	rcall	.+0      	; 0x4bd0 <mousekey_param_inc+0x19c>
    4bd0:	00 d0       	rcall	.+0      	; 0x4bd2 <mousekey_param_inc+0x19e>
    4bd2:	ed b7       	in	r30, 0x3d	; 61
    4bd4:	fe b7       	in	r31, 0x3e	; 62
    4bd6:	31 96       	adiw	r30, 0x01	; 1
    4bd8:	81 e1       	ldi	r24, 0x11	; 17
    4bda:	9b e0       	ldi	r25, 0x0B	; 11
    4bdc:	ad b7       	in	r26, 0x3d	; 61
    4bde:	be b7       	in	r27, 0x3e	; 62
    4be0:	12 96       	adiw	r26, 0x02	; 2
    4be2:	9c 93       	st	X, r25
    4be4:	8e 93       	st	-X, r24
    4be6:	11 97       	sbiw	r26, 0x01	; 1
    4be8:	80 91 10 01 	lds	r24, 0x0110
    4bec:	82 83       	std	Z+2, r24	; 0x02
    4bee:	13 82       	std	Z+3, r1	; 0x03
    4bf0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
            break;
    4bf4:	0f 90       	pop	r0
    4bf6:	0f 90       	pop	r0
    4bf8:	0f 90       	pop	r0
    4bfa:	0f 90       	pop	r0
    4bfc:	08 95       	ret

00004bfe <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4bfe:	83 30       	cpi	r24, 0x03	; 3
    4c00:	09 f4       	brne	.+2      	; 0x4c04 <mousekey_param_dec+0x6>
    4c02:	46 c0       	rjmp	.+140    	; 0x4c90 <mousekey_param_dec+0x92>
    4c04:	84 30       	cpi	r24, 0x04	; 4
    4c06:	30 f4       	brcc	.+12     	; 0x4c14 <mousekey_param_dec+0x16>
    4c08:	81 30       	cpi	r24, 0x01	; 1
    4c0a:	71 f0       	breq	.+28     	; 0x4c28 <mousekey_param_dec+0x2a>
    4c0c:	82 30       	cpi	r24, 0x02	; 2
    4c0e:	09 f0       	breq	.+2      	; 0x4c12 <mousekey_param_dec+0x14>
    4c10:	b6 c0       	rjmp	.+364    	; 0x4d7e <mousekey_param_dec+0x180>
    4c12:	24 c0       	rjmp	.+72     	; 0x4c5c <mousekey_param_dec+0x5e>
    4c14:	85 30       	cpi	r24, 0x05	; 5
    4c16:	09 f4       	brne	.+2      	; 0x4c1a <mousekey_param_dec+0x1c>
    4c18:	6f c0       	rjmp	.+222    	; 0x4cf8 <mousekey_param_dec+0xfa>
    4c1a:	85 30       	cpi	r24, 0x05	; 5
    4c1c:	08 f4       	brcc	.+2      	; 0x4c20 <mousekey_param_dec+0x22>
    4c1e:	52 c0       	rjmp	.+164    	; 0x4cc4 <mousekey_param_dec+0xc6>
    4c20:	86 30       	cpi	r24, 0x06	; 6
    4c22:	09 f0       	breq	.+2      	; 0x4c26 <mousekey_param_dec+0x28>
    4c24:	ac c0       	rjmp	.+344    	; 0x4d7e <mousekey_param_dec+0x180>
    4c26:	8a c0       	rjmp	.+276    	; 0x4d3c <mousekey_param_dec+0x13e>
        case 1:
            if (mk_delay > dec)
    4c28:	80 91 15 01 	lds	r24, 0x0115
    4c2c:	68 17       	cp	r22, r24
    4c2e:	20 f4       	brcc	.+8      	; 0x4c38 <mousekey_param_dec+0x3a>
                mk_delay -= dec;
    4c30:	86 1b       	sub	r24, r22
    4c32:	80 93 15 01 	sts	0x0115, r24
    4c36:	02 c0       	rjmp	.+4      	; 0x4c3c <mousekey_param_dec+0x3e>
            else
                mk_delay = 0;
    4c38:	10 92 15 01 	sts	0x0115, r1
            PRINT_SET_VAL(mk_delay);
    4c3c:	00 d0       	rcall	.+0      	; 0x4c3e <mousekey_param_dec+0x40>
    4c3e:	00 d0       	rcall	.+0      	; 0x4c40 <mousekey_param_dec+0x42>
    4c40:	ed b7       	in	r30, 0x3d	; 61
    4c42:	fe b7       	in	r31, 0x3e	; 62
    4c44:	31 96       	adiw	r30, 0x01	; 1
    4c46:	8c e2       	ldi	r24, 0x2C	; 44
    4c48:	9b e0       	ldi	r25, 0x0B	; 11
    4c4a:	ad b7       	in	r26, 0x3d	; 61
    4c4c:	be b7       	in	r27, 0x3e	; 62
    4c4e:	12 96       	adiw	r26, 0x02	; 2
    4c50:	9c 93       	st	X, r25
    4c52:	8e 93       	st	-X, r24
    4c54:	11 97       	sbiw	r26, 0x01	; 1
    4c56:	80 91 15 01 	lds	r24, 0x0115
    4c5a:	67 c0       	rjmp	.+206    	; 0x4d2a <mousekey_param_dec+0x12c>
            break;
        case 2:
            if (mk_interval > dec)
    4c5c:	80 91 14 01 	lds	r24, 0x0114
    4c60:	68 17       	cp	r22, r24
    4c62:	20 f4       	brcc	.+8      	; 0x4c6c <mousekey_param_dec+0x6e>
                mk_interval -= dec;
    4c64:	86 1b       	sub	r24, r22
    4c66:	80 93 14 01 	sts	0x0114, r24
    4c6a:	02 c0       	rjmp	.+4      	; 0x4c70 <mousekey_param_dec+0x72>
            else
                mk_interval = 0;
    4c6c:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_interval);
    4c70:	00 d0       	rcall	.+0      	; 0x4c72 <mousekey_param_dec+0x74>
    4c72:	00 d0       	rcall	.+0      	; 0x4c74 <mousekey_param_dec+0x76>
    4c74:	ed b7       	in	r30, 0x3d	; 61
    4c76:	fe b7       	in	r31, 0x3e	; 62
    4c78:	31 96       	adiw	r30, 0x01	; 1
    4c7a:	8b e3       	ldi	r24, 0x3B	; 59
    4c7c:	9b e0       	ldi	r25, 0x0B	; 11
    4c7e:	ad b7       	in	r26, 0x3d	; 61
    4c80:	be b7       	in	r27, 0x3e	; 62
    4c82:	12 96       	adiw	r26, 0x02	; 2
    4c84:	9c 93       	st	X, r25
    4c86:	8e 93       	st	-X, r24
    4c88:	11 97       	sbiw	r26, 0x01	; 1
    4c8a:	80 91 14 01 	lds	r24, 0x0114
    4c8e:	4d c0       	rjmp	.+154    	; 0x4d2a <mousekey_param_dec+0x12c>
            break;
        case 3:
            if (mk_max_speed > dec)
    4c90:	80 91 13 01 	lds	r24, 0x0113
    4c94:	68 17       	cp	r22, r24
    4c96:	20 f4       	brcc	.+8      	; 0x4ca0 <mousekey_param_dec+0xa2>
                mk_max_speed -= dec;
    4c98:	86 1b       	sub	r24, r22
    4c9a:	80 93 13 01 	sts	0x0113, r24
    4c9e:	02 c0       	rjmp	.+4      	; 0x4ca4 <mousekey_param_dec+0xa6>
            else
                mk_max_speed = 0;
    4ca0:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_max_speed);
    4ca4:	00 d0       	rcall	.+0      	; 0x4ca6 <mousekey_param_dec+0xa8>
    4ca6:	00 d0       	rcall	.+0      	; 0x4ca8 <mousekey_param_dec+0xaa>
    4ca8:	ed b7       	in	r30, 0x3d	; 61
    4caa:	fe b7       	in	r31, 0x3e	; 62
    4cac:	31 96       	adiw	r30, 0x01	; 1
    4cae:	8d e4       	ldi	r24, 0x4D	; 77
    4cb0:	9b e0       	ldi	r25, 0x0B	; 11
    4cb2:	ad b7       	in	r26, 0x3d	; 61
    4cb4:	be b7       	in	r27, 0x3e	; 62
    4cb6:	12 96       	adiw	r26, 0x02	; 2
    4cb8:	9c 93       	st	X, r25
    4cba:	8e 93       	st	-X, r24
    4cbc:	11 97       	sbiw	r26, 0x01	; 1
    4cbe:	80 91 13 01 	lds	r24, 0x0113
    4cc2:	33 c0       	rjmp	.+102    	; 0x4d2a <mousekey_param_dec+0x12c>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4cc4:	80 91 12 01 	lds	r24, 0x0112
    4cc8:	68 17       	cp	r22, r24
    4cca:	20 f4       	brcc	.+8      	; 0x4cd4 <mousekey_param_dec+0xd6>
                mk_time_to_max -= dec;
    4ccc:	86 1b       	sub	r24, r22
    4cce:	80 93 12 01 	sts	0x0112, r24
    4cd2:	02 c0       	rjmp	.+4      	; 0x4cd8 <mousekey_param_dec+0xda>
            else
                mk_time_to_max = 0;
    4cd4:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_time_to_max);
    4cd8:	00 d0       	rcall	.+0      	; 0x4cda <mousekey_param_dec+0xdc>
    4cda:	00 d0       	rcall	.+0      	; 0x4cdc <mousekey_param_dec+0xde>
    4cdc:	ed b7       	in	r30, 0x3d	; 61
    4cde:	fe b7       	in	r31, 0x3e	; 62
    4ce0:	31 96       	adiw	r30, 0x01	; 1
    4ce2:	80 e6       	ldi	r24, 0x60	; 96
    4ce4:	9b e0       	ldi	r25, 0x0B	; 11
    4ce6:	ad b7       	in	r26, 0x3d	; 61
    4ce8:	be b7       	in	r27, 0x3e	; 62
    4cea:	12 96       	adiw	r26, 0x02	; 2
    4cec:	9c 93       	st	X, r25
    4cee:	8e 93       	st	-X, r24
    4cf0:	11 97       	sbiw	r26, 0x01	; 1
    4cf2:	80 91 12 01 	lds	r24, 0x0112
    4cf6:	19 c0       	rjmp	.+50     	; 0x4d2a <mousekey_param_dec+0x12c>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4cf8:	80 91 11 01 	lds	r24, 0x0111
    4cfc:	68 17       	cp	r22, r24
    4cfe:	20 f4       	brcc	.+8      	; 0x4d08 <mousekey_param_dec+0x10a>
                mk_wheel_max_speed -= dec;
    4d00:	86 1b       	sub	r24, r22
    4d02:	80 93 11 01 	sts	0x0111, r24
    4d06:	02 c0       	rjmp	.+4      	; 0x4d0c <mousekey_param_dec+0x10e>
            else
                mk_wheel_max_speed = 0;
    4d08:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4d0c:	00 d0       	rcall	.+0      	; 0x4d0e <mousekey_param_dec+0x110>
    4d0e:	00 d0       	rcall	.+0      	; 0x4d10 <mousekey_param_dec+0x112>
    4d10:	ed b7       	in	r30, 0x3d	; 61
    4d12:	fe b7       	in	r31, 0x3e	; 62
    4d14:	31 96       	adiw	r30, 0x01	; 1
    4d16:	85 e7       	ldi	r24, 0x75	; 117
    4d18:	9b e0       	ldi	r25, 0x0B	; 11
    4d1a:	ad b7       	in	r26, 0x3d	; 61
    4d1c:	be b7       	in	r27, 0x3e	; 62
    4d1e:	12 96       	adiw	r26, 0x02	; 2
    4d20:	9c 93       	st	X, r25
    4d22:	8e 93       	st	-X, r24
    4d24:	11 97       	sbiw	r26, 0x01	; 1
    4d26:	80 91 11 01 	lds	r24, 0x0111
    4d2a:	82 83       	std	Z+2, r24	; 0x02
    4d2c:	13 82       	std	Z+3, r1	; 0x03
    4d2e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
            break;
    4d32:	0f 90       	pop	r0
    4d34:	0f 90       	pop	r0
    4d36:	0f 90       	pop	r0
    4d38:	0f 90       	pop	r0
    4d3a:	08 95       	ret
        case 6:
            if (mk_wheel_time_to_max > dec)
    4d3c:	80 91 10 01 	lds	r24, 0x0110
    4d40:	68 17       	cp	r22, r24
    4d42:	20 f4       	brcc	.+8      	; 0x4d4c <mousekey_param_dec+0x14e>
                mk_wheel_time_to_max -= dec;
    4d44:	86 1b       	sub	r24, r22
    4d46:	80 93 10 01 	sts	0x0110, r24
    4d4a:	02 c0       	rjmp	.+4      	; 0x4d50 <mousekey_param_dec+0x152>
            else
                mk_wheel_time_to_max = 0;
    4d4c:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4d50:	00 d0       	rcall	.+0      	; 0x4d52 <mousekey_param_dec+0x154>
    4d52:	00 d0       	rcall	.+0      	; 0x4d54 <mousekey_param_dec+0x156>
    4d54:	ed b7       	in	r30, 0x3d	; 61
    4d56:	fe b7       	in	r31, 0x3e	; 62
    4d58:	31 96       	adiw	r30, 0x01	; 1
    4d5a:	8e e8       	ldi	r24, 0x8E	; 142
    4d5c:	9b e0       	ldi	r25, 0x0B	; 11
    4d5e:	ad b7       	in	r26, 0x3d	; 61
    4d60:	be b7       	in	r27, 0x3e	; 62
    4d62:	12 96       	adiw	r26, 0x02	; 2
    4d64:	9c 93       	st	X, r25
    4d66:	8e 93       	st	-X, r24
    4d68:	11 97       	sbiw	r26, 0x01	; 1
    4d6a:	80 91 10 01 	lds	r24, 0x0110
    4d6e:	82 83       	std	Z+2, r24	; 0x02
    4d70:	13 82       	std	Z+3, r1	; 0x03
    4d72:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
            break;
    4d76:	0f 90       	pop	r0
    4d78:	0f 90       	pop	r0
    4d7a:	0f 90       	pop	r0
    4d7c:	0f 90       	pop	r0
    4d7e:	08 95       	ret

00004d80 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4d80:	cf 93       	push	r28
    4d82:	df 93       	push	r29
    4d84:	0f 92       	push	r0
    4d86:	cd b7       	in	r28, 0x3d	; 61
    4d88:	de b7       	in	r29, 0x3e	; 62
    xprintf("L%d\n", layer);
    4d8a:	00 d0       	rcall	.+0      	; 0x4d8c <switch_default_layer+0xc>
    4d8c:	00 d0       	rcall	.+0      	; 0x4d8e <switch_default_layer+0xe>
    4d8e:	ed b7       	in	r30, 0x3d	; 61
    4d90:	fe b7       	in	r31, 0x3e	; 62
    4d92:	31 96       	adiw	r30, 0x01	; 1
    4d94:	2f e9       	ldi	r18, 0x9F	; 159
    4d96:	38 e0       	ldi	r19, 0x08	; 8
    4d98:	ad b7       	in	r26, 0x3d	; 61
    4d9a:	be b7       	in	r27, 0x3e	; 62
    4d9c:	12 96       	adiw	r26, 0x02	; 2
    4d9e:	3c 93       	st	X, r19
    4da0:	2e 93       	st	-X, r18
    4da2:	11 97       	sbiw	r26, 0x01	; 1
    4da4:	82 83       	std	Z+2, r24	; 0x02
    4da6:	13 82       	std	Z+3, r1	; 0x03
    4da8:	89 83       	std	Y+1, r24	; 0x01
    4daa:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    default_layer_set(1UL<<layer);
    4dae:	0f 90       	pop	r0
    4db0:	0f 90       	pop	r0
    4db2:	0f 90       	pop	r0
    4db4:	0f 90       	pop	r0
    4db6:	41 e0       	ldi	r20, 0x01	; 1
    4db8:	50 e0       	ldi	r21, 0x00	; 0
    4dba:	60 e0       	ldi	r22, 0x00	; 0
    4dbc:	70 e0       	ldi	r23, 0x00	; 0
    4dbe:	89 81       	ldd	r24, Y+1	; 0x01
    4dc0:	04 c0       	rjmp	.+8      	; 0x4dca <switch_default_layer+0x4a>
    4dc2:	44 0f       	add	r20, r20
    4dc4:	55 1f       	adc	r21, r21
    4dc6:	66 1f       	adc	r22, r22
    4dc8:	77 1f       	adc	r23, r23
    4dca:	8a 95       	dec	r24
    4dcc:	d2 f7       	brpl	.-12     	; 0x4dc2 <switch_default_layer+0x42>
    4dce:	cb 01       	movw	r24, r22
    4dd0:	ba 01       	movw	r22, r20
    4dd2:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <default_layer_set>
    clear_keyboard();
    4dd6:	0e 94 0f 18 	call	0x301e	; 0x301e <clear_keyboard>
}
    4dda:	0f 90       	pop	r0
    4ddc:	df 91       	pop	r29
    4dde:	cf 91       	pop	r28
    4de0:	08 95       	ret

00004de2 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4de2:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    4de4:	8d 31       	cpi	r24, 0x1D	; 29
    4de6:	09 f4       	brne	.+2      	; 0x4dea <command_common+0x8>
    4de8:	49 c0       	rjmp	.+146    	; 0x4e7c <command_common+0x9a>
    4dea:	8e 31       	cpi	r24, 0x1E	; 30
    4dec:	40 f5       	brcc	.+80     	; 0x4e3e <command_common+0x5c>
    4dee:	8e 30       	cpi	r24, 0x0E	; 14
    4df0:	09 f4       	brne	.+2      	; 0x4df4 <command_common+0x12>
    4df2:	88 c2       	rjmp	.+1296   	; 0x5304 <command_common+0x522>
    4df4:	8f 30       	cpi	r24, 0x0F	; 15
    4df6:	80 f4       	brcc	.+32     	; 0x4e18 <command_common+0x36>
    4df8:	87 30       	cpi	r24, 0x07	; 7
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <command_common+0x1c>
    4dfc:	59 c2       	rjmp	.+1202   	; 0x52b0 <command_common+0x4ce>
    4dfe:	88 30       	cpi	r24, 0x08	; 8
    4e00:	20 f4       	brcc	.+8      	; 0x4e0a <command_common+0x28>
    4e02:	86 30       	cpi	r24, 0x06	; 6
    4e04:	09 f0       	breq	.+2      	; 0x4e08 <command_common+0x26>
    4e06:	43 c3       	rjmp	.+1670   	; 0x548e <command_common+0x6ac>
    4e08:	32 c2       	rjmp	.+1124   	; 0x526e <command_common+0x48c>
    4e0a:	88 30       	cpi	r24, 0x08	; 8
    4e0c:	09 f4       	brne	.+2      	; 0x4e10 <command_common+0x2e>
    4e0e:	41 c0       	rjmp	.+130    	; 0x4e92 <command_common+0xb0>
    4e10:	8b 30       	cpi	r24, 0x0B	; 11
    4e12:	09 f0       	breq	.+2      	; 0x4e16 <command_common+0x34>
    4e14:	3c c3       	rjmp	.+1656   	; 0x548e <command_common+0x6ac>
    4e16:	28 c2       	rjmp	.+1104   	; 0x5268 <command_common+0x486>
    4e18:	86 31       	cpi	r24, 0x16	; 22
    4e1a:	09 f4       	brne	.+2      	; 0x4e1e <command_common+0x3c>
    4e1c:	b8 c2       	rjmp	.+1392   	; 0x538e <command_common+0x5ac>
    4e1e:	87 31       	cpi	r24, 0x17	; 23
    4e20:	38 f4       	brcc	.+14     	; 0x4e30 <command_common+0x4e>
    4e22:	80 31       	cpi	r24, 0x10	; 16
    4e24:	09 f4       	brne	.+2      	; 0x4e28 <command_common+0x46>
    4e26:	84 c2       	rjmp	.+1288   	; 0x5330 <command_common+0x54e>
    4e28:	81 31       	cpi	r24, 0x11	; 17
    4e2a:	09 f0       	breq	.+2      	; 0x4e2e <command_common+0x4c>
    4e2c:	30 c3       	rjmp	.+1632   	; 0x548e <command_common+0x6ac>
    4e2e:	17 c3       	rjmp	.+1582   	; 0x545e <command_common+0x67c>
    4e30:	89 31       	cpi	r24, 0x19	; 25
    4e32:	09 f4       	brne	.+2      	; 0x4e36 <command_common+0x54>
    4e34:	95 c2       	rjmp	.+1322   	; 0x5360 <command_common+0x57e>
    4e36:	8b 31       	cpi	r24, 0x1B	; 27
    4e38:	09 f0       	breq	.+2      	; 0x4e3c <command_common+0x5a>
    4e3a:	29 c3       	rjmp	.+1618   	; 0x548e <command_common+0x6ac>
    4e3c:	48 c2       	rjmp	.+1168   	; 0x52ce <command_common+0x4ec>
    4e3e:	85 33       	cpi	r24, 0x35	; 53
    4e40:	09 f4       	brne	.+2      	; 0x4e44 <command_common+0x62>
    4e42:	1d c3       	rjmp	.+1594   	; 0x547e <command_common+0x69c>
    4e44:	86 33       	cpi	r24, 0x36	; 54
    4e46:	50 f4       	brcc	.+20     	; 0x4e5c <command_common+0x7a>
    4e48:	87 32       	cpi	r24, 0x27	; 39
    4e4a:	09 f4       	brne	.+2      	; 0x4e4e <command_common+0x6c>
    4e4c:	18 c3       	rjmp	.+1584   	; 0x547e <command_common+0x69c>
    4e4e:	87 32       	cpi	r24, 0x27	; 39
    4e50:	08 f4       	brcc	.+2      	; 0x4e54 <command_common+0x72>
    4e52:	17 c3       	rjmp	.+1582   	; 0x5482 <command_common+0x6a0>
    4e54:	89 32       	cpi	r24, 0x29	; 41
    4e56:	09 f0       	breq	.+2      	; 0x4e5a <command_common+0x78>
    4e58:	1a c3       	rjmp	.+1588   	; 0x548e <command_common+0x6ac>
    4e5a:	11 c3       	rjmp	.+1570   	; 0x547e <command_common+0x69c>
    4e5c:	83 34       	cpi	r24, 0x43	; 67
    4e5e:	38 f4       	brcc	.+14     	; 0x4e6e <command_common+0x8c>
    4e60:	8a 33       	cpi	r24, 0x3A	; 58
    4e62:	08 f0       	brcs	.+2      	; 0x4e66 <command_common+0x84>
    4e64:	10 c3       	rjmp	.+1568   	; 0x5486 <command_common+0x6a4>
    4e66:	88 33       	cpi	r24, 0x38	; 56
    4e68:	09 f0       	breq	.+2      	; 0x4e6c <command_common+0x8a>
    4e6a:	11 c3       	rjmp	.+1570   	; 0x548e <command_common+0x6ac>
    4e6c:	fd c1       	rjmp	.+1018   	; 0x5268 <command_common+0x486>
    4e6e:	83 34       	cpi	r24, 0x43	; 67
    4e70:	09 f4       	brne	.+2      	; 0x4e74 <command_common+0x92>
    4e72:	05 c3       	rjmp	.+1546   	; 0x547e <command_common+0x69c>
    4e74:	88 34       	cpi	r24, 0x48	; 72
    4e76:	09 f0       	breq	.+2      	; 0x4e7a <command_common+0x98>
    4e78:	0a c3       	rjmp	.+1556   	; 0x548e <command_common+0x6ac>
    4e7a:	08 c2       	rjmp	.+1040   	; 0x528c <command_common+0x4aa>
#ifdef SLEEP_LED_ENABLE
        case KC_Z:
            // test breathing sleep LED
            print("Sleep LED test\n");
    4e7c:	87 e4       	ldi	r24, 0x47	; 71
    4e7e:	94 e0       	ldi	r25, 0x04	; 4
    4e80:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            sleep_led_toggle();
    4e84:	0e 94 18 2c 	call	0x5830	; 0x5830 <sleep_led_toggle>
            led_set(host_keyboard_leds());
    4e88:	0e 94 b2 12 	call	0x2564	; 0x2564 <host_keyboard_leds>
    4e8c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <led_set>
    4e90:	e9 c1       	rjmp	.+978    	; 0x5264 <command_common+0x482>
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4e92:	87 e5       	ldi	r24, 0x57	; 87
    4e94:	94 e0       	ldi	r25, 0x04	; 4
    4e96:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4e9a:	8e e7       	ldi	r24, 0x7E	; 126
    4e9c:	96 e0       	ldi	r25, 0x06	; 6
    4e9e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    4ea2:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <eeconfig_read_default_layer>
    4ea6:	00 d0       	rcall	.+0      	; 0x4ea8 <command_common+0xc6>
    4ea8:	00 d0       	rcall	.+0      	; 0x4eaa <command_common+0xc8>
    4eaa:	ed b7       	in	r30, 0x3d	; 61
    4eac:	fe b7       	in	r31, 0x3e	; 62
    4eae:	31 96       	adiw	r30, 0x01	; 1
    4eb0:	2e e8       	ldi	r18, 0x8E	; 142
    4eb2:	36 e0       	ldi	r19, 0x06	; 6
    4eb4:	ad b7       	in	r26, 0x3d	; 61
    4eb6:	be b7       	in	r27, 0x3e	; 62
    4eb8:	12 96       	adiw	r26, 0x02	; 2
    4eba:	3c 93       	st	X, r19
    4ebc:	2e 93       	st	-X, r18
    4ebe:	11 97       	sbiw	r26, 0x01	; 1
    4ec0:	82 83       	std	Z+2, r24	; 0x02
    4ec2:	13 82       	std	Z+3, r1	; 0x03
    4ec4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4ec8:	0f 90       	pop	r0
    4eca:	0f 90       	pop	r0
    4ecc:	0f 90       	pop	r0
    4ece:	0f 90       	pop	r0
    4ed0:	81 e9       	ldi	r24, 0x91	; 145
    4ed2:	96 e0       	ldi	r25, 0x06	; 6
    4ed4:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4ed8:	0e 94 c5 21 	call	0x438a	; 0x438a <eeconfig_read_debug>
    4edc:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4ede:	83 e9       	ldi	r24, 0x93	; 147
    4ee0:	96 e0       	ldi	r25, 0x06	; 6
    4ee2:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    4ee6:	00 d0       	rcall	.+0      	; 0x4ee8 <command_common+0x106>
    4ee8:	00 d0       	rcall	.+0      	; 0x4eea <command_common+0x108>
    4eea:	ed b7       	in	r30, 0x3d	; 61
    4eec:	fe b7       	in	r31, 0x3e	; 62
    4eee:	31 96       	adiw	r30, 0x01	; 1
    4ef0:	86 ea       	ldi	r24, 0xA6	; 166
    4ef2:	96 e0       	ldi	r25, 0x06	; 6
    4ef4:	ad b7       	in	r26, 0x3d	; 61
    4ef6:	be b7       	in	r27, 0x3e	; 62
    4ef8:	12 96       	adiw	r26, 0x02	; 2
    4efa:	9c 93       	st	X, r25
    4efc:	8e 93       	st	-X, r24
    4efe:	11 97       	sbiw	r26, 0x01	; 1
    4f00:	c2 83       	std	Z+2, r28	; 0x02
    4f02:	13 82       	std	Z+3, r1	; 0x03
    4f04:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4f08:	0f 90       	pop	r0
    4f0a:	0f 90       	pop	r0
    4f0c:	0f 90       	pop	r0
    4f0e:	0f 90       	pop	r0
    4f10:	8b ea       	ldi	r24, 0xAB	; 171
    4f12:	96 e0       	ldi	r25, 0x06	; 6
    4f14:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4f18:	8d ea       	ldi	r24, 0xAD	; 173
    4f1a:	96 e0       	ldi	r25, 0x06	; 6
    4f1c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    4f20:	00 d0       	rcall	.+0      	; 0x4f22 <command_common+0x140>
    4f22:	00 d0       	rcall	.+0      	; 0x4f24 <command_common+0x142>
    4f24:	ed b7       	in	r30, 0x3d	; 61
    4f26:	fe b7       	in	r31, 0x3e	; 62
    4f28:	31 96       	adiw	r30, 0x01	; 1
    4f2a:	87 eb       	ldi	r24, 0xB7	; 183
    4f2c:	96 e0       	ldi	r25, 0x06	; 6
    4f2e:	ad b7       	in	r26, 0x3d	; 61
    4f30:	be b7       	in	r27, 0x3e	; 62
    4f32:	12 96       	adiw	r26, 0x02	; 2
    4f34:	9c 93       	st	X, r25
    4f36:	8e 93       	st	-X, r24
    4f38:	11 97       	sbiw	r26, 0x01	; 1
    4f3a:	8c 2f       	mov	r24, r28
    4f3c:	81 70       	andi	r24, 0x01	; 1
    4f3e:	82 83       	std	Z+2, r24	; 0x02
    4f40:	13 82       	std	Z+3, r1	; 0x03
    4f42:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4f46:	0f 90       	pop	r0
    4f48:	0f 90       	pop	r0
    4f4a:	0f 90       	pop	r0
    4f4c:	0f 90       	pop	r0
    4f4e:	8a eb       	ldi	r24, 0xBA	; 186
    4f50:	96 e0       	ldi	r25, 0x06	; 6
    4f52:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4f56:	8c eb       	ldi	r24, 0xBC	; 188
    4f58:	96 e0       	ldi	r25, 0x06	; 6
    4f5a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    4f5e:	00 d0       	rcall	.+0      	; 0x4f60 <command_common+0x17e>
    4f60:	00 d0       	rcall	.+0      	; 0x4f62 <command_common+0x180>
    4f62:	ed b7       	in	r30, 0x3d	; 61
    4f64:	fe b7       	in	r31, 0x3e	; 62
    4f66:	31 96       	adiw	r30, 0x01	; 1
    4f68:	86 ec       	ldi	r24, 0xC6	; 198
    4f6a:	96 e0       	ldi	r25, 0x06	; 6
    4f6c:	ad b7       	in	r26, 0x3d	; 61
    4f6e:	be b7       	in	r27, 0x3e	; 62
    4f70:	12 96       	adiw	r26, 0x02	; 2
    4f72:	9c 93       	st	X, r25
    4f74:	8e 93       	st	-X, r24
    4f76:	11 97       	sbiw	r26, 0x01	; 1
    4f78:	8c 2f       	mov	r24, r28
    4f7a:	86 95       	lsr	r24
    4f7c:	81 70       	andi	r24, 0x01	; 1
    4f7e:	82 83       	std	Z+2, r24	; 0x02
    4f80:	13 82       	std	Z+3, r1	; 0x03
    4f82:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4f86:	0f 90       	pop	r0
    4f88:	0f 90       	pop	r0
    4f8a:	0f 90       	pop	r0
    4f8c:	0f 90       	pop	r0
    4f8e:	89 ec       	ldi	r24, 0xC9	; 201
    4f90:	96 e0       	ldi	r25, 0x06	; 6
    4f92:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4f96:	8b ec       	ldi	r24, 0xCB	; 203
    4f98:	96 e0       	ldi	r25, 0x06	; 6
    4f9a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    4f9e:	00 d0       	rcall	.+0      	; 0x4fa0 <command_common+0x1be>
    4fa0:	00 d0       	rcall	.+0      	; 0x4fa2 <command_common+0x1c0>
    4fa2:	ed b7       	in	r30, 0x3d	; 61
    4fa4:	fe b7       	in	r31, 0x3e	; 62
    4fa6:	31 96       	adiw	r30, 0x01	; 1
    4fa8:	87 ed       	ldi	r24, 0xD7	; 215
    4faa:	96 e0       	ldi	r25, 0x06	; 6
    4fac:	ad b7       	in	r26, 0x3d	; 61
    4fae:	be b7       	in	r27, 0x3e	; 62
    4fb0:	12 96       	adiw	r26, 0x02	; 2
    4fb2:	9c 93       	st	X, r25
    4fb4:	8e 93       	st	-X, r24
    4fb6:	11 97       	sbiw	r26, 0x01	; 1
    4fb8:	8c 2f       	mov	r24, r28
    4fba:	86 95       	lsr	r24
    4fbc:	86 95       	lsr	r24
    4fbe:	81 70       	andi	r24, 0x01	; 1
    4fc0:	82 83       	std	Z+2, r24	; 0x02
    4fc2:	13 82       	std	Z+3, r1	; 0x03
    4fc4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4fc8:	0f 90       	pop	r0
    4fca:	0f 90       	pop	r0
    4fcc:	0f 90       	pop	r0
    4fce:	0f 90       	pop	r0
    4fd0:	8a ed       	ldi	r24, 0xDA	; 218
    4fd2:	96 e0       	ldi	r25, 0x06	; 6
    4fd4:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4fd8:	8c ed       	ldi	r24, 0xDC	; 220
    4fda:	96 e0       	ldi	r25, 0x06	; 6
    4fdc:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    4fe0:	00 d0       	rcall	.+0      	; 0x4fe2 <command_common+0x200>
    4fe2:	00 d0       	rcall	.+0      	; 0x4fe4 <command_common+0x202>
    4fe4:	ed b7       	in	r30, 0x3d	; 61
    4fe6:	fe b7       	in	r31, 0x3e	; 62
    4fe8:	31 96       	adiw	r30, 0x01	; 1
    4fea:	85 ee       	ldi	r24, 0xE5	; 229
    4fec:	96 e0       	ldi	r25, 0x06	; 6
    4fee:	ad b7       	in	r26, 0x3d	; 61
    4ff0:	be b7       	in	r27, 0x3e	; 62
    4ff2:	12 96       	adiw	r26, 0x02	; 2
    4ff4:	9c 93       	st	X, r25
    4ff6:	8e 93       	st	-X, r24
    4ff8:	11 97       	sbiw	r26, 0x01	; 1
    4ffa:	c6 95       	lsr	r28
    4ffc:	c6 95       	lsr	r28
    4ffe:	c6 95       	lsr	r28
    5000:	c1 70       	andi	r28, 0x01	; 1
    5002:	c2 83       	std	Z+2, r28	; 0x02
    5004:	13 82       	std	Z+3, r1	; 0x03
    5006:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    500a:	0f 90       	pop	r0
    500c:	0f 90       	pop	r0
    500e:	0f 90       	pop	r0
    5010:	0f 90       	pop	r0
    5012:	88 ee       	ldi	r24, 0xE8	; 232
    5014:	96 e0       	ldi	r25, 0x06	; 6
    5016:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    501a:	0e 94 db 21 	call	0x43b6	; 0x43b6 <eeconfig_read_keymap>
    501e:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    5020:	8a ee       	ldi	r24, 0xEA	; 234
    5022:	96 e0       	ldi	r25, 0x06	; 6
    5024:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5028:	00 d0       	rcall	.+0      	; 0x502a <command_common+0x248>
    502a:	00 d0       	rcall	.+0      	; 0x502c <command_common+0x24a>
    502c:	ed b7       	in	r30, 0x3d	; 61
    502e:	fe b7       	in	r31, 0x3e	; 62
    5030:	31 96       	adiw	r30, 0x01	; 1
    5032:	8e ef       	ldi	r24, 0xFE	; 254
    5034:	96 e0       	ldi	r25, 0x06	; 6
    5036:	ad b7       	in	r26, 0x3d	; 61
    5038:	be b7       	in	r27, 0x3e	; 62
    503a:	12 96       	adiw	r26, 0x02	; 2
    503c:	9c 93       	st	X, r25
    503e:	8e 93       	st	-X, r24
    5040:	11 97       	sbiw	r26, 0x01	; 1
    5042:	c2 83       	std	Z+2, r28	; 0x02
    5044:	13 82       	std	Z+3, r1	; 0x03
    5046:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    504a:	0f 90       	pop	r0
    504c:	0f 90       	pop	r0
    504e:	0f 90       	pop	r0
    5050:	0f 90       	pop	r0
    5052:	83 e0       	ldi	r24, 0x03	; 3
    5054:	97 e0       	ldi	r25, 0x07	; 7
    5056:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    505a:	85 e0       	ldi	r24, 0x05	; 5
    505c:	97 e0       	ldi	r25, 0x07	; 7
    505e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5062:	00 d0       	rcall	.+0      	; 0x5064 <command_common+0x282>
    5064:	00 d0       	rcall	.+0      	; 0x5066 <command_common+0x284>
    5066:	ed b7       	in	r30, 0x3d	; 61
    5068:	fe b7       	in	r31, 0x3e	; 62
    506a:	31 96       	adiw	r30, 0x01	; 1
    506c:	8e e1       	ldi	r24, 0x1E	; 30
    506e:	97 e0       	ldi	r25, 0x07	; 7
    5070:	ad b7       	in	r26, 0x3d	; 61
    5072:	be b7       	in	r27, 0x3e	; 62
    5074:	12 96       	adiw	r26, 0x02	; 2
    5076:	9c 93       	st	X, r25
    5078:	8e 93       	st	-X, r24
    507a:	11 97       	sbiw	r26, 0x01	; 1
    507c:	8c 2f       	mov	r24, r28
    507e:	81 70       	andi	r24, 0x01	; 1
    5080:	82 83       	std	Z+2, r24	; 0x02
    5082:	13 82       	std	Z+3, r1	; 0x03
    5084:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5088:	0f 90       	pop	r0
    508a:	0f 90       	pop	r0
    508c:	0f 90       	pop	r0
    508e:	0f 90       	pop	r0
    5090:	81 e2       	ldi	r24, 0x21	; 33
    5092:	97 e0       	ldi	r25, 0x07	; 7
    5094:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    5098:	83 e2       	ldi	r24, 0x23	; 35
    509a:	97 e0       	ldi	r25, 0x07	; 7
    509c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    50a0:	00 d0       	rcall	.+0      	; 0x50a2 <command_common+0x2c0>
    50a2:	00 d0       	rcall	.+0      	; 0x50a4 <command_common+0x2c2>
    50a4:	ed b7       	in	r30, 0x3d	; 61
    50a6:	fe b7       	in	r31, 0x3e	; 62
    50a8:	31 96       	adiw	r30, 0x01	; 1
    50aa:	8a e3       	ldi	r24, 0x3A	; 58
    50ac:	97 e0       	ldi	r25, 0x07	; 7
    50ae:	ad b7       	in	r26, 0x3d	; 61
    50b0:	be b7       	in	r27, 0x3e	; 62
    50b2:	12 96       	adiw	r26, 0x02	; 2
    50b4:	9c 93       	st	X, r25
    50b6:	8e 93       	st	-X, r24
    50b8:	11 97       	sbiw	r26, 0x01	; 1
    50ba:	8c 2f       	mov	r24, r28
    50bc:	86 95       	lsr	r24
    50be:	81 70       	andi	r24, 0x01	; 1
    50c0:	82 83       	std	Z+2, r24	; 0x02
    50c2:	13 82       	std	Z+3, r1	; 0x03
    50c4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    50c8:	0f 90       	pop	r0
    50ca:	0f 90       	pop	r0
    50cc:	0f 90       	pop	r0
    50ce:	0f 90       	pop	r0
    50d0:	8d e3       	ldi	r24, 0x3D	; 61
    50d2:	97 e0       	ldi	r25, 0x07	; 7
    50d4:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    50d8:	8f e3       	ldi	r24, 0x3F	; 63
    50da:	97 e0       	ldi	r25, 0x07	; 7
    50dc:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    50e0:	00 d0       	rcall	.+0      	; 0x50e2 <command_common+0x300>
    50e2:	00 d0       	rcall	.+0      	; 0x50e4 <command_common+0x302>
    50e4:	ed b7       	in	r30, 0x3d	; 61
    50e6:	fe b7       	in	r31, 0x3e	; 62
    50e8:	31 96       	adiw	r30, 0x01	; 1
    50ea:	81 e5       	ldi	r24, 0x51	; 81
    50ec:	97 e0       	ldi	r25, 0x07	; 7
    50ee:	ad b7       	in	r26, 0x3d	; 61
    50f0:	be b7       	in	r27, 0x3e	; 62
    50f2:	12 96       	adiw	r26, 0x02	; 2
    50f4:	9c 93       	st	X, r25
    50f6:	8e 93       	st	-X, r24
    50f8:	11 97       	sbiw	r26, 0x01	; 1
    50fa:	8c 2f       	mov	r24, r28
    50fc:	86 95       	lsr	r24
    50fe:	86 95       	lsr	r24
    5100:	81 70       	andi	r24, 0x01	; 1
    5102:	82 83       	std	Z+2, r24	; 0x02
    5104:	13 82       	std	Z+3, r1	; 0x03
    5106:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    510a:	0f 90       	pop	r0
    510c:	0f 90       	pop	r0
    510e:	0f 90       	pop	r0
    5110:	0f 90       	pop	r0
    5112:	84 e5       	ldi	r24, 0x54	; 84
    5114:	97 e0       	ldi	r25, 0x07	; 7
    5116:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    511a:	86 e5       	ldi	r24, 0x56	; 86
    511c:	97 e0       	ldi	r25, 0x07	; 7
    511e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5122:	00 d0       	rcall	.+0      	; 0x5124 <command_common+0x342>
    5124:	00 d0       	rcall	.+0      	; 0x5126 <command_common+0x344>
    5126:	ed b7       	in	r30, 0x3d	; 61
    5128:	fe b7       	in	r31, 0x3e	; 62
    512a:	31 96       	adiw	r30, 0x01	; 1
    512c:	88 e6       	ldi	r24, 0x68	; 104
    512e:	97 e0       	ldi	r25, 0x07	; 7
    5130:	ad b7       	in	r26, 0x3d	; 61
    5132:	be b7       	in	r27, 0x3e	; 62
    5134:	12 96       	adiw	r26, 0x02	; 2
    5136:	9c 93       	st	X, r25
    5138:	8e 93       	st	-X, r24
    513a:	11 97       	sbiw	r26, 0x01	; 1
    513c:	8c 2f       	mov	r24, r28
    513e:	86 95       	lsr	r24
    5140:	86 95       	lsr	r24
    5142:	86 95       	lsr	r24
    5144:	81 70       	andi	r24, 0x01	; 1
    5146:	82 83       	std	Z+2, r24	; 0x02
    5148:	13 82       	std	Z+3, r1	; 0x03
    514a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    514e:	0f 90       	pop	r0
    5150:	0f 90       	pop	r0
    5152:	0f 90       	pop	r0
    5154:	0f 90       	pop	r0
    5156:	8b e6       	ldi	r24, 0x6B	; 107
    5158:	97 e0       	ldi	r25, 0x07	; 7
    515a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    515e:	8d e6       	ldi	r24, 0x6D	; 109
    5160:	97 e0       	ldi	r25, 0x07	; 7
    5162:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5166:	00 d0       	rcall	.+0      	; 0x5168 <command_common+0x386>
    5168:	00 d0       	rcall	.+0      	; 0x516a <command_common+0x388>
    516a:	ed b7       	in	r30, 0x3d	; 61
    516c:	fe b7       	in	r31, 0x3e	; 62
    516e:	31 96       	adiw	r30, 0x01	; 1
    5170:	87 e7       	ldi	r24, 0x77	; 119
    5172:	97 e0       	ldi	r25, 0x07	; 7
    5174:	ad b7       	in	r26, 0x3d	; 61
    5176:	be b7       	in	r27, 0x3e	; 62
    5178:	12 96       	adiw	r26, 0x02	; 2
    517a:	9c 93       	st	X, r25
    517c:	8e 93       	st	-X, r24
    517e:	11 97       	sbiw	r26, 0x01	; 1
    5180:	8c 2f       	mov	r24, r28
    5182:	82 95       	swap	r24
    5184:	81 70       	andi	r24, 0x01	; 1
    5186:	82 83       	std	Z+2, r24	; 0x02
    5188:	13 82       	std	Z+3, r1	; 0x03
    518a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    518e:	0f 90       	pop	r0
    5190:	0f 90       	pop	r0
    5192:	0f 90       	pop	r0
    5194:	0f 90       	pop	r0
    5196:	8a e7       	ldi	r24, 0x7A	; 122
    5198:	97 e0       	ldi	r25, 0x07	; 7
    519a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    519e:	8c e7       	ldi	r24, 0x7C	; 124
    51a0:	97 e0       	ldi	r25, 0x07	; 7
    51a2:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    51a6:	00 d0       	rcall	.+0      	; 0x51a8 <command_common+0x3c6>
    51a8:	00 d0       	rcall	.+0      	; 0x51aa <command_common+0x3c8>
    51aa:	ed b7       	in	r30, 0x3d	; 61
    51ac:	fe b7       	in	r31, 0x3e	; 62
    51ae:	31 96       	adiw	r30, 0x01	; 1
    51b0:	8e e8       	ldi	r24, 0x8E	; 142
    51b2:	97 e0       	ldi	r25, 0x07	; 7
    51b4:	ad b7       	in	r26, 0x3d	; 61
    51b6:	be b7       	in	r27, 0x3e	; 62
    51b8:	12 96       	adiw	r26, 0x02	; 2
    51ba:	9c 93       	st	X, r25
    51bc:	8e 93       	st	-X, r24
    51be:	11 97       	sbiw	r26, 0x01	; 1
    51c0:	8c 2f       	mov	r24, r28
    51c2:	82 95       	swap	r24
    51c4:	86 95       	lsr	r24
    51c6:	81 70       	andi	r24, 0x01	; 1
    51c8:	82 83       	std	Z+2, r24	; 0x02
    51ca:	13 82       	std	Z+3, r1	; 0x03
    51cc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    51d0:	0f 90       	pop	r0
    51d2:	0f 90       	pop	r0
    51d4:	0f 90       	pop	r0
    51d6:	0f 90       	pop	r0
    51d8:	81 e9       	ldi	r24, 0x91	; 145
    51da:	97 e0       	ldi	r25, 0x07	; 7
    51dc:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    51e0:	83 e9       	ldi	r24, 0x93	; 147
    51e2:	97 e0       	ldi	r25, 0x07	; 7
    51e4:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    51e8:	00 d0       	rcall	.+0      	; 0x51ea <command_common+0x408>
    51ea:	00 d0       	rcall	.+0      	; 0x51ec <command_common+0x40a>
    51ec:	ed b7       	in	r30, 0x3d	; 61
    51ee:	fe b7       	in	r31, 0x3e	; 62
    51f0:	31 96       	adiw	r30, 0x01	; 1
    51f2:	8f ea       	ldi	r24, 0xAF	; 175
    51f4:	97 e0       	ldi	r25, 0x07	; 7
    51f6:	ad b7       	in	r26, 0x3d	; 61
    51f8:	be b7       	in	r27, 0x3e	; 62
    51fa:	12 96       	adiw	r26, 0x02	; 2
    51fc:	9c 93       	st	X, r25
    51fe:	8e 93       	st	-X, r24
    5200:	11 97       	sbiw	r26, 0x01	; 1
    5202:	8c 2f       	mov	r24, r28
    5204:	82 95       	swap	r24
    5206:	86 95       	lsr	r24
    5208:	86 95       	lsr	r24
    520a:	81 70       	andi	r24, 0x01	; 1
    520c:	82 83       	std	Z+2, r24	; 0x02
    520e:	13 82       	std	Z+3, r1	; 0x03
    5210:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5214:	0f 90       	pop	r0
    5216:	0f 90       	pop	r0
    5218:	0f 90       	pop	r0
    521a:	0f 90       	pop	r0
    521c:	82 eb       	ldi	r24, 0xB2	; 178
    521e:	97 e0       	ldi	r25, 0x07	; 7
    5220:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    5224:	84 eb       	ldi	r24, 0xB4	; 180
    5226:	97 e0       	ldi	r25, 0x07	; 7
    5228:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    522c:	00 d0       	rcall	.+0      	; 0x522e <command_common+0x44c>
    522e:	00 d0       	rcall	.+0      	; 0x5230 <command_common+0x44e>
    5230:	ed b7       	in	r30, 0x3d	; 61
    5232:	fe b7       	in	r31, 0x3e	; 62
    5234:	31 96       	adiw	r30, 0x01	; 1
    5236:	8c eb       	ldi	r24, 0xBC	; 188
    5238:	97 e0       	ldi	r25, 0x07	; 7
    523a:	ad b7       	in	r26, 0x3d	; 61
    523c:	be b7       	in	r27, 0x3e	; 62
    523e:	12 96       	adiw	r26, 0x02	; 2
    5240:	9c 93       	st	X, r25
    5242:	8e 93       	st	-X, r24
    5244:	11 97       	sbiw	r26, 0x01	; 1
    5246:	cc 1f       	adc	r28, r28
    5248:	cc 27       	eor	r28, r28
    524a:	cc 1f       	adc	r28, r28
    524c:	c2 83       	std	Z+2, r28	; 0x02
    524e:	13 82       	std	Z+3, r1	; 0x03
    5250:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5254:	0f 90       	pop	r0
    5256:	0f 90       	pop	r0
    5258:	0f 90       	pop	r0
    525a:	0f 90       	pop	r0
    525c:	8f eb       	ldi	r24, 0xBF	; 191
    525e:	97 e0       	ldi	r25, 0x07	; 7
    5260:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    5264:	81 e0       	ldi	r24, 0x01	; 1
    5266:	18 c1       	rjmp	.+560    	; 0x5498 <command_common+0x6b6>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    5268:	81 ec       	ldi	r24, 0xC1	; 193
    526a:	97 e0       	ldi	r25, 0x07	; 7
    526c:	f9 cf       	rjmp	.-14     	; 0x5260 <command_common+0x47e>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    526e:	80 91 25 02 	lds	r24, 0x0225
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    5272:	80 7f       	andi	r24, 0xF0	; 240
    5274:	80 93 25 02 	sts	0x0225, r24
            command_console_help();
    5278:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <command_console_help>
            print("C> ");
    527c:	82 e6       	ldi	r24, 0x62	; 98
    527e:	94 e0       	ldi	r25, 0x04	; 4
    5280:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            command_state = CONSOLE;
    5284:	81 e0       	ldi	r24, 0x01	; 1
    5286:	80 93 34 02 	sts	0x0234, r24
            break;
    528a:	06 c1       	rjmp	.+524    	; 0x5498 <command_common+0x6b6>
        case KC_PAUSE:
            clear_keyboard();
    528c:	0e 94 0f 18 	call	0x301e	; 0x301e <clear_keyboard>
            print("\n\nbootloader... ");
    5290:	86 e6       	ldi	r24, 0x66	; 102
    5292:	94 e0       	ldi	r25, 0x04	; 4
    5294:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5298:	8f ef       	ldi	r24, 0xFF	; 255
    529a:	93 ed       	ldi	r25, 0xD3	; 211
    529c:	a0 e3       	ldi	r26, 0x30	; 48
    529e:	81 50       	subi	r24, 0x01	; 1
    52a0:	90 40       	sbci	r25, 0x00	; 0
    52a2:	a0 40       	sbci	r26, 0x00	; 0
    52a4:	e1 f7       	brne	.-8      	; 0x529e <command_common+0x4bc>
    52a6:	00 c0       	rjmp	.+0      	; 0x52a8 <command_common+0x4c6>
    52a8:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    52aa:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <bootloader_jump>
    52ae:	da cf       	rjmp	.-76     	; 0x5264 <command_common+0x482>
            break;
        case KC_D:
            if (debug_enable) {
    52b0:	80 91 25 02 	lds	r24, 0x0225
    52b4:	80 ff       	sbrs	r24, 0
    52b6:	08 c0       	rjmp	.+16     	; 0x52c8 <command_common+0x4e6>
                print("\ndebug: off\n");
    52b8:	87 e7       	ldi	r24, 0x77	; 119
    52ba:	94 e0       	ldi	r25, 0x04	; 4
    52bc:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
                debug_matrix   = false;
    52c0:	80 91 25 02 	lds	r24, 0x0225
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    52c4:	80 7f       	andi	r24, 0xF0	; 240
    52c6:	18 c0       	rjmp	.+48     	; 0x52f8 <command_common+0x516>
            } else {
                print("\ndebug: on\n");
    52c8:	84 e8       	ldi	r24, 0x84	; 132
    52ca:	94 e0       	ldi	r25, 0x04	; 4
    52cc:	10 c0       	rjmp	.+32     	; 0x52ee <command_common+0x50c>
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    52ce:	90 91 25 02 	lds	r25, 0x0225
    52d2:	89 2f       	mov	r24, r25
    52d4:	86 95       	lsr	r24
    52d6:	80 95       	com	r24
    52d8:	81 70       	andi	r24, 0x01	; 1
    52da:	28 2f       	mov	r18, r24
    52dc:	22 0f       	add	r18, r18
    52de:	9d 7f       	andi	r25, 0xFD	; 253
    52e0:	92 2b       	or	r25, r18
    52e2:	90 93 25 02 	sts	0x0225, r25
            if (debug_matrix) {
    52e6:	88 23       	and	r24, r24
    52e8:	51 f0       	breq	.+20     	; 0x52fe <command_common+0x51c>
                print("\nmatrix: on\n");
    52ea:	80 e9       	ldi	r24, 0x90	; 144
    52ec:	94 e0       	ldi	r25, 0x04	; 4
    52ee:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
                debug_enable = true;
    52f2:	80 91 25 02 	lds	r24, 0x0225
    52f6:	81 60       	ori	r24, 0x01	; 1
    52f8:	80 93 25 02 	sts	0x0225, r24
    52fc:	b3 cf       	rjmp	.-154    	; 0x5264 <command_common+0x482>
            } else {
                print("\nmatrix: off\n");
    52fe:	8d e9       	ldi	r24, 0x9D	; 157
    5300:	94 e0       	ldi	r25, 0x04	; 4
    5302:	ae cf       	rjmp	.-164    	; 0x5260 <command_common+0x47e>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    5304:	90 91 25 02 	lds	r25, 0x0225
    5308:	89 2f       	mov	r24, r25
    530a:	86 95       	lsr	r24
    530c:	86 95       	lsr	r24
    530e:	80 95       	com	r24
    5310:	81 70       	andi	r24, 0x01	; 1
    5312:	28 2f       	mov	r18, r24
    5314:	22 0f       	add	r18, r18
    5316:	22 0f       	add	r18, r18
    5318:	9b 7f       	andi	r25, 0xFB	; 251
    531a:	92 2b       	or	r25, r18
    531c:	90 93 25 02 	sts	0x0225, r25
            if (debug_keyboard) {
    5320:	88 23       	and	r24, r24
    5322:	19 f0       	breq	.+6      	; 0x532a <command_common+0x548>
                print("\nkeyboard: on\n");
    5324:	8b ea       	ldi	r24, 0xAB	; 171
    5326:	94 e0       	ldi	r25, 0x04	; 4
    5328:	e2 cf       	rjmp	.-60     	; 0x52ee <command_common+0x50c>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    532a:	8a eb       	ldi	r24, 0xBA	; 186
    532c:	94 e0       	ldi	r25, 0x04	; 4
    532e:	98 cf       	rjmp	.-208    	; 0x5260 <command_common+0x47e>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    5330:	90 91 25 02 	lds	r25, 0x0225
    5334:	89 2f       	mov	r24, r25
    5336:	86 95       	lsr	r24
    5338:	86 95       	lsr	r24
    533a:	86 95       	lsr	r24
    533c:	80 95       	com	r24
    533e:	81 70       	andi	r24, 0x01	; 1
    5340:	28 2f       	mov	r18, r24
    5342:	22 0f       	add	r18, r18
    5344:	22 0f       	add	r18, r18
    5346:	22 0f       	add	r18, r18
    5348:	97 7f       	andi	r25, 0xF7	; 247
    534a:	92 2b       	or	r25, r18
    534c:	90 93 25 02 	sts	0x0225, r25
            if (debug_mouse) {
    5350:	88 23       	and	r24, r24
    5352:	19 f0       	breq	.+6      	; 0x535a <command_common+0x578>
                print("\nmouse: on\n");
    5354:	8a ec       	ldi	r24, 0xCA	; 202
    5356:	94 e0       	ldi	r25, 0x04	; 4
    5358:	ca cf       	rjmp	.-108    	; 0x52ee <command_common+0x50c>
                debug_enable = true;
            } else {
                print("\nmouse: off\n");
    535a:	86 ed       	ldi	r24, 0xD6	; 214
    535c:	94 e0       	ldi	r25, 0x04	; 4
    535e:	80 cf       	rjmp	.-256    	; 0x5260 <command_common+0x47e>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    5360:	83 ee       	ldi	r24, 0xE3	; 227
    5362:	94 e0       	ldi	r25, 0x04	; 4
    5364:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    5368:	82 ef       	ldi	r24, 0xF2	; 242
    536a:	94 e0       	ldi	r25, 0x04	; 4
    536c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    5370:	85 e1       	ldi	r24, 0x15	; 21
    5372:	95 e0       	ldi	r25, 0x05	; 5
    5374:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    5378:	81 e5       	ldi	r24, 0x51	; 81
    537a:	95 e0       	ldi	r25, 0x05	; 5
    537c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            /* build options */
            print("OPTIONS:"
    5380:	8e e7       	ldi	r24, 0x7E	; 126
    5382:	95 e0       	ldi	r25, 0x05	; 5
    5384:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    5388:	83 ec       	ldi	r24, 0xC3	; 195
    538a:	95 e0       	ldi	r25, 0x05	; 5
    538c:	69 cf       	rjmp	.-302    	; 0x5260 <command_common+0x47e>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_S:
            print("\n\t- Status -\n");
    538e:	8e ee       	ldi	r24, 0xEE	; 238
    5390:	95 e0       	ldi	r25, 0x05	; 5
    5392:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            print_val_hex8(host_keyboard_leds());
    5396:	0e 94 b2 12 	call	0x2564	; 0x2564 <host_keyboard_leds>
    539a:	00 d0       	rcall	.+0      	; 0x539c <command_common+0x5ba>
    539c:	00 d0       	rcall	.+0      	; 0x539e <command_common+0x5bc>
    539e:	ed b7       	in	r30, 0x3d	; 61
    53a0:	fe b7       	in	r31, 0x3e	; 62
    53a2:	31 96       	adiw	r30, 0x01	; 1
    53a4:	2c ef       	ldi	r18, 0xFC	; 252
    53a6:	35 e0       	ldi	r19, 0x05	; 5
    53a8:	ad b7       	in	r26, 0x3d	; 61
    53aa:	be b7       	in	r27, 0x3e	; 62
    53ac:	12 96       	adiw	r26, 0x02	; 2
    53ae:	3c 93       	st	X, r19
    53b0:	2e 93       	st	-X, r18
    53b2:	11 97       	sbiw	r26, 0x01	; 1
    53b4:	82 83       	std	Z+2, r24	; 0x02
    53b6:	13 82       	std	Z+3, r1	; 0x03
    53b8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
            print_val_hex8(keyboard_protocol);
    53bc:	ed b7       	in	r30, 0x3d	; 61
    53be:	fe b7       	in	r31, 0x3e	; 62
    53c0:	31 96       	adiw	r30, 0x01	; 1
    53c2:	86 e1       	ldi	r24, 0x16	; 22
    53c4:	96 e0       	ldi	r25, 0x06	; 6
    53c6:	ad b7       	in	r26, 0x3d	; 61
    53c8:	be b7       	in	r27, 0x3e	; 62
    53ca:	12 96       	adiw	r26, 0x02	; 2
    53cc:	9c 93       	st	X, r25
    53ce:	8e 93       	st	-X, r24
    53d0:	11 97       	sbiw	r26, 0x01	; 1
    53d2:	80 91 0c 01 	lds	r24, 0x010C
    53d6:	82 83       	std	Z+2, r24	; 0x02
    53d8:	13 82       	std	Z+3, r1	; 0x03
    53da:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
            print_val_hex8(keyboard_idle);
    53de:	ed b7       	in	r30, 0x3d	; 61
    53e0:	fe b7       	in	r31, 0x3e	; 62
    53e2:	31 96       	adiw	r30, 0x01	; 1
    53e4:	8d e2       	ldi	r24, 0x2D	; 45
    53e6:	96 e0       	ldi	r25, 0x06	; 6
    53e8:	ad b7       	in	r26, 0x3d	; 61
    53ea:	be b7       	in	r27, 0x3e	; 62
    53ec:	12 96       	adiw	r26, 0x02	; 2
    53ee:	9c 93       	st	X, r25
    53f0:	8e 93       	st	-X, r24
    53f2:	11 97       	sbiw	r26, 0x01	; 1
    53f4:	80 91 aa 01 	lds	r24, 0x01AA
    53f8:	82 83       	std	Z+2, r24	; 0x02
    53fa:	13 82       	std	Z+3, r1	; 0x03
    53fc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    5400:	ed b7       	in	r30, 0x3d	; 61
    5402:	fe b7       	in	r31, 0x3e	; 62
    5404:	31 96       	adiw	r30, 0x01	; 1
    5406:	80 e4       	ldi	r24, 0x40	; 64
    5408:	96 e0       	ldi	r25, 0x06	; 6
    540a:	ad b7       	in	r26, 0x3d	; 61
    540c:	be b7       	in	r27, 0x3e	; 62
    540e:	12 96       	adiw	r26, 0x02	; 2
    5410:	9c 93       	st	X, r25
    5412:	8e 93       	st	-X, r24
    5414:	11 97       	sbiw	r26, 0x01	; 1
    5416:	80 91 0d 01 	lds	r24, 0x010D
    541a:	82 83       	std	Z+2, r24	; 0x02
    541c:	13 82       	std	Z+3, r1	; 0x03
    541e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
#endif
            print_val_hex32(timer_count);
    5422:	80 91 27 02 	lds	r24, 0x0227
    5426:	90 91 28 02 	lds	r25, 0x0228
    542a:	a0 91 29 02 	lds	r26, 0x0229
    542e:	b0 91 2a 02 	lds	r27, 0x022A
    5432:	00 d0       	rcall	.+0      	; 0x5434 <command_common+0x652>
    5434:	23 e5       	ldi	r18, 0x53	; 83
    5436:	36 e0       	ldi	r19, 0x06	; 6
    5438:	ed b7       	in	r30, 0x3d	; 61
    543a:	fe b7       	in	r31, 0x3e	; 62
    543c:	32 83       	std	Z+2, r19	; 0x02
    543e:	21 83       	std	Z+1, r18	; 0x01
    5440:	83 83       	std	Z+3, r24	; 0x03
    5442:	94 83       	std	Z+4, r25	; 0x04
    5444:	a5 83       	std	Z+5, r26	; 0x05
    5446:	b6 83       	std	Z+6, r27	; 0x06
    5448:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    544c:	8d b7       	in	r24, 0x3d	; 61
    544e:	9e b7       	in	r25, 0x3e	; 62
    5450:	06 96       	adiw	r24, 0x06	; 6
    5452:	0f b6       	in	r0, 0x3f	; 63
    5454:	f8 94       	cli
    5456:	9e bf       	out	0x3e, r25	; 62
    5458:	0f be       	out	0x3f, r0	; 63
    545a:	8d bf       	out	0x3d, r24	; 61
    545c:	03 cf       	rjmp	.-506    	; 0x5264 <command_common+0x482>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    545e:	0e 94 0f 18 	call	0x301e	; 0x301e <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    5462:	80 91 0d 01 	lds	r24, 0x010D
    5466:	91 e0       	ldi	r25, 0x01	; 1
    5468:	89 27       	eor	r24, r25
    546a:	80 93 0d 01 	sts	0x010D, r24
            if (keyboard_nkro)
    546e:	88 23       	and	r24, r24
    5470:	19 f0       	breq	.+6      	; 0x5478 <command_common+0x696>
                print("NKRO: on\n");
    5472:	87 e6       	ldi	r24, 0x67	; 103
    5474:	96 e0       	ldi	r25, 0x06	; 6
    5476:	f4 ce       	rjmp	.-536    	; 0x5260 <command_common+0x47e>
            else
                print("NKRO: off\n");
    5478:	81 e7       	ldi	r24, 0x71	; 113
    547a:	96 e0       	ldi	r25, 0x06	; 6
    547c:	f1 ce       	rjmp	.-542    	; 0x5260 <command_common+0x47e>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    547e:	80 e0       	ldi	r24, 0x00	; 0
    5480:	03 c0       	rjmp	.+6      	; 0x5488 <command_common+0x6a6>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    5482:	8d 51       	subi	r24, 0x1D	; 29
    5484:	01 c0       	rjmp	.+2      	; 0x5488 <command_common+0x6a6>
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    5486:	89 53       	subi	r24, 0x39	; 57
    5488:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <switch_default_layer>
    548c:	eb ce       	rjmp	.-554    	; 0x5264 <command_common+0x482>
            break;
        default:
            print("?");
    548e:	8c e7       	ldi	r24, 0x7C	; 124
    5490:	96 e0       	ldi	r25, 0x06	; 6
    5492:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            return false;
    5496:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
}
    5498:	cf 91       	pop	r28
    549a:	08 95       	ret

0000549c <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    549c:	80 e0       	ldi	r24, 0x00	; 0
    549e:	08 95       	ret

000054a0 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    54a0:	80 e0       	ldi	r24, 0x00	; 0
    54a2:	08 95       	ret

000054a4 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    54a4:	cf 93       	push	r28
    54a6:	c8 2f       	mov	r28, r24
    switch (command_state) {
    54a8:	80 91 34 02 	lds	r24, 0x0234
    54ac:	81 30       	cpi	r24, 0x01	; 1
    54ae:	79 f0       	breq	.+30     	; 0x54ce <command_proc+0x2a>
    54b0:	81 30       	cpi	r24, 0x01	; 1
    54b2:	20 f0       	brcs	.+8      	; 0x54bc <command_proc+0x18>
    54b4:	82 30       	cpi	r24, 0x02	; 2
    54b6:	09 f0       	breq	.+2      	; 0x54ba <command_proc+0x16>
    54b8:	98 c1       	rjmp	.+816    	; 0x57ea <command_proc+0x346>
    54ba:	49 c0       	rjmp	.+146    	; 0x554e <command_proc+0xaa>
        case ONESHOT:
            if (!IS_COMMAND())
    54bc:	a0 91 0e 01 	lds	r26, 0x010E
    54c0:	b0 91 0f 01 	lds	r27, 0x010F
    54c4:	8c 91       	ld	r24, X
    54c6:	8d 30       	cpi	r24, 0x0D	; 13
    54c8:	09 f0       	breq	.+2      	; 0x54cc <command_proc+0x28>
    54ca:	91 c1       	rjmp	.+802    	; 0x57ee <command_proc+0x34a>
    54cc:	07 c0       	rjmp	.+14     	; 0x54dc <command_proc+0x38>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    54ce:	a0 91 0e 01 	lds	r26, 0x010E
    54d2:	b0 91 0f 01 	lds	r27, 0x010F
    54d6:	8c 91       	ld	r24, X
    54d8:	8d 30       	cpi	r24, 0x0D	; 13
    54da:	49 f4       	brne	.+18     	; 0x54ee <command_proc+0x4a>
                return (command_extra(code) || command_common(code));
    54dc:	8c 2f       	mov	r24, r28
    54de:	0e 94 4e 2a 	call	0x549c	; 0x549c <command_extra>
    54e2:	88 23       	and	r24, r24
    54e4:	89 f5       	brne	.+98     	; 0x5548 <command_proc+0xa4>
    54e6:	8c 2f       	mov	r24, r28
    54e8:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <command_common>
    54ec:	81 c1       	rjmp	.+770    	; 0x57f0 <command_proc+0x34c>
            else
                return (command_console_extra(code) || command_console(code));
    54ee:	8c 2f       	mov	r24, r28
    54f0:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <command_console_extra>
    54f4:	88 23       	and	r24, r24
    54f6:	41 f5       	brne	.+80     	; 0x5548 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    54f8:	c4 31       	cpi	r28, 0x14	; 20
    54fa:	91 f0       	breq	.+36     	; 0x5520 <command_proc+0x7c>
    54fc:	c5 31       	cpi	r28, 0x15	; 21
    54fe:	28 f4       	brcc	.+10     	; 0x550a <command_proc+0x66>
    5500:	cb 30       	cpi	r28, 0x0B	; 11
    5502:	39 f0       	breq	.+14     	; 0x5512 <command_proc+0x6e>
    5504:	c0 31       	cpi	r28, 0x10	; 16
    5506:	c9 f4       	brne	.+50     	; 0x553a <command_proc+0x96>
    5508:	0e c0       	rjmp	.+28     	; 0x5526 <command_proc+0x82>
    550a:	c9 32       	cpi	r28, 0x29	; 41
    550c:	49 f0       	breq	.+18     	; 0x5520 <command_proc+0x7c>
    550e:	c8 33       	cpi	r28, 0x38	; 56
    5510:	a1 f4       	brne	.+40     	; 0x553a <command_proc+0x96>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    5512:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    5516:	84 ea       	ldi	r24, 0xA4	; 164
    5518:	98 e0       	ldi	r25, 0x08	; 8
    551a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    551e:	14 c0       	rjmp	.+40     	; 0x5548 <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    5520:	10 92 34 02 	sts	0x0234, r1
    5524:	0e c0       	rjmp	.+28     	; 0x5542 <command_proc+0x9e>
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    5526:	0e 94 f5 24 	call	0x49ea	; 0x49ea <mousekey_console_help>
            print("M> ");
    552a:	88 ea       	ldi	r24, 0xA8	; 168
    552c:	98 e0       	ldi	r25, 0x08	; 8
    552e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            command_state = MOUSEKEY;
    5532:	82 e0       	ldi	r24, 0x02	; 2
    5534:	80 93 34 02 	sts	0x0234, r24
    5538:	07 c0       	rjmp	.+14     	; 0x5548 <command_proc+0xa4>
            return true;
#endif
        default:
            print("?");
    553a:	8c ea       	ldi	r24, 0xAC	; 172
    553c:	98 e0       	ldi	r25, 0x08	; 8
    553e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5542:	80 e0       	ldi	r24, 0x00	; 0
    5544:	90 e0       	ldi	r25, 0x00	; 0
    5546:	54 c1       	rjmp	.+680    	; 0x57f0 <command_proc+0x34c>
    5548:	81 e0       	ldi	r24, 0x01	; 1
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	51 c1       	rjmp	.+674    	; 0x57f0 <command_proc+0x34c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    554e:	c4 32       	cpi	r28, 0x24	; 36
    5550:	88 f4       	brcc	.+34     	; 0x5574 <command_proc+0xd0>
    5552:	ce 31       	cpi	r28, 0x1E	; 30
    5554:	08 f0       	brcs	.+2      	; 0x5558 <command_proc+0xb4>
    5556:	f2 c0       	rjmp	.+484    	; 0x573c <command_proc+0x298>
    5558:	cb 30       	cpi	r28, 0x0B	; 11
    555a:	09 f1       	breq	.+66     	; 0x559e <command_proc+0xfa>
    555c:	cc 30       	cpi	r28, 0x0C	; 12
    555e:	20 f4       	brcc	.+8      	; 0x5568 <command_proc+0xc4>
    5560:	c7 30       	cpi	r28, 0x07	; 7
    5562:	09 f0       	breq	.+2      	; 0x5566 <command_proc+0xc2>
    5564:	1f c1       	rjmp	.+574    	; 0x57a4 <command_proc+0x300>
    5566:	07 c1       	rjmp	.+526    	; 0x5776 <command_proc+0x2d2>
    5568:	c3 31       	cpi	r28, 0x13	; 19
    556a:	59 f1       	breq	.+86     	; 0x55c2 <command_proc+0x11e>
    556c:	c4 31       	cpi	r28, 0x14	; 20
    556e:	09 f0       	breq	.+2      	; 0x5572 <command_proc+0xce>
    5570:	19 c1       	rjmp	.+562    	; 0x57a4 <command_proc+0x300>
    5572:	18 c0       	rjmp	.+48     	; 0x55a4 <command_proc+0x100>
    5574:	cb 34       	cpi	r28, 0x4B	; 75
    5576:	09 f4       	brne	.+2      	; 0x557a <command_proc+0xd6>
    5578:	f2 c0       	rjmp	.+484    	; 0x575e <command_proc+0x2ba>
    557a:	cc 34       	cpi	r28, 0x4C	; 76
    557c:	30 f4       	brcc	.+12     	; 0x558a <command_proc+0xe6>
    557e:	c9 32       	cpi	r28, 0x29	; 41
    5580:	89 f0       	breq	.+34     	; 0x55a4 <command_proc+0x100>
    5582:	c8 33       	cpi	r28, 0x38	; 56
    5584:	09 f0       	breq	.+2      	; 0x5588 <command_proc+0xe4>
    5586:	0e c1       	rjmp	.+540    	; 0x57a4 <command_proc+0x300>
    5588:	0a c0       	rjmp	.+20     	; 0x559e <command_proc+0xfa>
    558a:	c1 35       	cpi	r28, 0x51	; 81
    558c:	09 f4       	brne	.+2      	; 0x5590 <command_proc+0xec>
    558e:	e3 c0       	rjmp	.+454    	; 0x5756 <command_proc+0x2b2>
    5590:	c2 35       	cpi	r28, 0x52	; 82
    5592:	09 f4       	brne	.+2      	; 0x5596 <command_proc+0xf2>
    5594:	dc c0       	rjmp	.+440    	; 0x574e <command_proc+0x2aa>
    5596:	ce 34       	cpi	r28, 0x4E	; 78
    5598:	09 f0       	breq	.+2      	; 0x559c <command_proc+0xf8>
    559a:	04 c1       	rjmp	.+520    	; 0x57a4 <command_proc+0x300>
    559c:	e6 c0       	rjmp	.+460    	; 0x576a <command_proc+0x2c6>
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    559e:	0e 94 f5 24 	call	0x49ea	; 0x49ea <mousekey_console_help>
    55a2:	03 c1       	rjmp	.+518    	; 0x57aa <command_proc+0x306>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    55a4:	80 91 35 02 	lds	r24, 0x0235
    55a8:	88 23       	and	r24, r24
    55aa:	19 f0       	breq	.+6      	; 0x55b2 <command_proc+0x10e>
                mousekey_param = 0;
    55ac:	10 92 35 02 	sts	0x0235, r1
    55b0:	fc c0       	rjmp	.+504    	; 0x57aa <command_proc+0x306>
            } else {
                print("C> ");
    55b2:	87 ef       	ldi	r24, 0xF7	; 247
    55b4:	99 e0       	ldi	r25, 0x09	; 9
    55b6:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
                command_state = CONSOLE;
    55ba:	81 e0       	ldi	r24, 0x01	; 1
    55bc:	80 93 34 02 	sts	0x0234, r24
    55c0:	17 c1       	rjmp	.+558    	; 0x57f0 <command_proc+0x34c>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    55c2:	83 e1       	ldi	r24, 0x13	; 19
    55c4:	9a e0       	ldi	r25, 0x0A	; 10
    55c6:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    55ca:	81 e2       	ldi	r24, 0x21	; 33
    55cc:	9a e0       	ldi	r25, 0x0A	; 10
    55ce:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    55d2:	00 d0       	rcall	.+0      	; 0x55d4 <command_proc+0x130>
    55d4:	00 d0       	rcall	.+0      	; 0x55d6 <command_proc+0x132>
    55d6:	ed b7       	in	r30, 0x3d	; 61
    55d8:	fe b7       	in	r31, 0x3e	; 62
    55da:	31 96       	adiw	r30, 0x01	; 1
    55dc:	83 e3       	ldi	r24, 0x33	; 51
    55de:	9a e0       	ldi	r25, 0x0A	; 10
    55e0:	ad b7       	in	r26, 0x3d	; 61
    55e2:	be b7       	in	r27, 0x3e	; 62
    55e4:	12 96       	adiw	r26, 0x02	; 2
    55e6:	9c 93       	st	X, r25
    55e8:	8e 93       	st	-X, r24
    55ea:	11 97       	sbiw	r26, 0x01	; 1
    55ec:	80 91 15 01 	lds	r24, 0x0115
    55f0:	82 83       	std	Z+2, r24	; 0x02
    55f2:	13 82       	std	Z+3, r1	; 0x03
    55f4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    55f8:	0f 90       	pop	r0
    55fa:	0f 90       	pop	r0
    55fc:	0f 90       	pop	r0
    55fe:	0f 90       	pop	r0
    5600:	86 e3       	ldi	r24, 0x36	; 54
    5602:	9a e0       	ldi	r25, 0x0A	; 10
    5604:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5608:	88 e3       	ldi	r24, 0x38	; 56
    560a:	9a e0       	ldi	r25, 0x0A	; 10
    560c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5610:	00 d0       	rcall	.+0      	; 0x5612 <command_proc+0x16e>
    5612:	00 d0       	rcall	.+0      	; 0x5614 <command_proc+0x170>
    5614:	ed b7       	in	r30, 0x3d	; 61
    5616:	fe b7       	in	r31, 0x3e	; 62
    5618:	31 96       	adiw	r30, 0x01	; 1
    561a:	8a e4       	ldi	r24, 0x4A	; 74
    561c:	9a e0       	ldi	r25, 0x0A	; 10
    561e:	ad b7       	in	r26, 0x3d	; 61
    5620:	be b7       	in	r27, 0x3e	; 62
    5622:	12 96       	adiw	r26, 0x02	; 2
    5624:	9c 93       	st	X, r25
    5626:	8e 93       	st	-X, r24
    5628:	11 97       	sbiw	r26, 0x01	; 1
    562a:	80 91 14 01 	lds	r24, 0x0114
    562e:	82 83       	std	Z+2, r24	; 0x02
    5630:	13 82       	std	Z+3, r1	; 0x03
    5632:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5636:	0f 90       	pop	r0
    5638:	0f 90       	pop	r0
    563a:	0f 90       	pop	r0
    563c:	0f 90       	pop	r0
    563e:	8d e4       	ldi	r24, 0x4D	; 77
    5640:	9a e0       	ldi	r25, 0x0A	; 10
    5642:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    5646:	8f e4       	ldi	r24, 0x4F	; 79
    5648:	9a e0       	ldi	r25, 0x0A	; 10
    564a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    564e:	00 d0       	rcall	.+0      	; 0x5650 <command_proc+0x1ac>
    5650:	00 d0       	rcall	.+0      	; 0x5652 <command_proc+0x1ae>
    5652:	ed b7       	in	r30, 0x3d	; 61
    5654:	fe b7       	in	r31, 0x3e	; 62
    5656:	31 96       	adiw	r30, 0x01	; 1
    5658:	8e e5       	ldi	r24, 0x5E	; 94
    565a:	9a e0       	ldi	r25, 0x0A	; 10
    565c:	ad b7       	in	r26, 0x3d	; 61
    565e:	be b7       	in	r27, 0x3e	; 62
    5660:	12 96       	adiw	r26, 0x02	; 2
    5662:	9c 93       	st	X, r25
    5664:	8e 93       	st	-X, r24
    5666:	11 97       	sbiw	r26, 0x01	; 1
    5668:	80 91 13 01 	lds	r24, 0x0113
    566c:	82 83       	std	Z+2, r24	; 0x02
    566e:	13 82       	std	Z+3, r1	; 0x03
    5670:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5674:	0f 90       	pop	r0
    5676:	0f 90       	pop	r0
    5678:	0f 90       	pop	r0
    567a:	0f 90       	pop	r0
    567c:	81 e6       	ldi	r24, 0x61	; 97
    567e:	9a e0       	ldi	r25, 0x0A	; 10
    5680:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    5684:	83 e6       	ldi	r24, 0x63	; 99
    5686:	9a e0       	ldi	r25, 0x0A	; 10
    5688:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    568c:	00 d0       	rcall	.+0      	; 0x568e <command_proc+0x1ea>
    568e:	00 d0       	rcall	.+0      	; 0x5690 <command_proc+0x1ec>
    5690:	ed b7       	in	r30, 0x3d	; 61
    5692:	fe b7       	in	r31, 0x3e	; 62
    5694:	31 96       	adiw	r30, 0x01	; 1
    5696:	84 e7       	ldi	r24, 0x74	; 116
    5698:	9a e0       	ldi	r25, 0x0A	; 10
    569a:	ad b7       	in	r26, 0x3d	; 61
    569c:	be b7       	in	r27, 0x3e	; 62
    569e:	12 96       	adiw	r26, 0x02	; 2
    56a0:	9c 93       	st	X, r25
    56a2:	8e 93       	st	-X, r24
    56a4:	11 97       	sbiw	r26, 0x01	; 1
    56a6:	80 91 12 01 	lds	r24, 0x0112
    56aa:	82 83       	std	Z+2, r24	; 0x02
    56ac:	13 82       	std	Z+3, r1	; 0x03
    56ae:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    56b2:	0f 90       	pop	r0
    56b4:	0f 90       	pop	r0
    56b6:	0f 90       	pop	r0
    56b8:	0f 90       	pop	r0
    56ba:	87 e7       	ldi	r24, 0x77	; 119
    56bc:	9a e0       	ldi	r25, 0x0A	; 10
    56be:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    56c2:	89 e7       	ldi	r24, 0x79	; 121
    56c4:	9a e0       	ldi	r25, 0x0A	; 10
    56c6:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    56ca:	00 d0       	rcall	.+0      	; 0x56cc <command_proc+0x228>
    56cc:	00 d0       	rcall	.+0      	; 0x56ce <command_proc+0x22a>
    56ce:	ed b7       	in	r30, 0x3d	; 61
    56d0:	fe b7       	in	r31, 0x3e	; 62
    56d2:	31 96       	adiw	r30, 0x01	; 1
    56d4:	8e e8       	ldi	r24, 0x8E	; 142
    56d6:	9a e0       	ldi	r25, 0x0A	; 10
    56d8:	ad b7       	in	r26, 0x3d	; 61
    56da:	be b7       	in	r27, 0x3e	; 62
    56dc:	12 96       	adiw	r26, 0x02	; 2
    56de:	9c 93       	st	X, r25
    56e0:	8e 93       	st	-X, r24
    56e2:	11 97       	sbiw	r26, 0x01	; 1
    56e4:	80 91 11 01 	lds	r24, 0x0111
    56e8:	82 83       	std	Z+2, r24	; 0x02
    56ea:	13 82       	std	Z+3, r1	; 0x03
    56ec:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    56f0:	0f 90       	pop	r0
    56f2:	0f 90       	pop	r0
    56f4:	0f 90       	pop	r0
    56f6:	0f 90       	pop	r0
    56f8:	81 e9       	ldi	r24, 0x91	; 145
    56fa:	9a e0       	ldi	r25, 0x0A	; 10
    56fc:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5700:	83 e9       	ldi	r24, 0x93	; 147
    5702:	9a e0       	ldi	r25, 0x0A	; 10
    5704:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5708:	00 d0       	rcall	.+0      	; 0x570a <command_proc+0x266>
    570a:	00 d0       	rcall	.+0      	; 0x570c <command_proc+0x268>
    570c:	ed b7       	in	r30, 0x3d	; 61
    570e:	fe b7       	in	r31, 0x3e	; 62
    5710:	31 96       	adiw	r30, 0x01	; 1
    5712:	8a ea       	ldi	r24, 0xAA	; 170
    5714:	9a e0       	ldi	r25, 0x0A	; 10
    5716:	ad b7       	in	r26, 0x3d	; 61
    5718:	be b7       	in	r27, 0x3e	; 62
    571a:	12 96       	adiw	r26, 0x02	; 2
    571c:	9c 93       	st	X, r25
    571e:	8e 93       	st	-X, r24
    5720:	11 97       	sbiw	r26, 0x01	; 1
    5722:	80 91 10 01 	lds	r24, 0x0110
    5726:	82 83       	std	Z+2, r24	; 0x02
    5728:	13 82       	std	Z+3, r1	; 0x03
    572a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    572e:	0f 90       	pop	r0
    5730:	0f 90       	pop	r0
    5732:	0f 90       	pop	r0
    5734:	0f 90       	pop	r0
    5736:	8d ea       	ldi	r24, 0xAD	; 173
    5738:	9a e0       	ldi	r25, 0x0A	; 10
    573a:	31 c0       	rjmp	.+98     	; 0x579e <command_proc+0x2fa>
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    573c:	ce 51       	subi	r28, 0x1E	; 30
    573e:	ec 2f       	mov	r30, r28
    5740:	f0 e0       	ldi	r31, 0x00	; 0
    5742:	e1 5c       	subi	r30, 0xC1	; 193
    5744:	fe 4f       	sbci	r31, 0xFE	; 254
    5746:	80 81       	ld	r24, Z
    5748:	80 93 35 02 	sts	0x0235, r24
    574c:	2e c0       	rjmp	.+92     	; 0x57aa <command_proc+0x306>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    574e:	80 91 35 02 	lds	r24, 0x0235
    5752:	61 e0       	ldi	r22, 0x01	; 1
    5754:	07 c0       	rjmp	.+14     	; 0x5764 <command_proc+0x2c0>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    5756:	80 91 35 02 	lds	r24, 0x0235
    575a:	61 e0       	ldi	r22, 0x01	; 1
    575c:	09 c0       	rjmp	.+18     	; 0x5770 <command_proc+0x2cc>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    575e:	80 91 35 02 	lds	r24, 0x0235
    5762:	6a e0       	ldi	r22, 0x0A	; 10
    5764:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <mousekey_param_inc>
    5768:	20 c0       	rjmp	.+64     	; 0x57aa <command_proc+0x306>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    576a:	80 91 35 02 	lds	r24, 0x0235
    576e:	6a e0       	ldi	r22, 0x0A	; 10
    5770:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <mousekey_param_dec>
    5774:	1a c0       	rjmp	.+52     	; 0x57aa <command_proc+0x306>
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    5776:	8e e1       	ldi	r24, 0x1E	; 30
    5778:	80 93 15 01 	sts	0x0115, r24
            mk_interval = MOUSEKEY_INTERVAL;
    577c:	82 e3       	ldi	r24, 0x32	; 50
    577e:	80 93 14 01 	sts	0x0114, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5782:	85 e0       	ldi	r24, 0x05	; 5
    5784:	80 93 13 01 	sts	0x0113, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5788:	8a e0       	ldi	r24, 0x0A	; 10
    578a:	80 93 12 01 	sts	0x0112, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    578e:	88 e0       	ldi	r24, 0x08	; 8
    5790:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5794:	88 e2       	ldi	r24, 0x28	; 40
    5796:	80 93 10 01 	sts	0x0110, r24
            print("set default\n");
    579a:	8b ef       	ldi	r24, 0xFB	; 251
    579c:	99 e0       	ldi	r25, 0x09	; 9
    579e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    57a2:	03 c0       	rjmp	.+6      	; 0x57aa <command_proc+0x306>
            break;
        default:
            print("?");
    57a4:	88 e0       	ldi	r24, 0x08	; 8
    57a6:	9a e0       	ldi	r25, 0x0A	; 10
    57a8:	1c c0       	rjmp	.+56     	; 0x57e2 <command_proc+0x33e>
            return false;
    }
    if (mousekey_param)
    57aa:	20 91 35 02 	lds	r18, 0x0235
    57ae:	22 23       	and	r18, r18
    57b0:	b1 f0       	breq	.+44     	; 0x57de <command_proc+0x33a>
        xprintf("M%d> ", mousekey_param);
    57b2:	00 d0       	rcall	.+0      	; 0x57b4 <command_proc+0x310>
    57b4:	00 d0       	rcall	.+0      	; 0x57b6 <command_proc+0x312>
    57b6:	ed b7       	in	r30, 0x3d	; 61
    57b8:	fe b7       	in	r31, 0x3e	; 62
    57ba:	31 96       	adiw	r30, 0x01	; 1
    57bc:	8a e0       	ldi	r24, 0x0A	; 10
    57be:	9a e0       	ldi	r25, 0x0A	; 10
    57c0:	ad b7       	in	r26, 0x3d	; 61
    57c2:	be b7       	in	r27, 0x3e	; 62
    57c4:	12 96       	adiw	r26, 0x02	; 2
    57c6:	9c 93       	st	X, r25
    57c8:	8e 93       	st	-X, r24
    57ca:	11 97       	sbiw	r26, 0x01	; 1
    57cc:	22 83       	std	Z+2, r18	; 0x02
    57ce:	13 82       	std	Z+3, r1	; 0x03
    57d0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    57d4:	0f 90       	pop	r0
    57d6:	0f 90       	pop	r0
    57d8:	0f 90       	pop	r0
    57da:	0f 90       	pop	r0
    57dc:	04 c0       	rjmp	.+8      	; 0x57e6 <command_proc+0x342>
    else
        print("M>" );
    57de:	80 e1       	ldi	r24, 0x10	; 16
    57e0:	9a e0       	ldi	r25, 0x0A	; 10
    57e2:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    57e6:	81 e0       	ldi	r24, 0x01	; 1
    57e8:	03 c0       	rjmp	.+6      	; 0x57f0 <command_proc+0x34c>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    57ea:	10 92 34 02 	sts	0x0234, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    57ee:	80 e0       	ldi	r24, 0x00	; 0
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    57f0:	cf 91       	pop	r28
    57f2:	08 95       	ret

000057f4 <sleep_led_init>:

void sleep_led_init(void)
{
    /* Timer1 setup */
    /* CTC mode */
    TCCR1B |= _BV(WGM12);
    57f4:	e1 e8       	ldi	r30, 0x81	; 129
    57f6:	f0 e0       	ldi	r31, 0x00	; 0
    57f8:	80 81       	ld	r24, Z
    57fa:	88 60       	ori	r24, 0x08	; 8
    57fc:	80 83       	st	Z, r24
    /* Clock selelct: clk/1 */
    TCCR1B |= _BV(CS10);
    57fe:	80 81       	ld	r24, Z
    5800:	81 60       	ori	r24, 0x01	; 1
    5802:	80 83       	st	Z, r24
    /* Set TOP value */
    uint8_t sreg = SREG;
    5804:	8f b7       	in	r24, 0x3f	; 63
    cli();
    5806:	f8 94       	cli
    OCR1AH = (SLEEP_LED_TIMER_TOP>>8)&0xff;
    5808:	93 e0       	ldi	r25, 0x03	; 3
    580a:	90 93 89 00 	sts	0x0089, r25
    OCR1AL = SLEEP_LED_TIMER_TOP&0xff;
    580e:	90 ed       	ldi	r25, 0xD0	; 208
    5810:	90 93 88 00 	sts	0x0088, r25
    SREG = sreg;
    5814:	8f bf       	out	0x3f, r24	; 63
}
    5816:	08 95       	ret

00005818 <sleep_led_enable>:

void sleep_led_enable(void)
{
    /* Enable Compare Match Interrupt */
    TIMSK1 |= _BV(OCIE1A);
    5818:	ef e6       	ldi	r30, 0x6F	; 111
    581a:	f0 e0       	ldi	r31, 0x00	; 0
    581c:	80 81       	ld	r24, Z
    581e:	82 60       	ori	r24, 0x02	; 2
    5820:	80 83       	st	Z, r24
}
    5822:	08 95       	ret

00005824 <sleep_led_disable>:

void sleep_led_disable(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 &= ~_BV(OCIE1A);
    5824:	ef e6       	ldi	r30, 0x6F	; 111
    5826:	f0 e0       	ldi	r31, 0x00	; 0
    5828:	80 81       	ld	r24, Z
    582a:	8d 7f       	andi	r24, 0xFD	; 253
    582c:	80 83       	st	Z, r24
}
    582e:	08 95       	ret

00005830 <sleep_led_toggle>:

void sleep_led_toggle(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 ^= _BV(OCIE1A);
    5830:	ef e6       	ldi	r30, 0x6F	; 111
    5832:	f0 e0       	ldi	r31, 0x00	; 0
    5834:	80 81       	ld	r24, Z
    5836:	92 e0       	ldi	r25, 0x02	; 2
    5838:	89 27       	eor	r24, r25
    583a:	80 83       	st	Z, r24
}
    583c:	08 95       	ret

0000583e <__vector_17>:
255, 252, 245, 233, 218, 199, 179, 157, 135, 113, 93, 74, 58, 44, 32, 23,
15, 10, 6, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

ISR(TIMER1_COMPA_vect)
{
    583e:	1f 92       	push	r1
    5840:	0f 92       	push	r0
    5842:	0f b6       	in	r0, 0x3f	; 63
    5844:	0f 92       	push	r0
    5846:	11 24       	eor	r1, r1
    5848:	2f 93       	push	r18
    584a:	3f 93       	push	r19
    584c:	4f 93       	push	r20
    584e:	5f 93       	push	r21
    5850:	6f 93       	push	r22
    5852:	7f 93       	push	r23
    5854:	8f 93       	push	r24
    5856:	9f 93       	push	r25
    5858:	af 93       	push	r26
    585a:	bf 93       	push	r27
    585c:	ef 93       	push	r30
    585e:	ff 93       	push	r31
            uint8_t duration:2;
            uint8_t index:6;
        } pwm;
    } timer = { .row = 0 };

    timer.row++;
    5860:	80 91 36 02 	lds	r24, 0x0236
    5864:	90 91 37 02 	lds	r25, 0x0237
    5868:	01 96       	adiw	r24, 0x01	; 1
    586a:	90 93 37 02 	sts	0x0237, r25
    586e:	80 93 36 02 	sts	0x0236, r24
    
    // LED on
    if (timer.pwm.count == 0) {
    5872:	88 23       	and	r24, r24
    5874:	19 f4       	brne	.+6      	; 0x587c <__vector_17+0x3e>
        led_set(1<<USB_LED_CAPS_LOCK);
    5876:	82 e0       	ldi	r24, 0x02	; 2
    5878:	0e 94 bc 0a 	call	0x1578	; 0x1578 <led_set>
    }
    // LED off
    if (timer.pwm.count == pgm_read_byte(&breathing_table[timer.pwm.index])) {
    587c:	e0 91 37 02 	lds	r30, 0x0237
    5880:	e6 95       	lsr	r30
    5882:	e6 95       	lsr	r30
    5884:	f0 e0       	ldi	r31, 0x00	; 0
    5886:	e7 55       	subi	r30, 0x57	; 87
    5888:	f4 4f       	sbci	r31, 0xF4	; 244
    588a:	e4 91       	lpm	r30, Z
    588c:	80 91 36 02 	lds	r24, 0x0236
    5890:	8e 17       	cp	r24, r30
    5892:	19 f4       	brne	.+6      	; 0x589a <__vector_17+0x5c>
        led_set(0);
    5894:	80 e0       	ldi	r24, 0x00	; 0
    5896:	0e 94 bc 0a 	call	0x1578	; 0x1578 <led_set>
    }
}
    589a:	ff 91       	pop	r31
    589c:	ef 91       	pop	r30
    589e:	bf 91       	pop	r27
    58a0:	af 91       	pop	r26
    58a2:	9f 91       	pop	r25
    58a4:	8f 91       	pop	r24
    58a6:	7f 91       	pop	r23
    58a8:	6f 91       	pop	r22
    58aa:	5f 91       	pop	r21
    58ac:	4f 91       	pop	r20
    58ae:	3f 91       	pop	r19
    58b0:	2f 91       	pop	r18
    58b2:	0f 90       	pop	r0
    58b4:	0f be       	out	0x3f, r0	; 63
    58b6:	0f 90       	pop	r0
    58b8:	1f 90       	pop	r1
    58ba:	18 95       	reti

000058bc <__fixsfsi>:
    58bc:	04 d0       	rcall	.+8      	; 0x58c6 <__fixunssfsi>
    58be:	68 94       	set
    58c0:	b1 11       	cpse	r27, r1
    58c2:	8d c0       	rjmp	.+282    	; 0x59de <__fp_szero>
    58c4:	08 95       	ret

000058c6 <__fixunssfsi>:
    58c6:	70 d0       	rcall	.+224    	; 0x59a8 <__fp_splitA>
    58c8:	88 f0       	brcs	.+34     	; 0x58ec <__fixunssfsi+0x26>
    58ca:	9f 57       	subi	r25, 0x7F	; 127
    58cc:	90 f0       	brcs	.+36     	; 0x58f2 <__fixunssfsi+0x2c>
    58ce:	b9 2f       	mov	r27, r25
    58d0:	99 27       	eor	r25, r25
    58d2:	b7 51       	subi	r27, 0x17	; 23
    58d4:	a0 f0       	brcs	.+40     	; 0x58fe <__fixunssfsi+0x38>
    58d6:	d1 f0       	breq	.+52     	; 0x590c <__fixunssfsi+0x46>
    58d8:	66 0f       	add	r22, r22
    58da:	77 1f       	adc	r23, r23
    58dc:	88 1f       	adc	r24, r24
    58de:	99 1f       	adc	r25, r25
    58e0:	1a f0       	brmi	.+6      	; 0x58e8 <__fixunssfsi+0x22>
    58e2:	ba 95       	dec	r27
    58e4:	c9 f7       	brne	.-14     	; 0x58d8 <__fixunssfsi+0x12>
    58e6:	12 c0       	rjmp	.+36     	; 0x590c <__fixunssfsi+0x46>
    58e8:	b1 30       	cpi	r27, 0x01	; 1
    58ea:	81 f0       	breq	.+32     	; 0x590c <__fixunssfsi+0x46>
    58ec:	77 d0       	rcall	.+238    	; 0x59dc <__fp_zero>
    58ee:	b1 e0       	ldi	r27, 0x01	; 1
    58f0:	08 95       	ret
    58f2:	74 c0       	rjmp	.+232    	; 0x59dc <__fp_zero>
    58f4:	67 2f       	mov	r22, r23
    58f6:	78 2f       	mov	r23, r24
    58f8:	88 27       	eor	r24, r24
    58fa:	b8 5f       	subi	r27, 0xF8	; 248
    58fc:	39 f0       	breq	.+14     	; 0x590c <__fixunssfsi+0x46>
    58fe:	b9 3f       	cpi	r27, 0xF9	; 249
    5900:	cc f3       	brlt	.-14     	; 0x58f4 <__fixunssfsi+0x2e>
    5902:	86 95       	lsr	r24
    5904:	77 95       	ror	r23
    5906:	67 95       	ror	r22
    5908:	b3 95       	inc	r27
    590a:	d9 f7       	brne	.-10     	; 0x5902 <__fixunssfsi+0x3c>
    590c:	3e f4       	brtc	.+14     	; 0x591c <__fixunssfsi+0x56>
    590e:	90 95       	com	r25
    5910:	80 95       	com	r24
    5912:	70 95       	com	r23
    5914:	61 95       	neg	r22
    5916:	7f 4f       	sbci	r23, 0xFF	; 255
    5918:	8f 4f       	sbci	r24, 0xFF	; 255
    591a:	9f 4f       	sbci	r25, 0xFF	; 255
    591c:	08 95       	ret

0000591e <__floatunsisf>:
    591e:	e8 94       	clt
    5920:	09 c0       	rjmp	.+18     	; 0x5934 <__floatsisf+0x12>

00005922 <__floatsisf>:
    5922:	97 fb       	bst	r25, 7
    5924:	3e f4       	brtc	.+14     	; 0x5934 <__floatsisf+0x12>
    5926:	90 95       	com	r25
    5928:	80 95       	com	r24
    592a:	70 95       	com	r23
    592c:	61 95       	neg	r22
    592e:	7f 4f       	sbci	r23, 0xFF	; 255
    5930:	8f 4f       	sbci	r24, 0xFF	; 255
    5932:	9f 4f       	sbci	r25, 0xFF	; 255
    5934:	99 23       	and	r25, r25
    5936:	a9 f0       	breq	.+42     	; 0x5962 <__floatsisf+0x40>
    5938:	f9 2f       	mov	r31, r25
    593a:	96 e9       	ldi	r25, 0x96	; 150
    593c:	bb 27       	eor	r27, r27
    593e:	93 95       	inc	r25
    5940:	f6 95       	lsr	r31
    5942:	87 95       	ror	r24
    5944:	77 95       	ror	r23
    5946:	67 95       	ror	r22
    5948:	b7 95       	ror	r27
    594a:	f1 11       	cpse	r31, r1
    594c:	f8 cf       	rjmp	.-16     	; 0x593e <__floatsisf+0x1c>
    594e:	fa f4       	brpl	.+62     	; 0x598e <__floatsisf+0x6c>
    5950:	bb 0f       	add	r27, r27
    5952:	11 f4       	brne	.+4      	; 0x5958 <__floatsisf+0x36>
    5954:	60 ff       	sbrs	r22, 0
    5956:	1b c0       	rjmp	.+54     	; 0x598e <__floatsisf+0x6c>
    5958:	6f 5f       	subi	r22, 0xFF	; 255
    595a:	7f 4f       	sbci	r23, 0xFF	; 255
    595c:	8f 4f       	sbci	r24, 0xFF	; 255
    595e:	9f 4f       	sbci	r25, 0xFF	; 255
    5960:	16 c0       	rjmp	.+44     	; 0x598e <__floatsisf+0x6c>
    5962:	88 23       	and	r24, r24
    5964:	11 f0       	breq	.+4      	; 0x596a <__floatsisf+0x48>
    5966:	96 e9       	ldi	r25, 0x96	; 150
    5968:	11 c0       	rjmp	.+34     	; 0x598c <__floatsisf+0x6a>
    596a:	77 23       	and	r23, r23
    596c:	21 f0       	breq	.+8      	; 0x5976 <__floatsisf+0x54>
    596e:	9e e8       	ldi	r25, 0x8E	; 142
    5970:	87 2f       	mov	r24, r23
    5972:	76 2f       	mov	r23, r22
    5974:	05 c0       	rjmp	.+10     	; 0x5980 <__floatsisf+0x5e>
    5976:	66 23       	and	r22, r22
    5978:	71 f0       	breq	.+28     	; 0x5996 <__floatsisf+0x74>
    597a:	96 e8       	ldi	r25, 0x86	; 134
    597c:	86 2f       	mov	r24, r22
    597e:	70 e0       	ldi	r23, 0x00	; 0
    5980:	60 e0       	ldi	r22, 0x00	; 0
    5982:	2a f0       	brmi	.+10     	; 0x598e <__floatsisf+0x6c>
    5984:	9a 95       	dec	r25
    5986:	66 0f       	add	r22, r22
    5988:	77 1f       	adc	r23, r23
    598a:	88 1f       	adc	r24, r24
    598c:	da f7       	brpl	.-10     	; 0x5984 <__floatsisf+0x62>
    598e:	88 0f       	add	r24, r24
    5990:	96 95       	lsr	r25
    5992:	87 95       	ror	r24
    5994:	97 f9       	bld	r25, 7
    5996:	08 95       	ret

00005998 <__fp_split3>:
    5998:	57 fd       	sbrc	r21, 7
    599a:	90 58       	subi	r25, 0x80	; 128
    599c:	44 0f       	add	r20, r20
    599e:	55 1f       	adc	r21, r21
    59a0:	59 f0       	breq	.+22     	; 0x59b8 <__fp_splitA+0x10>
    59a2:	5f 3f       	cpi	r21, 0xFF	; 255
    59a4:	71 f0       	breq	.+28     	; 0x59c2 <__fp_splitA+0x1a>
    59a6:	47 95       	ror	r20

000059a8 <__fp_splitA>:
    59a8:	88 0f       	add	r24, r24
    59aa:	97 fb       	bst	r25, 7
    59ac:	99 1f       	adc	r25, r25
    59ae:	61 f0       	breq	.+24     	; 0x59c8 <__fp_splitA+0x20>
    59b0:	9f 3f       	cpi	r25, 0xFF	; 255
    59b2:	79 f0       	breq	.+30     	; 0x59d2 <__fp_splitA+0x2a>
    59b4:	87 95       	ror	r24
    59b6:	08 95       	ret
    59b8:	12 16       	cp	r1, r18
    59ba:	13 06       	cpc	r1, r19
    59bc:	14 06       	cpc	r1, r20
    59be:	55 1f       	adc	r21, r21
    59c0:	f2 cf       	rjmp	.-28     	; 0x59a6 <__fp_split3+0xe>
    59c2:	46 95       	lsr	r20
    59c4:	f1 df       	rcall	.-30     	; 0x59a8 <__fp_splitA>
    59c6:	08 c0       	rjmp	.+16     	; 0x59d8 <__fp_splitA+0x30>
    59c8:	16 16       	cp	r1, r22
    59ca:	17 06       	cpc	r1, r23
    59cc:	18 06       	cpc	r1, r24
    59ce:	99 1f       	adc	r25, r25
    59d0:	f1 cf       	rjmp	.-30     	; 0x59b4 <__fp_splitA+0xc>
    59d2:	86 95       	lsr	r24
    59d4:	71 05       	cpc	r23, r1
    59d6:	61 05       	cpc	r22, r1
    59d8:	08 94       	sec
    59da:	08 95       	ret

000059dc <__fp_zero>:
    59dc:	e8 94       	clt

000059de <__fp_szero>:
    59de:	bb 27       	eor	r27, r27
    59e0:	66 27       	eor	r22, r22
    59e2:	77 27       	eor	r23, r23
    59e4:	cb 01       	movw	r24, r22
    59e6:	97 f9       	bld	r25, 7
    59e8:	08 95       	ret

000059ea <__mulsf3>:
    59ea:	0b d0       	rcall	.+22     	; 0x5a02 <__mulsf3x>
    59ec:	78 c0       	rjmp	.+240    	; 0x5ade <__fp_round>
    59ee:	69 d0       	rcall	.+210    	; 0x5ac2 <__fp_pscA>
    59f0:	28 f0       	brcs	.+10     	; 0x59fc <__mulsf3+0x12>
    59f2:	6e d0       	rcall	.+220    	; 0x5ad0 <__fp_pscB>
    59f4:	18 f0       	brcs	.+6      	; 0x59fc <__mulsf3+0x12>
    59f6:	95 23       	and	r25, r21
    59f8:	09 f0       	breq	.+2      	; 0x59fc <__mulsf3+0x12>
    59fa:	5a c0       	rjmp	.+180    	; 0x5ab0 <__fp_inf>
    59fc:	5f c0       	rjmp	.+190    	; 0x5abc <__fp_nan>
    59fe:	11 24       	eor	r1, r1
    5a00:	ee cf       	rjmp	.-36     	; 0x59de <__fp_szero>

00005a02 <__mulsf3x>:
    5a02:	ca df       	rcall	.-108    	; 0x5998 <__fp_split3>
    5a04:	a0 f3       	brcs	.-24     	; 0x59ee <__mulsf3+0x4>

00005a06 <__mulsf3_pse>:
    5a06:	95 9f       	mul	r25, r21
    5a08:	d1 f3       	breq	.-12     	; 0x59fe <__mulsf3+0x14>
    5a0a:	95 0f       	add	r25, r21
    5a0c:	50 e0       	ldi	r21, 0x00	; 0
    5a0e:	55 1f       	adc	r21, r21
    5a10:	62 9f       	mul	r22, r18
    5a12:	f0 01       	movw	r30, r0
    5a14:	72 9f       	mul	r23, r18
    5a16:	bb 27       	eor	r27, r27
    5a18:	f0 0d       	add	r31, r0
    5a1a:	b1 1d       	adc	r27, r1
    5a1c:	63 9f       	mul	r22, r19
    5a1e:	aa 27       	eor	r26, r26
    5a20:	f0 0d       	add	r31, r0
    5a22:	b1 1d       	adc	r27, r1
    5a24:	aa 1f       	adc	r26, r26
    5a26:	64 9f       	mul	r22, r20
    5a28:	66 27       	eor	r22, r22
    5a2a:	b0 0d       	add	r27, r0
    5a2c:	a1 1d       	adc	r26, r1
    5a2e:	66 1f       	adc	r22, r22
    5a30:	82 9f       	mul	r24, r18
    5a32:	22 27       	eor	r18, r18
    5a34:	b0 0d       	add	r27, r0
    5a36:	a1 1d       	adc	r26, r1
    5a38:	62 1f       	adc	r22, r18
    5a3a:	73 9f       	mul	r23, r19
    5a3c:	b0 0d       	add	r27, r0
    5a3e:	a1 1d       	adc	r26, r1
    5a40:	62 1f       	adc	r22, r18
    5a42:	83 9f       	mul	r24, r19
    5a44:	a0 0d       	add	r26, r0
    5a46:	61 1d       	adc	r22, r1
    5a48:	22 1f       	adc	r18, r18
    5a4a:	74 9f       	mul	r23, r20
    5a4c:	33 27       	eor	r19, r19
    5a4e:	a0 0d       	add	r26, r0
    5a50:	61 1d       	adc	r22, r1
    5a52:	23 1f       	adc	r18, r19
    5a54:	84 9f       	mul	r24, r20
    5a56:	60 0d       	add	r22, r0
    5a58:	21 1d       	adc	r18, r1
    5a5a:	82 2f       	mov	r24, r18
    5a5c:	76 2f       	mov	r23, r22
    5a5e:	6a 2f       	mov	r22, r26
    5a60:	11 24       	eor	r1, r1
    5a62:	9f 57       	subi	r25, 0x7F	; 127
    5a64:	50 40       	sbci	r21, 0x00	; 0
    5a66:	8a f0       	brmi	.+34     	; 0x5a8a <__mulsf3_pse+0x84>
    5a68:	e1 f0       	breq	.+56     	; 0x5aa2 <__mulsf3_pse+0x9c>
    5a6a:	88 23       	and	r24, r24
    5a6c:	4a f0       	brmi	.+18     	; 0x5a80 <__mulsf3_pse+0x7a>
    5a6e:	ee 0f       	add	r30, r30
    5a70:	ff 1f       	adc	r31, r31
    5a72:	bb 1f       	adc	r27, r27
    5a74:	66 1f       	adc	r22, r22
    5a76:	77 1f       	adc	r23, r23
    5a78:	88 1f       	adc	r24, r24
    5a7a:	91 50       	subi	r25, 0x01	; 1
    5a7c:	50 40       	sbci	r21, 0x00	; 0
    5a7e:	a9 f7       	brne	.-22     	; 0x5a6a <__mulsf3_pse+0x64>
    5a80:	9e 3f       	cpi	r25, 0xFE	; 254
    5a82:	51 05       	cpc	r21, r1
    5a84:	70 f0       	brcs	.+28     	; 0x5aa2 <__mulsf3_pse+0x9c>
    5a86:	14 c0       	rjmp	.+40     	; 0x5ab0 <__fp_inf>
    5a88:	aa cf       	rjmp	.-172    	; 0x59de <__fp_szero>
    5a8a:	5f 3f       	cpi	r21, 0xFF	; 255
    5a8c:	ec f3       	brlt	.-6      	; 0x5a88 <__mulsf3_pse+0x82>
    5a8e:	98 3e       	cpi	r25, 0xE8	; 232
    5a90:	dc f3       	brlt	.-10     	; 0x5a88 <__mulsf3_pse+0x82>
    5a92:	86 95       	lsr	r24
    5a94:	77 95       	ror	r23
    5a96:	67 95       	ror	r22
    5a98:	b7 95       	ror	r27
    5a9a:	f7 95       	ror	r31
    5a9c:	e7 95       	ror	r30
    5a9e:	9f 5f       	subi	r25, 0xFF	; 255
    5aa0:	c1 f7       	brne	.-16     	; 0x5a92 <__mulsf3_pse+0x8c>
    5aa2:	fe 2b       	or	r31, r30
    5aa4:	88 0f       	add	r24, r24
    5aa6:	91 1d       	adc	r25, r1
    5aa8:	96 95       	lsr	r25
    5aaa:	87 95       	ror	r24
    5aac:	97 f9       	bld	r25, 7
    5aae:	08 95       	ret

00005ab0 <__fp_inf>:
    5ab0:	97 f9       	bld	r25, 7
    5ab2:	9f 67       	ori	r25, 0x7F	; 127
    5ab4:	80 e8       	ldi	r24, 0x80	; 128
    5ab6:	70 e0       	ldi	r23, 0x00	; 0
    5ab8:	60 e0       	ldi	r22, 0x00	; 0
    5aba:	08 95       	ret

00005abc <__fp_nan>:
    5abc:	9f ef       	ldi	r25, 0xFF	; 255
    5abe:	80 ec       	ldi	r24, 0xC0	; 192
    5ac0:	08 95       	ret

00005ac2 <__fp_pscA>:
    5ac2:	00 24       	eor	r0, r0
    5ac4:	0a 94       	dec	r0
    5ac6:	16 16       	cp	r1, r22
    5ac8:	17 06       	cpc	r1, r23
    5aca:	18 06       	cpc	r1, r24
    5acc:	09 06       	cpc	r0, r25
    5ace:	08 95       	ret

00005ad0 <__fp_pscB>:
    5ad0:	00 24       	eor	r0, r0
    5ad2:	0a 94       	dec	r0
    5ad4:	12 16       	cp	r1, r18
    5ad6:	13 06       	cpc	r1, r19
    5ad8:	14 06       	cpc	r1, r20
    5ada:	05 06       	cpc	r0, r21
    5adc:	08 95       	ret

00005ade <__fp_round>:
    5ade:	09 2e       	mov	r0, r25
    5ae0:	03 94       	inc	r0
    5ae2:	00 0c       	add	r0, r0
    5ae4:	11 f4       	brne	.+4      	; 0x5aea <__fp_round+0xc>
    5ae6:	88 23       	and	r24, r24
    5ae8:	52 f0       	brmi	.+20     	; 0x5afe <__fp_round+0x20>
    5aea:	bb 0f       	add	r27, r27
    5aec:	40 f4       	brcc	.+16     	; 0x5afe <__fp_round+0x20>
    5aee:	bf 2b       	or	r27, r31
    5af0:	11 f4       	brne	.+4      	; 0x5af6 <__fp_round+0x18>
    5af2:	60 ff       	sbrs	r22, 0
    5af4:	04 c0       	rjmp	.+8      	; 0x5afe <__fp_round+0x20>
    5af6:	6f 5f       	subi	r22, 0xFF	; 255
    5af8:	7f 4f       	sbci	r23, 0xFF	; 255
    5afa:	8f 4f       	sbci	r24, 0xFF	; 255
    5afc:	9f 4f       	sbci	r25, 0xFF	; 255
    5afe:	08 95       	ret

00005b00 <__udivmodqi4>:
    5b00:	99 1b       	sub	r25, r25
    5b02:	79 e0       	ldi	r23, 0x09	; 9
    5b04:	04 c0       	rjmp	.+8      	; 0x5b0e <__udivmodqi4_ep>

00005b06 <__udivmodqi4_loop>:
    5b06:	99 1f       	adc	r25, r25
    5b08:	96 17       	cp	r25, r22
    5b0a:	08 f0       	brcs	.+2      	; 0x5b0e <__udivmodqi4_ep>
    5b0c:	96 1b       	sub	r25, r22

00005b0e <__udivmodqi4_ep>:
    5b0e:	88 1f       	adc	r24, r24
    5b10:	7a 95       	dec	r23
    5b12:	c9 f7       	brne	.-14     	; 0x5b06 <__udivmodqi4_loop>
    5b14:	80 95       	com	r24
    5b16:	08 95       	ret

00005b18 <__divmodhi4>:
    5b18:	97 fb       	bst	r25, 7
    5b1a:	09 2e       	mov	r0, r25
    5b1c:	07 26       	eor	r0, r23
    5b1e:	0a d0       	rcall	.+20     	; 0x5b34 <__divmodhi4_neg1>
    5b20:	77 fd       	sbrc	r23, 7
    5b22:	04 d0       	rcall	.+8      	; 0x5b2c <__divmodhi4_neg2>
    5b24:	0c d0       	rcall	.+24     	; 0x5b3e <__udivmodhi4>
    5b26:	06 d0       	rcall	.+12     	; 0x5b34 <__divmodhi4_neg1>
    5b28:	00 20       	and	r0, r0
    5b2a:	1a f4       	brpl	.+6      	; 0x5b32 <__divmodhi4_exit>

00005b2c <__divmodhi4_neg2>:
    5b2c:	70 95       	com	r23
    5b2e:	61 95       	neg	r22
    5b30:	7f 4f       	sbci	r23, 0xFF	; 255

00005b32 <__divmodhi4_exit>:
    5b32:	08 95       	ret

00005b34 <__divmodhi4_neg1>:
    5b34:	f6 f7       	brtc	.-4      	; 0x5b32 <__divmodhi4_exit>
    5b36:	90 95       	com	r25
    5b38:	81 95       	neg	r24
    5b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b3c:	08 95       	ret

00005b3e <__udivmodhi4>:
    5b3e:	aa 1b       	sub	r26, r26
    5b40:	bb 1b       	sub	r27, r27
    5b42:	51 e1       	ldi	r21, 0x11	; 17
    5b44:	07 c0       	rjmp	.+14     	; 0x5b54 <__udivmodhi4_ep>

00005b46 <__udivmodhi4_loop>:
    5b46:	aa 1f       	adc	r26, r26
    5b48:	bb 1f       	adc	r27, r27
    5b4a:	a6 17       	cp	r26, r22
    5b4c:	b7 07       	cpc	r27, r23
    5b4e:	10 f0       	brcs	.+4      	; 0x5b54 <__udivmodhi4_ep>
    5b50:	a6 1b       	sub	r26, r22
    5b52:	b7 0b       	sbc	r27, r23

00005b54 <__udivmodhi4_ep>:
    5b54:	88 1f       	adc	r24, r24
    5b56:	99 1f       	adc	r25, r25
    5b58:	5a 95       	dec	r21
    5b5a:	a9 f7       	brne	.-22     	; 0x5b46 <__udivmodhi4_loop>
    5b5c:	80 95       	com	r24
    5b5e:	90 95       	com	r25
    5b60:	bc 01       	movw	r22, r24
    5b62:	cd 01       	movw	r24, r26
    5b64:	08 95       	ret

00005b66 <__eerd_byte_m32u4>:
    5b66:	f9 99       	sbic	0x1f, 1	; 31
    5b68:	fe cf       	rjmp	.-4      	; 0x5b66 <__eerd_byte_m32u4>
    5b6a:	92 bd       	out	0x22, r25	; 34
    5b6c:	81 bd       	out	0x21, r24	; 33
    5b6e:	f8 9a       	sbi	0x1f, 0	; 31
    5b70:	99 27       	eor	r25, r25
    5b72:	80 b5       	in	r24, 0x20	; 32
    5b74:	08 95       	ret

00005b76 <__eerd_word_m32u4>:
    5b76:	a8 e1       	ldi	r26, 0x18	; 24
    5b78:	b0 e0       	ldi	r27, 0x00	; 0
    5b7a:	42 e0       	ldi	r20, 0x02	; 2
    5b7c:	50 e0       	ldi	r21, 0x00	; 0
    5b7e:	0c 94 d6 2d 	jmp	0x5bac	; 0x5bac <__eerd_blraw_m32u4>

00005b82 <__eewr_byte_m32u4>:
    5b82:	26 2f       	mov	r18, r22

00005b84 <__eewr_r18_m32u4>:
    5b84:	f9 99       	sbic	0x1f, 1	; 31
    5b86:	fe cf       	rjmp	.-4      	; 0x5b84 <__eewr_r18_m32u4>
    5b88:	1f ba       	out	0x1f, r1	; 31
    5b8a:	92 bd       	out	0x22, r25	; 34
    5b8c:	81 bd       	out	0x21, r24	; 33
    5b8e:	20 bd       	out	0x20, r18	; 32
    5b90:	0f b6       	in	r0, 0x3f	; 63
    5b92:	f8 94       	cli
    5b94:	fa 9a       	sbi	0x1f, 2	; 31
    5b96:	f9 9a       	sbi	0x1f, 1	; 31
    5b98:	0f be       	out	0x3f, r0	; 63
    5b9a:	01 96       	adiw	r24, 0x01	; 1
    5b9c:	08 95       	ret

00005b9e <__eewr_word_m32u4>:
    5b9e:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <__eewr_byte_m32u4>
    5ba2:	27 2f       	mov	r18, r23
    5ba4:	0c 94 c2 2d 	jmp	0x5b84	; 0x5b84 <__eewr_r18_m32u4>

00005ba8 <__eerd_block_m32u4>:
    5ba8:	dc 01       	movw	r26, r24
    5baa:	cb 01       	movw	r24, r22

00005bac <__eerd_blraw_m32u4>:
    5bac:	fc 01       	movw	r30, r24
    5bae:	f9 99       	sbic	0x1f, 1	; 31
    5bb0:	fe cf       	rjmp	.-4      	; 0x5bae <__eerd_blraw_m32u4+0x2>
    5bb2:	06 c0       	rjmp	.+12     	; 0x5bc0 <__eerd_blraw_m32u4+0x14>
    5bb4:	f2 bd       	out	0x22, r31	; 34
    5bb6:	e1 bd       	out	0x21, r30	; 33
    5bb8:	f8 9a       	sbi	0x1f, 0	; 31
    5bba:	31 96       	adiw	r30, 0x01	; 1
    5bbc:	00 b4       	in	r0, 0x20	; 32
    5bbe:	0d 92       	st	X+, r0
    5bc0:	41 50       	subi	r20, 0x01	; 1
    5bc2:	50 40       	sbci	r21, 0x00	; 0
    5bc4:	b8 f7       	brcc	.-18     	; 0x5bb4 <__eerd_blraw_m32u4+0x8>
    5bc6:	08 95       	ret

00005bc8 <_exit>:
    5bc8:	f8 94       	cli

00005bca <__stop_program>:
    5bca:	ff cf       	rjmp	.-2      	; 0x5bca <__stop_program>
