
split_keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00005bd4  00005c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005bd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fc  0080014a  0080014a  00005cb2  2**0
                  ALLOC
  3 .noinit       00000004  00800246  00800246  00005cb2  2**0
                  ALLOC
  4 .stab         000023dc  00000000  00000000  00005cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000007e9  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000be8  00000000  00000000  00008880  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f15a  00000000  00000000  00009468  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b4b  00000000  00000000  000185c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000067bc  00000000  00000000  0001c10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002034  00000000  00000000  000228cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004a25  00000000  00000000  00024900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000078f3  00000000  00000000  00029325  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c70  00000000  00000000  00030c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__ctors_end>
       4:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__vector_1>
       8:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
       c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      10:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      14:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      18:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      1c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      20:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      24:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      28:	0c 94 35 10 	jmp	0x206a	; 0x206a <__vector_10>
      2c:	0c 94 07 11 	jmp	0x220e	; 0x220e <__vector_11>
      30:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      34:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      38:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      3c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      40:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      44:	0c 94 23 2c 	jmp	0x5846	; 0x5846 <__vector_17>
      48:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      4c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      50:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      54:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <__vector_21>
      58:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      5c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      60:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      64:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      68:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      6c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      70:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      74:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      78:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      7c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      80:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      84:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      88:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      8c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      90:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__vector_36>
      94:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      98:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      9c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      a0:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      a4:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>
      a8:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__bad_interrupt>

000000ac <actionmaps>:
      ac:	32 00 1e 00 1f 00 20 00 21 00 22 00 2b 00 14 00     2..... .!.".+...
      bc:	1a 00 08 00 15 00 17 00 39 00 04 00 16 00 07 00     ........9.......
      cc:	09 00 0a 00 e1 00 1d 00 1b 00 06 00 19 00 05 00     ................
      dc:	29 00 39 28 2b 00 00 22 2c 00 e0 00 23 00 24 00     ).9(+..",...#.$.
      ec:	25 00 26 00 27 00 2d 00 1c 00 18 00 0c 00 12 00     %.&.'.-.........
      fc:	13 00 2f 00 0b 00 0d 00 0e 00 0f 00 33 00 34 00     ../.........3.4.
     10c:	11 00 10 00 36 00 37 00 38 00 e5 00 f0 a3 28 00     ....6.7.8.....(.
     11c:	2a 00 51 00 34 00 e6 00                             *.Q.4...

00000124 <__c.1785>:
     124:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     134:	42 43 44 45 46 0a 00                                BCDEF..

0000013b <__c.1788>:
     13b:	25 30 32 58 00                                      %02X.

00000140 <__c.1790>:
     140:	3a 20 00                                            : .

00000143 <__c.1792>:
     143:	25 30 31 36 62 00                                   %016b.

00000149 <__c.1794>:
     149:	0a 00                                               ..

0000014b <__c.4422>:
     14b:	5b 43 5d 00                                         [C].

0000014f <__c.4427>:
     14f:	5b 44 5d 00                                         [D].

00000153 <__c.4432>:
     153:	5b 52 5d 00                                         [R].

00000157 <__c.4436>:
     157:	5b 53 5d 00                                         [S].

0000015b <__c.4440>:
     15b:	5b 57 5d 00                                         [W].

0000015f <__c.4542>:
     15f:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     16f:	00                                                  .

00000170 <__c.4544>:
     170:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     180:	00                                                  .

00000181 <__c.4546>:
     181:	5b 73 5d 00                                         [s].

00000185 <ProductString>:
     185:	1e 03 4c 00 65 00 74 00 73 00 5f 00 73 00 70 00     ..L.e.t.s._.s.p.
     195:	6c 00 69 00 74 00 5f 00 32 00 35 00 36 00 00 00     l.i.t._.2.5.6...

000001a5 <ManufacturerString>:
     1a5:	0c 03 74 00 75 00 74 00 61 00 6e 00 00 00           ..t.u.t.a.n...

000001b3 <LanguageString>:
     1b3:	04 03 09 04                                         ....

000001b7 <ConfigurationDescriptor>:
     1b7:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     1c7:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     1d7:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     1e7:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     1f7:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     207:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     217:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
     227:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     237:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000244 <DeviceDescriptor>:
     244:	12 01 10 01 00 00 00 08 ed fe 44 44 01 00 01 02     ..........DD....
     254:	00 01                                               ..

00000256 <NKROReport>:
     256:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     266:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     276:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     286:	25 01 95 78 75 01 81 02 c0                          %..xu....

0000028f <ConsoleReport>:
     28f:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     29f:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

000002af <ExtrakeyReport>:
     2af:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     2bf:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     2cf:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     2df:	10 95 01 81 00 c0                                   ......

000002e5 <MouseReport>:
     2e5:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     2f5:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     305:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     315:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     325:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000332 <KeyboardReport>:
     332:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     342:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     352:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     362:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

00000371 <__c.4189>:
     371:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     381:	20 00                                                .

00000383 <__c.4192>:
     383:	25 30 32 58 20 00                                   %02X .

00000389 <__c.4197>:
     389:	0a 00                                               ..

0000038b <__c.4520>:
     38b:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     39b:	3a 20 00                                            : .

0000039e <__c.4522>:
     39e:	25 30 32 58 00                                      %02X.

000003a3 <__c.4524>:
     3a3:	0a 00                                               ..

000003a5 <__c.4609>:
     3a5:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     3b5:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000003c3 <__c.4614>:
     3c3:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     3d3:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000003e1 <__c.4460>:
     3e1:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
     3f1:	2e 2e 2e 20 00                                      ... .

000003f6 <__c.4466>:
     3f6:	64 6f 6e 65 2e 0a 00                                done...

000003fd <__c.4241>:
     3fd:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     40d:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     41d:	20 5b 00                                             [.

00000420 <__c.4243>:
     420:	25 30 32 58 00                                      %02X.

00000425 <__c.4245>:
     425:	7c 00                                               |.

00000427 <__c.4247>:
     427:	25 64 00                                            %d.

0000042a <__c.4249>:
     42a:	20 00                                                .

0000042c <__c.4251>:
     42c:	25 64 00                                            %d.

0000042f <__c.4253>:
     42f:	20 00                                                .

00000431 <__c.4255>:
     431:	25 64 00                                            %d.

00000434 <__c.4257>:
     434:	20 00                                                .

00000436 <__c.4259>:
     436:	25 64 00                                            %d.

00000439 <__c.4261>:
     439:	5d 28 00                                            ](.

0000043c <__c.4263>:
     43c:	25 75 00                                            %u.

0000043f <__c.4265>:
     43f:	2f 00                                               /.

00000441 <__c.4267>:
     441:	25 75 00                                            %u.

00000444 <__c.4269>:
     444:	29 0a 00                                            )..

00000447 <__c.4714>:
     447:	53 6c 65 65 70 20 4c 45 44 20 74 65 73 74 0a 00     Sleep LED test..

00000457 <__c.4718>:
     457:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000462 <__c.4723>:
     462:	43 3e 20 00                                         C> .

00000466 <__c.4726>:
     466:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     476:	00                                                  .

00000477 <__c.4729>:
     477:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000484 <__c.4731>:
     484:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000490 <__c.4734>:
     490:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

0000049d <__c.4736>:
     49d:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

000004ab <__c.4739>:
     4ab:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

000004ba <__c.4741>:
     4ba:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

000004ca <__c.4744>:
     4ca:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

000004d6 <__c.4746>:
     4d6:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

000004e3 <__c.4749>:
     4e3:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

000004f2 <__c.4751>:
     4f2:	44 45 53 43 3a 20 74 6d 6b 20 73 70 6c 69 74 20     DESC: tmk split 
     502:	6b 65 79 62 6f 61 72 64 20 66 69 72 6d 77 61 72     keyboard firmwar
     512:	65 0a 00                                            e..

00000515 <__c.4753>:
     515:	56 49 44 3a 20 30 78 46 45 45 44 28 74 75 74 61     VID: 0xFEED(tuta
     525:	6e 29 20 50 49 44 3a 20 30 78 34 34 34 34 28 4c     n) PID: 0x4444(L
     535:	65 74 73 5f 73 70 6c 69 74 5f 32 35 36 29 20 56     ets_split_256) V
     545:	45 52 3a 20 30 78 30 30 30 31 0a 00                 ER: 0x0001..

00000551 <__c.4755>:
     551:	42 55 49 4c 44 3a 20 38 31 64 33 39 62 32 2d 64     BUILD: 81d39b2-d
     561:	69 72 74 79 20 28 31 37 3a 33 30 3a 32 32 20 41     irty (17:30:22 A
     571:	70 72 20 31 33 20 32 30 32 31 29 0a 00              pr 13 2021)..

0000057e <__c.4757>:
     57e:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     58e:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     59e:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     5ae:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     5be:	30 39 36 0a 00                                      096..

000005c3 <__c.4759>:
     5c3:	47 43 43 3a 20 34 2e 36 2e 32 20 41 56 52 2d 4c     GCC: 4.6.2 AVR-L
     5d3:	49 42 43 3a 20 31 2e 38 2e 30 20 41 56 52 5f 41     IBC: 1.8.0 AVR_A
     5e3:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

000005ee <__c.4762>:
     5ee:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000005fc <__c.4764>:
     5fc:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     60c:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000616 <__c.4766>:
     616:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     626:	6c 3a 20 25 58 0a 00                                l: %X..

0000062d <__c.4768>:
     62d:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     63d:	58 0a 00                                            X..

00000640 <__c.4770>:
     640:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     650:	58 0a 00                                            X..

00000653 <__c.4772>:
     653:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     663:	6c 58 0a 00                                         lX..

00000667 <__c.4775>:
     667:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000671 <__c.4777>:
     671:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

0000067c <__c.4786>:
     67c:	3f 00                                               ?.

0000067e <__c.4617>:
     67e:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

0000068e <__c.4619>:
     68e:	25 75 00                                            %u.

00000691 <__c.4621>:
     691:	0a 00                                               ..

00000693 <__c.4624>:
     693:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     6a3:	3a 20 00                                            : .

000006a6 <__c.4626>:
     6a6:	25 30 32 58 00                                      %02X.

000006ab <__c.4628>:
     6ab:	0a 00                                               ..

000006ad <__c.4630>:
     6ad:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

000006b7 <__c.4632>:
     6b7:	25 75 00                                            %u.

000006ba <__c.4634>:
     6ba:	0a 00                                               ..

000006bc <__c.4636>:
     6bc:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

000006c6 <__c.4638>:
     6c6:	25 75 00                                            %u.

000006c9 <__c.4640>:
     6c9:	0a 00                                               ..

000006cb <__c.4642>:
     6cb:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000006d7 <__c.4644>:
     6d7:	25 75 00                                            %u.

000006da <__c.4646>:
     6da:	0a 00                                               ..

000006dc <__c.4648>:
     6dc:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000006e5 <__c.4650>:
     6e5:	25 75 00                                            %u.

000006e8 <__c.4652>:
     6e8:	0a 00                                               ..

000006ea <__c.4655>:
     6ea:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     6fa:	77 3a 20 00                                         w: .

000006fe <__c.4657>:
     6fe:	25 30 32 58 00                                      %02X.

00000703 <__c.4659>:
     703:	0a 00                                               ..

00000705 <__c.4661>:
     705:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     715:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

0000071e <__c.4663>:
     71e:	25 75 00                                            %u.

00000721 <__c.4665>:
     721:	0a 00                                               ..

00000723 <__c.4667>:
     723:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     733:	74 72 6f 6c 3a 20 00                                trol: .

0000073a <__c.4669>:
     73a:	25 75 00                                            %u.

0000073d <__c.4671>:
     73d:	0a 00                                               ..

0000073f <__c.4673>:
     73f:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     74f:	20 00                                                .

00000751 <__c.4675>:
     751:	25 75 00                                            %u.

00000754 <__c.4677>:
     754:	0a 00                                               ..

00000756 <__c.4679>:
     756:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     766:	20 00                                                .

00000768 <__c.4681>:
     768:	25 75 00                                            %u.

0000076b <__c.4683>:
     76b:	0a 00                                               ..

0000076d <__c.4685>:
     76d:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000777 <__c.4687>:
     777:	25 75 00                                            %u.

0000077a <__c.4689>:
     77a:	0a 00                                               ..

0000077c <__c.4691>:
     77c:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     78c:	20 00                                                .

0000078e <__c.4693>:
     78e:	25 75 00                                            %u.

00000791 <__c.4695>:
     791:	0a 00                                               ..

00000793 <__c.4697>:
     793:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     7a3:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

000007af <__c.4699>:
     7af:	25 75 00                                            %u.

000007b2 <__c.4701>:
     7b2:	0a 00                                               ..

000007b4 <__c.4703>:
     7b4:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000007bc <__c.4705>:
     7bc:	25 75 00                                            %u.

000007bf <__c.4707>:
     7bf:	0a 00                                               ..

000007c1 <__c.4612>:
     7c1:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     7d1:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     7e1:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     7f1:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     801:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     811:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     821:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     831:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     841:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     851:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     861:	4b 52 4f 0a 7a 3a 09 73 6c 65 65 70 20 4c 45 44     KRO.z:.sleep LED
     871:	20 74 65 73 74 0a 00                                 test..

00000878 <__c.4791>:
     878:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     888:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     898:	73 65 6b 65 79 0a 00                                sekey..

0000089f <__c.4951>:
     89f:	4c 25 64 0a 00                                      L%d..

000008a4 <__c.4807>:
     8a4:	43 3e 20 00                                         C> .

000008a8 <__c.4802>:
     8a8:	4d 3e 20 00                                         M> .

000008ac <__c.4805>:
     8ac:	3f 00                                               ?.

000008ae <__c.4900>:
     8ae:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     8be:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     8ce:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     8de:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     8ee:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     8fe:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     90e:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     91e:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     92e:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     93e:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     94e:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     95e:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     96e:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     97e:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     98e:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     99e:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

000009a9 <__c.4902>:
     9a9:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     9b9:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     9c9:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     9d9:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     9e9:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

000009f7 <__c.4912>:
     9f7:	43 3e 20 00                                         C> .

000009fb <__c.4926>:
     9fb:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000a08 <__c.4929>:
     a08:	3f 00                                               ?.

00000a0a <__c.4931>:
     a0a:	4d 25 64 3e 20 00                                   M%d> .

00000a10 <__c.4933>:
     a10:	4d 3e 00                                            M>.

00000a13 <__c.4813>:
     a13:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000a21 <__c.4815>:
     a21:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     a31:	20 00                                                .

00000a33 <__c.4817>:
     a33:	25 75 00                                            %u.

00000a36 <__c.4819>:
     a36:	0a 00                                               ..

00000a38 <__c.4821>:
     a38:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     a48:	20 00                                                .

00000a4a <__c.4823>:
     a4a:	25 75 00                                            %u.

00000a4d <__c.4825>:
     a4d:	0a 00                                               ..

00000a4f <__c.4827>:
     a4f:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000a5e <__c.4829>:
     a5e:	25 75 00                                            %u.

00000a61 <__c.4831>:
     a61:	0a 00                                               ..

00000a63 <__c.4833>:
     a63:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     a73:	00                                                  .

00000a74 <__c.4835>:
     a74:	25 75 00                                            %u.

00000a77 <__c.4837>:
     a77:	0a 00                                               ..

00000a79 <__c.4839>:
     a79:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     a89:	65 64 3a 20 00                                      ed: .

00000a8e <__c.4841>:
     a8e:	25 75 00                                            %u.

00000a91 <__c.4843>:
     a91:	0a 00                                               ..

00000a93 <__c.4845>:
     a93:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     aa3:	5f 6d 61 78 3a 20 00                                _max: .

00000aaa <__c.4847>:
     aaa:	25 75 00                                            %u.

00000aad <__c.4849>:
     aad:	0a 00                                               ..

00000aaf <__c.4856>:
     aaf:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000abe <__c.4860>:
     abe:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     ace:	0a 00                                               ..

00000ad0 <__c.4863>:
     ad0:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     ae0:	64 0a 00                                            d..

00000ae3 <__c.4866>:
     ae3:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     af3:	20 25 64 0a 00                                       %d..

00000af8 <__c.4869>:
     af8:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     b08:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000b11 <__c.4872>:
     b11:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     b21:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000b2c <__c.4879>:
     b2c:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000b3b <__c.4883>:
     b3b:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     b4b:	0a 00                                               ..

00000b4d <__c.4886>:
     b4d:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     b5d:	64 0a 00                                            d..

00000b60 <__c.4889>:
     b60:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     b70:	20 25 64 0a 00                                       %d..

00000b75 <__c.4892>:
     b75:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     b85:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000b8e <__c.4895>:
     b8e:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     b9e:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000ba9 <breathing_table>:
     ba9:	00 00 00 00 00 00 00 00 00 00 00 01 02 04 06 0a     ................
     bb9:	0f 17 20 2c 3a 4a 5d 71 87 9d b3 c7 da e9 f5 fc     .. ,:J]q........
     bc9:	ff fc f5 e9 da c7 b3 9d 87 71 5d 4a 3a 2c 20 17     .........q]J:, .
     bd9:	0f 0a 06 04 02 01 00 00 00 00 00 00 00 00 00 00     ................
     be9:	00                                                  .

00000bea <__ctors_end>:
     bea:	11 24       	eor	r1, r1
     bec:	1f be       	out	0x3f, r1	; 63
     bee:	cf ef       	ldi	r28, 0xFF	; 255
     bf0:	da e0       	ldi	r29, 0x0A	; 10
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	cd bf       	out	0x3d, r28	; 61

00000bf6 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     bf6:	04 b6       	in	r0, 0x34	; 52
     bf8:	03 fe       	sbrs	r0, 3
     bfa:	27 c0       	rjmp	.+78     	; 0xc4a <__do_copy_data>
     bfc:	80 91 46 02 	lds	r24, 0x0246
     c00:	90 91 47 02 	lds	r25, 0x0247
     c04:	a0 91 48 02 	lds	r26, 0x0248
     c08:	b0 91 49 02 	lds	r27, 0x0249
     c0c:	87 30       	cpi	r24, 0x07	; 7
     c0e:	20 eb       	ldi	r18, 0xB0	; 176
     c10:	92 07       	cpc	r25, r18
     c12:	27 e0       	ldi	r18, 0x07	; 7
     c14:	a2 07       	cpc	r26, r18
     c16:	20 eb       	ldi	r18, 0xB0	; 176
     c18:	b2 07       	cpc	r27, r18
     c1a:	b9 f4       	brne	.+46     	; 0xc4a <__do_copy_data>
        reset_key = 0;
     c1c:	10 92 46 02 	sts	0x0246, r1
     c20:	10 92 47 02 	sts	0x0247, r1
     c24:	10 92 48 02 	sts	0x0248, r1
     c28:	10 92 49 02 	sts	0x0249, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     c2c:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     c2e:	84 b7       	in	r24, 0x34	; 52
     c30:	87 7f       	andi	r24, 0xF7	; 247
     c32:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     c34:	88 e1       	ldi	r24, 0x18	; 24
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	80 93 60 00 	sts	0x0060, r24
     c3e:	10 92 60 00 	sts	0x0060, r1
     c42:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     c44:	e0 e0       	ldi	r30, 0x00	; 0
     c46:	f8 e3       	ldi	r31, 0x38	; 56
     c48:	09 95       	icall

00000c4a <__do_copy_data>:
     c4a:	11 e0       	ldi	r17, 0x01	; 1
     c4c:	a0 e0       	ldi	r26, 0x00	; 0
     c4e:	b1 e0       	ldi	r27, 0x01	; 1
     c50:	e4 ed       	ldi	r30, 0xD4	; 212
     c52:	fb e5       	ldi	r31, 0x5B	; 91
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <__do_copy_data+0x10>
     c56:	05 90       	lpm	r0, Z+
     c58:	0d 92       	st	X+, r0
     c5a:	aa 34       	cpi	r26, 0x4A	; 74
     c5c:	b1 07       	cpc	r27, r17
     c5e:	d9 f7       	brne	.-10     	; 0xc56 <__do_copy_data+0xc>

00000c60 <__do_clear_bss>:
     c60:	12 e0       	ldi	r17, 0x02	; 2
     c62:	aa e4       	ldi	r26, 0x4A	; 74
     c64:	b1 e0       	ldi	r27, 0x01	; 1
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <.do_clear_bss_start>

00000c68 <.do_clear_bss_loop>:
     c68:	1d 92       	st	X+, r1

00000c6a <.do_clear_bss_start>:
     c6a:	a6 34       	cpi	r26, 0x46	; 70
     c6c:	b1 07       	cpc	r27, r17
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <.do_clear_bss_loop>
     c70:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <main>
     c74:	0c 94 e8 2d 	jmp	0x5bd0	; 0x5bd0 <_exit>

00000c78 <__bad_interrupt>:
     c78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c7c <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     c7c:	ff 93       	push	r31
	push	ZL
     c7e:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     c80:	e0 91 4a 01 	lds	r30, 0x014A
	lds	ZH, xfunc_out+1	;/
     c84:	f0 91 4b 01 	lds	r31, 0x014B
	sbiw	ZL, 0		;Skip if null
     c88:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     c8a:	09 f0       	breq	.+2      	; 0xc8e <xputc+0x12>
	icall
     c8c:	09 95       	icall
2:	pop	ZL
     c8e:	ef 91       	pop	r30
	pop	ZH
     c90:	ff 91       	pop	r31
	ret
     c92:	08 95       	ret

00000c94 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     c94:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     c96:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     c98:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     c9a:	11 f0       	breq	.+4      	; 0xca0 <xputs+0xc>
	rcall	xputc
     c9c:	ef df       	rcall	.-34     	; 0xc7c <xputc>
	rjmp	1b
     c9e:	fb cf       	rjmp	.-10     	; 0xc96 <xputs+0x2>
2:	ret
     ca0:	08 95       	ret

00000ca2 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     ca2:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     ca4:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     ca6:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     ca8:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     caa:	0c c0       	rjmp	.+24     	; 0xcc4 <xitoa+0x22>
	neg	r20		;
     cac:	41 95       	neg	r20
	sbrs	r25, 7		;
     cae:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     cb0:	09 c0       	rjmp	.+18     	; 0xcc4 <xitoa+0x22>
	ldi	r30, '-'	;
     cb2:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     cb4:	60 95       	com	r22
	com	r23		;
     cb6:	70 95       	com	r23
	com	r24		;
     cb8:	80 95       	com	r24
	com	r25		;
     cba:	90 95       	com	r25
	adc	r22, r1		;
     cbc:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     cbe:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     cc0:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     cc2:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     cc4:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <xitoa+0x2a>
	neg	r18		;
     cc8:	21 95       	neg	r18
	ldi	r19, '0'	;/
     cca:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     ccc:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     cce:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     cd0:	66 0f       	add	r22, r22
	rol	r23		;
     cd2:	77 1f       	adc	r23, r23
	rol	r24		;
     cd4:	88 1f       	adc	r24, r24
	rol	r25		;
     cd6:	99 1f       	adc	r25, r25
	rol	r26		;
     cd8:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     cda:	a4 17       	cp	r26, r20
	brcs	3f		;
     cdc:	10 f0       	brcs	.+4      	; 0xce2 <xitoa+0x40>
	sub	r26, r20	;
     cde:	a4 1b       	sub	r26, r20
	inc	r22		;
     ce0:	63 95       	inc	r22
3:	dec	r21		;
     ce2:	5a 95       	dec	r21
	brne	2b		;/
     ce4:	a9 f7       	brne	.-22     	; 0xcd0 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     ce6:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     ce8:	08 f0       	brcs	.+2      	; 0xcec <xitoa+0x4a>
	subi	r26, -7		;
     cea:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     cec:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     cee:	af 93       	push	r26
	inc	r31		;/
     cf0:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     cf2:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     cf4:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     cf6:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     cf8:	91 05       	cpc	r25, r1
	brne	1b		;/
     cfa:	41 f7       	brne	.-48     	; 0xccc <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     cfc:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     cfe:	11 f4       	brne	.+4      	; 0xd04 <xitoa+0x62>
	push	r30		;
     d00:	ef 93       	push	r30
	inc	r31		;/
     d02:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d04:	f2 17       	cp	r31, r18
	brcc	6f		;
     d06:	18 f4       	brcc	.+6      	; 0xd0e <xitoa+0x6c>
	push	r19		;
     d08:	3f 93       	push	r19
	inc	r31		;
     d0a:	f3 95       	inc	r31
	rjmp	5b		;/
     d0c:	fb cf       	rjmp	.-10     	; 0xd04 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d0e:	8f 91       	pop	r24
	rcall	xputc		;
     d10:	b5 df       	rcall	.-150    	; 0xc7c <xputc>
	dec	r31		;
     d12:	fa 95       	dec	r31
	brne	6b		;/
     d14:	e1 f7       	brne	.-8      	; 0xd0e <xitoa+0x6c>

	ret
     d16:	08 95       	ret

00000d18 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     d18:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d1a:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d1c:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d1e:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     d20:	21 f0       	breq	.+8      	; 0xd2a <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     d22:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     d24:	19 f0       	breq	.+6      	; 0xd2c <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     d26:	aa df       	rcall	.-172    	; 0xc7c <xputc>
	rjmp	0b		;/
     d28:	f9 cf       	rjmp	.-14     	; 0xd1c <xvprintf+0x4>
90:	ret
     d2a:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     d2c:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     d2e:	e8 94       	clt
	_LPMI	r21		;Get flags
     d30:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     d32:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     d34:	c1 f3       	breq	.-16     	; 0xd26 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     d36:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     d38:	11 f4       	brne	.+4      	; 0xd3e <xvprintf+0x26>
	set			;/
     d3a:	68 94       	set
22:	_LPMI	r21		;Get width
     d3c:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     d3e:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     d40:	48 f4       	brcc	.+18     	; 0xd54 <xvprintf+0x3c>
	subi	r21, '0'	;
     d42:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     d44:	90 f3       	brcs	.-28     	; 0xd2a <xvprintf+0x12>
	lsl	r18		;
     d46:	22 0f       	add	r18, r18
	mov	r0, r18		;
     d48:	02 2e       	mov	r0, r18
	lsl	r18		;
     d4a:	22 0f       	add	r18, r18
	lsl	r18		;
     d4c:	22 0f       	add	r18, r18
	add	r18, r0		;
     d4e:	20 0d       	add	r18, r0
	add	r18, r21	;
     d50:	25 0f       	add	r18, r21
	rjmp	22b		;/
     d52:	f4 cf       	rjmp	.-24     	; 0xd3c <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     d54:	0e f4       	brtc	.+2      	; 0xd58 <xvprintf+0x40>
	neg	r18		;
     d56:	21 95       	neg	r18
25:	ld	r24, Y+		;
     d58:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     d5a:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     d5c:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     d5e:	19 f3       	breq	.-58     	; 0xd26 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     d60:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     d62:	29 f1       	breq	.+74     	; 0xdae <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     d64:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     d66:	59 f1       	breq	.+86     	; 0xdbe <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     d68:	bc 01       	movw	r22, r24
	clr	r24		;
     d6a:	88 27       	eor	r24, r24
	clr	r25		;
     d6c:	99 27       	eor	r25, r25
	clt			;/
     d6e:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     d70:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     d72:	21 f4       	brne	.+8      	; 0xd7c <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     d74:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     d76:	99 91       	ld	r25, Y+
	set			;
     d78:	68 94       	set
	_LPMI	r21		;/
     d7a:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     d7c:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     d7e:	39 f4       	brne	.+14     	; 0xd8e <xvprintf+0x76>
	ldi	r20, -10	;
     d80:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     d82:	7e f0       	brts	.+30     	; 0xda2 <xvprintf+0x8a>
	sbrs	r23, 7		;
     d84:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     d86:	0d c0       	rjmp	.+26     	; 0xda2 <xvprintf+0x8a>
	ldi	r24, -1		;
     d88:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     d8a:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     d8c:	0a c0       	rjmp	.+20     	; 0xda2 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     d8e:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     d90:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     d92:	39 f0       	breq	.+14     	; 0xda2 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     d94:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     d96:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     d98:	21 f0       	breq	.+8      	; 0xda2 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     d9a:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     d9c:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     d9e:	09 f0       	breq	.+2      	; 0xda2 <xvprintf+0x8a>
	ret			;abort
     da0:	08 95       	ret
40:	push	ZH		;Output the value
     da2:	ff 93       	push	r31
	push	ZL		;
     da4:	ef 93       	push	r30
	rcall	xitoa		;
     da6:	7d df       	rcall	.-262    	; 0xca2 <xitoa>
42:	pop	ZL		;
     da8:	ef 91       	pop	r30
	pop	ZH		;
     daa:	ff 91       	pop	r31
	rjmp	0b		;/
     dac:	b7 cf       	rjmp	.-146    	; 0xd1c <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     dae:	ff 93       	push	r31
	push	ZL
     db0:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     db2:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     db4:	81 91       	ld	r24, Z+
	cpi	r24, 0
     db6:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     db8:	b9 f3       	breq	.-18     	; 0xda8 <xvprintf+0x90>
	rcall	xputc
     dba:	60 df       	rcall	.-320    	; 0xc7c <xputc>
	rjmp	51b
     dbc:	fb cf       	rjmp	.-10     	; 0xdb4 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     dbe:	ff 93       	push	r31
	push	ZL
     dc0:	ef 93       	push	r30
	rcall	xputs
     dc2:	68 df       	rcall	.-304    	; 0xc94 <xputs>
	rjmp	42b
     dc4:	f1 cf       	rjmp	.-30     	; 0xda8 <xvprintf+0x90>

00000dc6 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     dc6:	df 93       	push	r29
	push	YL
     dc8:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     dca:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     dcc:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     dce:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     dd0:	a3 df       	rcall	.-186    	; 0xd18 <xvprintf>
	pop	YL
     dd2:	cf 91       	pop	r28
	pop	YH
     dd4:	df 91       	pop	r29
	ret
     dd6:	08 95       	ret

00000dd8 <promicro_bootloader_jmp>:
void promicro_bootloader_jmp(bool program) {
    uint16_t *const bootKeyPtr = (uint16_t *)0x0800;

    // Value used by Caterina bootloader use to determine whether to run the
    // sketch or the bootloader programmer.
    uint16_t bootKey = program ? 0x7777 : 0;
     dd8:	88 23       	and	r24, r24
     dda:	19 f0       	breq	.+6      	; 0xde2 <promicro_bootloader_jmp+0xa>
     ddc:	87 e7       	ldi	r24, 0x77	; 119
     dde:	97 e7       	ldi	r25, 0x77	; 119
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <promicro_bootloader_jmp+0xe>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0

    *bootKeyPtr = bootKey;
     de6:	90 93 01 08 	sts	0x0801, r25
     dea:	80 93 00 08 	sts	0x0800, r24

    // setup watchdog timeout
    wdt_enable(WDTO_60MS);
     dee:	2a e0       	ldi	r18, 0x0A	; 10
     df0:	88 e1       	ldi	r24, 0x18	; 24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	a8 95       	wdr
     dfa:	80 93 60 00 	sts	0x0060, r24
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	20 93 60 00 	sts	0x0060, r18
     e04:	ff cf       	rjmp	.-2      	; 0xe04 <promicro_bootloader_jmp+0x2c>

00000e06 <action_function>:

/*
 * user defined action function
 */
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
     e06:	fc 01       	movw	r30, r24
    uint8_t tap_count = record->tap.count;
     e08:	85 81       	ldd	r24, Z+5	; 0x05
     e0a:	82 95       	swap	r24
     e0c:	8f 70       	andi	r24, 0x0F	; 15
    switch (id) {
     e0e:	61 30       	cpi	r22, 0x01	; 1
     e10:	49 f1       	breq	.+82     	; 0xe64 <action_function+0x5e>
     e12:	61 30       	cpi	r22, 0x01	; 1
     e14:	18 f0       	brcs	.+6      	; 0xe1c <action_function+0x16>
     e16:	62 30       	cpi	r22, 0x02	; 2
     e18:	71 f5       	brne	.+92     	; 0xe76 <action_function+0x70>
     e1a:	28 c0       	rjmp	.+80     	; 0xe6c <action_function+0x66>
        case RESET_LAYER_STATE:
            if (record->event.pressed) {
     e1c:	82 81       	ldd	r24, Z+2	; 0x02
     e1e:	88 23       	and	r24, r24
     e20:	61 f0       	breq	.+24     	; 0xe3a <action_function+0x34>
                if (!get_oneshot_locked_mods() && !get_oneshot_layer_state()) {
     e22:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <get_oneshot_locked_mods>
     e26:	88 23       	and	r24, r24
     e28:	31 f5       	brne	.+76     	; 0xe76 <action_function+0x70>
     e2a:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <get_oneshot_layer_state>
     e2e:	88 23       	and	r24, r24
     e30:	11 f5       	brne	.+68     	; 0xe76 <action_function+0x70>
                    register_code(KC_ESC);
     e32:	89 e2       	ldi	r24, 0x29	; 41
     e34:	0e 94 47 14 	call	0x288e	; 0x288e <register_code>
     e38:	08 95       	ret
                }
            } else {
                if (!get_oneshot_locked_mods() && !get_oneshot_layer_state()) {
     e3a:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <get_oneshot_locked_mods>
     e3e:	88 23       	and	r24, r24
     e40:	41 f4       	brne	.+16     	; 0xe52 <action_function+0x4c>
     e42:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <get_oneshot_layer_state>
     e46:	88 23       	and	r24, r24
     e48:	21 f4       	brne	.+8      	; 0xe52 <action_function+0x4c>
                    unregister_code(KC_ESC);
     e4a:	89 e2       	ldi	r24, 0x29	; 41
     e4c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <unregister_code>
     e50:	08 95       	ret
                } else {
                    reset_oneshot_layer();
     e52:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <reset_oneshot_layer>
                    clear_oneshot_locked_mods();
     e56:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <clear_oneshot_locked_mods>
                    layer_clear();
     e5a:	0e 94 aa 1c 	call	0x3954	; 0x3954 <layer_clear>
                    clear_keyboard();
     e5e:	0e 94 13 18 	call	0x3026	; 0x3026 <clear_keyboard>
     e62:	08 95       	ret
                }
            }
            break;
        case PROMICRO_RESET:
            if(tap_count == 5) {
     e64:	85 30       	cpi	r24, 0x05	; 5
     e66:	39 f4       	brne	.+14     	; 0xe76 <action_function+0x70>
                promicro_bootloader_jmp(false);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	03 c0       	rjmp	.+6      	; 0xe72 <action_function+0x6c>
            }
            break;
        case PROMICRO_PROGRAM:
            if(tap_count == 5) {
     e6c:	85 30       	cpi	r24, 0x05	; 5
     e6e:	19 f4       	brne	.+6      	; 0xe76 <action_function+0x70>
                promicro_bootloader_jmp(true);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <promicro_bootloader_jmp>
     e76:	08 95       	ret

00000e78 <unselect_rows>:
    }
    return result;
}

static void unselect_rows(void)
{
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
    for(int x = 0; x < ROWS_PER_HAND; x++) {
     e7c:	a6 e1       	ldi	r26, 0x16	; 22
     e7e:	b1 e0       	ldi	r27, 0x01	; 1
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
        _SFR_IO8((row_pins[x] >> 4) + 1) &=  ~_BV(row_pins[x] & 0xF);
     e84:	41 e0       	ldi	r20, 0x01	; 1
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	2d 91       	ld	r18, X+
     e8a:	e2 2f       	mov	r30, r18
     e8c:	e2 95       	swap	r30
     e8e:	ef 70       	andi	r30, 0x0F	; 15
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	61 a1       	lds	r22, 0x41
     e94:	2f 70       	andi	r18, 0x0F	; 15
     e96:	ea 01       	movw	r28, r20
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <unselect_rows+0x26>
     e9a:	cc 0f       	add	r28, r28
     e9c:	dd 1f       	adc	r29, r29
     e9e:	2a 95       	dec	r18
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <unselect_rows+0x22>
     ea2:	9e 01       	movw	r18, r28
     ea4:	3c 2f       	mov	r19, r28
     ea6:	30 95       	com	r19
     ea8:	63 23       	and	r22, r19
     eaa:	61 a3       	lds	r22, 0x51
        _SFR_IO8((row_pins[x] >> 4) + 2) |= _BV(row_pins[x] & 0xF);
     eac:	32 a1       	lds	r19, 0x42
     eae:	32 2b       	or	r19, r18
     eb0:	32 a3       	lds	r19, 0x52
    return result;
}

static void unselect_rows(void)
{
    for(int x = 0; x < ROWS_PER_HAND; x++) {
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	85 30       	cpi	r24, 0x05	; 5
     eb6:	91 05       	cpc	r25, r1
     eb8:	39 f7       	brne	.-50     	; 0xe88 <unselect_rows+0x10>
        _SFR_IO8((row_pins[x] >> 4) + 1) &=  ~_BV(row_pins[x] & 0xF);
        _SFR_IO8((row_pins[x] >> 4) + 2) |= _BV(row_pins[x] & 0xF);
    }
}
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <matrix_init>:
{
    return MATRIX_COLS;
}

void matrix_init(void)
{
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
    debug_enable = true;
     ec4:	80 91 25 02 	lds	r24, 0x0225
    debug_matrix = true;
    debug_mouse = true;
     ec8:	8b 60       	ori	r24, 0x0B	; 11
     eca:	80 93 25 02 	sts	0x0225, r24
    // initialize row and col
    unselect_rows();
     ece:	0e 94 3c 07 	call	0xe78	; 0xe78 <unselect_rows>
     ed2:	a0 e2       	ldi	r26, 0x20	; 32
     ed4:	b1 e0       	ldi	r27, 0x01	; 1
}


static void  init_cols(void)
{
    for(int x = 0; x < MATRIX_COLS; x++) {
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
        _SFR_IO8((col_pins[x] >> 4) + 1) &=  ~_BV(col_pins[x] & 0xF);
     eda:	41 e0       	ldi	r20, 0x01	; 1
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	2d 91       	ld	r18, X+
     ee0:	e2 2f       	mov	r30, r18
     ee2:	e2 95       	swap	r30
     ee4:	ef 70       	andi	r30, 0x0F	; 15
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	61 a1       	lds	r22, 0x41
     eea:	2f 70       	andi	r18, 0x0F	; 15
     eec:	ea 01       	movw	r28, r20
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <matrix_init+0x34>
     ef0:	cc 0f       	add	r28, r28
     ef2:	dd 1f       	adc	r29, r29
     ef4:	2a 95       	dec	r18
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <matrix_init+0x30>
     ef8:	9e 01       	movw	r18, r28
     efa:	3c 2f       	mov	r19, r28
     efc:	30 95       	com	r19
     efe:	63 23       	and	r22, r19
     f00:	61 a3       	lds	r22, 0x51
        _SFR_IO8((col_pins[x] >> 4) + 2) |= _BV(col_pins[x] & 0xF);
     f02:	32 a1       	lds	r19, 0x42
     f04:	32 2b       	or	r19, r18
     f06:	32 a3       	lds	r19, 0x52
}


static void  init_cols(void)
{
    for(int x = 0; x < MATRIX_COLS; x++) {
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	86 30       	cpi	r24, 0x06	; 6
     f0c:	91 05       	cpc	r25, r1
     f0e:	39 f7       	brne	.-50     	; 0xede <matrix_init+0x1e>
    debug_mouse = true;
    // initialize row and col
    unselect_rows();
    init_cols();

    TX_RX_LED_INIT;
     f10:	55 9a       	sbi	0x0a, 5	; 10
     f12:	20 9a       	sbi	0x04, 0	; 4
     f14:	ac e4       	ldi	r26, 0x4C	; 76
     f16:	b1 e0       	ldi	r27, 0x01	; 1
     f18:	e6 e5       	ldi	r30, 0x56	; 86
     f1a:	f1 e0       	ldi	r31, 0x01	; 1

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     f1c:	80 e0       	ldi	r24, 0x00	; 0
        matrix[i] = 0;
     f1e:	1d 92       	st	X+, r1
        matrix_debouncing[i] = 0;
     f20:	11 92       	st	Z+, r1
    init_cols();

    TX_RX_LED_INIT;

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	8a 30       	cpi	r24, 0x0A	; 10
     f26:	d9 f7       	brne	.-10     	; 0xf1e <matrix_init+0x5e>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <_matrix_scan>:

uint8_t _matrix_scan(void)
{
     f2e:	8f 92       	push	r8
     f30:	9f 92       	push	r9
     f32:	bf 92       	push	r11
     f34:	cf 92       	push	r12
     f36:	df 92       	push	r13
     f38:	ef 92       	push	r14
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	00 d0       	rcall	.+0      	; 0xf46 <_matrix_scan+0x18>
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
    // Right hand is stored after the left in the matirx so, we need to offset it
    int offset = isLeftHand ? 0 : (ROWS_PER_HAND);
     f4a:	80 91 01 01 	lds	r24, 0x0101
     f4e:	88 23       	and	r24, r24
     f50:	19 f0       	breq	.+6      	; 0xf58 <_matrix_scan+0x2a>
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <_matrix_scan+0x2e>
     f58:	65 e0       	ldi	r22, 0x05	; 5
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	86 e1       	ldi	r24, 0x16	; 22
     f5e:	c8 2e       	mov	r12, r24
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	d8 2e       	mov	r13, r24
     f64:	88 24       	eor	r8, r8
     f66:	99 24       	eor	r9, r9
    }
}

static void select_row(uint8_t row)
{
    _SFR_IO8((row_pins[row] >> 4) + 1) |=  _BV(row_pins[row] & 0xF);
     f68:	01 e0       	ldi	r16, 0x01	; 1
     f6a:	10 e0       	ldi	r17, 0x00	; 0
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}

uint8_t _matrix_scan(void)
     f6c:	96 e5       	ldi	r25, 0x56	; 86
     f6e:	e9 2e       	mov	r14, r25
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	f9 2e       	mov	r15, r25
     f74:	e6 0e       	add	r14, r22
     f76:	f7 1e       	adc	r15, r23
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i+offset] != cols) {
            matrix_debouncing[i+offset] = cols;
            debouncing = DEBOUNCE;
     f78:	25 e0       	ldi	r18, 0x05	; 5
     f7a:	b2 2e       	mov	r11, r18
    }
}

static void select_row(uint8_t row)
{
    _SFR_IO8((row_pins[row] >> 4) + 1) |=  _BV(row_pins[row] & 0xF);
     f7c:	f6 01       	movw	r30, r12
     f7e:	81 91       	ld	r24, Z+
     f80:	6f 01       	movw	r12, r30
     f82:	e8 2f       	mov	r30, r24
     f84:	e2 95       	swap	r30
     f86:	ef 70       	andi	r30, 0x0F	; 15
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	21 a1       	lds	r18, 0x41
     f8c:	8f 70       	andi	r24, 0x0F	; 15
     f8e:	a8 01       	movw	r20, r16
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <_matrix_scan+0x68>
     f92:	44 0f       	add	r20, r20
     f94:	55 1f       	adc	r21, r21
     f96:	8a 95       	dec	r24
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <_matrix_scan+0x64>
     f9a:	ca 01       	movw	r24, r20
     f9c:	24 2b       	or	r18, r20
     f9e:	21 a3       	lds	r18, 0x51
    _SFR_IO8((row_pins[row] >> 4) + 2) &= ~_BV(row_pins[row] & 0xF);
     fa0:	92 a1       	lds	r25, 0x42
     fa2:	80 95       	com	r24
     fa4:	98 23       	and	r25, r24
     fa6:	92 a3       	lds	r25, 0x52
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fa8:	50 ea       	ldi	r21, 0xA0	; 160
     faa:	5a 95       	dec	r21
     fac:	f1 f7       	brne	.-4      	; 0xfaa <_matrix_scan+0x7c>
     fae:	a0 e2       	ldi	r26, 0x20	; 32
     fb0:	b1 e0       	ldi	r27, 0x01	; 1
}

static matrix_row_t read_cols(void)
{
    matrix_row_t result = 0;
    for(int x = 0; x < MATRIX_COLS; x++) {
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
    }
}

static matrix_row_t read_cols(void)
{
    matrix_row_t result = 0;
     fb6:	20 e0       	ldi	r18, 0x00	; 0
    for(int x = 0; x < MATRIX_COLS; x++) {
        result |= (_SFR_IO8(col_pins[x] >> 4) & _BV(col_pins[x] & 0xF)) ? 0 : (1 << x);
     fb8:	3d 91       	ld	r19, X+
     fba:	e3 2f       	mov	r30, r19
     fbc:	e2 95       	swap	r30
     fbe:	ef 70       	andi	r30, 0x0F	; 15
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 a1       	lds	r24, 0x40
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	3f 70       	andi	r19, 0x0F	; 15
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <_matrix_scan+0xa0>
     fca:	95 95       	asr	r25
     fcc:	87 95       	ror	r24
     fce:	3a 95       	dec	r19
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <_matrix_scan+0x9c>
     fd2:	80 fd       	sbrc	r24, 0
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <_matrix_scan+0xb8>
     fd6:	c8 01       	movw	r24, r16
     fd8:	04 2e       	mov	r0, r20
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <_matrix_scan+0xb2>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <_matrix_scan+0xae>
     fe4:	01 c0       	rjmp	.+2      	; 0xfe8 <_matrix_scan+0xba>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	28 2b       	or	r18, r24
}

static matrix_row_t read_cols(void)
{
    matrix_row_t result = 0;
    for(int x = 0; x < MATRIX_COLS; x++) {
     fea:	4f 5f       	subi	r20, 0xFF	; 255
     fec:	5f 4f       	sbci	r21, 0xFF	; 255
     fee:	46 30       	cpi	r20, 0x06	; 6
     ff0:	51 05       	cpc	r21, r1
     ff2:	11 f7       	brne	.-60     	; 0xfb8 <_matrix_scan+0x8a>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}

uint8_t _matrix_scan(void)
     ff4:	f7 01       	movw	r30, r14
     ff6:	e8 0d       	add	r30, r8
     ff8:	f9 1d       	adc	r31, r9

    for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i+offset] != cols) {
     ffa:	80 81       	ld	r24, Z
     ffc:	82 17       	cp	r24, r18
     ffe:	19 f0       	breq	.+6      	; 0x1006 <_matrix_scan+0xd8>
            matrix_debouncing[i+offset] = cols;
    1000:	20 83       	st	Z, r18
            debouncing = DEBOUNCE;
    1002:	b0 92 00 01 	sts	0x0100, r11
        }
        unselect_rows();
    1006:	69 83       	std	Y+1, r22	; 0x01
    1008:	7a 83       	std	Y+2, r23	; 0x02
    100a:	0e 94 3c 07 	call	0xe78	; 0xe78 <unselect_rows>
    100e:	08 94       	sec
    1010:	81 1c       	adc	r8, r1
    1012:	91 1c       	adc	r9, r1
uint8_t _matrix_scan(void)
{
    // Right hand is stored after the left in the matirx so, we need to offset it
    int offset = isLeftHand ? 0 : (ROWS_PER_HAND);

    for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
    1014:	69 81       	ldd	r22, Y+1	; 0x01
    1016:	7a 81       	ldd	r23, Y+2	; 0x02
    1018:	85 e0       	ldi	r24, 0x05	; 5
    101a:	88 16       	cp	r8, r24
    101c:	91 04       	cpc	r9, r1
    101e:	09 f0       	breq	.+2      	; 0x1022 <_matrix_scan+0xf4>
    1020:	ad cf       	rjmp	.-166    	; 0xf7c <_matrix_scan+0x4e>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    1022:	80 91 00 01 	lds	r24, 0x0100
    1026:	88 23       	and	r24, r24
    1028:	e9 f0       	breq	.+58     	; 0x1064 <_matrix_scan+0x136>
        if (--debouncing) {
    102a:	81 50       	subi	r24, 0x01	; 1
    102c:	80 93 00 01 	sts	0x0100, r24
    1030:	88 23       	and	r24, r24
    1032:	39 f0       	breq	.+14     	; 0x1042 <_matrix_scan+0x114>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1034:	ef e9       	ldi	r30, 0x9F	; 159
    1036:	ff e0       	ldi	r31, 0x0F	; 15
    1038:	31 97       	sbiw	r30, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <_matrix_scan+0x10a>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <_matrix_scan+0x110>
    103e:	00 00       	nop
    1040:	11 c0       	rjmp	.+34     	; 0x1064 <_matrix_scan+0x136>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}

uint8_t _matrix_scan(void)
    1046:	9b 01       	movw	r18, r22
    1048:	24 5b       	subi	r18, 0xB4	; 180
    104a:	3e 4f       	sbci	r19, 0xFE	; 254
    104c:	d9 01       	movw	r26, r18
    104e:	a8 0f       	add	r26, r24
    1050:	b9 1f       	adc	r27, r25
    1052:	f7 01       	movw	r30, r14
    1054:	e8 0f       	add	r30, r24
    1056:	f9 1f       	adc	r31, r25
    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
                matrix[i+offset] = matrix_debouncing[i+offset];
    1058:	40 81       	ld	r20, Z
    105a:	4c 93       	st	X, r20
    105c:	01 96       	adiw	r24, 0x01	; 1

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
    105e:	85 30       	cpi	r24, 0x05	; 5
    1060:	91 05       	cpc	r25, r1
    1062:	a1 f7       	brne	.-24     	; 0x104c <_matrix_scan+0x11e>
            }
        }
    }

    return 1;
}
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	df 90       	pop	r13
    1078:	cf 90       	pop	r12
    107a:	bf 90       	pop	r11
    107c:	9f 90       	pop	r9
    107e:	8f 90       	pop	r8
    1080:	08 95       	ret

00001082 <serial_transaction>:
#endif

    return err;
}

int serial_transaction(void) {
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
    1086:	80 91 01 01 	lds	r24, 0x0101
    108a:	88 23       	and	r24, r24
    108c:	19 f0       	breq	.+6      	; 0x1094 <serial_transaction+0x12>
    108e:	c5 e0       	ldi	r28, 0x05	; 5
    1090:	d0 e0       	ldi	r29, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <serial_transaction+0x16>
    1094:	c0 e0       	ldi	r28, 0x00	; 0
    1096:	d0 e0       	ldi	r29, 0x00	; 0

    if (serial_update_buffers()) {
    1098:	0e 94 34 0a 	call	0x1468	; 0x1468 <serial_update_buffers>
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	99 f4       	brne	.+38     	; 0x10c6 <serial_transaction+0x44>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
#endif

    return err;
}

int serial_transaction(void) {
    10a4:	c4 5b       	subi	r28, 0xB4	; 180
    10a6:	de 4f       	sbci	r29, 0xFE	; 254
    if (serial_update_buffers()) {
        return 1;
    }

    for (int i = 0; i < ROWS_PER_HAND; ++i) {
        matrix[slaveOffset+i] = serial_slave_buffer[i];
    10a8:	fc 01       	movw	r30, r24
    10aa:	eb 55       	subi	r30, 0x5B	; 91
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	20 81       	ld	r18, Z
#endif

    return err;
}

int serial_transaction(void) {
    10b0:	fe 01       	movw	r30, r28
    10b2:	e8 0f       	add	r30, r24
    10b4:	f9 1f       	adc	r31, r25
    if (serial_update_buffers()) {
        return 1;
    }

    for (int i = 0; i < ROWS_PER_HAND; ++i) {
        matrix[slaveOffset+i] = serial_slave_buffer[i];
    10b6:	20 83       	st	Z, r18

    if (serial_update_buffers()) {
        return 1;
    }

    for (int i = 0; i < ROWS_PER_HAND; ++i) {
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	85 30       	cpi	r24, 0x05	; 5
    10bc:	91 05       	cpc	r25, r1
    10be:	a1 f7       	brne	.-24     	; 0x10a8 <serial_transaction+0x26>
        matrix[slaveOffset+i] = serial_slave_buffer[i];
    }
    return 0;
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <serial_transaction+0x48>

int serial_transaction(void) {
    int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;

    if (serial_update_buffers()) {
        return 1;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0

    for (int i = 0; i < ROWS_PER_HAND; ++i) {
        matrix[slaveOffset+i] = serial_slave_buffer[i];
    }
    return 0;
}
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

000010d0 <matrix_scan>:

uint8_t matrix_scan(void)
{
    10d0:	cf 93       	push	r28
    int ret = _matrix_scan();
    10d2:	0e 94 97 07 	call	0xf2e	; 0xf2e <_matrix_scan>
    10d6:	c8 2f       	mov	r28, r24


#ifdef USE_I2C
    if( i2c_transaction() ) {
#else
    if( serial_transaction() ) {
    10d8:	0e 94 41 08 	call	0x1082	; 0x1082 <serial_transaction>
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	c9 f0       	breq	.+50     	; 0x1112 <matrix_scan+0x42>
#endif
        // turn on the indicator led when halves are disconnected
        TXLED1;
    10e0:	5d 98       	cbi	0x0b, 5	; 11

        error_count++;
    10e2:	80 91 60 01 	lds	r24, 0x0160
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	80 93 60 01 	sts	0x0160, r24

        if (error_count > ERROR_DISCONNECT_COUNT) {
    10ec:	86 30       	cpi	r24, 0x06	; 6
    10ee:	a0 f0       	brcs	.+40     	; 0x1118 <matrix_scan+0x48>
            // reset other half if disconnected
            int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
    10f0:	80 91 01 01 	lds	r24, 0x0101
    10f4:	88 23       	and	r24, r24
    10f6:	19 f0       	breq	.+6      	; 0x10fe <matrix_scan+0x2e>
    10f8:	e5 e0       	ldi	r30, 0x05	; 5
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <matrix_scan+0x32>
    10fe:	e0 e0       	ldi	r30, 0x00	; 0
    1100:	f0 e0       	ldi	r31, 0x00	; 0
            for (int i = 0; i < ROWS_PER_HAND; ++i) {
                matrix[slaveOffset+i] = 0;
    1102:	e4 5b       	subi	r30, 0xB4	; 180
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	10 82       	st	Z, r1
    1108:	11 82       	std	Z+1, r1	; 0x01
    110a:	12 82       	std	Z+2, r1	; 0x02
    110c:	13 82       	std	Z+3, r1	; 0x03
    110e:	14 82       	std	Z+4, r1	; 0x04
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <matrix_scan+0x48>
            }
        }
    } else {
        // turn off the indicator led on no error
        TXLED0;
    1112:	5d 9a       	sbi	0x0b, 5	; 11
        error_count = 0;
    1114:	10 92 60 01 	sts	0x0160, r1
    }

    return ret;
}
    1118:	8c 2f       	mov	r24, r28
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <matrix_slave_scan>:

void matrix_slave_scan(void) {
    _matrix_scan();
    111e:	0e 94 97 07 	call	0xf2e	; 0xf2e <_matrix_scan>

    int offset = (isLeftHand) ? 0 : (MATRIX_ROWS / 2);
    1122:	80 91 01 01 	lds	r24, 0x0101
    1126:	88 23       	and	r24, r24
    1128:	19 f0       	breq	.+6      	; 0x1130 <matrix_slave_scan+0x12>
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <matrix_slave_scan+0x16>
    1130:	25 e0       	ldi	r18, 0x05	; 5
    1132:	30 e0       	ldi	r19, 0x00	; 0
        RXLED0;
    }
#endif

#else
    for (int i = 0; i < ROWS_PER_HAND; ++i) {
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    }

    return ret;
}

void matrix_slave_scan(void) {
    1138:	24 5b       	subi	r18, 0xB4	; 180
    113a:	3e 4f       	sbci	r19, 0xFE	; 254
    113c:	f9 01       	movw	r30, r18
    113e:	e8 0f       	add	r30, r24
    1140:	f9 1f       	adc	r31, r25
    }
#endif

#else
    for (int i = 0; i < ROWS_PER_HAND; ++i) {
        serial_slave_buffer[i] = matrix[offset+i];
    1142:	40 81       	ld	r20, Z
    1144:	fc 01       	movw	r30, r24
    1146:	eb 55       	subi	r30, 0x5B	; 91
    1148:	fe 4f       	sbci	r31, 0xFE	; 254
    114a:	40 83       	st	Z, r20
        RXLED0;
    }
#endif

#else
    for (int i = 0; i < ROWS_PER_HAND; ++i) {
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	85 30       	cpi	r24, 0x05	; 5
    1150:	91 05       	cpc	r25, r1
    1152:	a1 f7       	brne	.-24     	; 0x113c <matrix_slave_scan+0x1e>
        serial_slave_buffer[i] = matrix[offset+i];
    }
#endif

}
    1154:	08 95       	ret

00001156 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1156:	ec e4       	ldi	r30, 0x4C	; 76
    1158:	f1 e0       	ldi	r31, 0x01	; 1
    115a:	e8 0f       	add	r30, r24
    115c:	f1 1d       	adc	r31, r1
}
    115e:	80 81       	ld	r24, Z
    1160:	08 95       	ret

00001162 <matrix_print>:

void matrix_print(void)
{
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    1172:	84 e2       	ldi	r24, 0x24	; 36
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    117a:	0c e4       	ldi	r16, 0x4C	; 76
    117c:	11 e0       	ldi	r17, 0x01	; 1
    117e:	c0 e0       	ldi	r28, 0x00	; 0
    1180:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1182:	3b e3       	ldi	r19, 0x3B	; 59
    1184:	e3 2e       	mov	r14, r19
    1186:	31 e0       	ldi	r19, 0x01	; 1
    1188:	f3 2e       	mov	r15, r19
        pbin_reverse16(matrix_get_row(row));
    118a:	43 e4       	ldi	r20, 0x43	; 67
    118c:	c4 2e       	mov	r12, r20
    118e:	41 e0       	ldi	r20, 0x01	; 1
    1190:	d4 2e       	mov	r13, r20

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1192:	00 d0       	rcall	.+0      	; 0x1194 <matrix_print+0x32>
    1194:	00 d0       	rcall	.+0      	; 0x1196 <matrix_print+0x34>
    1196:	ed b7       	in	r30, 0x3d	; 61
    1198:	fe b7       	in	r31, 0x3e	; 62
    119a:	f2 82       	std	Z+2, r15	; 0x02
    119c:	e1 82       	std	Z+1, r14	; 0x01
    119e:	d4 83       	std	Z+4, r29	; 0x04
    11a0:	c3 83       	std	Z+3, r28	; 0x03
    11a2:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	80 e4       	ldi	r24, 0x40	; 64
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
        pbin_reverse16(matrix_get_row(row));
    11b6:	f8 01       	movw	r30, r16
    11b8:	81 91       	ld	r24, Z+
    11ba:	8f 01       	movw	r16, r30
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <bitrev16>
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <matrix_print+0x62>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <matrix_print+0x64>
    11c6:	ed b7       	in	r30, 0x3d	; 61
    11c8:	fe b7       	in	r31, 0x3e	; 62
    11ca:	d2 82       	std	Z+2, r13	; 0x02
    11cc:	c1 82       	std	Z+1, r12	; 0x01
    11ce:	94 83       	std	Z+4, r25	; 0x04
    11d0:	83 83       	std	Z+3, r24	; 0x03
    11d2:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
        print("\n");
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	89 e4       	ldi	r24, 0x49	; 73
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    11e6:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    11e8:	ca 30       	cpi	r28, 0x0A	; 10
    11ea:	d1 05       	cpc	r29, r1
    11ec:	91 f6       	brne	.-92     	; 0x1192 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	df 90       	pop	r13
    11fc:	cf 90       	pop	r12
    11fe:	08 95       	ret

00001200 <__vector_36>:
  TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
}

ISR(TWI_vect);

ISR(TWI_vect) {
    1200:	1f 92       	push	r1
    1202:	0f 92       	push	r0
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	0f 92       	push	r0
    1208:	11 24       	eor	r1, r1
    120a:	8f 93       	push	r24
    120c:	9f 93       	push	r25
    120e:	ef 93       	push	r30
    1210:	ff 93       	push	r31
  uint8_t ack = 1;
  switch(TW_STATUS) {
    1212:	80 91 b9 00 	lds	r24, 0x00B9
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	88 7f       	andi	r24, 0xF8	; 248
    121a:	90 70       	andi	r25, 0x00	; 0
    121c:	80 38       	cpi	r24, 0x80	; 128
    121e:	91 05       	cpc	r25, r1
    1220:	99 f0       	breq	.+38     	; 0x1248 <__vector_36+0x48>
    1222:	81 38       	cpi	r24, 0x81	; 129
    1224:	91 05       	cpc	r25, r1
    1226:	34 f4       	brge	.+12     	; 0x1234 <__vector_36+0x34>
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	e9 f1       	breq	.+122    	; 0x12a6 <__vector_36+0xa6>
    122c:	80 36       	cpi	r24, 0x60	; 96
    122e:	91 05       	cpc	r25, r1
    1230:	e1 f5       	brne	.+120    	; 0x12aa <__vector_36+0xaa>
    1232:	07 c0       	rjmp	.+14     	; 0x1242 <__vector_36+0x42>
    1234:	88 3a       	cpi	r24, 0xA8	; 168
    1236:	91 05       	cpc	r25, r1
    1238:	29 f1       	breq	.+74     	; 0x1284 <__vector_36+0x84>
    123a:	88 3b       	cpi	r24, 0xB8	; 184
    123c:	91 05       	cpc	r25, r1
    123e:	a9 f5       	brne	.+106    	; 0x12aa <__vector_36+0xaa>
    1240:	21 c0       	rjmp	.+66     	; 0x1284 <__vector_36+0x84>
    case TW_SR_SLA_ACK:
      // this device has been addressed as a slave receiver
      slave_has_register_set = false;
    1242:	10 92 61 01 	sts	0x0161, r1
    1246:	31 c0       	rjmp	.+98     	; 0x12aa <__vector_36+0xaa>
      // this device has received data as a slave receiver
      // The first byte that we receive in this transaction sets the location
      // of the read/write location of the slaves memory that it exposes over
      // i2c.  After that, bytes will be written at slave_buffer_pos, incrementing
      // slave_buffer_pos after each write.
      if(!slave_has_register_set) {
    1248:	80 91 61 01 	lds	r24, 0x0161
    124c:	88 23       	and	r24, r24
    124e:	89 f4       	brne	.+34     	; 0x1272 <__vector_36+0x72>
        slave_buffer_pos = TWDR;
    1250:	80 91 bb 00 	lds	r24, 0x00BB
    1254:	80 93 62 01 	sts	0x0162, r24
        // don't acknowledge the master if this memory loctaion is out of bounds
        if ( slave_buffer_pos >= SLAVE_BUFFER_SIZE ) {
    1258:	80 91 62 01 	lds	r24, 0x0162
    125c:	80 34       	cpi	r24, 0x40	; 64
    125e:	20 f0       	brcs	.+8      	; 0x1268 <__vector_36+0x68>
          ack = 0;
          slave_buffer_pos = 0;
    1260:	10 92 62 01 	sts	0x0162, r1
      // slave_buffer_pos after each write.
      if(!slave_has_register_set) {
        slave_buffer_pos = TWDR;
        // don't acknowledge the master if this memory loctaion is out of bounds
        if ( slave_buffer_pos >= SLAVE_BUFFER_SIZE ) {
          ack = 0;
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	01 c0       	rjmp	.+2      	; 0x126a <__vector_36+0x6a>
}

ISR(TWI_vect);

ISR(TWI_vect) {
  uint8_t ack = 1;
    1268:	81 e0       	ldi	r24, 0x01	; 1
        // don't acknowledge the master if this memory loctaion is out of bounds
        if ( slave_buffer_pos >= SLAVE_BUFFER_SIZE ) {
          ack = 0;
          slave_buffer_pos = 0;
        }
        slave_has_register_set = true;
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	90 93 61 01 	sts	0x0161, r25
    1270:	1d c0       	rjmp	.+58     	; 0x12ac <__vector_36+0xac>
      } else {
        i2c_slave_buffer[slave_buffer_pos] = TWDR;
    1272:	e0 91 62 01 	lds	r30, 0x0162
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 91 bb 00 	lds	r24, 0x00BB
    127c:	ed 59       	subi	r30, 0x9D	; 157
    127e:	fe 4f       	sbci	r31, 0xFE	; 254
    1280:	80 83       	st	Z, r24
    1282:	08 c0       	rjmp	.+16     	; 0x1294 <__vector_36+0x94>

    case TW_ST_SLA_ACK:
    case TW_ST_DATA_ACK:
      // master has addressed this device as a slave transmitter and is
      // requesting data.
      TWDR = i2c_slave_buffer[slave_buffer_pos];
    1284:	e0 91 62 01 	lds	r30, 0x0162
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	ed 59       	subi	r30, 0x9D	; 157
    128c:	fe 4f       	sbci	r31, 0xFE	; 254
    128e:	80 81       	ld	r24, Z
    1290:	80 93 bb 00 	sts	0x00BB, r24
      BUFFER_POS_INC();
    1294:	80 91 62 01 	lds	r24, 0x0162
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	8f 73       	andi	r24, 0x3F	; 63
    129e:	90 70       	andi	r25, 0x00	; 0
    12a0:	80 93 62 01 	sts	0x0162, r24
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <__vector_36+0xaa>
      break;

    case TW_BUS_ERROR: // something went wrong, reset twi state
      TWCR = 0;
    12a6:	10 92 bc 00 	sts	0x00BC, r1
}

ISR(TWI_vect);

ISR(TWI_vect) {
  uint8_t ack = 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
      TWCR = 0;
    default:
      break;
  }
  // Reset everything, so we are ready for the next TWI interrupt
  TWCR |= (1<<TWIE) | (1<<TWINT) | (ack<<TWEA) | (1<<TWEN);
    12ac:	90 91 bc 00 	lds	r25, 0x00BC
    12b0:	95 68       	ori	r25, 0x85	; 133
    12b2:	82 95       	swap	r24
    12b4:	88 0f       	add	r24, r24
    12b6:	88 0f       	add	r24, r24
    12b8:	80 7c       	andi	r24, 0xC0	; 192
    12ba:	89 2b       	or	r24, r25
    12bc:	80 93 bc 00 	sts	0x00BC, r24
}
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <serial_output>:
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
    12d2:	50 9a       	sbi	0x0a, 0	; 10
}
    12d4:	08 95       	ret

000012d6 <serial_input>:

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
    12d6:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
    12d8:	58 9a       	sbi	0x0b, 0	; 11
}
    12da:	08 95       	ret

000012dc <serial_high>:
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
    12dc:	58 9a       	sbi	0x0b, 0	; 11
}
    12de:	08 95       	ret

000012e0 <sync_recv>:
}

// Used by the master to synchronize timing with the slave.
static
void sync_recv(void) {
  serial_input();
    12e0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <serial_input>
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
}

inline static
uint8_t serial_read_pin(void) {
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
    12e4:	89 b1       	in	r24, 0x09	; 9
static
void sync_recv(void) {
  serial_input();
  // This shouldn't hang if the slave disconnects because the
  // serial line will float to high if the slave does disconnect.
  while (!serial_read_pin());
    12e6:	80 ff       	sbrs	r24, 0
    12e8:	fd cf       	rjmp	.-6      	; 0x12e4 <sync_recv+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ea:	80 e8       	ldi	r24, 0x80	; 128
    12ec:	8a 95       	dec	r24
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <sync_recv+0xc>
  serial_delay();
}
    12f0:	08 95       	ret

000012f2 <sync_send>:

// Used by the slave to send a synchronization signal to the master.
static
void sync_send(void) {
  serial_output();
    12f2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <serial_output>
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
    12f6:	58 98       	cbi	0x0b, 0	; 11
    12f8:	80 e8       	ldi	r24, 0x80	; 128
    12fa:	8a 95       	dec	r24
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <sync_send+0x8>
  serial_output();

  serial_low();
  serial_delay();

  serial_high();
    12fe:	0e 94 6e 09 	call	0x12dc	; 0x12dc <serial_high>
}
    1302:	08 95       	ret

00001304 <serial_read_byte>:

// Reads a byte from the serial line
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
    1304:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <serial_input>
    1308:	98 e0       	ldi	r25, 0x08	; 8
}

// Reads a byte from the serial line
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
    130a:	80 e0       	ldi	r24, 0x00	; 0
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
}

inline static
uint8_t serial_read_pin(void) {
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
    130c:	29 b1       	in	r18, 0x09	; 9
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
  for ( uint8_t i = 0; i < 8; ++i) {
    byte = (byte << 1) | serial_read_pin();
    130e:	88 0f       	add	r24, r24
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
}

inline static
uint8_t serial_read_pin(void) {
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
    1310:	21 70       	andi	r18, 0x01	; 1
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
  for ( uint8_t i = 0; i < 8; ++i) {
    byte = (byte << 1) | serial_read_pin();
    1312:	82 2b       	or	r24, r18
    1314:	20 e8       	ldi	r18, 0x80	; 128
    1316:	2a 95       	dec	r18
    1318:	f1 f7       	brne	.-4      	; 0x1316 <serial_read_byte+0x12>
    131a:	25 e0       	ldi	r18, 0x05	; 5
    131c:	2a 95       	dec	r18
    131e:	f1 f7       	brne	.-4      	; 0x131c <serial_read_byte+0x18>
    1320:	00 00       	nop
    1322:	91 50       	subi	r25, 0x01	; 1
// Reads a byte from the serial line
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
  for ( uint8_t i = 0; i < 8; ++i) {
    1324:	99 f7       	brne	.-26     	; 0x130c <serial_read_byte+0x8>
    serial_delay();
    _delay_us(1);
  }

  return byte;
}
    1326:	08 95       	ret

00001328 <serial_write_byte>:

// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	c8 2f       	mov	r28, r24
  uint8_t b = 8;
  serial_output();
    1330:	0e 94 69 09 	call	0x12d2	; 0x12d2 <serial_output>
}

// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
    1334:	18 e0       	ldi	r17, 0x08	; 8
  serial_output();
  while( b-- ) {
    if(data & (1 << b)) {
    1336:	d0 e0       	ldi	r29, 0x00	; 0
// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
  serial_output();
  while( b-- ) {
    1338:	11 50       	subi	r17, 0x01	; 1
    if(data & (1 << b)) {
    133a:	ce 01       	movw	r24, r28
    133c:	01 2e       	mov	r0, r17
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <serial_write_byte+0x1c>
    1340:	95 95       	asr	r25
    1342:	87 95       	ror	r24
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <serial_write_byte+0x18>
    1348:	80 ff       	sbrs	r24, 0
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <serial_write_byte+0x2a>
      serial_high();
    134c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <serial_high>
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <serial_write_byte+0x2c>
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
    1352:	58 98       	cbi	0x0b, 0	; 11
    1354:	80 e8       	ldi	r24, 0x80	; 128
    1356:	8a 95       	dec	r24
    1358:	f1 f7       	brne	.-4      	; 0x1356 <serial_write_byte+0x2e>
// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
  serial_output();
  while( b-- ) {
    135a:	11 23       	and	r17, r17
    135c:	69 f7       	brne	.-38     	; 0x1338 <serial_write_byte+0x10>
    } else {
      serial_low();
    }
    serial_delay();
  }
}
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	08 95       	ret

00001366 <serial_master_init>:
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
}

void serial_master_init(void) {
  serial_output();
    1366:	0e 94 69 09 	call	0x12d2	; 0x12d2 <serial_output>
  serial_high();
    136a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <serial_high>
}
    136e:	08 95       	ret

00001370 <serial_slave_init>:

void serial_slave_init(void) {
  serial_input();
    1370:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <serial_input>

  // Enable INT0
  EIMSK |= _BV(INT0);
    1374:	e8 9a       	sbi	0x1d, 0	; 29
  // Trigger on falling edge of INT0
  EICRA &= ~(_BV(ISC00) | _BV(ISC01));
    1376:	e9 e6       	ldi	r30, 0x69	; 105
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8c 7f       	andi	r24, 0xFC	; 252
    137e:	80 83       	st	Z, r24
}
    1380:	08 95       	ret

00001382 <__vector_1>:
    serial_delay();
  }
}

// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
    1382:	1f 92       	push	r1
    1384:	0f 92       	push	r0
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	0f 92       	push	r0
    138a:	11 24       	eor	r1, r1
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ff 92       	push	r15
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
    1396:	2f 93       	push	r18
    1398:	3f 93       	push	r19
    139a:	4f 93       	push	r20
    139c:	5f 93       	push	r21
    139e:	6f 93       	push	r22
    13a0:	7f 93       	push	r23
    13a2:	8f 93       	push	r24
    13a4:	9f 93       	push	r25
    13a6:	af 93       	push	r26
    13a8:	bf 93       	push	r27
    13aa:	ef 93       	push	r30
    13ac:	ff 93       	push	r31
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	0f 92       	push	r0
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
  sync_send();
    13b8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <sync_send>

  uint8_t checksum = 0;
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    13bc:	00 e0       	ldi	r16, 0x00	; 0
    13be:	10 e0       	ldi	r17, 0x00	; 0

// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
  sync_send();

  uint8_t checksum = 0;
    13c0:	ff 24       	eor	r15, r15
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_slave_buffer[i]);
    13c2:	85 ea       	ldi	r24, 0xA5	; 165
    13c4:	c8 2e       	mov	r12, r24
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	d8 2e       	mov	r13, r24
    13ca:	c0 0e       	add	r12, r16
    13cc:	d1 1e       	adc	r13, r17
    13ce:	f6 01       	movw	r30, r12
    13d0:	80 81       	ld	r24, Z
    13d2:	0e 94 94 09 	call	0x1328	; 0x1328 <serial_write_byte>
    sync_send();
    13d6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <sync_send>
    checksum += serial_slave_buffer[i];
    13da:	f6 01       	movw	r30, r12
    13dc:	80 81       	ld	r24, Z
    13de:	f8 0e       	add	r15, r24
// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
  sync_send();

  uint8_t checksum = 0;
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    13e0:	0f 5f       	subi	r16, 0xFF	; 255
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	05 30       	cpi	r16, 0x05	; 5
    13e6:	11 05       	cpc	r17, r1
    13e8:	61 f7       	brne	.-40     	; 0x13c2 <__vector_1+0x40>
    serial_write_byte(serial_slave_buffer[i]);
    sync_send();
    checksum += serial_slave_buffer[i];
  }
  serial_write_byte(checksum);
    13ea:	8f 2d       	mov	r24, r15
    13ec:	0e 94 94 09 	call	0x1328	; 0x1328 <serial_write_byte>
  sync_send();
    13f0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <sync_send>
    13f4:	f0 e8       	ldi	r31, 0x80	; 128
    13f6:	fa 95       	dec	r31
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <__vector_1+0x74>
    13fa:	80 e4       	ldi	r24, 0x40	; 64
    13fc:	8a 95       	dec	r24
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <__vector_1+0x7a>
  // read the middle of pulses
  _delay_us(SERIAL_DELAY/2);

  uint8_t checksum_computed = 0;
  for (int i = 0; i < SERIAL_MASTER_BUFFER_LENGTH; ++i) {
    serial_master_buffer[i] = serial_read_byte();
    1400:	0e 94 82 09 	call	0x1304	; 0x1304 <serial_read_byte>
    1404:	80 93 a4 01 	sts	0x01A4, r24
    sync_send();
    1408:	0e 94 79 09 	call	0x12f2	; 0x12f2 <sync_send>
    checksum_computed += serial_master_buffer[i];
    140c:	00 91 a4 01 	lds	r16, 0x01A4
  }
  uint8_t checksum_received = serial_read_byte();
    1410:	0e 94 82 09 	call	0x1304	; 0x1304 <serial_read_byte>
  sync_send();
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	0e 94 79 09 	call	0x12f2	; 0x12f2 <sync_send>

  serial_input(); // end transaction
    141a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <serial_input>

  if ( checksum_computed != checksum_received ) {
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	08 17       	cp	r16, r24
    1422:	21 f0       	breq	.+8      	; 0x142c <__vector_1+0xaa>
    status |= SLAVE_DATA_CORRUPT;
    1424:	80 91 a3 01 	lds	r24, 0x01A3
    1428:	81 60       	ori	r24, 0x01	; 1
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <__vector_1+0xb0>
  } else {
    status &= ~SLAVE_DATA_CORRUPT;
    142c:	80 91 a3 01 	lds	r24, 0x01A3
    1430:	8e 7f       	andi	r24, 0xFE	; 254
    1432:	80 93 a3 01 	sts	0x01A3, r24
  }
}
    1436:	0f 90       	pop	r0
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	ff 91       	pop	r31
    143e:	ef 91       	pop	r30
    1440:	bf 91       	pop	r27
    1442:	af 91       	pop	r26
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	7f 91       	pop	r23
    144a:	6f 91       	pop	r22
    144c:	5f 91       	pop	r21
    144e:	4f 91       	pop	r20
    1450:	3f 91       	pop	r19
    1452:	2f 91       	pop	r18
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	0f 90       	pop	r0
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	0f 90       	pop	r0
    1464:	1f 90       	pop	r1
    1466:	18 95       	reti

00001468 <serial_update_buffers>:
// serial_master_buffer to the slave.
//
// Returns:
// 0 => no error
// 1 => slave did not respond
int serial_update_buffers(void) {
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ff 92       	push	r15
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	0f 92       	push	r0
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
  // this code is very time dependent, so we need to disable interrupts
  cli();
    147c:	f8 94       	cli

  // signal to the slave that we want to start a transaction
  serial_output();
    147e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <serial_output>
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
    1482:	58 98       	cbi	0x0b, 0	; 11
    1484:	85 e0       	ldi	r24, 0x05	; 5
    1486:	8a 95       	dec	r24
    1488:	f1 f7       	brne	.-4      	; 0x1486 <serial_update_buffers+0x1e>
    148a:	00 00       	nop
  serial_output();
  serial_low();
  _delay_us(1);

  // wait for the slaves response
  serial_input();
    148c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <serial_input>
  serial_high();
    1490:	0e 94 6e 09 	call	0x12dc	; 0x12dc <serial_high>
    1494:	e0 e8       	ldi	r30, 0x80	; 128
    1496:	ea 95       	dec	r30
    1498:	f1 f7       	brne	.-4      	; 0x1496 <serial_update_buffers+0x2e>
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
}

inline static
uint8_t serial_read_pin(void) {
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
    149a:	89 b1       	in	r24, 0x09	; 9
  serial_input();
  serial_high();
  _delay_us(SERIAL_DELAY);

  // check if the slave is present
  if (serial_read_pin()) {
    149c:	80 fd       	sbrc	r24, 0
    149e:	34 c0       	rjmp	.+104    	; 0x1508 <serial_update_buffers+0xa0>
    sei();
    return 1;
  }

  // if the slave is present syncronize with it
  sync_recv();
    14a0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <sync_recv>

  uint8_t checksum_computed = 0;
  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    14a4:	cc 24       	eor	r12, r12
    14a6:	dd 24       	eor	r13, r13
  }

  // if the slave is present syncronize with it
  sync_recv();

  uint8_t checksum_computed = 0;
    14a8:	ff 24       	eor	r15, r15
  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_slave_buffer[i] = serial_read_byte();
    14aa:	0e 94 82 09 	call	0x1304	; 0x1304 <serial_read_byte>
    14ae:	86 01       	movw	r16, r12
    14b0:	0b 55       	subi	r16, 0x5B	; 91
    14b2:	1e 4f       	sbci	r17, 0xFE	; 254
    14b4:	f8 01       	movw	r30, r16
    14b6:	80 83       	st	Z, r24
    sync_recv();
    14b8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <sync_recv>
    checksum_computed += serial_slave_buffer[i];
    14bc:	f8 01       	movw	r30, r16
    14be:	80 81       	ld	r24, Z
    14c0:	f8 0e       	add	r15, r24
  // if the slave is present syncronize with it
  sync_recv();

  uint8_t checksum_computed = 0;
  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    14c2:	08 94       	sec
    14c4:	c1 1c       	adc	r12, r1
    14c6:	d1 1c       	adc	r13, r1
    14c8:	f5 e0       	ldi	r31, 0x05	; 5
    14ca:	cf 16       	cp	r12, r31
    14cc:	d1 04       	cpc	r13, r1
    14ce:	69 f7       	brne	.-38     	; 0x14aa <serial_update_buffers+0x42>
    serial_slave_buffer[i] = serial_read_byte();
    sync_recv();
    checksum_computed += serial_slave_buffer[i];
  }
  uint8_t checksum_received = serial_read_byte();
    14d0:	0e 94 82 09 	call	0x1304	; 0x1304 <serial_read_byte>
  sync_recv();
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	0e 94 70 09 	call	0x12e0	; 0x12e0 <sync_recv>

  if (checksum_computed != checksum_received) {
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	f8 16       	cp	r15, r24
    14de:	a1 f4       	brne	.+40     	; 0x1508 <serial_update_buffers+0xa0>
  }

  uint8_t checksum = 0;
  // send data to the slave
  for (int i = 0; i < SERIAL_MASTER_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_master_buffer[i]);
    14e0:	80 91 a4 01 	lds	r24, 0x01A4
    14e4:	0e 94 94 09 	call	0x1328	; 0x1328 <serial_write_byte>
    sync_recv();
    14e8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <sync_recv>
    checksum += serial_master_buffer[i];
    14ec:	80 91 a4 01 	lds	r24, 0x01A4
  }
  serial_write_byte(checksum);
    14f0:	0e 94 94 09 	call	0x1328	; 0x1328 <serial_write_byte>
  sync_recv();
    14f4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <sync_recv>

  // always, release the line when not in use
  serial_output();
    14f8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <serial_output>
  serial_high();
    14fc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <serial_high>

  sei();
    1500:	78 94       	sei
  return 0;
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	03 c0       	rjmp	.+6      	; 0x150e <serial_update_buffers+0xa6>
  }
  uint8_t checksum_received = serial_read_byte();
  sync_recv();

  if (checksum_computed != checksum_received) {
    sei();
    1508:	78 94       	sei
    return 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
  serial_output();
  serial_high();

  sei();
  return 0;
}
    150e:	0f 90       	pop	r0
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	df 90       	pop	r13
    151c:	cf 90       	pop	r12
    151e:	08 95       	ret

00001520 <has_usb>:
    serial_slave_init();
#endif
}

bool has_usb(void) {
   USBCON |= (1 << OTGPADE); //enables VBUS pad
    1520:	e8 ed       	ldi	r30, 0xD8	; 216
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	80 61       	ori	r24, 0x10	; 16
    1528:	80 83       	st	Z, r24
    152a:	8a e1       	ldi	r24, 0x1A	; 26
    152c:	8a 95       	dec	r24
    152e:	f1 f7       	brne	.-4      	; 0x152c <has_usb+0xc>
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <has_usb+0x12>
   _delay_us(5);
   return (USBSTA & (1<<VBUS));  //checks state of VBUS
    1532:	80 91 d9 00 	lds	r24, 0x00D9
}
    1536:	81 70       	andi	r24, 0x01	; 1
    1538:	08 95       	ret

0000153a <split_keyboard_setup>:
#include "config.h"

volatile bool isLeftHand = true;

static void setup_handedness(void) {
    isLeftHand = eeprom_read_byte(EECONFIG_HANDEDNESS);
    153a:	87 e0       	ldi	r24, 0x07	; 7
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <__eerd_byte_m32u4>
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	88 23       	and	r24, r24
    1546:	09 f4       	brne	.+2      	; 0x154a <split_keyboard_setup+0x10>
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	90 93 01 01 	sts	0x0101, r25
}

void split_keyboard_setup(void) {
   setup_handedness();

   if (has_usb()) {
    154e:	0e 94 90 0a 	call	0x1520	; 0x1520 <has_usb>
    1552:	88 23       	and	r24, r24
    1554:	19 f0       	breq	.+6      	; 0x155c <split_keyboard_setup+0x22>

static void keyboard_master_setup(void) {
#ifdef USE_I2C
    i2c_master_init();
#else
    serial_master_init();
    1556:	0e 94 b3 09 	call	0x1366	; 0x1366 <serial_master_init>
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <split_keyboard_setup+0x26>

static void keyboard_slave_setup(void) {
#ifdef USE_I2C
    i2c_slave_init(SLAVE_I2C_ADDRESS);
#else
    serial_slave_init();
    155c:	0e 94 b8 09 	call	0x1370	; 0x1370 <serial_slave_init>
   if (has_usb()) {
      keyboard_master_setup();
   } else {
      keyboard_slave_setup();
   }
   sei();
    1560:	78 94       	sei
}
    1562:	08 95       	ret

00001564 <keyboard_slave_loop>:

void keyboard_slave_loop(void) {
   matrix_init();
    1564:	0e 94 60 07 	call	0xec0	; 0xec0 <matrix_init>

   while (1) {
      matrix_slave_scan();
    1568:	0e 94 8f 08 	call	0x111e	; 0x111e <matrix_slave_scan>
    156c:	fd cf       	rjmp	.-6      	; 0x1568 <keyboard_slave_loop+0x4>

0000156e <matrix_setup>:
   }
}

// this code runs before the usb and keyboard is initialized
void matrix_setup(void) {
    split_keyboard_setup();
    156e:	0e 94 9d 0a 	call	0x153a	; 0x153a <split_keyboard_setup>

    if (!has_usb()) {
    1572:	0e 94 90 0a 	call	0x1520	; 0x1520 <has_usb>
    1576:	88 23       	and	r24, r24
    1578:	11 f4       	brne	.+4      	; 0x157e <matrix_setup+0x10>
        keyboard_slave_loop();
    157a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <keyboard_slave_loop>
    157e:	08 95       	ret

00001580 <led_set>:
#include "stdint.h"
#include "led.h"

void led_set(uint8_t usb_led)
{
}
    1580:	08 95       	ret

00001582 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1582:	80 91 bb 01 	lds	r24, 0x01BB
    1586:	08 95       	ret

00001588 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1588:	9f b7       	in	r25, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	10 92 bd 01 	sts	0x01BD, r1
    1590:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1592:	90 91 3c 02 	lds	r25, 0x023C
    1596:	94 30       	cpi	r25, 0x04	; 4
    1598:	09 f0       	breq	.+2      	; 0x159c <sendchar+0x14>
    159a:	5a c0       	rjmp	.+180    	; 0x1650 <sendchar+0xc8>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    159c:	90 91 e9 00 	lds	r25, 0x00E9
    15a0:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    15a2:	20 91 ec 00 	lds	r18, 0x00EC
    15a6:	20 ff       	sbrs	r18, 0
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <sendchar+0x26>
    15aa:	20 e8       	ldi	r18, 0x80	; 128
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <sendchar+0x28>
    15ae:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    15b0:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15b2:	94 e0       	ldi	r25, 0x04	; 4
    15b4:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    15b8:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    15bc:	90 ff       	sbrs	r25, 0
    15be:	43 c0       	rjmp	.+134    	; 0x1646 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    15c0:	90 91 ee 00 	lds	r25, 0x00EE
    15c4:	97 ff       	sbrs	r25, 7
    15c6:	3f c0       	rjmp	.+126    	; 0x1646 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    15c8:	90 91 be 01 	lds	r25, 0x01BE
    15cc:	99 23       	and	r25, r25
    15ce:	21 f0       	breq	.+8      	; 0x15d8 <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15d0:	90 91 e8 00 	lds	r25, 0x00E8
    15d4:	95 ff       	sbrs	r25, 5
    15d6:	37 c0       	rjmp	.+110    	; 0x1646 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    15d8:	10 92 be 01 	sts	0x01BE, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    15dc:	96 e0       	ldi	r25, 0x06	; 6
    15de:	14 c0       	rjmp	.+40     	; 0x1608 <sendchar+0x80>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    15e0:	30 91 3c 02 	lds	r19, 0x023C
    15e4:	34 30       	cpi	r19, 0x04	; 4
    15e6:	79 f5       	brne	.+94     	; 0x1646 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    15e8:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    15ec:	35 fd       	sbrc	r19, 5
    15ee:	2b c0       	rjmp	.+86     	; 0x1646 <sendchar+0xbe>
    15f0:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    15f2:	21 f4       	brne	.+8      	; 0x15fc <sendchar+0x74>
            timeouted = true;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 93 be 01 	sts	0x01BE, r24
            goto ERROR_EXIT;
    15fa:	25 c0       	rjmp	.+74     	; 0x1646 <sendchar+0xbe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15fc:	ef e9       	ldi	r30, 0x9F	; 159
    15fe:	ff e0       	ldi	r31, 0x0F	; 15
    1600:	31 97       	sbiw	r30, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <sendchar+0x78>
    1604:	00 c0       	rjmp	.+0      	; 0x1606 <sendchar+0x7e>
    1606:	00 00       	nop
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1608:	30 91 e8 00 	lds	r19, 0x00E8
    }

    timeouted = false;

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    160c:	35 ff       	sbrs	r19, 5
    160e:	e8 cf       	rjmp	.-48     	; 0x15e0 <sendchar+0x58>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1610:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1614:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    1618:	85 fd       	sbrc	r24, 5
    161a:	0a c0       	rjmp	.+20     	; 0x1630 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    161c:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1620:	80 ff       	sbrs	r24, 0
    1622:	fc cf       	rjmp	.-8      	; 0x161c <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1624:	80 91 e8 00 	lds	r24, 0x00E8
    1628:	8e 77       	andi	r24, 0x7E	; 126
    162a:	80 93 e8 00 	sts	0x00E8, r24
    162e:	06 c0       	rjmp	.+12     	; 0x163c <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1630:	8f b7       	in	r24, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	90 93 bd 01 	sts	0x01BD, r25
    163a:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    163c:	2f 70       	andi	r18, 0x0F	; 15
    163e:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	08 95       	ret
    1646:	2f 70       	andi	r18, 0x0F	; 15
    1648:	20 93 e9 00 	sts	0x00E9, r18
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	08 95       	ret
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1652:	08 95       	ret

00001654 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	00 d0       	rcall	.+0      	; 0x165a <send_consumer+0x6>
    165a:	0f 92       	push	r0
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1660:	20 91 3c 02 	lds	r18, 0x023C
    1664:	24 30       	cpi	r18, 0x04	; 4
    1666:	21 f5       	brne	.+72     	; 0x16b0 <send_consumer+0x5c>
        return;

    report_extra_t r = {
    1668:	23 e0       	ldi	r18, 0x03	; 3
    166a:	29 83       	std	Y+1, r18	; 0x01
    166c:	9b 83       	std	Y+3, r25	; 0x03
    166e:	8a 83       	std	Y+2, r24	; 0x02
    1670:	20 93 e9 00 	sts	0x00E9, r18
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <send_consumer+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1678:	95 ed       	ldi	r25, 0xD5	; 213
    167a:	9a 95       	dec	r25
    167c:	f1 f7       	brne	.-4      	; 0x167a <send_consumer+0x26>
    167e:	00 00       	nop
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1680:	88 23       	and	r24, r24
    1682:	29 f0       	breq	.+10     	; 0x168e <send_consumer+0x3a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1684:	90 91 e8 00 	lds	r25, 0x00E8
    1688:	81 50       	subi	r24, 0x01	; 1
    168a:	95 ff       	sbrs	r25, 5
    168c:	f5 cf       	rjmp	.-22     	; 0x1678 <send_consumer+0x24>
    168e:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1692:	85 ff       	sbrs	r24, 5
    1694:	0d c0       	rjmp	.+26     	; 0x16b0 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1696:	ce 01       	movw	r24, r28
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	63 e0       	ldi	r22, 0x03	; 3
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16a6:	80 91 e8 00 	lds	r24, 0x00E8
    16aa:	8e 77       	andi	r24, 0x7E	; 126
    16ac:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	08 95       	ret

000016bc <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <send_system+0x6>
    16c2:	0f 92       	push	r0
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    16c8:	20 91 3c 02 	lds	r18, 0x023C
    16cc:	24 30       	cpi	r18, 0x04	; 4
    16ce:	29 f5       	brne	.+74     	; 0x171a <send_system+0x5e>
        return;

    report_extra_t r = {
    16d0:	22 e0       	ldi	r18, 0x02	; 2
    16d2:	29 83       	std	Y+1, r18	; 0x01
    16d4:	9b 83       	std	Y+3, r25	; 0x03
    16d6:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16d8:	83 e0       	ldi	r24, 0x03	; 3
    16da:	80 93 e9 00 	sts	0x00E9, r24
    16de:	8f ef       	ldi	r24, 0xFF	; 255
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <send_system+0x32>
    16e2:	95 ed       	ldi	r25, 0xD5	; 213
    16e4:	9a 95       	dec	r25
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <send_system+0x28>
    16e8:	00 00       	nop
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    16ea:	88 23       	and	r24, r24
    16ec:	29 f0       	breq	.+10     	; 0x16f8 <send_system+0x3c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16ee:	90 91 e8 00 	lds	r25, 0x00E8
    16f2:	81 50       	subi	r24, 0x01	; 1
    16f4:	95 ff       	sbrs	r25, 5
    16f6:	f5 cf       	rjmp	.-22     	; 0x16e2 <send_system+0x26>
    16f8:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    16fc:	85 ff       	sbrs	r24, 5
    16fe:	0d c0       	rjmp	.+26     	; 0x171a <send_system+0x5e>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1700:	ce 01       	movw	r24, r28
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	63 e0       	ldi	r22, 0x03	; 3
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1710:	80 91 e8 00 	lds	r24, 0x00E8
    1714:	8e 77       	andi	r24, 0x7E	; 126
    1716:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	08 95       	ret

00001726 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1726:	20 91 3c 02 	lds	r18, 0x023C
    172a:	24 30       	cpi	r18, 0x04	; 4
    172c:	f9 f4       	brne	.+62     	; 0x176c <send_mouse+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    172e:	22 e0       	ldi	r18, 0x02	; 2
    1730:	20 93 e9 00 	sts	0x00E9, r18
    1734:	2f ef       	ldi	r18, 0xFF	; 255
    1736:	06 c0       	rjmp	.+12     	; 0x1744 <send_mouse+0x1e>
    1738:	35 ed       	ldi	r19, 0xD5	; 213
    173a:	3a 95       	dec	r19
    173c:	f1 f7       	brne	.-4      	; 0x173a <send_mouse+0x14>
    173e:	00 00       	nop

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1740:	22 23       	and	r18, r18
    1742:	29 f0       	breq	.+10     	; 0x174e <send_mouse+0x28>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1744:	30 91 e8 00 	lds	r19, 0x00E8
    1748:	21 50       	subi	r18, 0x01	; 1
    174a:	35 ff       	sbrs	r19, 5
    174c:	f5 cf       	rjmp	.-22     	; 0x1738 <send_mouse+0x12>
    174e:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1752:	25 ff       	sbrs	r18, 5
    1754:	0b c0       	rjmp	.+22     	; 0x176c <send_mouse+0x46>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1756:	65 e0       	ldi	r22, 0x05	; 5
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1762:	80 91 e8 00 	lds	r24, 0x00E8
    1766:	8e 77       	andi	r24, 0x7E	; 126
    1768:	80 93 e8 00 	sts	0x00E8, r24
    176c:	08 95       	ret

0000176e <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	d8 2f       	mov	r29, r24
    1774:	c9 2f       	mov	r28, r25
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1776:	80 91 3c 02 	lds	r24, 0x023C
    177a:	84 30       	cpi	r24, 0x04	; 4
    177c:	09 f0       	breq	.+2      	; 0x1780 <send_keyboard+0x12>
    177e:	4b c0       	rjmp	.+150    	; 0x1816 <send_keyboard+0xa8>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    1780:	80 91 0c 01 	lds	r24, 0x010C
    1784:	88 23       	and	r24, r24
    1786:	e9 f0       	breq	.+58     	; 0x17c2 <send_keyboard+0x54>
    1788:	80 91 0d 01 	lds	r24, 0x010D
    178c:	88 23       	and	r24, r24
    178e:	c9 f0       	breq	.+50     	; 0x17c2 <send_keyboard+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1790:	85 e0       	ldi	r24, 0x05	; 5
    1792:	80 93 e9 00 	sts	0x00E9, r24
    1796:	8f ef       	ldi	r24, 0xFF	; 255
    1798:	06 c0       	rjmp	.+12     	; 0x17a6 <send_keyboard+0x38>
    179a:	95 e1       	ldi	r25, 0x15	; 21
    179c:	9a 95       	dec	r25
    179e:	f1 f7       	brne	.-4      	; 0x179c <send_keyboard+0x2e>
    17a0:	00 00       	nop
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    17a2:	88 23       	and	r24, r24
    17a4:	29 f0       	breq	.+10     	; 0x17b0 <send_keyboard+0x42>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17a6:	90 91 e8 00 	lds	r25, 0x00E8
    17aa:	81 50       	subi	r24, 0x01	; 1
    17ac:	95 ff       	sbrs	r25, 5
    17ae:	f5 cf       	rjmp	.-22     	; 0x179a <send_keyboard+0x2c>
    17b0:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    17b4:	85 ff       	sbrs	r24, 5
    17b6:	2f c0       	rjmp	.+94     	; 0x1816 <send_keyboard+0xa8>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    17b8:	8d 2f       	mov	r24, r29
    17ba:	9c 2f       	mov	r25, r28
    17bc:	60 e1       	ldi	r22, 0x10	; 16
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	18 c0       	rjmp	.+48     	; 0x17f2 <send_keyboard+0x84>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	80 93 e9 00 	sts	0x00E9, r24
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
    17ca:	06 c0       	rjmp	.+12     	; 0x17d8 <send_keyboard+0x6a>
    17cc:	95 ed       	ldi	r25, 0xD5	; 213
    17ce:	9a 95       	dec	r25
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <send_keyboard+0x60>
    17d2:	00 00       	nop
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    17d4:	88 23       	and	r24, r24
    17d6:	29 f0       	breq	.+10     	; 0x17e2 <send_keyboard+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17d8:	90 91 e8 00 	lds	r25, 0x00E8
    17dc:	81 50       	subi	r24, 0x01	; 1
    17de:	95 ff       	sbrs	r25, 5
    17e0:	f5 cf       	rjmp	.-22     	; 0x17cc <send_keyboard+0x5e>
    17e2:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    17e6:	85 ff       	sbrs	r24, 5
    17e8:	16 c0       	rjmp	.+44     	; 0x1816 <send_keyboard+0xa8>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    17ea:	8d 2f       	mov	r24, r29
    17ec:	9c 2f       	mov	r25, r28
    17ee:	68 e0       	ldi	r22, 0x08	; 8
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	40 e0       	ldi	r20, 0x00	; 0
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17fa:	80 91 e8 00 	lds	r24, 0x00E8
    17fe:	8e 77       	andi	r24, 0x7E	; 126
    1800:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1804:	ab ea       	ldi	r26, 0xAB	; 171
    1806:	b1 e0       	ldi	r27, 0x01	; 1
    1808:	ed 2f       	mov	r30, r29
    180a:	fc 2f       	mov	r31, r28
    180c:	80 e1       	ldi	r24, 0x10	; 16
    180e:	01 90       	ld	r0, Z+
    1810:	0d 92       	st	X+, r0
    1812:	81 50       	subi	r24, 0x01	; 1
    1814:	e1 f7       	brne	.-8      	; 0x180e <send_keyboard+0xa0>
}
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    181c:	8b e4       	ldi	r24, 0x4B	; 75
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1824:	80 91 3b 02 	lds	r24, 0x023B
    1828:	88 23       	and	r24, r24
    182a:	49 f4       	brne	.+18     	; 0x183e <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    182c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <USB_Disable>
        USB_Init();
    1830:	0e 94 16 10 	call	0x202c	; 0x202c <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1834:	80 91 e2 00 	lds	r24, 0x00E2
    1838:	84 60       	ori	r24, 0x04	; 4
    183a:	80 93 e2 00 	sts	0x00E2, r24
    183e:	08 95       	ret

00001840 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1840:	8f e4       	ldi	r24, 0x4F	; 79
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1848:	10 92 3b 02 	sts	0x023B, r1
        USB_Disable();  // Disable all interrupts
	USB_Controller_Enable();
        USB_INT_Enable(USB_INT_VBUSTI);
    }
*/
}
    184c:	08 95       	ret

0000184e <EVENT_USB_Device_Reset>:

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    184e:	83 e5       	ldi	r24, 0x53	; 83
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
}
    1856:	08 95       	ret

00001858 <EVENT_USB_Device_Suspend>:

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1858:	87 e5       	ldi	r24, 0x57	; 87
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
    1860:	0e 94 10 2c 	call	0x5820	; 0x5820 <sleep_led_enable>
#endif
}
    1864:	08 95       	ret

00001866 <EVENT_USB_Device_WakeUp>:

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    1866:	8b e5       	ldi	r24, 0x5B	; 91
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    suspend_wakeup_init();
    186e:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <suspend_wakeup_init>

#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
    1872:	0e 94 16 2c 	call	0x582c	; 0x582c <sleep_led_disable>
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
    1876:	0e 94 b6 12 	call	0x256c	; 0x256c <host_keyboard_leds>
    187a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <led_set>
#endif
}
    187e:	08 95       	ret

00001880 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1880:	80 91 bc 01 	lds	r24, 0x01BC
    1884:	8f 5f       	subi	r24, 0xFF	; 255
    1886:	80 93 bc 01 	sts	0x01BC, r24
    188a:	62 e3       	ldi	r22, 0x32	; 50
    188c:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <__udivmodqi4>
    1890:	99 23       	and	r25, r25
    1892:	a9 f5       	brne	.+106    	; 0x18fe <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    1894:	10 92 bc 01 	sts	0x01BC, r1

    if (!console_flush) return;
    1898:	80 91 bd 01 	lds	r24, 0x01BD
    189c:	88 23       	and	r24, r24
    189e:	79 f1       	breq	.+94     	; 0x18fe <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    18a0:	80 91 3c 02 	lds	r24, 0x023C
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	49 f5       	brne	.+82     	; 0x18fa <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    18a8:	80 91 e9 00 	lds	r24, 0x00E9
    18ac:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    18ae:	90 91 ec 00 	lds	r25, 0x00EC
    18b2:	90 ff       	sbrs	r25, 0
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <EVENT_USB_Device_StartOfFrame+0x3a>
    18b6:	90 e8       	ldi	r25, 0x80	; 128
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <EVENT_USB_Device_StartOfFrame+0x3c>
    18ba:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    18bc:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18be:	84 e0       	ldi	r24, 0x04	; 4
    18c0:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    18c4:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    18c8:	80 ff       	sbrs	r24, 0
    18ca:	14 c0       	rjmp	.+40     	; 0x18f4 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    18cc:	80 91 ee 00 	lds	r24, 0x00EE
    18d0:	87 fd       	sbrc	r24, 7
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <EVENT_USB_Device_StartOfFrame+0x5a>
    18d4:	0f c0       	rjmp	.+30     	; 0x18f4 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18d6:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18da:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    18de:	85 fd       	sbrc	r24, 5
    18e0:	fa cf       	rjmp	.-12     	; 0x18d6 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18e2:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    18e6:	80 ff       	sbrs	r24, 0
    18e8:	05 c0       	rjmp	.+10     	; 0x18f4 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18ea:	80 91 e8 00 	lds	r24, 0x00E8
    18ee:	8e 77       	andi	r24, 0x7E	; 126
    18f0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18f4:	9f 70       	andi	r25, 0x0F	; 15
    18f6:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    18fa:	10 92 bd 01 	sts	0x01BD, r1
    18fe:	08 95       	ret

00001900 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	61 ec       	ldi	r22, 0xC1	; 193
    1904:	42 e0       	ldi	r20, 0x02	; 2
    1906:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Endpoint_ConfigureEndpoint_Prv>
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	61 ec       	ldi	r22, 0xC1	; 193
    190e:	42 e0       	ldi	r20, 0x02	; 2
    1910:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Endpoint_ConfigureEndpoint_Prv>
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	61 ec       	ldi	r22, 0xC1	; 193
    1918:	42 e0       	ldi	r20, 0x02	; 2
    191a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Endpoint_ConfigureEndpoint_Prv>
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	61 ec       	ldi	r22, 0xC1	; 193
    1922:	42 e2       	ldi	r20, 0x22	; 34
    1924:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Endpoint_ConfigureEndpoint_Prv>
    1928:	85 e0       	ldi	r24, 0x05	; 5
    192a:	61 ec       	ldi	r22, 0xC1	; 193
    192c:	42 e1       	ldi	r20, 0x12	; 18
    192e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Endpoint_ConfigureEndpoint_Prv>
#ifdef NKRO_ENABLE
    /* Setup NKRO HID Report Endpoints */
    ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                     NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
#endif
}
    1932:	08 95       	ret

00001934 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1934:	80 91 3e 02 	lds	r24, 0x023E
    1938:	83 30       	cpi	r24, 0x03	; 3
    193a:	09 f4       	brne	.+2      	; 0x193e <EVENT_USB_Device_ControlRequest+0xa>
    193c:	58 c0       	rjmp	.+176    	; 0x19ee <EVENT_USB_Device_ControlRequest+0xba>
    193e:	84 30       	cpi	r24, 0x04	; 4
    1940:	30 f4       	brcc	.+12     	; 0x194e <EVENT_USB_Device_ControlRequest+0x1a>
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	71 f0       	breq	.+28     	; 0x1962 <EVENT_USB_Device_ControlRequest+0x2e>
    1946:	82 30       	cpi	r24, 0x02	; 2
    1948:	09 f0       	breq	.+2      	; 0x194c <EVENT_USB_Device_ControlRequest+0x18>
    194a:	b2 c0       	rjmp	.+356    	; 0x1ab0 <EVENT_USB_Device_ControlRequest+0x17c>
    194c:	99 c0       	rjmp	.+306    	; 0x1a80 <EVENT_USB_Device_ControlRequest+0x14c>
    194e:	8a 30       	cpi	r24, 0x0A	; 10
    1950:	09 f4       	brne	.+2      	; 0x1954 <EVENT_USB_Device_ControlRequest+0x20>
    1952:	86 c0       	rjmp	.+268    	; 0x1a60 <EVENT_USB_Device_ControlRequest+0x12c>
    1954:	8b 30       	cpi	r24, 0x0B	; 11
    1956:	09 f4       	brne	.+2      	; 0x195a <EVENT_USB_Device_ControlRequest+0x26>
    1958:	6b c0       	rjmp	.+214    	; 0x1a30 <EVENT_USB_Device_ControlRequest+0xfc>
    195a:	89 30       	cpi	r24, 0x09	; 9
    195c:	09 f0       	breq	.+2      	; 0x1960 <EVENT_USB_Device_ControlRequest+0x2c>
    195e:	a8 c0       	rjmp	.+336    	; 0x1ab0 <EVENT_USB_Device_ControlRequest+0x17c>
    1960:	20 c0       	rjmp	.+64     	; 0x19a2 <EVENT_USB_Device_ControlRequest+0x6e>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1962:	80 91 3d 02 	lds	r24, 0x023D
    1966:	81 3a       	cpi	r24, 0xA1	; 161
    1968:	09 f0       	breq	.+2      	; 0x196c <EVENT_USB_Device_ControlRequest+0x38>
    196a:	a2 c0       	rjmp	.+324    	; 0x1ab0 <EVENT_USB_Device_ControlRequest+0x17c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    196c:	80 91 e8 00 	lds	r24, 0x00E8
    1970:	87 7f       	andi	r24, 0xF7	; 247
    1972:	80 93 e8 00 	sts	0x00E8, r24
    1976:	80 91 41 02 	lds	r24, 0x0241
    197a:	90 91 42 02 	lds	r25, 0x0242
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	21 f0       	breq	.+8      	; 0x198a <EVENT_USB_Device_ControlRequest+0x56>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <EVENT_USB_Device_ControlRequest+0x5c>
    198a:	60 e1       	ldi	r22, 0x10	; 16
    198c:	8b ea       	ldi	r24, 0xAB	; 171
    198e:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1996:	80 91 e8 00 	lds	r24, 0x00E8
    199a:	8b 77       	andi	r24, 0x7B	; 123
    199c:	80 93 e8 00 	sts	0x00E8, r24
    19a0:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19a2:	80 91 3d 02 	lds	r24, 0x023D
    19a6:	81 32       	cpi	r24, 0x21	; 33
    19a8:	09 f0       	breq	.+2      	; 0x19ac <EVENT_USB_Device_ControlRequest+0x78>
    19aa:	82 c0       	rjmp	.+260    	; 0x1ab0 <EVENT_USB_Device_ControlRequest+0x17c>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    19ac:	80 91 41 02 	lds	r24, 0x0241
    19b0:	90 91 42 02 	lds	r25, 0x0242
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	21 f0       	breq	.+8      	; 0x19c0 <EVENT_USB_Device_ControlRequest+0x8c>
    19b8:	84 30       	cpi	r24, 0x04	; 4
    19ba:	91 05       	cpc	r25, r1
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <EVENT_USB_Device_ControlRequest+0x8c>
    19be:	78 c0       	rjmp	.+240    	; 0x1ab0 <EVENT_USB_Device_ControlRequest+0x17c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19c0:	80 91 e8 00 	lds	r24, 0x00E8
    19c4:	87 7f       	andi	r24, 0xF7	; 247
    19c6:	80 93 e8 00 	sts	0x00E8, r24
    19ca:	05 c0       	rjmp	.+10     	; 0x19d6 <EVENT_USB_Device_ControlRequest+0xa2>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    19cc:	80 91 3c 02 	lds	r24, 0x023C
    19d0:	88 23       	and	r24, r24
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <EVENT_USB_Device_ControlRequest+0xa2>
    19d4:	6d c0       	rjmp	.+218    	; 0x1ab0 <EVENT_USB_Device_ControlRequest+0x17c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19d6:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    19da:	82 ff       	sbrs	r24, 2
    19dc:	f7 cf       	rjmp	.-18     	; 0x19cc <EVENT_USB_Device_ControlRequest+0x98>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    19de:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    19e2:	80 93 bb 01 	sts	0x01BB, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19e6:	80 91 e8 00 	lds	r24, 0x00E8
    19ea:	8b 77       	andi	r24, 0x7B	; 123
    19ec:	1c c0       	rjmp	.+56     	; 0x1a26 <EVENT_USB_Device_ControlRequest+0xf2>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19ee:	80 91 3d 02 	lds	r24, 0x023D
    19f2:	81 3a       	cpi	r24, 0xA1	; 161
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <EVENT_USB_Device_ControlRequest+0xc4>
    19f6:	5c c0       	rjmp	.+184    	; 0x1ab0 <EVENT_USB_Device_ControlRequest+0x17c>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    19f8:	80 91 41 02 	lds	r24, 0x0241
    19fc:	90 91 42 02 	lds	r25, 0x0242
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <EVENT_USB_Device_ControlRequest+0xd2>
    1a04:	55 c0       	rjmp	.+170    	; 0x1ab0 <EVENT_USB_Device_ControlRequest+0x17c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a06:	80 91 e8 00 	lds	r24, 0x00E8
    1a0a:	87 7f       	andi	r24, 0xF7	; 247
    1a0c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a10:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1a14:	80 ff       	sbrs	r24, 0
    1a16:	fc cf       	rjmp	.-8      	; 0x1a10 <EVENT_USB_Device_ControlRequest+0xdc>
                    Endpoint_Write_8(keyboard_protocol);
    1a18:	80 91 0c 01 	lds	r24, 0x010C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a1c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a20:	80 91 e8 00 	lds	r24, 0x00E8
    1a24:	8e 77       	andi	r24, 0x7E	; 126
    1a26:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearIN();
                    Endpoint_ClearStatusStage();
    1a2a:	0e 94 65 0f 	call	0x1eca	; 0x1eca <Endpoint_ClearStatusStage>
    1a2e:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a30:	80 91 3d 02 	lds	r24, 0x023D
    1a34:	81 32       	cpi	r24, 0x21	; 33
    1a36:	e1 f5       	brne	.+120    	; 0x1ab0 <EVENT_USB_Device_ControlRequest+0x17c>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1a38:	80 91 41 02 	lds	r24, 0x0241
    1a3c:	90 91 42 02 	lds	r25, 0x0242
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	b1 f5       	brne	.+108    	; 0x1ab0 <EVENT_USB_Device_ControlRequest+0x17c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a44:	80 91 e8 00 	lds	r24, 0x00E8
    1a48:	87 7f       	andi	r24, 0xF7	; 247
    1a4a:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1a4e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1a52:	80 91 3f 02 	lds	r24, 0x023F
    1a56:	80 93 0c 01 	sts	0x010C, r24
                    clear_keyboard();
    1a5a:	0e 94 13 18 	call	0x3026	; 0x3026 <clear_keyboard>
    1a5e:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a60:	80 91 3d 02 	lds	r24, 0x023D
    1a64:	81 32       	cpi	r24, 0x21	; 33
    1a66:	21 f5       	brne	.+72     	; 0x1ab0 <EVENT_USB_Device_ControlRequest+0x17c>
    1a68:	80 91 e8 00 	lds	r24, 0x00E8
    1a6c:	87 7f       	andi	r24, 0xF7	; 247
    1a6e:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1a72:	0e 94 65 0f 	call	0x1eca	; 0x1eca <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1a76:	80 91 40 02 	lds	r24, 0x0240
    1a7a:	80 93 aa 01 	sts	0x01AA, r24
    1a7e:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1a80:	80 91 3d 02 	lds	r24, 0x023D
    1a84:	81 3a       	cpi	r24, 0xA1	; 161
    1a86:	a1 f4       	brne	.+40     	; 0x1ab0 <EVENT_USB_Device_ControlRequest+0x17c>
    1a88:	80 91 e8 00 	lds	r24, 0x00E8
    1a8c:	87 7f       	andi	r24, 0xF7	; 247
    1a8e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a92:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1a96:	80 ff       	sbrs	r24, 0
    1a98:	fc cf       	rjmp	.-8      	; 0x1a92 <EVENT_USB_Device_ControlRequest+0x15e>
                Endpoint_Write_8(keyboard_idle);
    1a9a:	80 91 aa 01 	lds	r24, 0x01AA
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a9e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1aa2:	80 91 e8 00 	lds	r24, 0x00E8
    1aa6:	8e 77       	andi	r24, 0x7E	; 126
    1aa8:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1aac:	0e 94 65 0f 	call	0x1eca	; 0x1eca <Endpoint_ClearStatusStage>
    1ab0:	08 95       	ret

00001ab2 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1ab2:	84 b7       	in	r24, 0x34	; 52
    1ab4:	87 7f       	andi	r24, 0xF7	; 247
    1ab6:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1ab8:	88 e1       	ldi	r24, 0x18	; 24
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	80 93 60 00 	sts	0x0060, r24
    1ac2:	10 92 60 00 	sts	0x0060, r1
    1ac6:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	80 e8       	ldi	r24, 0x80	; 128
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	80 93 61 00 	sts	0x0061, r24
    1ad4:	90 93 61 00 	sts	0x0061, r25
    1ad8:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
    1ada:	0e 94 45 13 	call	0x268a	; 0x268a <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1ade:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <USB_Disable>

    USB_Init();
    1ae2:	0e 94 16 10 	call	0x202c	; 0x202c <USB_Init>
    1ae6:	80 91 e2 00 	lds	r24, 0x00E2
    1aea:	84 60       	ori	r24, 0x04	; 4
    1aec:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1af0:	84 ec       	ldi	r24, 0xC4	; 196
    1af2:	9a e0       	ldi	r25, 0x0A	; 10
    1af4:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    1af8:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1afa:	80 91 3c 02 	lds	r24, 0x023C
    1afe:	84 30       	cpi	r24, 0x04	; 4
    1b00:	e1 f7       	brne	.-8      	; 0x1afa <main+0x48>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1b02:	8f e5       	ldi	r24, 0x5F	; 95
    1b04:	91 e0       	ldi	r25, 0x01	; 1
    1b06:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>

    /* init modules */
    keyboard_init();
    1b0a:	0e 94 48 13 	call	0x2690	; 0x2690 <keyboard_init>
    host_set_driver(&lufa_driver);
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	0e 94 b1 12 	call	0x2562	; 0x2562 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
    1b16:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <sleep_led_init>
#endif

    print("Keyboard start.\n");
    1b1a:	80 e7       	ldi	r24, 0x70	; 112
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    1b22:	10 c0       	rjmp	.+32     	; 0x1b44 <main+0x92>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
    1b24:	81 e8       	ldi	r24, 0x81	; 129
    1b26:	91 e0       	ldi	r25, 0x01	; 1
    1b28:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            suspend_power_down();
    1b2c:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1b30:	80 91 3a 02 	lds	r24, 0x023A
    1b34:	88 23       	and	r24, r24
    1b36:	31 f0       	breq	.+12     	; 0x1b44 <main+0x92>
    1b38:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <suspend_wakeup_condition>
    1b3c:	88 23       	and	r24, r24
    1b3e:	11 f0       	breq	.+4      	; 0x1b44 <main+0x92>
                    USB_Device_SendRemoteWakeup();
    1b40:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <USB_Device_SendRemoteWakeup>
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1b44:	80 91 3c 02 	lds	r24, 0x023C
    1b48:	85 30       	cpi	r24, 0x05	; 5
    1b4a:	61 f3       	breq	.-40     	; 0x1b24 <main+0x72>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
                    USB_Device_SendRemoteWakeup();
            }
        }

        keyboard_task();
    1b4c:	0e 94 81 13 	call	0x2702	; 0x2702 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1b50:	f9 cf       	rjmp	.-14     	; 0x1b44 <main+0x92>

00001b52 <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1b52:	93 30       	cpi	r25, 0x03	; 3
    1b54:	99 f0       	breq	.+38     	; 0x1b7c <CALLBACK_USB_GetDescriptor+0x2a>
    1b56:	94 30       	cpi	r25, 0x04	; 4
    1b58:	38 f4       	brcc	.+14     	; 0x1b68 <CALLBACK_USB_GetDescriptor+0x16>
    1b5a:	91 30       	cpi	r25, 0x01	; 1
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <CALLBACK_USB_GetDescriptor+0xe>
    1b5e:	3e c0       	rjmp	.+124    	; 0x1bdc <CALLBACK_USB_GetDescriptor+0x8a>
    1b60:	92 30       	cpi	r25, 0x02	; 2
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <CALLBACK_USB_GetDescriptor+0x14>
    1b64:	40 c0       	rjmp	.+128    	; 0x1be6 <CALLBACK_USB_GetDescriptor+0x94>
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <CALLBACK_USB_GetDescriptor+0x20>
    1b68:	91 32       	cpi	r25, 0x21	; 33
    1b6a:	d1 f0       	breq	.+52     	; 0x1ba0 <CALLBACK_USB_GetDescriptor+0x4e>
    1b6c:	92 32       	cpi	r25, 0x22	; 34
    1b6e:	d9 f5       	brne	.+118    	; 0x1be6 <CALLBACK_USB_GetDescriptor+0x94>
    1b70:	25 c0       	rjmp	.+74     	; 0x1bbc <CALLBACK_USB_GetDescriptor+0x6a>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1b72:	8d e8       	ldi	r24, 0x8D	; 141
    1b74:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1b76:	e7 eb       	ldi	r30, 0xB7	; 183
    1b78:	f1 e0       	ldi	r31, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1b7a:	39 c0       	rjmp	.+114    	; 0x1bee <CALLBACK_USB_GetDescriptor+0x9c>
        case DTYPE_String:
            switch (DescriptorIndex )
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	41 f0       	breq	.+16     	; 0x1b90 <CALLBACK_USB_GetDescriptor+0x3e>
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	18 f0       	brcs	.+6      	; 0x1b8a <CALLBACK_USB_GetDescriptor+0x38>
    1b84:	82 30       	cpi	r24, 0x02	; 2
    1b86:	79 f5       	brne	.+94     	; 0x1be6 <CALLBACK_USB_GetDescriptor+0x94>
    1b88:	06 c0       	rjmp	.+12     	; 0x1b96 <CALLBACK_USB_GetDescriptor+0x44>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1b8a:	e3 eb       	ldi	r30, 0xB3	; 179
    1b8c:	f1 e0       	ldi	r31, 0x01	; 1
    1b8e:	05 c0       	rjmp	.+10     	; 0x1b9a <CALLBACK_USB_GetDescriptor+0x48>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1b90:	e5 ea       	ldi	r30, 0xA5	; 165
    1b92:	f1 e0       	ldi	r31, 0x01	; 1
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <CALLBACK_USB_GetDescriptor+0x48>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1b96:	e5 e8       	ldi	r30, 0x85	; 133
    1b98:	f1 e0       	ldi	r31, 0x01	; 1
    1b9a:	84 91       	lpm	r24, Z
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
                    break;
    1b9e:	27 c0       	rjmp	.+78     	; 0x1bee <CALLBACK_USB_GetDescriptor+0x9c>
    1ba0:	65 30       	cpi	r22, 0x05	; 5
    1ba2:	08 f5       	brcc	.+66     	; 0x1be6 <CALLBACK_USB_GetDescriptor+0x94>
    1ba4:	e6 2f       	mov	r30, r22
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	ee 0f       	add	r30, r30
    1baa:	ff 1f       	adc	r31, r31
    1bac:	ea 5d       	subi	r30, 0xDA	; 218
    1bae:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb0:	01 90       	ld	r0, Z+
    1bb2:	f0 81       	ld	r31, Z
    1bb4:	e0 2d       	mov	r30, r0
    1bb6:	89 e0       	ldi	r24, 0x09	; 9
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	19 c0       	rjmp	.+50     	; 0x1bee <CALLBACK_USB_GetDescriptor+0x9c>
    1bbc:	65 30       	cpi	r22, 0x05	; 5
    1bbe:	98 f4       	brcc	.+38     	; 0x1be6 <CALLBACK_USB_GetDescriptor+0x94>
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	fb 01       	movw	r30, r22
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	ff 1f       	adc	r31, r31
    1bc8:	e0 5d       	subi	r30, 0xD0	; 208
    1bca:	fe 4f       	sbci	r31, 0xFE	; 254
    1bcc:	01 90       	ld	r0, Z+
    1bce:	f0 81       	ld	r31, Z
    1bd0:	e0 2d       	mov	r30, r0
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
    1bd2:	66 5c       	subi	r22, 0xC6	; 198
    1bd4:	7e 4f       	sbci	r23, 0xFE	; 254
    1bd6:	db 01       	movw	r26, r22
    1bd8:	8c 91       	ld	r24, X
    1bda:	e0 cf       	rjmp	.-64     	; 0x1b9c <CALLBACK_USB_GetDescriptor+0x4a>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1bdc:	82 e1       	ldi	r24, 0x12	; 18
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1be0:	e4 e4       	ldi	r30, 0x44	; 68
    1be2:	f2 e0       	ldi	r31, 0x02	; 2
    1be4:	04 c0       	rjmp	.+8      	; 0x1bee <CALLBACK_USB_GetDescriptor+0x9c>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	e0 e0       	ldi	r30, 0x00	; 0
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1bee:	da 01       	movw	r26, r20
    1bf0:	11 96       	adiw	r26, 0x01	; 1
    1bf2:	fc 93       	st	X, r31
    1bf4:	ee 93       	st	-X, r30
    return Size;
}
    1bf6:	08 95       	ret

00001bf8 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1bf8:	80 e1       	ldi	r24, 0x10	; 16
    1bfa:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1bfc:	82 e1       	ldi	r24, 0x12	; 18
    1bfe:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1c00:	09 b4       	in	r0, 0x29	; 41
    1c02:	00 fe       	sbrs	r0, 0
    1c04:	fd cf       	rjmp	.-6      	; 0x1c00 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c06:	80 91 d8 00 	lds	r24, 0x00D8
    1c0a:	8f 7d       	andi	r24, 0xDF	; 223
    1c0c:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1c10:	80 91 e0 00 	lds	r24, 0x00E0
    1c14:	82 60       	ori	r24, 0x02	; 2
    1c16:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1c1a:	80 91 e0 00 	lds	r24, 0x00E0
    1c1e:	81 fd       	sbrc	r24, 1
    1c20:	fc cf       	rjmp	.-8      	; 0x1c1a <USB_Device_SendRemoteWakeup+0x22>
}
    1c22:	08 95       	ret

00001c24 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1c24:	af 92       	push	r10
    1c26:	bf 92       	push	r11
    1c28:	cf 92       	push	r12
    1c2a:	df 92       	push	r13
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	ec 01       	movw	r28, r24
    1c38:	7b 01       	movw	r14, r22
    1c3a:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c3c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <Endpoint_WaitUntilReady>
    1c40:	18 2f       	mov	r17, r24
    1c42:	88 23       	and	r24, r24
    1c44:	a9 f5       	brne	.+106    	; 0x1cb0 <Endpoint_Write_Stream_LE+0x8c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1c46:	c1 14       	cp	r12, r1
    1c48:	d1 04       	cpc	r13, r1
    1c4a:	39 f0       	breq	.+14     	; 0x1c5a <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
    1c4c:	f6 01       	movw	r30, r12
    1c4e:	20 81       	ld	r18, Z
    1c50:	31 81       	ldd	r19, Z+1	; 0x01
    1c52:	e2 1a       	sub	r14, r18
    1c54:	f3 0a       	sbc	r15, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1c56:	c2 0f       	add	r28, r18
    1c58:	d3 1f       	adc	r29, r19

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1c5a:	aa 24       	eor	r10, r10
    1c5c:	bb 24       	eor	r11, r11
    1c5e:	23 c0       	rjmp	.+70     	; 0x1ca6 <Endpoint_Write_Stream_LE+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c60:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1c64:	85 fd       	sbrc	r24, 5
    1c66:	16 c0       	rjmp	.+44     	; 0x1c94 <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c68:	80 91 e8 00 	lds	r24, 0x00E8
    1c6c:	8e 77       	andi	r24, 0x7E	; 126
    1c6e:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1c72:	c1 14       	cp	r12, r1
    1c74:	d1 04       	cpc	r13, r1
    1c76:	49 f0       	breq	.+18     	; 0x1c8a <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    1c78:	f6 01       	movw	r30, r12
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	8a 0d       	add	r24, r10
    1c80:	9b 1d       	adc	r25, r11
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1c86:	15 e0       	ldi	r17, 0x05	; 5
    1c88:	13 c0       	rjmp	.+38     	; 0x1cb0 <Endpoint_Write_Stream_LE+0x8c>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c8a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <Endpoint_WaitUntilReady>
    1c8e:	88 23       	and	r24, r24
    1c90:	51 f0       	breq	.+20     	; 0x1ca6 <Endpoint_Write_Stream_LE+0x82>
    1c92:	0d c0       	rjmp	.+26     	; 0x1cae <Endpoint_Write_Stream_LE+0x8a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1c94:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c96:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1c9a:	08 94       	sec
    1c9c:	e1 08       	sbc	r14, r1
    1c9e:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1ca0:	08 94       	sec
    1ca2:	a1 1c       	adc	r10, r1
    1ca4:	b1 1c       	adc	r11, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1ca6:	e1 14       	cp	r14, r1
    1ca8:	f1 04       	cpc	r15, r1
    1caa:	d1 f6       	brne	.-76     	; 0x1c60 <Endpoint_Write_Stream_LE+0x3c>
    1cac:	01 c0       	rjmp	.+2      	; 0x1cb0 <Endpoint_Write_Stream_LE+0x8c>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1cae:	18 2f       	mov	r17, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1cb0:	81 2f       	mov	r24, r17
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	ff 90       	pop	r15
    1cba:	ef 90       	pop	r14
    1cbc:	df 90       	pop	r13
    1cbe:	cf 90       	pop	r12
    1cc0:	bf 90       	pop	r11
    1cc2:	af 90       	pop	r10
    1cc4:	08 95       	ret

00001cc6 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1cc6:	40 91 43 02 	lds	r20, 0x0243
    1cca:	50 91 44 02 	lds	r21, 0x0244
    1cce:	46 17       	cp	r20, r22
    1cd0:	57 07       	cpc	r21, r23
    1cd2:	20 f4       	brcc	.+8      	; 0x1cdc <Endpoint_Write_Control_Stream_LE+0x16>
    1cd4:	ba 01       	movw	r22, r20
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	3d c0       	rjmp	.+122    	; 0x1d56 <Endpoint_Write_Control_Stream_LE+0x90>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1cdc:	61 15       	cp	r22, r1
    1cde:	71 05       	cpc	r23, r1
    1ce0:	d1 f7       	brne	.-12     	; 0x1cd6 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ce2:	40 91 e8 00 	lds	r20, 0x00E8
    1ce6:	4e 77       	andi	r20, 0x7E	; 126
    1ce8:	40 93 e8 00 	sts	0x00E8, r20
    1cec:	f4 cf       	rjmp	.-24     	; 0x1cd6 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1cee:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1cf2:	88 23       	and	r24, r24
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <Endpoint_Write_Control_Stream_LE+0x32>
    1cf6:	47 c0       	rjmp	.+142    	; 0x1d86 <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1cf8:	85 30       	cpi	r24, 0x05	; 5
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <Endpoint_Write_Control_Stream_LE+0x38>
    1cfc:	46 c0       	rjmp	.+140    	; 0x1d8a <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cfe:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1d02:	83 fd       	sbrc	r24, 3
    1d04:	3e c0       	rjmp	.+124    	; 0x1d82 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d06:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1d0a:	82 fd       	sbrc	r24, 2
    1d0c:	34 c0       	rjmp	.+104    	; 0x1d76 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d0e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1d12:	80 ff       	sbrs	r24, 0
    1d14:	20 c0       	rjmp	.+64     	; 0x1d56 <Endpoint_Write_Control_Stream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1d16:	90 91 f3 00 	lds	r25, 0x00F3
    1d1a:	80 91 f2 00 	lds	r24, 0x00F2
    1d1e:	39 2f       	mov	r19, r25
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	82 2b       	or	r24, r18
    1d26:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1d28:	06 c0       	rjmp	.+12     	; 0x1d36 <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1d2a:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d2c:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1d30:	61 50       	subi	r22, 0x01	; 1
    1d32:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1d34:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1d36:	61 15       	cp	r22, r1
    1d38:	71 05       	cpc	r23, r1
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <Endpoint_Write_Control_Stream_LE+0x7c>
    1d3c:	88 30       	cpi	r24, 0x08	; 8
    1d3e:	91 05       	cpc	r25, r1
    1d40:	a0 f3       	brcs	.-24     	; 0x1d2a <Endpoint_Write_Control_Stream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1d42:	41 e0       	ldi	r20, 0x01	; 1
    1d44:	88 30       	cpi	r24, 0x08	; 8
    1d46:	91 05       	cpc	r25, r1
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <Endpoint_Write_Control_Stream_LE+0x86>
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d4c:	80 91 e8 00 	lds	r24, 0x00E8
    1d50:	8e 77       	andi	r24, 0x7E	; 126
    1d52:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1d56:	61 15       	cp	r22, r1
    1d58:	71 05       	cpc	r23, r1
    1d5a:	49 f6       	brne	.-110    	; 0x1cee <Endpoint_Write_Control_Stream_LE+0x28>
    1d5c:	44 23       	and	r20, r20
    1d5e:	39 f6       	brne	.-114    	; 0x1cee <Endpoint_Write_Control_Stream_LE+0x28>
    1d60:	0a c0       	rjmp	.+20     	; 0x1d76 <Endpoint_Write_Control_Stream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d62:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d66:	88 23       	and	r24, r24
    1d68:	71 f0       	breq	.+28     	; 0x1d86 <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d6a:	85 30       	cpi	r24, 0x05	; 5
    1d6c:	71 f0       	breq	.+28     	; 0x1d8a <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d6e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1d72:	83 fd       	sbrc	r24, 3
    1d74:	0c c0       	rjmp	.+24     	; 0x1d8e <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d76:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1d7a:	82 ff       	sbrs	r24, 2
    1d7c:	f2 cf       	rjmp	.-28     	; 0x1d62 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
    1d8c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1d90:	08 95       	ret

00001d92 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1d92:	40 91 43 02 	lds	r20, 0x0243
    1d96:	50 91 44 02 	lds	r21, 0x0244
    1d9a:	46 17       	cp	r20, r22
    1d9c:	57 07       	cpc	r21, r23
    1d9e:	20 f4       	brcc	.+8      	; 0x1da8 <Endpoint_Write_Control_PStream_LE+0x16>
    1da0:	ba 01       	movw	r22, r20
    1da2:	fc 01       	movw	r30, r24
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	3e c0       	rjmp	.+124    	; 0x1e24 <Endpoint_Write_Control_PStream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1da8:	61 15       	cp	r22, r1
    1daa:	71 05       	cpc	r23, r1
    1dac:	d1 f7       	brne	.-12     	; 0x1da2 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1dae:	40 91 e8 00 	lds	r20, 0x00E8
    1db2:	4e 77       	andi	r20, 0x7E	; 126
    1db4:	40 93 e8 00 	sts	0x00E8, r20
    1db8:	f4 cf       	rjmp	.-24     	; 0x1da2 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1dba:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1dbe:	88 23       	and	r24, r24
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <Endpoint_Write_Control_PStream_LE+0x32>
    1dc2:	48 c0       	rjmp	.+144    	; 0x1e54 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1dc4:	85 30       	cpi	r24, 0x05	; 5
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <Endpoint_Write_Control_PStream_LE+0x38>
    1dc8:	47 c0       	rjmp	.+142    	; 0x1e58 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1dca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1dce:	83 fd       	sbrc	r24, 3
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1dd2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1dd6:	82 fd       	sbrc	r24, 2
    1dd8:	35 c0       	rjmp	.+106    	; 0x1e44 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1dda:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1dde:	80 ff       	sbrs	r24, 0
    1de0:	21 c0       	rjmp	.+66     	; 0x1e24 <Endpoint_Write_Control_PStream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1de2:	90 91 f3 00 	lds	r25, 0x00F3
    1de6:	80 91 f2 00 	lds	r24, 0x00F2
    1dea:	39 2f       	mov	r19, r25
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	82 2b       	or	r24, r18
    1df2:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1df4:	07 c0       	rjmp	.+14     	; 0x1e04 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1df6:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1df8:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1dfc:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1dfe:	61 50       	subi	r22, 0x01	; 1
    1e00:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1e02:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1e04:	61 15       	cp	r22, r1
    1e06:	71 05       	cpc	r23, r1
    1e08:	19 f0       	breq	.+6      	; 0x1e10 <Endpoint_Write_Control_PStream_LE+0x7e>
    1e0a:	88 30       	cpi	r24, 0x08	; 8
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	98 f3       	brcs	.-26     	; 0x1df6 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1e10:	41 e0       	ldi	r20, 0x01	; 1
    1e12:	88 30       	cpi	r24, 0x08	; 8
    1e14:	91 05       	cpc	r25, r1
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <Endpoint_Write_Control_PStream_LE+0x88>
    1e18:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e1a:	80 91 e8 00 	lds	r24, 0x00E8
    1e1e:	8e 77       	andi	r24, 0x7E	; 126
    1e20:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1e24:	61 15       	cp	r22, r1
    1e26:	71 05       	cpc	r23, r1
    1e28:	41 f6       	brne	.-112    	; 0x1dba <Endpoint_Write_Control_PStream_LE+0x28>
    1e2a:	44 23       	and	r20, r20
    1e2c:	31 f6       	brne	.-116    	; 0x1dba <Endpoint_Write_Control_PStream_LE+0x28>
    1e2e:	0a c0       	rjmp	.+20     	; 0x1e44 <Endpoint_Write_Control_PStream_LE+0xb2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1e30:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1e34:	88 23       	and	r24, r24
    1e36:	71 f0       	breq	.+28     	; 0x1e54 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1e38:	85 30       	cpi	r24, 0x05	; 5
    1e3a:	71 f0       	breq	.+28     	; 0x1e58 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e3c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1e40:	83 fd       	sbrc	r24, 3
    1e42:	0c c0       	rjmp	.+24     	; 0x1e5c <Endpoint_Write_Control_PStream_LE+0xca>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1e44:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1e48:	82 ff       	sbrs	r24, 2
    1e4a:	f2 cf       	rjmp	.-28     	; 0x1e30 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1e58:	83 e0       	ldi	r24, 0x03	; 3
    1e5a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1e5e:	08 95       	ret

00001e60 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1e60:	98 2f       	mov	r25, r24
    1e62:	2a c0       	rjmp	.+84     	; 0x1eb8 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e64:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1e68:	98 17       	cp	r25, r24
    1e6a:	39 f0       	breq	.+14     	; 0x1e7a <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1e6c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1e70:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1e74:	50 91 f0 00 	lds	r21, 0x00F0
    1e78:	03 c0       	rjmp	.+6      	; 0x1e80 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1e7a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1e7c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1e80:	21 ff       	sbrs	r18, 1
    1e82:	19 c0       	rjmp	.+50     	; 0x1eb6 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1e84:	30 91 eb 00 	lds	r19, 0x00EB
    1e88:	3e 7f       	andi	r19, 0xFE	; 254
    1e8a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1e8e:	30 91 ed 00 	lds	r19, 0x00ED
    1e92:	3d 7f       	andi	r19, 0xFD	; 253
    1e94:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1e98:	30 91 eb 00 	lds	r19, 0x00EB
    1e9c:	31 60       	ori	r19, 0x01	; 1
    1e9e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1ea2:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1ea6:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1eaa:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1eae:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1eb2:	27 ff       	sbrs	r18, 7
    1eb4:	08 c0       	rjmp	.+16     	; 0x1ec6 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1eb6:	9f 5f       	subi	r25, 0xFF	; 255
    1eb8:	97 30       	cpi	r25, 0x07	; 7
    1eba:	a0 f2       	brcs	.-88     	; 0x1e64 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ebc:	8f 70       	andi	r24, 0x0F	; 15
    1ebe:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1ec8:	08 95       	ret

00001eca <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1eca:	80 91 3d 02 	lds	r24, 0x023D
    1ece:	87 ff       	sbrs	r24, 7
    1ed0:	13 c0       	rjmp	.+38     	; 0x1ef8 <Endpoint_ClearStatusStage+0x2e>
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1ed4:	80 91 3c 02 	lds	r24, 0x023C
    1ed8:	88 23       	and	r24, r24
    1eda:	b9 f0       	breq	.+46     	; 0x1f0a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1edc:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1ee0:	82 ff       	sbrs	r24, 2
    1ee2:	f8 cf       	rjmp	.-16     	; 0x1ed4 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ee4:	80 91 e8 00 	lds	r24, 0x00E8
    1ee8:	8b 77       	andi	r24, 0x7B	; 123
    1eea:	80 93 e8 00 	sts	0x00E8, r24
    1eee:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1ef0:	80 91 3c 02 	lds	r24, 0x023C
    1ef4:	88 23       	and	r24, r24
    1ef6:	49 f0       	breq	.+18     	; 0x1f0a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ef8:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1efc:	80 ff       	sbrs	r24, 0
    1efe:	f8 cf       	rjmp	.-16     	; 0x1ef0 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f00:	80 91 e8 00 	lds	r24, 0x00E8
    1f04:	8e 77       	andi	r24, 0x7E	; 126
    1f06:	80 93 e8 00 	sts	0x00E8, r24
    1f0a:	08 95       	ret

00001f0c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1f0c:	80 91 e4 00 	lds	r24, 0x00E4
    1f10:	90 91 e5 00 	lds	r25, 0x00E5
    1f14:	45 e6       	ldi	r20, 0x65	; 101
    1f16:	01 c0       	rjmp	.+2      	; 0x1f1a <Endpoint_WaitUntilReady+0xe>
    1f18:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f1a:	20 91 ec 00 	lds	r18, 0x00EC
    1f1e:	20 ff       	sbrs	r18, 0
    1f20:	23 c0       	rjmp	.+70     	; 0x1f68 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f22:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1f26:	20 fd       	sbrc	r18, 0
    1f28:	15 c0       	rjmp	.+42     	; 0x1f54 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1f2a:	20 91 3c 02 	lds	r18, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1f2e:	22 23       	and	r18, r18
    1f30:	99 f0       	breq	.+38     	; 0x1f58 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1f32:	25 30       	cpi	r18, 0x05	; 5
    1f34:	99 f0       	breq	.+38     	; 0x1f5c <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f36:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1f3a:	25 fd       	sbrc	r18, 5
    1f3c:	11 c0       	rjmp	.+34     	; 0x1f60 <Endpoint_WaitUntilReady+0x54>
    1f3e:	20 91 e4 00 	lds	r18, 0x00E4
    1f42:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1f46:	28 17       	cp	r18, r24
    1f48:	39 07       	cpc	r19, r25
    1f4a:	39 f3       	breq	.-50     	; 0x1f1a <Endpoint_WaitUntilReady+0xe>
    1f4c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1f4e:	21 f7       	brne	.-56     	; 0x1f18 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    1f50:	84 e0       	ldi	r24, 0x04	; 4
    1f52:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1f58:	82 e0       	ldi	r24, 0x02	; 2
    1f5a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1f5c:	83 e0       	ldi	r24, 0x03	; 3
    1f5e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1f64:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1f66:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f68:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1f6c:	22 ff       	sbrs	r18, 2
    1f6e:	dd cf       	rjmp	.-70     	; 0x1f2a <Endpoint_WaitUntilReady+0x1e>
    1f70:	f9 cf       	rjmp	.-14     	; 0x1f64 <Endpoint_WaitUntilReady+0x58>

00001f72 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1f72:	0e 94 28 10 	call	0x2050	; 0x2050 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1f76:	0e 94 30 10 	call	0x2060	; 0x2060 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1f7a:	e0 ee       	ldi	r30, 0xE0	; 224
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	81 60       	ori	r24, 0x01	; 1
    1f82:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1f84:	e8 ed       	ldi	r30, 0xD8	; 216
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	8f 77       	andi	r24, 0x7F	; 127
    1f8c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1f8e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1f90:	a7 ed       	ldi	r26, 0xD7	; 215
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	8c 91       	ld	r24, X
    1f96:	8e 7f       	andi	r24, 0xFE	; 254
    1f98:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8f 7e       	andi	r24, 0xEF	; 239
    1f9e:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1fa0:	10 92 3b 02 	sts	0x023B, r1
}
    1fa4:	08 95       	ret

00001fa6 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1fa6:	0f 93       	push	r16
    1fa8:	1f 93       	push	r17
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1fae:	0e 94 28 10 	call	0x2050	; 0x2050 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1fb2:	0e 94 30 10 	call	0x2060	; 0x2060 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1fb6:	c8 ed       	ldi	r28, 0xD8	; 216
    1fb8:	d0 e0       	ldi	r29, 0x00	; 0
    1fba:	88 81       	ld	r24, Y
    1fbc:	8f 77       	andi	r24, 0x7F	; 127
    1fbe:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1fc0:	88 81       	ld	r24, Y
    1fc2:	80 68       	ori	r24, 0x80	; 128
    1fc4:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1fc6:	88 81       	ld	r24, Y
    1fc8:	8f 7d       	andi	r24, 0xDF	; 223
    1fca:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1fcc:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1fce:	10 92 3c 02 	sts	0x023C, r1
	USB_Device_ConfigurationNumber  = 0;
    1fd2:	10 92 38 02 	sts	0x0238, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1fd6:	10 92 3a 02 	sts	0x023A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1fda:	10 92 39 02 	sts	0x0239, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1fde:	00 ee       	ldi	r16, 0xE0	; 224
    1fe0:	10 e0       	ldi	r17, 0x00	; 0
    1fe2:	f8 01       	movw	r30, r16
    1fe4:	80 81       	ld	r24, Z
    1fe6:	8b 7f       	andi	r24, 0xFB	; 251
    1fe8:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1fea:	88 81       	ld	r24, Y
    1fec:	81 60       	ori	r24, 0x01	; 1
    1fee:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	42 e0       	ldi	r20, 0x02	; 2
    1ff6:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1ffa:	e1 ee       	ldi	r30, 0xE1	; 225
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	8e 7f       	andi	r24, 0xFE	; 254
    2002:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2004:	e2 ee       	ldi	r30, 0xE2	; 226
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	81 60       	ori	r24, 0x01	; 1
    200c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    200e:	80 81       	ld	r24, Z
    2010:	88 60       	ori	r24, 0x08	; 8
    2012:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2014:	f8 01       	movw	r30, r16
    2016:	80 81       	ld	r24, Z
    2018:	8e 7f       	andi	r24, 0xFE	; 254
    201a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    201c:	88 81       	ld	r24, Y
    201e:	80 61       	ori	r24, 0x10	; 16
    2020:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	08 95       	ret

0000202c <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    202c:	e8 ed       	ldi	r30, 0xD8	; 216
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 7e       	andi	r24, 0xEF	; 239
    2034:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2036:	e7 ed       	ldi	r30, 0xD7	; 215
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	81 60       	ori	r24, 0x01	; 1
    203e:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    2040:	84 e0       	ldi	r24, 0x04	; 4
    2042:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	80 93 3b 02 	sts	0x023B, r24

	USB_ResetInterface();
    204a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <USB_ResetInterface>
}
    204e:	08 95       	ret

00002050 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    2050:	e8 ed       	ldi	r30, 0xD8	; 216
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	8e 7f       	andi	r24, 0xFE	; 254
    2058:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    205a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    205e:	08 95       	ret

00002060 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2060:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2064:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    2068:	08 95       	ret

0000206a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    206a:	1f 92       	push	r1
    206c:	0f 92       	push	r0
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	0f 92       	push	r0
    2072:	11 24       	eor	r1, r1
    2074:	2f 93       	push	r18
    2076:	3f 93       	push	r19
    2078:	4f 93       	push	r20
    207a:	5f 93       	push	r21
    207c:	6f 93       	push	r22
    207e:	7f 93       	push	r23
    2080:	8f 93       	push	r24
    2082:	9f 93       	push	r25
    2084:	af 93       	push	r26
    2086:	bf 93       	push	r27
    2088:	ef 93       	push	r30
    208a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    208c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2090:	82 ff       	sbrs	r24, 2
    2092:	0b c0       	rjmp	.+22     	; 0x20aa <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2094:	80 91 e2 00 	lds	r24, 0x00E2
    2098:	82 ff       	sbrs	r24, 2
    209a:	07 c0       	rjmp	.+14     	; 0x20aa <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    209c:	80 91 e1 00 	lds	r24, 0x00E1
    20a0:	8b 7f       	andi	r24, 0xFB	; 251
    20a2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    20a6:	0e 94 40 0c 	call	0x1880	; 0x1880 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    20aa:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    20ae:	80 ff       	sbrs	r24, 0
    20b0:	1f c0       	rjmp	.+62     	; 0x20f0 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    20b2:	80 91 d8 00 	lds	r24, 0x00D8
    20b6:	80 ff       	sbrs	r24, 0
    20b8:	1b c0       	rjmp	.+54     	; 0x20f0 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    20ba:	80 91 da 00 	lds	r24, 0x00DA
    20be:	8e 7f       	andi	r24, 0xFE	; 254
    20c0:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    20c4:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    20c8:	80 ff       	sbrs	r24, 0
    20ca:	0d c0       	rjmp	.+26     	; 0x20e6 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    20cc:	80 e1       	ldi	r24, 0x10	; 16
    20ce:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    20d0:	82 e1       	ldi	r24, 0x12	; 18
    20d2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    20d4:	09 b4       	in	r0, 0x29	; 41
    20d6:	00 fe       	sbrs	r0, 0
    20d8:	fd cf       	rjmp	.-6      	; 0x20d4 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	80 93 3c 02 	sts	0x023C, r24
			EVENT_USB_Device_Connect();
    20e0:	0e 94 0e 0c 	call	0x181c	; 0x181c <EVENT_USB_Device_Connect>
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    20e6:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    20e8:	10 92 3c 02 	sts	0x023C, r1
			EVENT_USB_Device_Disconnect();
    20ec:	0e 94 20 0c 	call	0x1840	; 0x1840 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    20f0:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    20f4:	80 ff       	sbrs	r24, 0
    20f6:	19 c0       	rjmp	.+50     	; 0x212a <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    20f8:	80 91 e2 00 	lds	r24, 0x00E2
    20fc:	80 ff       	sbrs	r24, 0
    20fe:	15 c0       	rjmp	.+42     	; 0x212a <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2100:	80 91 e2 00 	lds	r24, 0x00E2
    2104:	8e 7f       	andi	r24, 0xFE	; 254
    2106:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    210a:	80 91 e2 00 	lds	r24, 0x00E2
    210e:	80 61       	ori	r24, 0x10	; 16
    2110:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2114:	80 91 d8 00 	lds	r24, 0x00D8
    2118:	80 62       	ori	r24, 0x20	; 32
    211a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    211e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2120:	85 e0       	ldi	r24, 0x05	; 5
    2122:	80 93 3c 02 	sts	0x023C, r24
		EVENT_USB_Device_Suspend();
    2126:	0e 94 2c 0c 	call	0x1858	; 0x1858 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    212a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    212e:	84 ff       	sbrs	r24, 4
    2130:	30 c0       	rjmp	.+96     	; 0x2192 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2132:	80 91 e2 00 	lds	r24, 0x00E2
    2136:	84 ff       	sbrs	r24, 4
    2138:	2c c0       	rjmp	.+88     	; 0x2192 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    213a:	80 e1       	ldi	r24, 0x10	; 16
    213c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    213e:	82 e1       	ldi	r24, 0x12	; 18
    2140:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2142:	09 b4       	in	r0, 0x29	; 41
    2144:	00 fe       	sbrs	r0, 0
    2146:	fd cf       	rjmp	.-6      	; 0x2142 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2148:	80 91 d8 00 	lds	r24, 0x00D8
    214c:	8f 7d       	andi	r24, 0xDF	; 223
    214e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2152:	80 91 e1 00 	lds	r24, 0x00E1
    2156:	8f 7e       	andi	r24, 0xEF	; 239
    2158:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    215c:	80 91 e2 00 	lds	r24, 0x00E2
    2160:	8f 7e       	andi	r24, 0xEF	; 239
    2162:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2166:	80 91 e2 00 	lds	r24, 0x00E2
    216a:	81 60       	ori	r24, 0x01	; 1
    216c:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2170:	80 91 38 02 	lds	r24, 0x0238
    2174:	88 23       	and	r24, r24
    2176:	11 f0       	breq	.+4      	; 0x217c <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2178:	84 e0       	ldi	r24, 0x04	; 4
    217a:	07 c0       	rjmp	.+14     	; 0x218a <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    217c:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2180:	87 ff       	sbrs	r24, 7
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <__vector_10+0x11e>
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	01 c0       	rjmp	.+2      	; 0x218a <__vector_10+0x120>
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	80 93 3c 02 	sts	0x023C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    218e:	0e 94 33 0c 	call	0x1866	; 0x1866 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2192:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2196:	83 ff       	sbrs	r24, 3
    2198:	29 c0       	rjmp	.+82     	; 0x21ec <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    219a:	80 91 e2 00 	lds	r24, 0x00E2
    219e:	83 ff       	sbrs	r24, 3
    21a0:	25 c0       	rjmp	.+74     	; 0x21ec <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    21a2:	80 91 e1 00 	lds	r24, 0x00E1
    21a6:	87 7f       	andi	r24, 0xF7	; 247
    21a8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    21ac:	82 e0       	ldi	r24, 0x02	; 2
    21ae:	80 93 3c 02 	sts	0x023C, r24
		USB_Device_ConfigurationNumber = 0;
    21b2:	10 92 38 02 	sts	0x0238, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    21b6:	80 91 e1 00 	lds	r24, 0x00E1
    21ba:	8e 7f       	andi	r24, 0xFE	; 254
    21bc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    21c0:	80 91 e2 00 	lds	r24, 0x00E2
    21c4:	8e 7f       	andi	r24, 0xFE	; 254
    21c6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    21ca:	80 91 e2 00 	lds	r24, 0x00E2
    21ce:	80 61       	ori	r24, 0x10	; 16
    21d0:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	42 e0       	ldi	r20, 0x02	; 2
    21da:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    21de:	80 91 f0 00 	lds	r24, 0x00F0
    21e2:	88 60       	ori	r24, 0x08	; 8
    21e4:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    21e8:	0e 94 27 0c 	call	0x184e	; 0x184e <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    21ec:	ff 91       	pop	r31
    21ee:	ef 91       	pop	r30
    21f0:	bf 91       	pop	r27
    21f2:	af 91       	pop	r26
    21f4:	9f 91       	pop	r25
    21f6:	8f 91       	pop	r24
    21f8:	7f 91       	pop	r23
    21fa:	6f 91       	pop	r22
    21fc:	5f 91       	pop	r21
    21fe:	4f 91       	pop	r20
    2200:	3f 91       	pop	r19
    2202:	2f 91       	pop	r18
    2204:	0f 90       	pop	r0
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	0f 90       	pop	r0
    220a:	1f 90       	pop	r1
    220c:	18 95       	reti

0000220e <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    220e:	1f 92       	push	r1
    2210:	0f 92       	push	r0
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	0f 92       	push	r0
    2216:	11 24       	eor	r1, r1
    2218:	2f 93       	push	r18
    221a:	3f 93       	push	r19
    221c:	4f 93       	push	r20
    221e:	5f 93       	push	r21
    2220:	6f 93       	push	r22
    2222:	7f 93       	push	r23
    2224:	8f 93       	push	r24
    2226:	9f 93       	push	r25
    2228:	af 93       	push	r26
    222a:	bf 93       	push	r27
    222c:	cf 93       	push	r28
    222e:	ef 93       	push	r30
    2230:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2232:	c0 91 e9 00 	lds	r28, 0x00E9
    2236:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2238:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    223c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2240:	80 91 f0 00 	lds	r24, 0x00F0
    2244:	87 7f       	andi	r24, 0xF7	; 247
    2246:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    224a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    224c:	0e 94 43 11 	call	0x2286	; 0x2286 <USB_Device_ProcessControlRequest>
    2250:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2254:	80 91 f0 00 	lds	r24, 0x00F0
    2258:	88 60       	ori	r24, 0x08	; 8
    225a:	80 93 f0 00 	sts	0x00F0, r24
    225e:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    2262:	ff 91       	pop	r31
    2264:	ef 91       	pop	r30
    2266:	cf 91       	pop	r28
    2268:	bf 91       	pop	r27
    226a:	af 91       	pop	r26
    226c:	9f 91       	pop	r25
    226e:	8f 91       	pop	r24
    2270:	7f 91       	pop	r23
    2272:	6f 91       	pop	r22
    2274:	5f 91       	pop	r21
    2276:	4f 91       	pop	r20
    2278:	3f 91       	pop	r19
    227a:	2f 91       	pop	r18
    227c:	0f 90       	pop	r0
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	0f 90       	pop	r0
    2282:	1f 90       	pop	r1
    2284:	18 95       	reti

00002286 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	ac 97       	sbiw	r28, 0x2c	; 44
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    229c:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    229e:	ed e3       	ldi	r30, 0x3D	; 61
    22a0:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    22a2:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    22a6:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    22a8:	8f 5f       	subi	r24, 0xFF	; 255
    22aa:	88 30       	cpi	r24, 0x08	; 8
    22ac:	d1 f7       	brne	.-12     	; 0x22a2 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    22ae:	0e 94 9a 0c 	call	0x1934	; 0x1934 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    22b2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    22b6:	83 ff       	sbrs	r24, 3
    22b8:	3c c1       	rjmp	.+632    	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    22ba:	80 91 3d 02 	lds	r24, 0x023D

		switch (USB_ControlRequest.bRequest)
    22be:	20 91 3e 02 	lds	r18, 0x023E
    22c2:	25 30       	cpi	r18, 0x05	; 5
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <USB_Device_ProcessControlRequest+0x42>
    22c6:	84 c0       	rjmp	.+264    	; 0x23d0 <USB_Device_ProcessControlRequest+0x14a>
    22c8:	26 30       	cpi	r18, 0x06	; 6
    22ca:	40 f4       	brcc	.+16     	; 0x22dc <USB_Device_ProcessControlRequest+0x56>
    22cc:	21 30       	cpi	r18, 0x01	; 1
    22ce:	a1 f1       	breq	.+104    	; 0x2338 <USB_Device_ProcessControlRequest+0xb2>
    22d0:	21 30       	cpi	r18, 0x01	; 1
    22d2:	70 f0       	brcs	.+28     	; 0x22f0 <USB_Device_ProcessControlRequest+0x6a>
    22d4:	23 30       	cpi	r18, 0x03	; 3
    22d6:	09 f0       	breq	.+2      	; 0x22da <USB_Device_ProcessControlRequest+0x54>
    22d8:	2c c1       	rjmp	.+600    	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
    22da:	2e c0       	rjmp	.+92     	; 0x2338 <USB_Device_ProcessControlRequest+0xb2>
    22dc:	28 30       	cpi	r18, 0x08	; 8
    22de:	09 f4       	brne	.+2      	; 0x22e2 <USB_Device_ProcessControlRequest+0x5c>
    22e0:	f7 c0       	rjmp	.+494    	; 0x24d0 <USB_Device_ProcessControlRequest+0x24a>
    22e2:	29 30       	cpi	r18, 0x09	; 9
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <USB_Device_ProcessControlRequest+0x62>
    22e6:	07 c1       	rjmp	.+526    	; 0x24f6 <USB_Device_ProcessControlRequest+0x270>
    22e8:	26 30       	cpi	r18, 0x06	; 6
    22ea:	09 f0       	breq	.+2      	; 0x22ee <USB_Device_ProcessControlRequest+0x68>
    22ec:	22 c1       	rjmp	.+580    	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
    22ee:	94 c0       	rjmp	.+296    	; 0x2418 <USB_Device_ProcessControlRequest+0x192>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    22f0:	80 38       	cpi	r24, 0x80	; 128
    22f2:	21 f0       	breq	.+8      	; 0x22fc <USB_Device_ProcessControlRequest+0x76>
    22f4:	82 38       	cpi	r24, 0x82	; 130
    22f6:	09 f0       	breq	.+2      	; 0x22fa <USB_Device_ProcessControlRequest+0x74>
    22f8:	1c c1       	rjmp	.+568    	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
    22fa:	08 c0       	rjmp	.+16     	; 0x230c <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    22fc:	80 91 39 02 	lds	r24, 0x0239
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2300:	90 91 3a 02 	lds	r25, 0x023A
    2304:	99 23       	and	r25, r25
    2306:	71 f0       	breq	.+28     	; 0x2324 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2308:	82 60       	ori	r24, 0x02	; 2
    230a:	0c c0       	rjmp	.+24     	; 0x2324 <USB_Device_ProcessControlRequest+0x9e>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    230c:	80 91 41 02 	lds	r24, 0x0241
    2310:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2312:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2316:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	95 ff       	sbrs	r25, 5
    231e:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2320:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2324:	90 91 e8 00 	lds	r25, 0x00E8
    2328:	97 7f       	andi	r25, 0xF7	; 247
    232a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    232e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    2332:	10 92 f1 00 	sts	0x00F1, r1
    2336:	d7 c0       	rjmp	.+430    	; 0x24e6 <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2338:	88 23       	and	r24, r24
    233a:	19 f0       	breq	.+6      	; 0x2342 <USB_Device_ProcessControlRequest+0xbc>
    233c:	82 30       	cpi	r24, 0x02	; 2
    233e:	09 f0       	breq	.+2      	; 0x2342 <USB_Device_ProcessControlRequest+0xbc>
    2340:	f8 c0       	rjmp	.+496    	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	8f 71       	andi	r24, 0x1F	; 31
    2346:	90 70       	andi	r25, 0x00	; 0
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	29 f0       	breq	.+10     	; 0x2356 <USB_Device_ProcessControlRequest+0xd0>
    234c:	82 30       	cpi	r24, 0x02	; 2
    234e:	91 05       	cpc	r25, r1
    2350:	09 f0       	breq	.+2      	; 0x2354 <USB_Device_ProcessControlRequest+0xce>
    2352:	ef c0       	rjmp	.+478    	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
    2354:	0b c0       	rjmp	.+22     	; 0x236c <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2356:	80 91 3f 02 	lds	r24, 0x023F
    235a:	81 30       	cpi	r24, 0x01	; 1
    235c:	09 f0       	breq	.+2      	; 0x2360 <USB_Device_ProcessControlRequest+0xda>
    235e:	e9 c0       	rjmp	.+466    	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2360:	23 30       	cpi	r18, 0x03	; 3
    2362:	09 f0       	breq	.+2      	; 0x2366 <USB_Device_ProcessControlRequest+0xe0>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	80 93 3a 02 	sts	0x023A, r24
    236a:	2c c0       	rjmp	.+88     	; 0x23c4 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    236c:	80 91 3f 02 	lds	r24, 0x023F
    2370:	88 23       	and	r24, r24
    2372:	41 f5       	brne	.+80     	; 0x23c4 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2374:	20 91 41 02 	lds	r18, 0x0241
    2378:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    237a:	09 f4       	brne	.+2      	; 0x237e <USB_Device_ProcessControlRequest+0xf8>
    237c:	da c0       	rjmp	.+436    	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    237e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2382:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2386:	80 ff       	sbrs	r24, 0
    2388:	1d c0       	rjmp	.+58     	; 0x23c4 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    238a:	80 91 3e 02 	lds	r24, 0x023E
    238e:	83 30       	cpi	r24, 0x03	; 3
    2390:	21 f4       	brne	.+8      	; 0x239a <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2392:	80 91 eb 00 	lds	r24, 0x00EB
    2396:	80 62       	ori	r24, 0x20	; 32
    2398:	13 c0       	rjmp	.+38     	; 0x23c0 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    239a:	80 91 eb 00 	lds	r24, 0x00EB
    239e:	80 61       	ori	r24, 0x10	; 16
    23a0:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <USB_Device_ProcessControlRequest+0x128>
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	2a 95       	dec	r18
    23b0:	e2 f7       	brpl	.-8      	; 0x23aa <USB_Device_ProcessControlRequest+0x124>
    23b2:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    23b6:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    23ba:	80 91 eb 00 	lds	r24, 0x00EB
    23be:	88 60       	ori	r24, 0x08	; 8
    23c0:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23c4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23c8:	80 91 e8 00 	lds	r24, 0x00E8
    23cc:	87 7f       	andi	r24, 0xF7	; 247
    23ce:	8e c0       	rjmp	.+284    	; 0x24ec <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    23d0:	88 23       	and	r24, r24
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <USB_Device_ProcessControlRequest+0x150>
    23d4:	ae c0       	rjmp	.+348    	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    23d6:	10 91 3f 02 	lds	r17, 0x023F
    23da:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    23dc:	80 91 e3 00 	lds	r24, 0x00E3
    23e0:	80 78       	andi	r24, 0x80	; 128
    23e2:	81 2b       	or	r24, r17
    23e4:	80 93 e3 00 	sts	0x00E3, r24
    23e8:	80 91 e8 00 	lds	r24, 0x00E8
    23ec:	87 7f       	andi	r24, 0xF7	; 247
    23ee:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    23f2:	0e 94 65 0f 	call	0x1eca	; 0x1eca <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    23f6:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    23fa:	80 ff       	sbrs	r24, 0
    23fc:	fc cf       	rjmp	.-8      	; 0x23f6 <USB_Device_ProcessControlRequest+0x170>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    23fe:	80 91 e3 00 	lds	r24, 0x00E3
    2402:	80 68       	ori	r24, 0x80	; 128
    2404:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2408:	11 23       	and	r17, r17
    240a:	11 f0       	breq	.+4      	; 0x2410 <USB_Device_ProcessControlRequest+0x18a>
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	01 c0       	rjmp	.+2      	; 0x2412 <USB_Device_ProcessControlRequest+0x18c>
    2410:	82 e0       	ldi	r24, 0x02	; 2
    2412:	80 93 3c 02 	sts	0x023C, r24
    2416:	8d c0       	rjmp	.+282    	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2418:	80 58       	subi	r24, 0x80	; 128
    241a:	82 30       	cpi	r24, 0x02	; 2
    241c:	08 f0       	brcs	.+2      	; 0x2420 <USB_Device_ProcessControlRequest+0x19a>
    241e:	89 c0       	rjmp	.+274    	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2420:	80 91 3f 02 	lds	r24, 0x023F
    2424:	90 91 40 02 	lds	r25, 0x0240
    2428:	23 e0       	ldi	r18, 0x03	; 3
    242a:	8c 3d       	cpi	r24, 0xDC	; 220
    242c:	92 07       	cpc	r25, r18
    242e:	b1 f5       	brne	.+108    	; 0x249c <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2434:	8a e2       	ldi	r24, 0x2A	; 42
    2436:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2438:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    243a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    243c:	de 01       	movw	r26, r28
    243e:	13 96       	adiw	r26, 0x03	; 3
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2444:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2446:	61 e2       	ldi	r22, 0x21	; 33
    2448:	e4 2f       	mov	r30, r20
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	60 93 57 00 	sts	0x0057, r22
    2450:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    2452:	80 ff       	sbrs	r24, 0
    2454:	03 c0       	rjmp	.+6      	; 0x245c <USB_Device_ProcessControlRequest+0x1d6>
					{
						SerialByte >>= 4;
    2456:	e2 95       	swap	r30
    2458:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    245a:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    245c:	ef 70       	andi	r30, 0x0F	; 15
    245e:	2e 2f       	mov	r18, r30
    2460:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2462:	ea 30       	cpi	r30, 0x0A	; 10
    2464:	18 f0       	brcs	.+6      	; 0x246c <USB_Device_ProcessControlRequest+0x1e6>
    2466:	29 5c       	subi	r18, 0xC9	; 201
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <USB_Device_ProcessControlRequest+0x1ea>
    246c:	20 5d       	subi	r18, 0xD0	; 208
    246e:	3f 4f       	sbci	r19, 0xFF	; 255
    2470:	13 96       	adiw	r26, 0x03	; 3
    2472:	3c 93       	st	X, r19
    2474:	2e 93       	st	-X, r18
    2476:	12 97       	sbiw	r26, 0x02	; 2
    2478:	01 96       	adiw	r24, 0x01	; 1
    247a:	12 96       	adiw	r26, 0x02	; 2
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    247c:	84 31       	cpi	r24, 0x14	; 20
    247e:	91 05       	cpc	r25, r1
    2480:	19 f7       	brne	.-58     	; 0x2448 <USB_Device_ProcessControlRequest+0x1c2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2482:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2484:	80 91 e8 00 	lds	r24, 0x00E8
    2488:	87 7f       	andi	r24, 0xF7	; 247
    248a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    248e:	ce 01       	movw	r24, r28
    2490:	03 96       	adiw	r24, 0x03	; 3
    2492:	6a e2       	ldi	r22, 0x2A	; 42
    2494:	70 e0       	ldi	r23, 0x00	; 0
    2496:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Endpoint_Write_Control_Stream_LE>
    249a:	14 c0       	rjmp	.+40     	; 0x24c4 <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    249c:	60 91 41 02 	lds	r22, 0x0241
    24a0:	ae 01       	movw	r20, r28
    24a2:	4f 5f       	subi	r20, 0xFF	; 255
    24a4:	5f 4f       	sbci	r21, 0xFF	; 255
    24a6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <CALLBACK_USB_GetDescriptor>
    24aa:	bc 01       	movw	r22, r24
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <USB_Device_ProcessControlRequest+0x22c>
    24b0:	40 c0       	rjmp	.+128    	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
    24b2:	80 91 e8 00 	lds	r24, 0x00E8
    24b6:	87 7f       	andi	r24, 0xF7	; 247
    24b8:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	9a 81       	ldd	r25, Y+2	; 0x02
    24c0:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    24c4:	80 91 e8 00 	lds	r24, 0x00E8
    24c8:	8b 77       	andi	r24, 0x7B	; 123
    24ca:	80 93 e8 00 	sts	0x00E8, r24
    24ce:	31 c0       	rjmp	.+98     	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    24d0:	80 38       	cpi	r24, 0x80	; 128
    24d2:	79 f5       	brne	.+94     	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24d4:	80 91 e8 00 	lds	r24, 0x00E8
    24d8:	87 7f       	andi	r24, 0xF7	; 247
    24da:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    24de:	80 91 38 02 	lds	r24, 0x0238
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    24e2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    24e6:	80 91 e8 00 	lds	r24, 0x00E8
    24ea:	8e 77       	andi	r24, 0x7E	; 126
    24ec:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    24f0:	0e 94 65 0f 	call	0x1eca	; 0x1eca <Endpoint_ClearStatusStage>
    24f4:	1e c0       	rjmp	.+60     	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    24f6:	88 23       	and	r24, r24
    24f8:	e1 f4       	brne	.+56     	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    24fa:	90 91 3f 02 	lds	r25, 0x023F
    24fe:	92 30       	cpi	r25, 0x02	; 2
    2500:	c0 f4       	brcc	.+48     	; 0x2532 <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2502:	80 91 e8 00 	lds	r24, 0x00E8
    2506:	87 7f       	andi	r24, 0xF7	; 247
    2508:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    250c:	90 93 38 02 	sts	0x0238, r25

	Endpoint_ClearStatusStage();
    2510:	0e 94 65 0f 	call	0x1eca	; 0x1eca <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2514:	80 91 38 02 	lds	r24, 0x0238
    2518:	88 23       	and	r24, r24
    251a:	21 f4       	brne	.+8      	; 0x2524 <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    251c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2520:	87 ff       	sbrs	r24, 7
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <USB_Device_ProcessControlRequest+0x2a2>
    2524:	84 e0       	ldi	r24, 0x04	; 4
    2526:	01 c0       	rjmp	.+2      	; 0x252a <USB_Device_ProcessControlRequest+0x2a4>
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	80 93 3c 02 	sts	0x023C, r24

	EVENT_USB_Device_ConfigurationChanged();
    252e:	0e 94 80 0c 	call	0x1900	; 0x1900 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2532:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2536:	83 ff       	sbrs	r24, 3
    2538:	0a c0       	rjmp	.+20     	; 0x254e <USB_Device_ProcessControlRequest+0x2c8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    253a:	80 91 e8 00 	lds	r24, 0x00E8
    253e:	87 7f       	andi	r24, 0xF7	; 247
    2540:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2544:	80 91 eb 00 	lds	r24, 0x00EB
    2548:	80 62       	ori	r24, 0x20	; 32
    254a:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    254e:	ac 96       	adiw	r28, 0x2c	; 44
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	08 95       	ret

00002562 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    2562:	90 93 c0 01 	sts	0x01C0, r25
    2566:	80 93 bf 01 	sts	0x01BF, r24
}
    256a:	08 95       	ret

0000256c <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    256c:	e0 91 bf 01 	lds	r30, 0x01BF
    2570:	f0 91 c0 01 	lds	r31, 0x01C0
    2574:	30 97       	sbiw	r30, 0x00	; 0
    2576:	29 f0       	breq	.+10     	; 0x2582 <host_keyboard_leds+0x16>
    return (*driver->keyboard_leds)();
    2578:	01 90       	ld	r0, Z+
    257a:	f0 81       	ld	r31, Z
    257c:	e0 2d       	mov	r30, r0
    257e:	09 95       	icall
    2580:	08 95       	ret
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2582:	80 e0       	ldi	r24, 0x00	; 0
    return (*driver->keyboard_leds)();
}
    2584:	08 95       	ret

00002586 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2586:	ff 92       	push	r15
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	18 2f       	mov	r17, r24
    2592:	09 2f       	mov	r16, r25
    if (!driver) return;
    2594:	e0 91 bf 01 	lds	r30, 0x01BF
    2598:	f0 91 c0 01 	lds	r31, 0x01C0
    259c:	30 97       	sbiw	r30, 0x00	; 0
    259e:	c1 f1       	breq	.+112    	; 0x2610 <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    25a0:	02 80       	ldd	r0, Z+2	; 0x02
    25a2:	f3 81       	ldd	r31, Z+3	; 0x03
    25a4:	e0 2d       	mov	r30, r0
    25a6:	09 95       	icall

    if (debug_keyboard) {
    25a8:	80 91 25 02 	lds	r24, 0x0225
    25ac:	82 ff       	sbrs	r24, 2
    25ae:	30 c0       	rjmp	.+96     	; 0x2610 <host_keyboard_send+0x8a>
        dprint("keyboard_report: ");
    25b0:	80 ff       	sbrs	r24, 0
    25b2:	04 c0       	rjmp	.+8      	; 0x25bc <host_keyboard_send+0x36>
    25b4:	81 e7       	ldi	r24, 0x71	; 113
    25b6:	93 e0       	ldi	r25, 0x03	; 3
    25b8:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    25bc:	c1 2f       	mov	r28, r17
    25be:	d0 2f       	mov	r29, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    25c0:	80 e1       	ldi	r24, 0x10	; 16
    25c2:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    25c4:	03 e8       	ldi	r16, 0x83	; 131
    25c6:	13 e0       	ldi	r17, 0x03	; 3
    25c8:	80 91 25 02 	lds	r24, 0x0225
    25cc:	80 ff       	sbrs	r24, 0
    25ce:	14 c0       	rjmp	.+40     	; 0x25f8 <host_keyboard_send+0x72>
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <host_keyboard_send+0x4c>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <host_keyboard_send+0x4e>
    25d4:	ed b7       	in	r30, 0x3d	; 61
    25d6:	fe b7       	in	r31, 0x3e	; 62
    25d8:	31 96       	adiw	r30, 0x01	; 1
    25da:	ad b7       	in	r26, 0x3d	; 61
    25dc:	be b7       	in	r27, 0x3e	; 62
    25de:	12 96       	adiw	r26, 0x02	; 2
    25e0:	1c 93       	st	X, r17
    25e2:	0e 93       	st	-X, r16
    25e4:	11 97       	sbiw	r26, 0x01	; 1
    25e6:	88 81       	ld	r24, Y
    25e8:	82 83       	std	Z+2, r24	; 0x02
    25ea:	13 82       	std	Z+3, r1	; 0x03
    25ec:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	fa 94       	dec	r15
    25fa:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    25fc:	ff 20       	and	r15, r15
    25fe:	21 f7       	brne	.-56     	; 0x25c8 <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2600:	80 91 25 02 	lds	r24, 0x0225
    2604:	80 ff       	sbrs	r24, 0
    2606:	04 c0       	rjmp	.+8      	; 0x2610 <host_keyboard_send+0x8a>
    2608:	89 e8       	ldi	r24, 0x89	; 137
    260a:	93 e0       	ldi	r25, 0x03	; 3
    260c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    }
}
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	08 95       	ret

0000261c <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    261c:	e0 91 bf 01 	lds	r30, 0x01BF
    2620:	f0 91 c0 01 	lds	r31, 0x01C0
    2624:	30 97       	sbiw	r30, 0x00	; 0
    2626:	21 f0       	breq	.+8      	; 0x2630 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2628:	04 80       	ldd	r0, Z+4	; 0x04
    262a:	f5 81       	ldd	r31, Z+5	; 0x05
    262c:	e0 2d       	mov	r30, r0
    262e:	09 95       	icall
    2630:	08 95       	ret

00002632 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    2632:	20 91 c1 01 	lds	r18, 0x01C1
    2636:	30 91 c2 01 	lds	r19, 0x01C2
    263a:	82 17       	cp	r24, r18
    263c:	93 07       	cpc	r25, r19
    263e:	71 f0       	breq	.+28     	; 0x265c <host_system_send+0x2a>
    last_system_report = report;
    2640:	90 93 c2 01 	sts	0x01C2, r25
    2644:	80 93 c1 01 	sts	0x01C1, r24

    if (!driver) return;
    2648:	e0 91 bf 01 	lds	r30, 0x01BF
    264c:	f0 91 c0 01 	lds	r31, 0x01C0
    2650:	30 97       	sbiw	r30, 0x00	; 0
    2652:	21 f0       	breq	.+8      	; 0x265c <host_system_send+0x2a>
    (*driver->send_system)(report);
    2654:	06 80       	ldd	r0, Z+6	; 0x06
    2656:	f7 81       	ldd	r31, Z+7	; 0x07
    2658:	e0 2d       	mov	r30, r0
    265a:	09 95       	icall
    265c:	08 95       	ret

0000265e <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    265e:	20 91 c3 01 	lds	r18, 0x01C3
    2662:	30 91 c4 01 	lds	r19, 0x01C4
    2666:	82 17       	cp	r24, r18
    2668:	93 07       	cpc	r25, r19
    266a:	71 f0       	breq	.+28     	; 0x2688 <host_consumer_send+0x2a>
    last_consumer_report = report;
    266c:	90 93 c4 01 	sts	0x01C4, r25
    2670:	80 93 c3 01 	sts	0x01C3, r24

    if (!driver) return;
    2674:	e0 91 bf 01 	lds	r30, 0x01BF
    2678:	f0 91 c0 01 	lds	r31, 0x01C0
    267c:	30 97       	sbiw	r30, 0x00	; 0
    267e:	21 f0       	breq	.+8      	; 0x2688 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2680:	00 84       	ldd	r0, Z+8	; 0x08
    2682:	f1 85       	ldd	r31, Z+9	; 0x09
    2684:	e0 2d       	mov	r30, r0
    2686:	09 95       	icall
    2688:	08 95       	ret

0000268a <keyboard_setup>:


__attribute__ ((weak)) void matrix_setup(void) {}
void keyboard_setup(void)
{
    matrix_setup();
    268a:	0e 94 b7 0a 	call	0x156e	; 0x156e <matrix_setup>
}
    268e:	08 95       	ret

00002690 <keyboard_init>:

void keyboard_init(void)
{
    timer_init();
    2690:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <timer_init>
    matrix_init();
    2694:	0e 94 60 07 	call	0xec0	; 0xec0 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    2698:	0e 94 62 20 	call	0x40c4	; 0x40c4 <bootmagic>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    269c:	08 95       	ret

0000269e <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    269e:	cf 93       	push	r28
    26a0:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    26a2:	80 91 25 02 	lds	r24, 0x0225
    26a6:	82 ff       	sbrs	r24, 2
    26a8:	27 c0       	rjmp	.+78     	; 0x26f8 <keyboard_set_leds+0x5a>
    26aa:	80 ff       	sbrs	r24, 0
    26ac:	04 c0       	rjmp	.+8      	; 0x26b6 <keyboard_set_leds+0x18>
    26ae:	8b e8       	ldi	r24, 0x8B	; 139
    26b0:	93 e0       	ldi	r25, 0x03	; 3
    26b2:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    26b6:	80 91 25 02 	lds	r24, 0x0225
    26ba:	80 ff       	sbrs	r24, 0
    26bc:	15 c0       	rjmp	.+42     	; 0x26e8 <keyboard_set_leds+0x4a>
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <keyboard_set_leds+0x22>
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <keyboard_set_leds+0x24>
    26c2:	ed b7       	in	r30, 0x3d	; 61
    26c4:	fe b7       	in	r31, 0x3e	; 62
    26c6:	31 96       	adiw	r30, 0x01	; 1
    26c8:	2e e9       	ldi	r18, 0x9E	; 158
    26ca:	33 e0       	ldi	r19, 0x03	; 3
    26cc:	ad b7       	in	r26, 0x3d	; 61
    26ce:	be b7       	in	r27, 0x3e	; 62
    26d0:	12 96       	adiw	r26, 0x02	; 2
    26d2:	3c 93       	st	X, r19
    26d4:	2e 93       	st	-X, r18
    26d6:	11 97       	sbiw	r26, 0x01	; 1
    26d8:	c2 83       	std	Z+2, r28	; 0x02
    26da:	13 82       	std	Z+3, r1	; 0x03
    26dc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	80 91 25 02 	lds	r24, 0x0225
    26ec:	80 ff       	sbrs	r24, 0
    26ee:	04 c0       	rjmp	.+8      	; 0x26f8 <keyboard_set_leds+0x5a>
    26f0:	83 ea       	ldi	r24, 0xA3	; 163
    26f2:	93 e0       	ldi	r25, 0x03	; 3
    26f4:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    led_set(leds);
    26f8:	8c 2f       	mov	r24, r28
    26fa:	0e 94 c0 0a 	call	0x1580	; 0x1580 <led_set>
}
    26fe:	cf 91       	pop	r28
    2700:	08 95       	ret

00002702 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2702:	bf 92       	push	r11
    2704:	cf 92       	push	r12
    2706:	df 92       	push	r13
    2708:	ef 92       	push	r14
    270a:	ff 92       	push	r15
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	2a 97       	sbiw	r28, 0x0a	; 10
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2724:	0e 94 68 08 	call	0x10d0	; 0x10d0 <matrix_scan>
    2728:	05 ec       	ldi	r16, 0xC5	; 197
    272a:	11 e0       	ldi	r17, 0x01	; 1
    272c:	ee 24       	eor	r14, r14
    272e:	ff 24       	eor	r15, r15
    2730:	ce 2c       	mov	r12, r14
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2732:	8e 2d       	mov	r24, r14
    2734:	0e 94 ab 08 	call	0x1156	; 0x1156 <matrix_get_row>
    2738:	d8 2e       	mov	r13, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    273a:	f8 01       	movw	r30, r16
    273c:	b1 90       	ld	r11, Z+
    273e:	8f 01       	movw	r16, r30
    2740:	b8 26       	eor	r11, r24
        if (matrix_change) {
    2742:	e9 f1       	breq	.+122    	; 0x27be <keyboard_task+0xbc>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2744:	80 91 25 02 	lds	r24, 0x0225
    2748:	81 ff       	sbrs	r24, 1
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <keyboard_task+0x4e>
    274c:	0e 94 b1 08 	call	0x1162	; 0x1162 <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2754:	4b 2d       	mov	r20, r11
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	ca 01       	movw	r24, r20
    275a:	02 2e       	mov	r0, r18
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <keyboard_task+0x60>
    275e:	95 95       	asr	r25
    2760:	87 95       	ror	r24
    2762:	0a 94       	dec	r0
    2764:	e2 f7       	brpl	.-8      	; 0x275e <keyboard_task+0x5c>
    2766:	80 ff       	sbrs	r24, 0
    2768:	25 c0       	rjmp	.+74     	; 0x27b4 <keyboard_task+0xb2>
                    action_exec((keyevent_t){
    276a:	2e 83       	std	Y+6, r18	; 0x06
    276c:	cf 82       	std	Y+7, r12	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    276e:	01 e0       	ldi	r16, 0x01	; 1
    2770:	10 e0       	ldi	r17, 0x00	; 0
    2772:	02 c0       	rjmp	.+4      	; 0x2778 <keyboard_task+0x76>
    2774:	00 0f       	add	r16, r16
    2776:	11 1f       	adc	r17, r17
    2778:	2a 95       	dec	r18
    277a:	e2 f7       	brpl	.-8      	; 0x2774 <keyboard_task+0x72>
    277c:	8d 2d       	mov	r24, r13
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	80 23       	and	r24, r16
    2782:	91 23       	and	r25, r17
    2784:	21 e0       	ldi	r18, 0x01	; 1
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	09 f4       	brne	.+2      	; 0x278c <keyboard_task+0x8a>
    278a:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    278c:	28 87       	std	Y+8, r18	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    278e:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timer_read>
    2792:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2794:	78 2f       	mov	r23, r24
    2796:	9a 87       	std	Y+10, r25	; 0x0a
    2798:	89 87       	std	Y+9, r24	; 0x09
    279a:	4e 81       	ldd	r20, Y+6	; 0x06
    279c:	5f 81       	ldd	r21, Y+7	; 0x07
    279e:	68 85       	ldd	r22, Y+8	; 0x08
    27a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    27a2:	0e 94 15 14 	call	0x282a	; 0x282a <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    27a6:	f7 01       	movw	r30, r14
    27a8:	eb 53       	subi	r30, 0x3B	; 59
    27aa:	fe 4f       	sbci	r31, 0xFE	; 254
    27ac:	80 81       	ld	r24, Z
    27ae:	80 27       	eor	r24, r16
    27b0:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    27b2:	1d c0       	rjmp	.+58     	; 0x27ee <keyboard_task+0xec>
    27b4:	2f 5f       	subi	r18, 0xFF	; 255
    27b6:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    27b8:	26 30       	cpi	r18, 0x06	; 6
    27ba:	31 05       	cpc	r19, r1
    27bc:	69 f6       	brne	.-102    	; 0x2758 <keyboard_task+0x56>
    27be:	08 94       	sec
    27c0:	e1 1c       	adc	r14, r1
    27c2:	f1 1c       	adc	r15, r1
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    27c4:	fa e0       	ldi	r31, 0x0A	; 10
    27c6:	ef 16       	cp	r14, r31
    27c8:	f1 04       	cpc	r15, r1
    27ca:	09 f0       	breq	.+2      	; 0x27ce <keyboard_task+0xcc>
    27cc:	b1 cf       	rjmp	.-158    	; 0x2730 <keyboard_task+0x2e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    27ce:	8f ef       	ldi	r24, 0xFF	; 255
    27d0:	89 83       	std	Y+1, r24	; 0x01
    27d2:	8a 83       	std	Y+2, r24	; 0x02
    27d4:	1b 82       	std	Y+3, r1	; 0x03
    27d6:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timer_read>
    27da:	81 60       	ori	r24, 0x01	; 1
    27dc:	78 2f       	mov	r23, r24
    27de:	9d 83       	std	Y+5, r25	; 0x05
    27e0:	8c 83       	std	Y+4, r24	; 0x04
    27e2:	49 81       	ldd	r20, Y+1	; 0x01
    27e4:	5a 81       	ldd	r21, Y+2	; 0x02
    27e6:	6b 81       	ldd	r22, Y+3	; 0x03
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	0e 94 15 14 	call	0x282a	; 0x282a <action_exec>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    27ee:	0e 94 41 24 	call	0x4882	; 0x4882 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    27f2:	00 91 cf 01 	lds	r16, 0x01CF
    27f6:	0e 94 b6 12 	call	0x256c	; 0x256c <host_keyboard_leds>
    27fa:	08 17       	cp	r16, r24
    27fc:	31 f0       	breq	.+12     	; 0x280a <keyboard_task+0x108>
        led_status = host_keyboard_leds();
    27fe:	0e 94 b6 12 	call	0x256c	; 0x256c <host_keyboard_leds>
    2802:	80 93 cf 01 	sts	0x01CF, r24
        keyboard_set_leds(led_status);
    2806:	0e 94 4f 13 	call	0x269e	; 0x269e <keyboard_set_leds>
    }
}
    280a:	2a 96       	adiw	r28, 0x0a	; 10
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	1f 91       	pop	r17
    281c:	0f 91       	pop	r16
    281e:	ff 90       	pop	r15
    2820:	ef 90       	pop	r14
    2822:	df 90       	pop	r13
    2824:	cf 90       	pop	r12
    2826:	bf 90       	pop	r11
    2828:	08 95       	ret

0000282a <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    282a:	cf 93       	push	r28
    282c:	df 93       	push	r29
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	2b 97       	sbiw	r28, 0x0b	; 11
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	4f 83       	std	Y+7, r20	; 0x07
    2840:	58 87       	std	Y+8, r21	; 0x08
    2842:	69 87       	std	Y+9, r22	; 0x09
    2844:	7a 87       	std	Y+10, r23	; 0x0a
    2846:	8b 87       	std	Y+11, r24	; 0x0b
    2848:	97 2f       	mov	r25, r23
    284a:	28 2f       	mov	r18, r24
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    284c:	de 01       	movw	r26, r28
    284e:	11 96       	adiw	r26, 0x01	; 1
    2850:	86 e0       	ldi	r24, 0x06	; 6
    2852:	fd 01       	movw	r30, r26
    2854:	11 92       	st	Z+, r1
    2856:	8a 95       	dec	r24
    2858:	e9 f7       	brne	.-6      	; 0x2854 <action_exec+0x2a>
    285a:	fe 01       	movw	r30, r28
    285c:	37 96       	adiw	r30, 0x07	; 7
    285e:	85 e0       	ldi	r24, 0x05	; 5
    2860:	01 90       	ld	r0, Z+
    2862:	0d 92       	st	X+, r0
    2864:	81 50       	subi	r24, 0x01	; 1
    2866:	e1 f7       	brne	.-8      	; 0x2860 <action_exec+0x36>
    2868:	49 83       	std	Y+1, r20	; 0x01
    286a:	5a 83       	std	Y+2, r21	; 0x02
    286c:	79 2f       	mov	r23, r25
    286e:	9c 83       	std	Y+4, r25	; 0x04
    2870:	2d 83       	std	Y+5, r18	; 0x05

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2872:	6b 81       	ldd	r22, Y+3	; 0x03
    2874:	82 2f       	mov	r24, r18
    2876:	9e 81       	ldd	r25, Y+6	; 0x06
    2878:	0e 94 14 1b 	call	0x3628	; 0x3628 <action_tapping_process>
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif

}
    287c:	2b 96       	adiw	r28, 0x0b	; 11
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	08 95       	ret

0000288e <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    288e:	cf 93       	push	r28
    2890:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2892:	88 23       	and	r24, r24
    2894:	09 f4       	brne	.+2      	; 0x2898 <register_code+0xa>
    2896:	cc c0       	rjmp	.+408    	; 0x2a30 <register_code+0x1a2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2898:	82 38       	cpi	r24, 0x82	; 130
    289a:	59 f4       	brne	.+22     	; 0x28b2 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    289c:	0e 94 b6 12 	call	0x256c	; 0x256c <host_keyboard_leds>
    28a0:	81 fd       	sbrc	r24, 1
    28a2:	c6 c0       	rjmp	.+396    	; 0x2a30 <register_code+0x1a2>
#endif
        add_key(KC_CAPSLOCK);
    28a4:	89 e3       	ldi	r24, 0x39	; 57
    28a6:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <add_key>
        send_keyboard_report();
    28aa:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    28ae:	89 e3       	ldi	r24, 0x39	; 57
    28b0:	0c c0       	rjmp	.+24     	; 0x28ca <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    28b2:	83 38       	cpi	r24, 0x83	; 131
    28b4:	79 f4       	brne	.+30     	; 0x28d4 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    28b6:	0e 94 b6 12 	call	0x256c	; 0x256c <host_keyboard_leds>
    28ba:	80 fd       	sbrc	r24, 0
    28bc:	b9 c0       	rjmp	.+370    	; 0x2a30 <register_code+0x1a2>
#endif
        add_key(KC_NUMLOCK);
    28be:	83 e5       	ldi	r24, 0x53	; 83
    28c0:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <add_key>
        send_keyboard_report();
    28c4:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    28c8:	83 e5       	ldi	r24, 0x53	; 83
    28ca:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <del_key>
        send_keyboard_report();
    28ce:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
    28d2:	ae c0       	rjmp	.+348    	; 0x2a30 <register_code+0x1a2>
    }

    else if (KC_LOCKING_SCROLL == code) {
    28d4:	84 38       	cpi	r24, 0x84	; 132
    28d6:	59 f4       	brne	.+22     	; 0x28ee <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    28d8:	0e 94 b6 12 	call	0x256c	; 0x256c <host_keyboard_leds>
    28dc:	82 fd       	sbrc	r24, 2
    28de:	a8 c0       	rjmp	.+336    	; 0x2a30 <register_code+0x1a2>
#endif
        add_key(KC_SCROLLLOCK);
    28e0:	87 e4       	ldi	r24, 0x47	; 71
    28e2:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <add_key>
        send_keyboard_report();
    28e6:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    28ea:	87 e4       	ldi	r24, 0x47	; 71
    28ec:	ee cf       	rjmp	.-36     	; 0x28ca <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    28ee:	84 50       	subi	r24, 0x04	; 4
    28f0:	81 3a       	cpi	r24, 0xA1	; 161
    28f2:	50 f4       	brcc	.+20     	; 0x2908 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    28f4:	8c 2f       	mov	r24, r28
    28f6:	0e 94 56 2a 	call	0x54ac	; 0x54ac <command_proc>
    28fa:	88 23       	and	r24, r24
    28fc:	09 f0       	breq	.+2      	; 0x2900 <register_code+0x72>
    28fe:	98 c0       	rjmp	.+304    	; 0x2a30 <register_code+0x1a2>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2900:	8c 2f       	mov	r24, r28
    2902:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <add_key>
    2906:	e3 cf       	rjmp	.-58     	; 0x28ce <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2908:	8c 2f       	mov	r24, r28
    290a:	80 5e       	subi	r24, 0xE0	; 224
    290c:	88 30       	cpi	r24, 0x08	; 8
    290e:	50 f4       	brcc	.+20     	; 0x2924 <register_code+0x96>
        add_mods(MOD_BIT(code));
    2910:	c7 70       	andi	r28, 0x07	; 7
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	01 c0       	rjmp	.+2      	; 0x291a <register_code+0x8c>
    2918:	88 0f       	add	r24, r24
    291a:	ca 95       	dec	r28
    291c:	ea f7       	brpl	.-6      	; 0x2918 <register_code+0x8a>
    291e:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <add_mods>
    2922:	d5 cf       	rjmp	.-86     	; 0x28ce <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2924:	8c 2f       	mov	r24, r28
    2926:	85 5a       	subi	r24, 0xA5	; 165
    2928:	83 30       	cpi	r24, 0x03	; 3
    292a:	78 f4       	brcc	.+30     	; 0x294a <register_code+0xbc>
        host_system_send(KEYCODE2SYSTEM(code));
    292c:	c5 3a       	cpi	r28, 0xA5	; 165
    292e:	29 f0       	breq	.+10     	; 0x293a <register_code+0xac>
    2930:	c6 3a       	cpi	r28, 0xA6	; 166
    2932:	31 f4       	brne	.+12     	; 0x2940 <register_code+0xb2>
    2934:	82 e8       	ldi	r24, 0x82	; 130
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	05 c0       	rjmp	.+10     	; 0x2944 <register_code+0xb6>
    293a:	81 e8       	ldi	r24, 0x81	; 129
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <register_code+0xb6>
    2940:	83 e8       	ldi	r24, 0x83	; 131
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	0e 94 19 13 	call	0x2632	; 0x2632 <host_system_send>
    2948:	73 c0       	rjmp	.+230    	; 0x2a30 <register_code+0x1a2>
    }
    else if IS_CONSUMER(code) {
    294a:	8c 2f       	mov	r24, r28
    294c:	88 5a       	subi	r24, 0xA8	; 168
    294e:	85 31       	cpi	r24, 0x15	; 21
    2950:	08 f0       	brcs	.+2      	; 0x2954 <register_code+0xc6>
    2952:	6e c0       	rjmp	.+220    	; 0x2a30 <register_code+0x1a2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2954:	c8 3a       	cpi	r28, 0xA8	; 168
    2956:	61 f1       	breq	.+88     	; 0x29b0 <register_code+0x122>
    2958:	c9 3a       	cpi	r28, 0xA9	; 169
    295a:	69 f1       	breq	.+90     	; 0x29b6 <register_code+0x128>
    295c:	ca 3a       	cpi	r28, 0xAA	; 170
    295e:	71 f1       	breq	.+92     	; 0x29bc <register_code+0x12e>
    2960:	cb 3a       	cpi	r28, 0xAB	; 171
    2962:	79 f1       	breq	.+94     	; 0x29c2 <register_code+0x134>
    2964:	cc 3a       	cpi	r28, 0xAC	; 172
    2966:	81 f1       	breq	.+96     	; 0x29c8 <register_code+0x13a>
    2968:	cd 3a       	cpi	r28, 0xAD	; 173
    296a:	89 f1       	breq	.+98     	; 0x29ce <register_code+0x140>
    296c:	ce 3a       	cpi	r28, 0xAE	; 174
    296e:	91 f1       	breq	.+100    	; 0x29d4 <register_code+0x146>
    2970:	cf 3a       	cpi	r28, 0xAF	; 175
    2972:	99 f1       	breq	.+102    	; 0x29da <register_code+0x14c>
    2974:	c1 3b       	cpi	r28, 0xB1	; 177
    2976:	a1 f1       	breq	.+104    	; 0x29e0 <register_code+0x152>
    2978:	c0 3b       	cpi	r28, 0xB0	; 176
    297a:	a9 f1       	breq	.+106    	; 0x29e6 <register_code+0x158>
    297c:	c2 3b       	cpi	r28, 0xB2	; 178
    297e:	b1 f1       	breq	.+108    	; 0x29ec <register_code+0x15e>
    2980:	c3 3b       	cpi	r28, 0xB3	; 179
    2982:	b9 f1       	breq	.+110    	; 0x29f2 <register_code+0x164>
    2984:	c4 3b       	cpi	r28, 0xB4	; 180
    2986:	c1 f1       	breq	.+112    	; 0x29f8 <register_code+0x16a>
    2988:	c5 3b       	cpi	r28, 0xB5	; 181
    298a:	c9 f1       	breq	.+114    	; 0x29fe <register_code+0x170>
    298c:	c6 3b       	cpi	r28, 0xB6	; 182
    298e:	d1 f1       	breq	.+116    	; 0x2a04 <register_code+0x176>
    2990:	c7 3b       	cpi	r28, 0xB7	; 183
    2992:	d9 f1       	breq	.+118    	; 0x2a0a <register_code+0x17c>
    2994:	c8 3b       	cpi	r28, 0xB8	; 184
    2996:	e1 f1       	breq	.+120    	; 0x2a10 <register_code+0x182>
    2998:	c9 3b       	cpi	r28, 0xB9	; 185
    299a:	e9 f1       	breq	.+122    	; 0x2a16 <register_code+0x188>
    299c:	ca 3b       	cpi	r28, 0xBA	; 186
    299e:	f1 f1       	breq	.+124    	; 0x2a1c <register_code+0x18e>
    29a0:	cb 3b       	cpi	r28, 0xBB	; 187
    29a2:	f9 f1       	breq	.+126    	; 0x2a22 <register_code+0x194>
    29a4:	cc 3b       	cpi	r28, 0xBC	; 188
    29a6:	09 f0       	breq	.+2      	; 0x29aa <register_code+0x11c>
    29a8:	3f c0       	rjmp	.+126    	; 0x2a28 <register_code+0x19a>
    29aa:	8a e2       	ldi	r24, 0x2A	; 42
    29ac:	92 e0       	ldi	r25, 0x02	; 2
    29ae:	3e c0       	rjmp	.+124    	; 0x2a2c <register_code+0x19e>
    29b0:	82 ee       	ldi	r24, 0xE2	; 226
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	3b c0       	rjmp	.+118    	; 0x2a2c <register_code+0x19e>
    29b6:	89 ee       	ldi	r24, 0xE9	; 233
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	38 c0       	rjmp	.+112    	; 0x2a2c <register_code+0x19e>
    29bc:	8a ee       	ldi	r24, 0xEA	; 234
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	35 c0       	rjmp	.+106    	; 0x2a2c <register_code+0x19e>
    29c2:	85 eb       	ldi	r24, 0xB5	; 181
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	32 c0       	rjmp	.+100    	; 0x2a2c <register_code+0x19e>
    29c8:	86 eb       	ldi	r24, 0xB6	; 182
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	2f c0       	rjmp	.+94     	; 0x2a2c <register_code+0x19e>
    29ce:	83 eb       	ldi	r24, 0xB3	; 179
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	2c c0       	rjmp	.+88     	; 0x2a2c <register_code+0x19e>
    29d4:	84 eb       	ldi	r24, 0xB4	; 180
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	29 c0       	rjmp	.+82     	; 0x2a2c <register_code+0x19e>
    29da:	87 eb       	ldi	r24, 0xB7	; 183
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	26 c0       	rjmp	.+76     	; 0x2a2c <register_code+0x19e>
    29e0:	8c ec       	ldi	r24, 0xCC	; 204
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	23 c0       	rjmp	.+70     	; 0x2a2c <register_code+0x19e>
    29e6:	8d ec       	ldi	r24, 0xCD	; 205
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	20 c0       	rjmp	.+64     	; 0x2a2c <register_code+0x19e>
    29ec:	83 e8       	ldi	r24, 0x83	; 131
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	1d c0       	rjmp	.+58     	; 0x2a2c <register_code+0x19e>
    29f2:	8a e8       	ldi	r24, 0x8A	; 138
    29f4:	91 e0       	ldi	r25, 0x01	; 1
    29f6:	1a c0       	rjmp	.+52     	; 0x2a2c <register_code+0x19e>
    29f8:	82 e9       	ldi	r24, 0x92	; 146
    29fa:	91 e0       	ldi	r25, 0x01	; 1
    29fc:	17 c0       	rjmp	.+46     	; 0x2a2c <register_code+0x19e>
    29fe:	84 e9       	ldi	r24, 0x94	; 148
    2a00:	91 e0       	ldi	r25, 0x01	; 1
    2a02:	14 c0       	rjmp	.+40     	; 0x2a2c <register_code+0x19e>
    2a04:	81 e2       	ldi	r24, 0x21	; 33
    2a06:	92 e0       	ldi	r25, 0x02	; 2
    2a08:	11 c0       	rjmp	.+34     	; 0x2a2c <register_code+0x19e>
    2a0a:	83 e2       	ldi	r24, 0x23	; 35
    2a0c:	92 e0       	ldi	r25, 0x02	; 2
    2a0e:	0e c0       	rjmp	.+28     	; 0x2a2c <register_code+0x19e>
    2a10:	84 e2       	ldi	r24, 0x24	; 36
    2a12:	92 e0       	ldi	r25, 0x02	; 2
    2a14:	0b c0       	rjmp	.+22     	; 0x2a2c <register_code+0x19e>
    2a16:	85 e2       	ldi	r24, 0x25	; 37
    2a18:	92 e0       	ldi	r25, 0x02	; 2
    2a1a:	08 c0       	rjmp	.+16     	; 0x2a2c <register_code+0x19e>
    2a1c:	86 e2       	ldi	r24, 0x26	; 38
    2a1e:	92 e0       	ldi	r25, 0x02	; 2
    2a20:	05 c0       	rjmp	.+10     	; 0x2a2c <register_code+0x19e>
    2a22:	87 e2       	ldi	r24, 0x27	; 39
    2a24:	92 e0       	ldi	r25, 0x02	; 2
    2a26:	02 c0       	rjmp	.+4      	; 0x2a2c <register_code+0x19e>
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	0e 94 2f 13 	call	0x265e	; 0x265e <host_consumer_send>
    }
}
    2a30:	cf 91       	pop	r28
    2a32:	08 95       	ret

00002a34 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2a34:	88 23       	and	r24, r24
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <unregister_code+0x6>
    2a38:	4e c0       	rjmp	.+156    	; 0x2ad6 <unregister_code+0xa2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2a3a:	82 38       	cpi	r24, 0x82	; 130
    2a3c:	59 f4       	brne	.+22     	; 0x2a54 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2a3e:	0e 94 b6 12 	call	0x256c	; 0x256c <host_keyboard_leds>
    2a42:	81 ff       	sbrs	r24, 1
    2a44:	48 c0       	rjmp	.+144    	; 0x2ad6 <unregister_code+0xa2>
#endif
        add_key(KC_CAPSLOCK);
    2a46:	89 e3       	ldi	r24, 0x39	; 57
    2a48:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <add_key>
        send_keyboard_report();
    2a4c:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2a50:	89 e3       	ldi	r24, 0x39	; 57
    2a52:	0c c0       	rjmp	.+24     	; 0x2a6c <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2a54:	83 38       	cpi	r24, 0x83	; 131
    2a56:	69 f4       	brne	.+26     	; 0x2a72 <unregister_code+0x3e>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2a58:	0e 94 b6 12 	call	0x256c	; 0x256c <host_keyboard_leds>
    2a5c:	80 ff       	sbrs	r24, 0
    2a5e:	3b c0       	rjmp	.+118    	; 0x2ad6 <unregister_code+0xa2>
#endif
        add_key(KC_NUMLOCK);
    2a60:	83 e5       	ldi	r24, 0x53	; 83
    2a62:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <add_key>
        send_keyboard_report();
    2a66:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2a6a:	83 e5       	ldi	r24, 0x53	; 83
    2a6c:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <del_key>
    2a70:	1f c0       	rjmp	.+62     	; 0x2ab0 <unregister_code+0x7c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_SCROLL == code) {
    2a72:	84 38       	cpi	r24, 0x84	; 132
    2a74:	59 f4       	brne	.+22     	; 0x2a8c <unregister_code+0x58>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2a76:	0e 94 b6 12 	call	0x256c	; 0x256c <host_keyboard_leds>
    2a7a:	82 ff       	sbrs	r24, 2
    2a7c:	2c c0       	rjmp	.+88     	; 0x2ad6 <unregister_code+0xa2>
#endif
        add_key(KC_SCROLLLOCK);
    2a7e:	87 e4       	ldi	r24, 0x47	; 71
    2a80:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <add_key>
        send_keyboard_report();
    2a84:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2a88:	87 e4       	ldi	r24, 0x47	; 71
    2a8a:	f0 cf       	rjmp	.-32     	; 0x2a6c <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2a8c:	98 2f       	mov	r25, r24
    2a8e:	94 50       	subi	r25, 0x04	; 4
    2a90:	91 3a       	cpi	r25, 0xA1	; 161
    2a92:	60 f3       	brcs	.-40     	; 0x2a6c <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2a94:	98 2f       	mov	r25, r24
    2a96:	90 5e       	subi	r25, 0xE0	; 224
    2a98:	98 30       	cpi	r25, 0x08	; 8
    2a9a:	68 f4       	brcc	.+26     	; 0x2ab6 <unregister_code+0x82>
        del_mods(MOD_BIT(code));
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	27 70       	andi	r18, 0x07	; 7
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	01 c0       	rjmp	.+2      	; 0x2aa8 <unregister_code+0x74>
    2aa6:	88 0f       	add	r24, r24
    2aa8:	2a 95       	dec	r18
    2aaa:	ea f7       	brpl	.-6      	; 0x2aa6 <unregister_code+0x72>
    2aac:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <del_mods>
        send_keyboard_report();
    2ab0:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
    2ab4:	08 95       	ret
    }
    else if IS_SYSTEM(code) {
    2ab6:	98 2f       	mov	r25, r24
    2ab8:	95 5a       	subi	r25, 0xA5	; 165
    2aba:	93 30       	cpi	r25, 0x03	; 3
    2abc:	28 f4       	brcc	.+10     	; 0x2ac8 <unregister_code+0x94>
        host_system_send(0);
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	0e 94 19 13 	call	0x2632	; 0x2632 <host_system_send>
    2ac6:	08 95       	ret
    }
    else if IS_CONSUMER(code) {
    2ac8:	88 5a       	subi	r24, 0xA8	; 168
    2aca:	85 31       	cpi	r24, 0x15	; 21
    2acc:	20 f4       	brcc	.+8      	; 0x2ad6 <unregister_code+0xa2>
        host_consumer_send(0);
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 2f 13 	call	0x265e	; 0x265e <host_consumer_send>
    2ad6:	08 95       	ret

00002ad8 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2ad8:	88 23       	and	r24, r24
    2ada:	21 f0       	breq	.+8      	; 0x2ae4 <register_mods+0xc>
        add_mods(mods);
    2adc:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <add_mods>
        send_keyboard_report();
    2ae0:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
    2ae4:	08 95       	ret

00002ae6 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2ae6:	88 23       	and	r24, r24
    2ae8:	21 f0       	breq	.+8      	; 0x2af2 <unregister_mods+0xc>
        del_mods(mods);
    2aea:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <del_mods>
        send_keyboard_report();
    2aee:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
    2af2:	08 95       	ret

00002af4 <process_action>:
#endif

}

void process_action(keyrecord_t *record)
{
    2af4:	9f 92       	push	r9
    2af6:	af 92       	push	r10
    2af8:	bf 92       	push	r11
    2afa:	cf 92       	push	r12
    2afc:	df 92       	push	r13
    2afe:	ef 92       	push	r14
    2b00:	ff 92       	push	r15
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <process_action+0x18>
    2b0c:	00 d0       	rcall	.+0      	; 0x2b0e <process_action+0x1a>
    2b0e:	00 d0       	rcall	.+0      	; 0x2b10 <process_action+0x1c>
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	5c 01       	movw	r10, r24
    bool do_release_oneshot = false;
    keyevent_t event = record->event;
    2b16:	de 01       	movw	r26, r28
    2b18:	11 96       	adiw	r26, 0x01	; 1
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	85 e0       	ldi	r24, 0x05	; 5
    2b1e:	01 90       	ld	r0, Z+
    2b20:	0d 92       	st	X+, r0
    2b22:	81 50       	subi	r24, 0x01	; 1
    2b24:	e1 f7       	brne	.-8      	; 0x2b1e <process_action+0x2a>
    2b26:	f5 01       	movw	r30, r10
    2b28:	30 81       	ld	r19, Z
    2b2a:	21 81       	ldd	r18, Z+1	; 0x01
    2b2c:	c2 80       	ldd	r12, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2b2e:	15 81       	ldd	r17, Z+5	; 0x05
    2b30:	12 95       	swap	r17
    2b32:	1f 70       	andi	r17, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2b34:	83 81       	ldd	r24, Z+3	; 0x03
    2b36:	94 81       	ldd	r25, Z+4	; 0x04
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <process_action+0x4a>
    2b3c:	4f c2       	rjmp	.+1182   	; 0x2fdc <process_action+0x4e8>
    2b3e:	2f 3f       	cpi	r18, 0xFF	; 255
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <process_action+0x50>
    2b42:	39 c2       	rjmp	.+1138   	; 0x2fb6 <process_action+0x4c2>
    2b44:	3f 3f       	cpi	r19, 0xFF	; 255
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <process_action+0x56>
    2b48:	36 c2       	rjmp	.+1132   	; 0x2fb6 <process_action+0x4c2>
    2b4a:	48 c2       	rjmp	.+1168   	; 0x2fdc <process_action+0x4e8>
#endif
    dprintln();


#ifndef NO_ACTION_ONESHOT
    if (is_oneshot_layer_active() && event.pressed) {
    2b4c:	cc 20       	and	r12, r12
    2b4e:	59 f0       	breq	.+22     	; 0x2b66 <process_action+0x72>
        clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <clear_oneshot_layer_state>
        do_release_oneshot = !is_oneshot_layer_active();
    2b58:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <is_oneshot_layer_active>
    2b5c:	99 24       	eor	r9, r9
    2b5e:	93 94       	inc	r9
    2b60:	98 26       	eor	r9, r24
    2b62:	9e 81       	ldd	r25, Y+6	; 0x06
    2b64:	01 c0       	rjmp	.+2      	; 0x2b68 <process_action+0x74>

}

void process_action(keyrecord_t *record)
{
    bool do_release_oneshot = false;
    2b66:	99 24       	eor	r9, r9
        clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
        do_release_oneshot = !is_oneshot_layer_active();
    }
#endif

    switch (action.kind.id) {
    2b68:	29 2f       	mov	r18, r25
    2b6a:	22 95       	swap	r18
    2b6c:	2f 70       	andi	r18, 0x0F	; 15
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	25 30       	cpi	r18, 0x05	; 5
    2b72:	31 05       	cpc	r19, r1
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <process_action+0x84>
    2b76:	ad c0       	rjmp	.+346    	; 0x2cd2 <process_action+0x1de>
    2b78:	26 30       	cpi	r18, 0x06	; 6
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	6c f4       	brge	.+26     	; 0x2b98 <process_action+0xa4>
    2b7e:	24 30       	cpi	r18, 0x04	; 4
    2b80:	31 05       	cpc	r19, r1
    2b82:	0c f0       	brlt	.+2      	; 0x2b86 <process_action+0x92>
    2b84:	85 c0       	rjmp	.+266    	; 0x2c90 <process_action+0x19c>
    2b86:	89 2f       	mov	r24, r25
    2b88:	80 7f       	andi	r24, 0xF0	; 240
    2b8a:	4f e0       	ldi	r20, 0x0F	; 15
    2b8c:	f4 2e       	mov	r15, r20
    2b8e:	f9 22       	and	r15, r25
    2b90:	22 30       	cpi	r18, 0x02	; 2
    2b92:	31 05       	cpc	r19, r1
    2b94:	94 f5       	brge	.+100    	; 0x2bfa <process_action+0x106>
    2b96:	15 c0       	rjmp	.+42     	; 0x2bc2 <process_action+0xce>
    2b98:	2c 30       	cpi	r18, 0x0C	; 12
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	4c f4       	brge	.+18     	; 0x2bb0 <process_action+0xbc>
    2b9e:	2a 30       	cpi	r18, 0x0A	; 10
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	0c f0       	brlt	.+2      	; 0x2ba6 <process_action+0xb2>
    2ba4:	56 c1       	rjmp	.+684    	; 0x2e52 <process_action+0x35e>
    2ba6:	28 30       	cpi	r18, 0x08	; 8
    2ba8:	31 05       	cpc	r19, r1
    2baa:	09 f0       	breq	.+2      	; 0x2bae <process_action+0xba>
    2bac:	f0 c1       	rjmp	.+992    	; 0x2f8e <process_action+0x49a>
    2bae:	9c c0       	rjmp	.+312    	; 0x2ce8 <process_action+0x1f4>
    2bb0:	2c 30       	cpi	r18, 0x0C	; 12
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <process_action+0xc4>
    2bb6:	dc c1       	rjmp	.+952    	; 0x2f70 <process_action+0x47c>
    2bb8:	2f 30       	cpi	r18, 0x0F	; 15
    2bba:	31 05       	cpc	r19, r1
    2bbc:	09 f0       	breq	.+2      	; 0x2bc0 <process_action+0xcc>
    2bbe:	e7 c1       	rjmp	.+974    	; 0x2f8e <process_action+0x49a>
    2bc0:	e0 c1       	rjmp	.+960    	; 0x2f82 <process_action+0x48e>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2bc2:	88 23       	and	r24, r24
    2bc4:	19 f0       	breq	.+6      	; 0x2bcc <process_action+0xd8>
    2bc6:	f2 94       	swap	r15
    2bc8:	90 ef       	ldi	r25, 0xF0	; 240
    2bca:	f9 22       	and	r15, r25
                                                                action.key.mods<<4;
                if (event.pressed) {
    2bcc:	cc 20       	and	r12, r12
    2bce:	49 f0       	breq	.+18     	; 0x2be2 <process_action+0xee>
                    if (mods) {
    2bd0:	ff 20       	and	r15, r15
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <process_action+0xe2>
    2bd4:	b9 c1       	rjmp	.+882    	; 0x2f48 <process_action+0x454>
                        add_weak_mods(mods);
    2bd6:	8f 2d       	mov	r24, r15
    2bd8:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <add_weak_mods>
                        send_keyboard_report();
    2bdc:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
    2be0:	b3 c1       	rjmp	.+870    	; 0x2f48 <process_action+0x454>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2be2:	80 2f       	mov	r24, r16
    2be4:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <unregister_code>
                    if (mods) {
    2be8:	ff 20       	and	r15, r15
    2bea:	09 f4       	brne	.+2      	; 0x2bee <process_action+0xfa>
    2bec:	d0 c1       	rjmp	.+928    	; 0x2f8e <process_action+0x49a>
                        del_weak_mods(mods);
    2bee:	8f 2d       	mov	r24, r15
    2bf0:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <del_weak_mods>
                        send_keyboard_report();
    2bf4:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
    2bf8:	ca c1       	rjmp	.+916    	; 0x2f8e <process_action+0x49a>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2bfa:	80 32       	cpi	r24, 0x20	; 32
    2bfc:	19 f0       	breq	.+6      	; 0x2c04 <process_action+0x110>
    2bfe:	f2 94       	swap	r15
    2c00:	80 ef       	ldi	r24, 0xF0	; 240
    2c02:	f8 22       	and	r15, r24
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2c04:	00 23       	and	r16, r16
    2c06:	19 f0       	breq	.+6      	; 0x2c0e <process_action+0x11a>
    2c08:	01 30       	cpi	r16, 0x01	; 1
    2c0a:	79 f5       	brne	.+94     	; 0x2c6a <process_action+0x176>
    2c0c:	24 c0       	rjmp	.+72     	; 0x2c56 <process_action+0x162>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2c0e:	cc 20       	and	r12, r12
    2c10:	81 f0       	breq	.+32     	; 0x2c32 <process_action+0x13e>
                            if (tap_count == 0) {
    2c12:	11 23       	and	r17, r17
    2c14:	a1 f1       	breq	.+104    	; 0x2c7e <process_action+0x18a>
                                dprint("MODS_TAP: Oneshot: 0\n");
                                register_mods(mods);
                            } else if (tap_count == 1) {
    2c16:	11 30       	cpi	r17, 0x01	; 1
    2c18:	21 f4       	brne	.+8      	; 0x2c22 <process_action+0x12e>
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2c1a:	8f 2d       	mov	r24, r15
    2c1c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <set_oneshot_mods>
    2c20:	b6 c1       	rjmp	.+876    	; 0x2f8e <process_action+0x49a>
                    #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
                            } else if (tap_count == ONESHOT_TAP_TOGGLE) {
    2c22:	12 30       	cpi	r17, 0x02	; 2
    2c24:	61 f5       	brne	.+88     	; 0x2c7e <process_action+0x18a>
                                dprint("MODS_TAP: Toggling oneshot");
                                clear_oneshot_mods();
    2c26:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <clear_oneshot_mods>
                                set_oneshot_locked_mods(mods);
    2c2a:	8f 2d       	mov	r24, r15
    2c2c:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <set_oneshot_locked_mods>
    2c30:	26 c0       	rjmp	.+76     	; 0x2c7e <process_action+0x18a>
                    #endif
                            } else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2c32:	11 23       	and	r17, r17
    2c34:	69 f0       	breq	.+26     	; 0x2c50 <process_action+0x15c>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            } else if (tap_count == 1) {
    2c36:	11 30       	cpi	r17, 0x01	; 1
    2c38:	41 f4       	brne	.+16     	; 0x2c4a <process_action+0x156>
                                // Retain Oneshot mods
                    #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
                                if (mods & get_mods()) {
    2c3a:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <get_mods>
    2c3e:	8f 21       	and	r24, r15
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <process_action+0x150>
    2c42:	a5 c1       	rjmp	.+842    	; 0x2f8e <process_action+0x49a>
                                    clear_oneshot_locked_mods();
    2c44:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <clear_oneshot_locked_mods>
    2c48:	03 c0       	rjmp	.+6      	; 0x2c50 <process_action+0x15c>
                                    clear_oneshot_mods();
                                    unregister_mods(mods);
                                }
                            } else if (tap_count == ONESHOT_TAP_TOGGLE) {
    2c4a:	12 30       	cpi	r17, 0x02	; 2
    2c4c:	09 f4       	brne	.+2      	; 0x2c50 <process_action+0x15c>
    2c4e:	9f c1       	rjmp	.+830    	; 0x2f8e <process_action+0x49a>
                                // Toggle Oneshot Layer
                    #endif
                            } else {
                                clear_oneshot_mods();
    2c50:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <clear_oneshot_mods>
    2c54:	1b c0       	rjmp	.+54     	; 0x2c8c <process_action+0x198>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2c56:	cc 20       	and	r12, r12
    2c58:	21 f0       	breq	.+8      	; 0x2c62 <process_action+0x16e>
                            if (tap_count <= TAPPING_TOGGLE) {
    2c5a:	16 30       	cpi	r17, 0x06	; 6
    2c5c:	08 f0       	brcs	.+2      	; 0x2c60 <process_action+0x16c>
    2c5e:	97 c1       	rjmp	.+814    	; 0x2f8e <process_action+0x49a>
    2c60:	0e c0       	rjmp	.+28     	; 0x2c7e <process_action+0x18a>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2c62:	15 30       	cpi	r17, 0x05	; 5
    2c64:	08 f0       	brcs	.+2      	; 0x2c68 <process_action+0x174>
    2c66:	93 c1       	rjmp	.+806    	; 0x2f8e <process_action+0x49a>
    2c68:	11 c0       	rjmp	.+34     	; 0x2c8c <process_action+0x198>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2c6a:	cc 20       	and	r12, r12
    2c6c:	61 f0       	breq	.+24     	; 0x2c86 <process_action+0x192>
                            if (tap_count > 0) {
    2c6e:	11 23       	and	r17, r17
    2c70:	31 f0       	breq	.+12     	; 0x2c7e <process_action+0x18a>
                                if (record->tap.interrupted) {
    2c72:	f5 01       	movw	r30, r10
    2c74:	85 81       	ldd	r24, Z+5	; 0x05
    2c76:	80 ff       	sbrs	r24, 0
    2c78:	67 c1       	rjmp	.+718    	; 0x2f48 <process_action+0x454>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2c7a:	8f 70       	andi	r24, 0x0F	; 15
    2c7c:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    2c7e:	8f 2d       	mov	r24, r15
    2c80:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <register_mods>
    2c84:	84 c1       	rjmp	.+776    	; 0x2f8e <process_action+0x49a>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2c86:	11 23       	and	r17, r17
    2c88:	09 f0       	breq	.+2      	; 0x2c8c <process_action+0x198>
    2c8a:	69 c1       	rjmp	.+722    	; 0x2f5e <process_action+0x46a>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    2c8c:	8f 2d       	mov	r24, r15
    2c8e:	ff c0       	rjmp	.+510    	; 0x2e8e <process_action+0x39a>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2c90:	29 2f       	mov	r18, r25
    2c92:	26 95       	lsr	r18
    2c94:	26 95       	lsr	r18
    2c96:	23 70       	andi	r18, 0x03	; 3
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	21 15       	cp	r18, r1
    2c9c:	31 05       	cpc	r19, r1
    2c9e:	29 f0       	breq	.+10     	; 0x2caa <process_action+0x1b6>
    2ca0:	21 30       	cpi	r18, 0x01	; 1
    2ca2:	31 05       	cpc	r19, r1
    2ca4:	09 f0       	breq	.+2      	; 0x2ca8 <process_action+0x1b4>
    2ca6:	73 c1       	rjmp	.+742    	; 0x2f8e <process_action+0x49a>
    2ca8:	0a c0       	rjmp	.+20     	; 0x2cbe <process_action+0x1ca>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2caa:	cc 20       	and	r12, r12
    2cac:	19 f0       	breq	.+6      	; 0x2cb4 <process_action+0x1c0>
                        host_system_send(action.usage.code);
    2cae:	80 2f       	mov	r24, r16
    2cb0:	93 70       	andi	r25, 0x03	; 3
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <process_action+0x1c4>
                    } else {
                        host_system_send(0);
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	0e 94 19 13 	call	0x2632	; 0x2632 <host_system_send>
    2cbc:	68 c1       	rjmp	.+720    	; 0x2f8e <process_action+0x49a>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2cbe:	cc 20       	and	r12, r12
    2cc0:	19 f0       	breq	.+6      	; 0x2cc8 <process_action+0x1d4>
                        host_consumer_send(action.usage.code);
    2cc2:	80 2f       	mov	r24, r16
    2cc4:	93 70       	andi	r25, 0x03	; 3
    2cc6:	02 c0       	rjmp	.+4      	; 0x2ccc <process_action+0x1d8>
                    } else {
                        host_consumer_send(0);
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	0e 94 2f 13 	call	0x265e	; 0x265e <host_consumer_send>
    2cd0:	5e c1       	rjmp	.+700    	; 0x2f8e <process_action+0x49a>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2cd2:	80 2f       	mov	r24, r16
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2cd4:	cc 20       	and	r12, r12
    2cd6:	19 f0       	breq	.+6      	; 0x2cde <process_action+0x1ea>
                mousekey_on(action.key.code);
    2cd8:	0e 94 81 22 	call	0x4502	; 0x4502 <mousekey_on>
    2cdc:	02 c0       	rjmp	.+4      	; 0x2ce2 <process_action+0x1ee>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2cde:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <mousekey_off>
                mousekey_send();
    2ce2:	0e 94 71 23 	call	0x46e2	; 0x46e2 <mousekey_send>
    2ce6:	53 c1       	rjmp	.+678    	; 0x2f8e <process_action+0x49a>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2ce8:	89 2f       	mov	r24, r25
    2cea:	83 70       	andi	r24, 0x03	; 3
    2cec:	09 f0       	breq	.+2      	; 0x2cf0 <process_action+0x1fc>
    2cee:	55 c0       	rjmp	.+170    	; 0x2d9a <process_action+0x2a6>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2cf0:	cc 20       	and	r12, r12
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <process_action+0x202>
    2cf4:	4c c1       	rjmp	.+664    	; 0x2f8e <process_action+0x49a>
                    uint8_t shift = action.layer_bitop.part*4;
    2cf6:	80 2f       	mov	r24, r16
    2cf8:	82 95       	swap	r24
    2cfa:	86 95       	lsr	r24
    2cfc:	87 70       	andi	r24, 0x07	; 7
    2cfe:	88 0f       	add	r24, r24
    2d00:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2d02:	20 2f       	mov	r18, r16
    2d04:	2f 70       	andi	r18, 0x0F	; 15
    2d06:	c2 2e       	mov	r12, r18
    2d08:	dd 24       	eor	r13, r13
    2d0a:	ee 24       	eor	r14, r14
    2d0c:	ff 24       	eor	r15, r15
    2d0e:	08 2e       	mov	r0, r24
    2d10:	04 c0       	rjmp	.+8      	; 0x2d1a <process_action+0x226>
    2d12:	cc 0c       	add	r12, r12
    2d14:	dd 1c       	adc	r13, r13
    2d16:	ee 1c       	adc	r14, r14
    2d18:	ff 1c       	adc	r15, r15
    2d1a:	0a 94       	dec	r0
    2d1c:	d2 f7       	brpl	.-12     	; 0x2d12 <process_action+0x21e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2d1e:	04 ff       	sbrs	r16, 4
    2d20:	10 c0       	rjmp	.+32     	; 0x2d42 <process_action+0x24e>
    2d22:	0f e0       	ldi	r16, 0x0F	; 15
    2d24:	10 e0       	ldi	r17, 0x00	; 0
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	04 c0       	rjmp	.+8      	; 0x2d34 <process_action+0x240>
    2d2c:	00 0f       	add	r16, r16
    2d2e:	11 1f       	adc	r17, r17
    2d30:	22 1f       	adc	r18, r18
    2d32:	33 1f       	adc	r19, r19
    2d34:	8a 95       	dec	r24
    2d36:	d2 f7       	brpl	.-12     	; 0x2d2c <process_action+0x238>
    2d38:	00 95       	com	r16
    2d3a:	10 95       	com	r17
    2d3c:	20 95       	com	r18
    2d3e:	30 95       	com	r19
    2d40:	03 c0       	rjmp	.+6      	; 0x2d48 <process_action+0x254>
    2d42:	00 e0       	ldi	r16, 0x00	; 0
    2d44:	10 e0       	ldi	r17, 0x00	; 0
    2d46:	98 01       	movw	r18, r16
                    switch (action.layer_bitop.op) {
    2d48:	96 95       	lsr	r25
    2d4a:	96 95       	lsr	r25
    2d4c:	93 70       	andi	r25, 0x03	; 3
    2d4e:	89 2f       	mov	r24, r25
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	82 30       	cpi	r24, 0x02	; 2
    2d54:	91 05       	cpc	r25, r1
    2d56:	79 f0       	breq	.+30     	; 0x2d76 <process_action+0x282>
    2d58:	83 30       	cpi	r24, 0x03	; 3
    2d5a:	91 05       	cpc	r25, r1
    2d5c:	a9 f0       	breq	.+42     	; 0x2d88 <process_action+0x294>
    2d5e:	c0 2a       	or	r12, r16
    2d60:	d1 2a       	or	r13, r17
    2d62:	e2 2a       	or	r14, r18
    2d64:	f3 2a       	or	r15, r19
    2d66:	81 30       	cpi	r24, 0x01	; 1
    2d68:	91 05       	cpc	r25, r1
    2d6a:	91 f0       	breq	.+36     	; 0x2d90 <process_action+0x29c>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2d6c:	c7 01       	movw	r24, r14
    2d6e:	b6 01       	movw	r22, r12
    2d70:	0e 94 84 1c 	call	0x3908	; 0x3908 <default_layer_and>
    2d74:	0c c1       	rjmp	.+536    	; 0x2f8e <process_action+0x49a>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2d76:	c0 2a       	or	r12, r16
    2d78:	d1 2a       	or	r13, r17
    2d7a:	e2 2a       	or	r14, r18
    2d7c:	f3 2a       	or	r15, r19
    2d7e:	c7 01       	movw	r24, r14
    2d80:	b6 01       	movw	r22, r12
    2d82:	0e 94 97 1c 	call	0x392e	; 0x392e <default_layer_xor>
    2d86:	03 c1       	rjmp	.+518    	; 0x2f8e <process_action+0x49a>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2d88:	c9 01       	movw	r24, r18
    2d8a:	b8 01       	movw	r22, r16
    2d8c:	0e 94 84 1c 	call	0x3908	; 0x3908 <default_layer_and>
    2d90:	c7 01       	movw	r24, r14
    2d92:	b6 01       	movw	r22, r12
    2d94:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <default_layer_or>
    2d98:	fa c0       	rjmp	.+500    	; 0x2f8e <process_action+0x49a>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2d9a:	cc 20       	and	r12, r12
    2d9c:	19 f0       	breq	.+6      	; 0x2da4 <process_action+0x2b0>
    2d9e:	80 ff       	sbrs	r24, 0
    2da0:	f6 c0       	rjmp	.+492    	; 0x2f8e <process_action+0x49a>
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <process_action+0x2b4>
    2da4:	81 ff       	sbrs	r24, 1
    2da6:	f3 c0       	rjmp	.+486    	; 0x2f8e <process_action+0x49a>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2da8:	80 2f       	mov	r24, r16
    2daa:	82 95       	swap	r24
    2dac:	86 95       	lsr	r24
    2dae:	87 70       	andi	r24, 0x07	; 7
    2db0:	88 0f       	add	r24, r24
    2db2:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2db4:	40 2f       	mov	r20, r16
    2db6:	4f 70       	andi	r20, 0x0F	; 15
    2db8:	c4 2e       	mov	r12, r20
    2dba:	dd 24       	eor	r13, r13
    2dbc:	ee 24       	eor	r14, r14
    2dbe:	ff 24       	eor	r15, r15
    2dc0:	08 2e       	mov	r0, r24
    2dc2:	04 c0       	rjmp	.+8      	; 0x2dcc <process_action+0x2d8>
    2dc4:	cc 0c       	add	r12, r12
    2dc6:	dd 1c       	adc	r13, r13
    2dc8:	ee 1c       	adc	r14, r14
    2dca:	ff 1c       	adc	r15, r15
    2dcc:	0a 94       	dec	r0
    2dce:	d2 f7       	brpl	.-12     	; 0x2dc4 <process_action+0x2d0>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2dd0:	04 ff       	sbrs	r16, 4
    2dd2:	10 c0       	rjmp	.+32     	; 0x2df4 <process_action+0x300>
    2dd4:	4f e0       	ldi	r20, 0x0F	; 15
    2dd6:	50 e0       	ldi	r21, 0x00	; 0
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	04 c0       	rjmp	.+8      	; 0x2de6 <process_action+0x2f2>
    2dde:	44 0f       	add	r20, r20
    2de0:	55 1f       	adc	r21, r21
    2de2:	66 1f       	adc	r22, r22
    2de4:	77 1f       	adc	r23, r23
    2de6:	8a 95       	dec	r24
    2de8:	d2 f7       	brpl	.-12     	; 0x2dde <process_action+0x2ea>
    2dea:	40 95       	com	r20
    2dec:	50 95       	com	r21
    2dee:	60 95       	com	r22
    2df0:	70 95       	com	r23
    2df2:	03 c0       	rjmp	.+6      	; 0x2dfa <process_action+0x306>
    2df4:	40 e0       	ldi	r20, 0x00	; 0
    2df6:	50 e0       	ldi	r21, 0x00	; 0
    2df8:	ba 01       	movw	r22, r20
                    switch (action.layer_bitop.op) {
    2dfa:	96 95       	lsr	r25
    2dfc:	96 95       	lsr	r25
    2dfe:	93 70       	andi	r25, 0x03	; 3
    2e00:	89 2f       	mov	r24, r25
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	82 30       	cpi	r24, 0x02	; 2
    2e06:	91 05       	cpc	r25, r1
    2e08:	91 f0       	breq	.+36     	; 0x2e2e <process_action+0x33a>
    2e0a:	83 30       	cpi	r24, 0x03	; 3
    2e0c:	91 05       	cpc	r25, r1
    2e0e:	c1 f0       	breq	.+48     	; 0x2e40 <process_action+0x34c>
    2e10:	4c 29       	or	r20, r12
    2e12:	5d 29       	or	r21, r13
    2e14:	6e 29       	or	r22, r14
    2e16:	7f 29       	or	r23, r15
    2e18:	81 30       	cpi	r24, 0x01	; 1
    2e1a:	91 05       	cpc	r25, r1
    2e1c:	29 f0       	breq	.+10     	; 0x2e28 <process_action+0x334>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2e1e:	cb 01       	movw	r24, r22
    2e20:	ba 01       	movw	r22, r20
    2e22:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <layer_and>
    2e26:	b3 c0       	rjmp	.+358    	; 0x2f8e <process_action+0x49a>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    2e28:	cb 01       	movw	r24, r22
    2e2a:	ba 01       	movw	r22, r20
    2e2c:	0f c0       	rjmp	.+30     	; 0x2e4c <process_action+0x358>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2e2e:	4c 29       	or	r20, r12
    2e30:	5d 29       	or	r21, r13
    2e32:	6e 29       	or	r22, r14
    2e34:	7f 29       	or	r23, r15
    2e36:	cb 01       	movw	r24, r22
    2e38:	ba 01       	movw	r22, r20
    2e3a:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <layer_xor>
    2e3e:	a7 c0       	rjmp	.+334    	; 0x2f8e <process_action+0x49a>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2e40:	cb 01       	movw	r24, r22
    2e42:	ba 01       	movw	r22, r20
    2e44:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <layer_and>
    2e48:	c7 01       	movw	r24, r14
    2e4a:	b6 01       	movw	r22, r12
    2e4c:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <layer_or>
    2e50:	9e c0       	rjmp	.+316    	; 0x2f8e <process_action+0x49a>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2e52:	01 3f       	cpi	r16, 0xF1	; 241
    2e54:	69 f1       	breq	.+90     	; 0x2eb0 <process_action+0x3bc>
    2e56:	02 3f       	cpi	r16, 0xF2	; 242
    2e58:	30 f4       	brcc	.+12     	; 0x2e66 <process_action+0x372>
    2e5a:	00 3e       	cpi	r16, 0xE0	; 224
    2e5c:	08 f4       	brcc	.+2      	; 0x2e60 <process_action+0x36c>
    2e5e:	70 c0       	rjmp	.+224    	; 0x2f40 <process_action+0x44c>
    2e60:	00 3f       	cpi	r16, 0xF0	; 240
    2e62:	48 f0       	brcs	.+18     	; 0x2e76 <process_action+0x382>
    2e64:	17 c0       	rjmp	.+46     	; 0x2e94 <process_action+0x3a0>
    2e66:	03 3f       	cpi	r16, 0xF3	; 243
    2e68:	79 f1       	breq	.+94     	; 0x2ec8 <process_action+0x3d4>
    2e6a:	03 3f       	cpi	r16, 0xF3	; 243
    2e6c:	38 f1       	brcs	.+78     	; 0x2ebc <process_action+0x3c8>
    2e6e:	04 3f       	cpi	r16, 0xF4	; 244
    2e70:	09 f0       	breq	.+2      	; 0x2e74 <process_action+0x380>
    2e72:	66 c0       	rjmp	.+204    	; 0x2f40 <process_action+0x44c>
    2e74:	33 c0       	rjmp	.+102    	; 0x2edc <process_action+0x3e8>
    2e76:	0f 70       	andi	r16, 0x0F	; 15
    2e78:	89 2f       	mov	r24, r25
    2e7a:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2e7c:	cc 20       	and	r12, r12
    2e7e:	21 f0       	breq	.+8      	; 0x2e88 <process_action+0x394>
                        layer_on(action.layer_tap.val);
    2e80:	0e 94 c0 1c 	call	0x3980	; 0x3980 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2e84:	80 2f       	mov	r24, r16
    2e86:	fc ce       	rjmp	.-520    	; 0x2c80 <process_action+0x18c>
                    } else {
                        layer_off(action.layer_tap.val);
    2e88:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2e8c:	80 2f       	mov	r24, r16
    2e8e:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <unregister_mods>
    2e92:	7d c0       	rjmp	.+250    	; 0x2f8e <process_action+0x49a>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2e94:	cc 20       	and	r12, r12
    2e96:	21 f0       	breq	.+8      	; 0x2ea0 <process_action+0x3ac>
                        if (tap_count < TAPPING_TOGGLE) {
    2e98:	15 30       	cpi	r17, 0x05	; 5
    2e9a:	08 f0       	brcs	.+2      	; 0x2e9e <process_action+0x3aa>
    2e9c:	78 c0       	rjmp	.+240    	; 0x2f8e <process_action+0x49a>
    2e9e:	03 c0       	rjmp	.+6      	; 0x2ea6 <process_action+0x3b2>
                            layer_invert(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2ea0:	16 30       	cpi	r17, 0x06	; 6
    2ea2:	08 f0       	brcs	.+2      	; 0x2ea6 <process_action+0x3b2>
    2ea4:	74 c0       	rjmp	.+232    	; 0x2f8e <process_action+0x49a>
                            layer_invert(action.layer_tap.val);
    2ea6:	89 2f       	mov	r24, r25
    2ea8:	8f 71       	andi	r24, 0x1F	; 31
    2eaa:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <layer_invert>
    2eae:	6f c0       	rjmp	.+222    	; 0x2f8e <process_action+0x49a>
    2eb0:	89 2f       	mov	r24, r25
    2eb2:	8f 71       	andi	r24, 0x1F	; 31
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2eb4:	cc 20       	and	r12, r12
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <process_action+0x3c6>
    2eb8:	58 c0       	rjmp	.+176    	; 0x2f6a <process_action+0x476>
    2eba:	4c c0       	rjmp	.+152    	; 0x2f54 <process_action+0x460>
    2ebc:	89 2f       	mov	r24, r25
    2ebe:	8f 71       	andi	r24, 0x1F	; 31
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2ec0:	cc 20       	and	r12, r12
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <process_action+0x3d2>
    2ec4:	47 c0       	rjmp	.+142    	; 0x2f54 <process_action+0x460>
    2ec6:	51 c0       	rjmp	.+162    	; 0x2f6a <process_action+0x476>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2ec8:	cc 20       	and	r12, r12
    2eca:	29 f0       	breq	.+10     	; 0x2ed6 <process_action+0x3e2>
    2ecc:	89 2f       	mov	r24, r25
    2ece:	8f 71       	andi	r24, 0x1F	; 31
    2ed0:	0e 94 b0 1c 	call	0x3960	; 0x3960 <layer_move>
    2ed4:	5c c0       	rjmp	.+184    	; 0x2f8e <process_action+0x49a>
                                    layer_clear();
    2ed6:	0e 94 aa 1c 	call	0x3954	; 0x3954 <layer_clear>
    2eda:	59 c0       	rjmp	.+178    	; 0x2f8e <process_action+0x49a>
                case OP_ONESHOT:
                    // Oneshot modifier
                #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
                    do_release_oneshot = false;
                    if (event.pressed) {
                        del_mods(get_oneshot_locked_mods());
    2edc:	9e 83       	std	Y+6, r25	; 0x06
            #ifndef NO_ACTION_ONESHOT
                case OP_ONESHOT:
                    // Oneshot modifier
                #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
                    do_release_oneshot = false;
                    if (event.pressed) {
    2ede:	cc 20       	and	r12, r12
    2ee0:	d1 f0       	breq	.+52     	; 0x2f16 <process_action+0x422>
                        del_mods(get_oneshot_locked_mods());
    2ee2:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <get_oneshot_locked_mods>
    2ee6:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <del_mods>
                        if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
    2eea:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <get_oneshot_layer_state>
    2eee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef0:	84 30       	cpi	r24, 0x04	; 4
    2ef2:	31 f4       	brne	.+12     	; 0x2f00 <process_action+0x40c>
                            reset_oneshot_layer();
    2ef4:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <reset_oneshot_layer>
                            layer_off(action.layer_tap.val);
    2ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    2efa:	89 2f       	mov	r24, r25
    2efc:	8f 71       	andi	r24, 0x1F	; 31
    2efe:	58 c0       	rjmp	.+176    	; 0x2fb0 <process_action+0x4bc>
                            break;
                        } else if (tap_count < ONESHOT_TAP_TOGGLE) {
    2f00:	12 30       	cpi	r17, 0x02	; 2
    2f02:	08 f0       	brcs	.+2      	; 0x2f06 <process_action+0x412>
    2f04:	6b c0       	rjmp	.+214    	; 0x2fdc <process_action+0x4e8>
                            layer_on(action.layer_tap.val);
    2f06:	19 2f       	mov	r17, r25
    2f08:	1f 71       	andi	r17, 0x1F	; 31
    2f0a:	81 2f       	mov	r24, r17
    2f0c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <layer_on>
                            set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
    2f10:	81 2f       	mov	r24, r17
    2f12:	63 e0       	ldi	r22, 0x03	; 3
    2f14:	0e c0       	rjmp	.+28     	; 0x2f32 <process_action+0x43e>
                        }
                    } else {
                        add_mods(get_oneshot_locked_mods());
    2f16:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <get_oneshot_locked_mods>
    2f1a:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <add_mods>
                        if (tap_count >= ONESHOT_TAP_TOGGLE) {
    2f1e:	12 30       	cpi	r17, 0x02	; 2
    2f20:	58 f0       	brcs	.+22     	; 0x2f38 <process_action+0x444>
                            reset_oneshot_layer();
    2f22:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <reset_oneshot_layer>
                            clear_oneshot_locked_mods();
    2f26:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <clear_oneshot_locked_mods>
                            set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
    2f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2c:	89 2f       	mov	r24, r25
    2f2e:	8f 71       	andi	r24, 0x1F	; 31
    2f30:	64 e0       	ldi	r22, 0x04	; 4
    2f32:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <set_oneshot_layer>
    2f36:	52 c0       	rjmp	.+164    	; 0x2fdc <process_action+0x4e8>
                        } else {
                            clear_oneshot_layer_state(ONESHOT_PRESSED);
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <clear_oneshot_layer_state>
    2f3e:	4e c0       	rjmp	.+156    	; 0x2fdc <process_action+0x4e8>
                #endif
                    break;
            #endif
                default:
                    /* tap key */
                    if (event.pressed) {
    2f40:	cc 20       	and	r12, r12
    2f42:	59 f0       	breq	.+22     	; 0x2f5a <process_action+0x466>
                        if (tap_count > 0) {
    2f44:	11 23       	and	r17, r17
    2f46:	21 f0       	breq	.+8      	; 0x2f50 <process_action+0x45c>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2f48:	80 2f       	mov	r24, r16
    2f4a:	0e 94 47 14 	call	0x288e	; 0x288e <register_code>
    2f4e:	1f c0       	rjmp	.+62     	; 0x2f8e <process_action+0x49a>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
    2f50:	89 2f       	mov	r24, r25
    2f52:	8f 71       	andi	r24, 0x1F	; 31
    2f54:	0e 94 c0 1c 	call	0x3980	; 0x3980 <layer_on>
    2f58:	1a c0       	rjmp	.+52     	; 0x2f8e <process_action+0x49a>
                        }
                    } else {
                        if (tap_count > 0) {
    2f5a:	11 23       	and	r17, r17
    2f5c:	21 f0       	breq	.+8      	; 0x2f66 <process_action+0x472>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2f5e:	80 2f       	mov	r24, r16
    2f60:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <unregister_code>
    2f64:	14 c0       	rjmp	.+40     	; 0x2f8e <process_action+0x49a>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
                            layer_off(action.layer_tap.val);
    2f66:	89 2f       	mov	r24, r25
    2f68:	8f 71       	andi	r24, 0x1F	; 31
    2f6a:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <layer_off>
    2f6e:	0f c0       	rjmp	.+30     	; 0x2f8e <process_action+0x49a>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2f70:	49 2f       	mov	r20, r25
    2f72:	4f 70       	andi	r20, 0x0F	; 15
    2f74:	c5 01       	movw	r24, r10
    2f76:	60 2f       	mov	r22, r16
    2f78:	0e 94 09 20 	call	0x4012	; 0x4012 <action_get_macro>
    2f7c:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <action_macro_play>
            break;
    2f80:	06 c0       	rjmp	.+12     	; 0x2f8e <process_action+0x49a>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2f82:	49 2f       	mov	r20, r25
    2f84:	4f 70       	andi	r20, 0x0F	; 15
    2f86:	c5 01       	movw	r24, r10
    2f88:	60 2f       	mov	r22, r16
    2f8a:	0e 94 03 07 	call	0xe06	; 0xe06 <action_function>

#ifndef NO_ACTION_ONESHOT
    /* Because we switch layers after a oneshot event, we need to release the
     * key before we leave the layer or no key up event will be generated.
     */
    if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
    2f8e:	99 20       	and	r9, r9
    2f90:	29 f1       	breq	.+74     	; 0x2fdc <process_action+0x4e8>
    2f92:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <get_oneshot_layer_state>
    2f96:	80 fd       	sbrc	r24, 0
    2f98:	21 c0       	rjmp	.+66     	; 0x2fdc <process_action+0x4e8>
        record->event.pressed = false;
    2f9a:	f5 01       	movw	r30, r10
    2f9c:	12 82       	std	Z+2, r1	; 0x02
        layer_on(get_oneshot_layer());
    2f9e:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <get_oneshot_layer>
    2fa2:	0e 94 c0 1c 	call	0x3980	; 0x3980 <layer_on>
        process_action(record);
    2fa6:	c5 01       	movw	r24, r10
    2fa8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <process_action>
        layer_off(get_oneshot_layer());
    2fac:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <get_oneshot_layer>
    2fb0:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <layer_off>
    2fb4:	13 c0       	rjmp	.+38     	; 0x2fdc <process_action+0x4e8>
        dprintf("Oneshot layer: timeout\n");
        clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
    }
#endif

    action_t action = layer_switch_get_action(event.key);
    2fb6:	39 83       	std	Y+1, r19	; 0x01
    2fb8:	2a 83       	std	Y+2, r18	; 0x02
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbe:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <layer_switch_get_action>
    2fc2:	08 2f       	mov	r16, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2fc4:	9e 83       	std	Y+6, r25	; 0x06
    2fc6:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2fca:	0e 94 6d 1c 	call	0x38da	; 0x38da <default_layer_debug>
#endif
    dprintln();


#ifndef NO_ACTION_ONESHOT
    if (is_oneshot_layer_active() && event.pressed) {
    2fce:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <is_oneshot_layer_active>
    2fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd4:	88 23       	and	r24, r24
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <process_action+0x4e6>
    2fd8:	b9 cd       	rjmp	.-1166   	; 0x2b4c <process_action+0x58>
    2fda:	c5 cd       	rjmp	.-1142   	; 0x2b66 <process_action+0x72>
        layer_on(get_oneshot_layer());
        process_action(record);
        layer_off(get_oneshot_layer());
    }
#endif
}
    2fdc:	26 96       	adiw	r28, 0x06	; 6
    2fde:	0f b6       	in	r0, 0x3f	; 63
    2fe0:	f8 94       	cli
    2fe2:	de bf       	out	0x3e, r29	; 62
    2fe4:	0f be       	out	0x3f, r0	; 63
    2fe6:	cd bf       	out	0x3d, r28	; 61
    2fe8:	df 91       	pop	r29
    2fea:	cf 91       	pop	r28
    2fec:	1f 91       	pop	r17
    2fee:	0f 91       	pop	r16
    2ff0:	ff 90       	pop	r15
    2ff2:	ef 90       	pop	r14
    2ff4:	df 90       	pop	r13
    2ff6:	cf 90       	pop	r12
    2ff8:	bf 90       	pop	r11
    2ffa:	af 90       	pop	r10
    2ffc:	9f 90       	pop	r9
    2ffe:	08 95       	ret

00003000 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    3000:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <clear_weak_mods>
    clear_keys();
    3004:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <clear_keys>
    send_keyboard_report();
    3008:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    300c:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <mousekey_clear>
    mousekey_send();
    3010:	0e 94 71 23 	call	0x46e2	; 0x46e2 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	0e 94 19 13 	call	0x2632	; 0x2632 <host_system_send>
    host_consumer_send(0);
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 2f 13 	call	0x265e	; 0x265e <host_consumer_send>
#endif
}
    3024:	08 95       	ret

00003026 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    3026:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <clear_mods>
    clear_keyboard_but_mods();
    302a:	0e 94 00 18 	call	0x3000	; 0x3000 <clear_keyboard_but_mods>
}
    302e:	08 95       	ret

00003030 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    3030:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <layer_switch_get_action>

    switch (action.kind.id) {
    3034:	29 2f       	mov	r18, r25
    3036:	22 95       	swap	r18
    3038:	2f 70       	andi	r18, 0x0F	; 15
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	2c 30       	cpi	r18, 0x0C	; 12
    303e:	31 05       	cpc	r19, r1
    3040:	4c f4       	brge	.+18     	; 0x3054 <is_tap_key+0x24>
    3042:	2a 30       	cpi	r18, 0x0A	; 10
    3044:	31 05       	cpc	r19, r1
    3046:	6c f4       	brge	.+26     	; 0x3062 <is_tap_key+0x32>
    3048:	22 50       	subi	r18, 0x02	; 2
    304a:	30 40       	sbci	r19, 0x00	; 0
    304c:	22 30       	cpi	r18, 0x02	; 2
    304e:	31 05       	cpc	r19, r1
    3050:	b8 f4       	brcc	.+46     	; 0x3080 <is_tap_key+0x50>
    3052:	07 c0       	rjmp	.+14     	; 0x3062 <is_tap_key+0x32>
    3054:	2c 30       	cpi	r18, 0x0C	; 12
    3056:	31 05       	cpc	r19, r1
    3058:	79 f0       	breq	.+30     	; 0x3078 <is_tap_key+0x48>
    305a:	2f 30       	cpi	r18, 0x0F	; 15
    305c:	31 05       	cpc	r19, r1
    305e:	81 f4       	brne	.+32     	; 0x3080 <is_tap_key+0x50>
    3060:	0b c0       	rjmp	.+22     	; 0x3078 <is_tap_key+0x48>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    3062:	80 3f       	cpi	r24, 0xF0	; 240
    3064:	39 f0       	breq	.+14     	; 0x3074 <is_tap_key+0x44>
    3066:	81 3f       	cpi	r24, 0xF1	; 241
    3068:	18 f4       	brcc	.+6      	; 0x3070 <is_tap_key+0x40>
    306a:	80 3e       	cpi	r24, 0xE0	; 224
    306c:	58 f4       	brcc	.+22     	; 0x3084 <is_tap_key+0x54>
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <is_tap_key+0x44>
    3070:	84 3f       	cpi	r24, 0xF4	; 244
    3072:	41 f4       	brne	.+16     	; 0x3084 <is_tap_key+0x54>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                case OP_ONESHOT:
                    return true;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    3078:	9f 70       	andi	r25, 0x0F	; 15
    host_system_send(0);
    host_consumer_send(0);
#endif
}

bool is_tap_key(keypos_t key)
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	93 fd       	sbrc	r25, 3
    307e:	03 c0       	rjmp	.+6      	; 0x3086 <is_tap_key+0x56>
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	08 95       	ret
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                case OP_ONESHOT:
                    return true;
            }
            return false;
    3084:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    3086:	08 95       	ret

00003088 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    3088:	cf 93       	push	r28
    308a:	df 93       	push	r29
    308c:	00 d0       	rcall	.+0      	; 0x308e <debug_event+0x6>
    308e:	00 d0       	rcall	.+0      	; 0x3090 <debug_event+0x8>
    3090:	0f 92       	push	r0
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	08 95       	ret

000030a6 <debug_record>:

void debug_record(keyrecord_t record)
{
    30a6:	cf 93       	push	r28
    30a8:	df 93       	push	r29
    30aa:	00 d0       	rcall	.+0      	; 0x30ac <debug_record+0x6>
    30ac:	00 d0       	rcall	.+0      	; 0x30ae <debug_record+0x8>
    30ae:	00 d0       	rcall	.+0      	; 0x30b0 <debug_record+0xa>
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    30b4:	26 96       	adiw	r28, 0x06	; 6
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	df 91       	pop	r29
    30c2:	cf 91       	pop	r28
    30c4:	08 95       	ret

000030c6 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    30c6:	cf 93       	push	r28
    30c8:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30ca:	c0 91 d6 01 	lds	r28, 0x01D6
    30ce:	14 c0       	rjmp	.+40     	; 0x30f8 <debug_waiting_buffer+0x32>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    30d0:	d0 e0       	ldi	r29, 0x00	; 0
    30d2:	fe 01       	movw	r30, r28
    30d4:	ee 0f       	add	r30, r30
    30d6:	ff 1f       	adc	r31, r31
    30d8:	ec 0f       	add	r30, r28
    30da:	fd 1f       	adc	r31, r29
    30dc:	ee 0f       	add	r30, r30
    30de:	ff 1f       	adc	r31, r31
    30e0:	e9 52       	subi	r30, 0x29	; 41
    30e2:	fe 4f       	sbci	r31, 0xFE	; 254
    30e4:	40 81       	ld	r20, Z
    30e6:	51 81       	ldd	r21, Z+1	; 0x01
    30e8:	62 81       	ldd	r22, Z+2	; 0x02
    30ea:	73 81       	ldd	r23, Z+3	; 0x03
    30ec:	84 81       	ldd	r24, Z+4	; 0x04
    30ee:	95 81       	ldd	r25, Z+5	; 0x05
    30f0:	0e 94 53 18 	call	0x30a6	; 0x30a6 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30f4:	21 96       	adiw	r28, 0x01	; 1
    30f6:	c7 70       	andi	r28, 0x07	; 7
    30f8:	80 91 07 02 	lds	r24, 0x0207
    30fc:	c8 17       	cp	r28, r24
    30fe:	41 f7       	brne	.-48     	; 0x30d0 <debug_waiting_buffer+0xa>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    3100:	df 91       	pop	r29
    3102:	cf 91       	pop	r28
    3104:	08 95       	ret

00003106 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    3106:	40 91 d0 01 	lds	r20, 0x01D0
    310a:	50 91 d1 01 	lds	r21, 0x01D1
    310e:	60 91 d2 01 	lds	r22, 0x01D2
    3112:	70 91 d3 01 	lds	r23, 0x01D3
    3116:	80 91 d4 01 	lds	r24, 0x01D4
    311a:	90 91 d5 01 	lds	r25, 0x01D5
    311e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <debug_record>
}
    3122:	08 95       	ret

00003124 <IS_NOEVENT.isra.0>:
    3124:	41 15       	cp	r20, r1
    3126:	51 05       	cpc	r21, r1
    3128:	51 f0       	breq	.+20     	; 0x313e <IS_NOEVENT.isra.0+0x1a>
    312a:	6f 3f       	cpi	r22, 0xFF	; 255
    312c:	59 f4       	brne	.+22     	; 0x3144 <IS_NOEVENT.isra.0+0x20>
    312e:	21 e0       	ldi	r18, 0x01	; 1
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	8f 3f       	cpi	r24, 0xFF	; 255
    3134:	11 f0       	breq	.+4      	; 0x313a <IS_NOEVENT.isra.0+0x16>
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	c9 01       	movw	r24, r18
    313c:	08 95       	ret
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	08 95       	ret
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	08 95       	ret

0000314a <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    314a:	cf 92       	push	r12
    314c:	df 92       	push	r13
    314e:	ef 92       	push	r14
    3150:	ff 92       	push	r15
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
    3156:	cf 93       	push	r28
    3158:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    315a:	80 91 d5 01 	lds	r24, 0x01D5
    315e:	82 95       	swap	r24
    3160:	8f 70       	andi	r24, 0x0F	; 15
    3162:	09 f0       	breq	.+2      	; 0x3166 <waiting_buffer_scan_tap+0x1c>
    3164:	5c c0       	rjmp	.+184    	; 0x321e <waiting_buffer_scan_tap+0xd4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    3166:	80 91 d2 01 	lds	r24, 0x01D2
    316a:	88 23       	and	r24, r24
    316c:	09 f4       	brne	.+2      	; 0x3170 <waiting_buffer_scan_tap+0x26>
    316e:	57 c0       	rjmp	.+174    	; 0x321e <waiting_buffer_scan_tap+0xd4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3170:	c0 91 d6 01 	lds	r28, 0x01D6
    3174:	e0 90 07 02 	lds	r14, 0x0207
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3178:	d0 91 d0 01 	lds	r29, 0x01D0
    317c:	f0 90 d1 01 	lds	r15, 0x01D1
    3180:	00 91 d3 01 	lds	r16, 0x01D3
    3184:	10 91 d4 01 	lds	r17, 0x01D4
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    3188:	68 01       	movw	r12, r16
    318a:	c0 94       	com	r12
    318c:	d0 94       	com	r13
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    318e:	44 c0       	rjmp	.+136    	; 0x3218 <waiting_buffer_scan_tap+0xce>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3190:	8d 2f       	mov	r24, r29
    3192:	6f 2d       	mov	r22, r15
    3194:	a8 01       	movw	r20, r16
    3196:	0e 94 92 18 	call	0x3124	; 0x3124 <IS_NOEVENT.isra.0>
    319a:	88 23       	and	r24, r24
    319c:	d9 f5       	brne	.+118    	; 0x3214 <waiting_buffer_scan_tap+0xca>
    319e:	2c 2f       	mov	r18, r28
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	f9 01       	movw	r30, r18
    31a4:	ee 0f       	add	r30, r30
    31a6:	ff 1f       	adc	r31, r31
    31a8:	e2 0f       	add	r30, r18
    31aa:	f3 1f       	adc	r31, r19
    31ac:	ee 0f       	add	r30, r30
    31ae:	ff 1f       	adc	r31, r31
    31b0:	e9 52       	subi	r30, 0x29	; 41
    31b2:	fe 4f       	sbci	r31, 0xFE	; 254
    31b4:	81 81       	ldd	r24, Z+1	; 0x01
    31b6:	f8 16       	cp	r15, r24
    31b8:	69 f5       	brne	.+90     	; 0x3214 <waiting_buffer_scan_tap+0xca>
    31ba:	80 81       	ld	r24, Z
    31bc:	d8 17       	cp	r29, r24
    31be:	51 f5       	brne	.+84     	; 0x3214 <waiting_buffer_scan_tap+0xca>
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	88 23       	and	r24, r24
    31c4:	39 f5       	brne	.+78     	; 0x3214 <waiting_buffer_scan_tap+0xca>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    31c6:	83 81       	ldd	r24, Z+3	; 0x03
    31c8:	94 81       	ldd	r25, Z+4	; 0x04
    31ca:	80 17       	cp	r24, r16
    31cc:	91 07       	cpc	r25, r17
    31ce:	18 f0       	brcs	.+6      	; 0x31d6 <waiting_buffer_scan_tap+0x8c>
    31d0:	80 1b       	sub	r24, r16
    31d2:	91 0b       	sbc	r25, r17
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <waiting_buffer_scan_tap+0x90>
    31d6:	8c 0d       	add	r24, r12
    31d8:	9d 1d       	adc	r25, r13
    31da:	88 3c       	cpi	r24, 0xC8	; 200
    31dc:	91 05       	cpc	r25, r1
    31de:	d0 f4       	brcc	.+52     	; 0x3214 <waiting_buffer_scan_tap+0xca>
            tapping_key.tap.count = 1;
    31e0:	80 91 d5 01 	lds	r24, 0x01D5
    31e4:	8f 70       	andi	r24, 0x0F	; 15
    31e6:	80 61       	ori	r24, 0x10	; 16
    31e8:	80 93 d5 01 	sts	0x01D5, r24
            waiting_buffer[i].tap.count = 1;
    31ec:	f9 01       	movw	r30, r18
    31ee:	ee 0f       	add	r30, r30
    31f0:	ff 1f       	adc	r31, r31
    31f2:	e2 0f       	add	r30, r18
    31f4:	f3 1f       	adc	r31, r19
    31f6:	ee 0f       	add	r30, r30
    31f8:	ff 1f       	adc	r31, r31
    31fa:	e4 52       	subi	r30, 0x24	; 36
    31fc:	fe 4f       	sbci	r31, 0xFE	; 254
    31fe:	80 81       	ld	r24, Z
    3200:	8f 70       	andi	r24, 0x0F	; 15
    3202:	80 61       	ori	r24, 0x10	; 16
    3204:	80 83       	st	Z, r24
            process_action(&tapping_key);
    3206:	80 ed       	ldi	r24, 0xD0	; 208
    3208:	91 e0       	ldi	r25, 0x01	; 1
    320a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    320e:	0e 94 63 18 	call	0x30c6	; 0x30c6 <debug_waiting_buffer>
            return;
    3212:	05 c0       	rjmp	.+10     	; 0x321e <waiting_buffer_scan_tap+0xd4>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3214:	cf 5f       	subi	r28, 0xFF	; 255
    3216:	c7 70       	andi	r28, 0x07	; 7
    3218:	ce 15       	cp	r28, r14
    321a:	09 f0       	breq	.+2      	; 0x321e <waiting_buffer_scan_tap+0xd4>
    321c:	b9 cf       	rjmp	.-142    	; 0x3190 <waiting_buffer_scan_tap+0x46>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    321e:	df 91       	pop	r29
    3220:	cf 91       	pop	r28
    3222:	1f 91       	pop	r17
    3224:	0f 91       	pop	r16
    3226:	ff 90       	pop	r15
    3228:	ef 90       	pop	r14
    322a:	df 90       	pop	r13
    322c:	cf 90       	pop	r12
    322e:	08 95       	ret

00003230 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    3230:	7f 92       	push	r7
    3232:	8f 92       	push	r8
    3234:	9f 92       	push	r9
    3236:	af 92       	push	r10
    3238:	bf 92       	push	r11
    323a:	cf 92       	push	r12
    323c:	df 92       	push	r13
    323e:	ef 92       	push	r14
    3240:	ff 92       	push	r15
    3242:	0f 93       	push	r16
    3244:	1f 93       	push	r17
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	cd b7       	in	r28, 0x3d	; 61
    324c:	de b7       	in	r29, 0x3e	; 62
    324e:	61 97       	sbiw	r28, 0x11	; 17
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	f8 94       	cli
    3254:	de bf       	out	0x3e, r29	; 62
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	cd bf       	out	0x3d, r28	; 61
    325a:	5c 01       	movw	r10, r24
    keyevent_t event = keyp->event;
    325c:	de 01       	movw	r26, r28
    325e:	11 96       	adiw	r26, 0x01	; 1
    3260:	fc 01       	movw	r30, r24
    3262:	85 e0       	ldi	r24, 0x05	; 5
    3264:	01 90       	ld	r0, Z+
    3266:	0d 92       	st	X+, r0
    3268:	81 50       	subi	r24, 0x01	; 1
    326a:	e1 f7       	brne	.-8      	; 0x3264 <process_tapping+0x34>
    326c:	d5 01       	movw	r26, r10
    326e:	ec 90       	ld	r14, X
    3270:	11 96       	adiw	r26, 0x01	; 1
    3272:	dc 90       	ld	r13, X
    3274:	11 97       	sbiw	r26, 0x01	; 1
    3276:	12 96       	adiw	r26, 0x02	; 2
    3278:	fc 90       	ld	r15, X
    327a:	12 97       	sbiw	r26, 0x02	; 2
    327c:	13 96       	adiw	r26, 0x03	; 3
    327e:	8d 90       	ld	r8, X+
    3280:	9c 90       	ld	r9, X
    3282:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    3284:	70 90 d0 01 	lds	r7, 0x01D0
    3288:	c0 90 d1 01 	lds	r12, 0x01D1
    328c:	00 91 d3 01 	lds	r16, 0x01D3
    3290:	10 91 d4 01 	lds	r17, 0x01D4
    3294:	87 2d       	mov	r24, r7
    3296:	6c 2d       	mov	r22, r12
    3298:	a8 01       	movw	r20, r16
    329a:	0e 94 92 18 	call	0x3124	; 0x3124 <IS_NOEVENT.isra.0>
    329e:	88 23       	and	r24, r24
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <process_tapping+0x74>
    32a2:	7f c1       	rjmp	.+766    	; 0x35a2 <process_tapping+0x372>
    32a4:	80 91 d2 01 	lds	r24, 0x01D2
    32a8:	88 23       	and	r24, r24
    32aa:	09 f4       	brne	.+2      	; 0x32ae <process_tapping+0x7e>
    32ac:	08 c1       	rjmp	.+528    	; 0x34be <process_tapping+0x28e>
        if (WITHIN_TAPPING_TERM(event)) {
    32ae:	80 16       	cp	r8, r16
    32b0:	91 06       	cpc	r9, r17
    32b2:	38 f0       	brcs	.+14     	; 0x32c2 <process_tapping+0x92>
    32b4:	c4 01       	movw	r24, r8
    32b6:	80 1b       	sub	r24, r16
    32b8:	91 0b       	sbc	r25, r17
    32ba:	88 3c       	cpi	r24, 0xC8	; 200
    32bc:	91 05       	cpc	r25, r1
    32be:	48 f0       	brcs	.+18     	; 0x32d2 <process_tapping+0xa2>
    32c0:	a6 c0       	rjmp	.+332    	; 0x340e <process_tapping+0x1de>
    32c2:	00 95       	com	r16
    32c4:	10 95       	com	r17
    32c6:	08 0d       	add	r16, r8
    32c8:	19 1d       	adc	r17, r9
    32ca:	08 3c       	cpi	r16, 0xC8	; 200
    32cc:	11 05       	cpc	r17, r1
    32ce:	08 f0       	brcs	.+2      	; 0x32d2 <process_tapping+0xa2>
    32d0:	9e c0       	rjmp	.+316    	; 0x340e <process_tapping+0x1de>
            if (tapping_key.tap.count == 0) {
    32d2:	80 91 d5 01 	lds	r24, 0x01D5
    32d6:	98 2f       	mov	r25, r24
    32d8:	90 7f       	andi	r25, 0xF0	; 240
    32da:	09 f0       	breq	.+2      	; 0x32de <process_tapping+0xae>
    32dc:	58 c0       	rjmp	.+176    	; 0x338e <process_tapping+0x15e>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    32de:	cd 14       	cp	r12, r13
    32e0:	99 f4       	brne	.+38     	; 0x3308 <process_tapping+0xd8>
    32e2:	7e 14       	cp	r7, r14
    32e4:	89 f4       	brne	.+34     	; 0x3308 <process_tapping+0xd8>
    32e6:	ff 20       	and	r15, r15
    32e8:	79 f4       	brne	.+30     	; 0x3308 <process_tapping+0xd8>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    32ea:	8f 70       	andi	r24, 0x0F	; 15
    32ec:	80 61       	ori	r24, 0x10	; 16
    32ee:	80 93 d5 01 	sts	0x01D5, r24
                    debug_tapping_key();
    32f2:	0e 94 83 18 	call	0x3106	; 0x3106 <debug_tapping_key>
                    process_action(&tapping_key);
    32f6:	80 ed       	ldi	r24, 0xD0	; 208
    32f8:	91 e0       	ldi	r25, 0x01	; 1
    32fa:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    32fe:	80 91 d5 01 	lds	r24, 0x01D5
    3302:	f5 01       	movw	r30, r10
    3304:	85 83       	std	Z+5, r24	; 0x05
    3306:	69 c1       	rjmp	.+722    	; 0x35da <process_tapping+0x3aa>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    3308:	8e 2d       	mov	r24, r14
    330a:	6d 2d       	mov	r22, r13
    330c:	a4 01       	movw	r20, r8
    330e:	0e 94 92 18 	call	0x3124	; 0x3124 <IS_NOEVENT.isra.0>
    3312:	88 23       	and	r24, r24
    3314:	99 f5       	brne	.+102    	; 0x337c <process_tapping+0x14c>
    3316:	ff 20       	and	r15, r15
    3318:	a1 f5       	brne	.+104    	; 0x3382 <process_tapping+0x152>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    331a:	80 91 d6 01 	lds	r24, 0x01D6
    331e:	20 91 07 02 	lds	r18, 0x0207
    3322:	16 c0       	rjmp	.+44     	; 0x3350 <process_tapping+0x120>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	fc 01       	movw	r30, r24
    3328:	ee 0f       	add	r30, r30
    332a:	ff 1f       	adc	r31, r31
    332c:	e8 0f       	add	r30, r24
    332e:	f9 1f       	adc	r31, r25
    3330:	ee 0f       	add	r30, r30
    3332:	ff 1f       	adc	r31, r31
    3334:	e9 52       	subi	r30, 0x29	; 41
    3336:	fe 4f       	sbci	r31, 0xFE	; 254
    3338:	31 81       	ldd	r19, Z+1	; 0x01
    333a:	d3 16       	cp	r13, r19
    333c:	39 f4       	brne	.+14     	; 0x334c <process_tapping+0x11c>
    333e:	30 81       	ld	r19, Z
    3340:	e3 16       	cp	r14, r19
    3342:	21 f4       	brne	.+8      	; 0x334c <process_tapping+0x11c>
    3344:	32 81       	ldd	r19, Z+2	; 0x02
    3346:	33 23       	and	r19, r19
    3348:	09 f0       	breq	.+2      	; 0x334c <process_tapping+0x11c>
    334a:	47 c1       	rjmp	.+654    	; 0x35da <process_tapping+0x3aa>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    334c:	01 96       	adiw	r24, 0x01	; 1
    334e:	87 70       	andi	r24, 0x07	; 7
    3350:	82 17       	cp	r24, r18
    3352:	41 f7       	brne	.-48     	; 0x3324 <process_tapping+0xf4>
    3354:	57 c1       	rjmp	.+686    	; 0x3604 <process_tapping+0x3d4>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3356:	9f 70       	andi	r25, 0x0F	; 15
    3358:	61 f0       	breq	.+24     	; 0x3372 <process_tapping+0x142>
    335a:	88 23       	and	r24, r24
    335c:	51 f4       	brne	.+20     	; 0x3372 <process_tapping+0x142>
    335e:	3d c1       	rjmp	.+634    	; 0x35da <process_tapping+0x3aa>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3360:	9f 70       	andi	r25, 0x0F	; 15
    3362:	39 f0       	breq	.+14     	; 0x3372 <process_tapping+0x142>
    3364:	d5 01       	movw	r26, r10
    3366:	15 96       	adiw	r26, 0x05	; 5
    3368:	9c 91       	ld	r25, X
    336a:	15 97       	sbiw	r26, 0x05	; 5
    336c:	90 7f       	andi	r25, 0xF0	; 240
    336e:	09 f4       	brne	.+2      	; 0x3372 <process_tapping+0x142>
    3370:	34 c1       	rjmp	.+616    	; 0x35da <process_tapping+0x3aa>
                            if (IS_MOD(action.key.code)) return false;
    3372:	80 5e       	subi	r24, 0xE0	; 224
    3374:	88 30       	cpi	r24, 0x08	; 8
    3376:	08 f4       	brcc	.+2      	; 0x337a <process_tapping+0x14a>
    3378:	30 c1       	rjmp	.+608    	; 0x35da <process_tapping+0x3aa>
    337a:	2a c1       	rjmp	.+596    	; 0x35d0 <process_tapping+0x3a0>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    337c:	ff 20       	and	r15, r15
    337e:	09 f4       	brne	.+2      	; 0x3382 <process_tapping+0x152>
    3380:	2c c1       	rjmp	.+600    	; 0x35da <process_tapping+0x3aa>
                        tapping_key.tap.interrupted = true;
    3382:	80 91 d5 01 	lds	r24, 0x01D5
    3386:	81 60       	ori	r24, 0x01	; 1
    3388:	80 93 d5 01 	sts	0x01D5, r24
    338c:	26 c1       	rjmp	.+588    	; 0x35da <process_tapping+0x3aa>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    338e:	cd 14       	cp	r12, r13
    3390:	91 f4       	brne	.+36     	; 0x33b6 <process_tapping+0x186>
    3392:	7e 14       	cp	r7, r14
    3394:	81 f4       	brne	.+32     	; 0x33b6 <process_tapping+0x186>
    3396:	ff 20       	and	r15, r15
    3398:	71 f4       	brne	.+28     	; 0x33b6 <process_tapping+0x186>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    339a:	f5 01       	movw	r30, r10
    339c:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    339e:	c5 01       	movw	r24, r10
    33a0:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <process_action>
                    tapping_key = *keyp;
    33a4:	a0 ed       	ldi	r26, 0xD0	; 208
    33a6:	b1 e0       	ldi	r27, 0x01	; 1
    33a8:	f5 01       	movw	r30, r10
    33aa:	86 e0       	ldi	r24, 0x06	; 6
    33ac:	01 90       	ld	r0, Z+
    33ae:	0d 92       	st	X+, r0
    33b0:	81 50       	subi	r24, 0x01	; 1
    33b2:	e1 f7       	brne	.-8      	; 0x33ac <process_tapping+0x17c>
    33b4:	0a c1       	rjmp	.+532    	; 0x35ca <process_tapping+0x39a>
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    33b6:	e9 82       	std	Y+1, r14	; 0x01
    33b8:	da 82       	std	Y+2, r13	; 0x02
    33ba:	89 81       	ldd	r24, Y+1	; 0x01
    33bc:	9a 81       	ldd	r25, Y+2	; 0x02
    33be:	0e 94 18 18 	call	0x3030	; 0x3030 <is_tap_key>
    33c2:	88 23       	and	r24, r24
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <process_tapping+0x198>
    33c6:	04 c1       	rjmp	.+520    	; 0x35d0 <process_tapping+0x3a0>
    33c8:	ff 20       	and	r15, r15
    33ca:	09 f4       	brne	.+2      	; 0x33ce <process_tapping+0x19e>
    33cc:	01 c1       	rjmp	.+514    	; 0x35d0 <process_tapping+0x3a0>
                    if (tapping_key.tap.count > 1) {
    33ce:	20 91 d5 01 	lds	r18, 0x01D5
    33d2:	82 2f       	mov	r24, r18
    33d4:	82 95       	swap	r24
    33d6:	8f 70       	andi	r24, 0x0F	; 15
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	82 30       	cpi	r24, 0x02	; 2
    33dc:	91 05       	cpc	r25, r1
    33de:	74 f0       	brlt	.+28     	; 0x33fc <process_tapping+0x1cc>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    33e0:	80 91 d0 01 	lds	r24, 0x01D0
    33e4:	90 91 d1 01 	lds	r25, 0x01D1
    33e8:	9d 87       	std	Y+13, r25	; 0x0d
    33ea:	8c 87       	std	Y+12, r24	; 0x0c
    33ec:	1e 86       	std	Y+14, r1	; 0x0e
    33ee:	98 8a       	std	Y+16, r9	; 0x10
    33f0:	8f 86       	std	Y+15, r8	; 0x0f
    33f2:	29 8b       	std	Y+17, r18	; 0x11
    33f4:	ce 01       	movw	r24, r28
    33f6:	0c 96       	adiw	r24, 0x0c	; 12
    33f8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    33fc:	a0 ed       	ldi	r26, 0xD0	; 208
    33fe:	b1 e0       	ldi	r27, 0x01	; 1
    3400:	f5 01       	movw	r30, r10
    3402:	86 e0       	ldi	r24, 0x06	; 6
    3404:	01 90       	ld	r0, Z+
    3406:	0d 92       	st	X+, r0
    3408:	81 50       	subi	r24, 0x01	; 1
    340a:	e1 f7       	brne	.-8      	; 0x3404 <process_tapping+0x1d4>
    340c:	dc c0       	rjmp	.+440    	; 0x35c6 <process_tapping+0x396>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    340e:	80 91 d5 01 	lds	r24, 0x01D5
    3412:	98 2f       	mov	r25, r24
    3414:	90 7f       	andi	r25, 0xF0	; 240
    3416:	a1 f4       	brne	.+40     	; 0x3440 <process_tapping+0x210>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    3418:	e9 82       	std	Y+1, r14	; 0x01
    341a:	da 82       	std	Y+2, r13	; 0x02
    341c:	fb 82       	std	Y+3, r15	; 0x03
    341e:	78 2d       	mov	r23, r8
    3420:	9d 82       	std	Y+5, r9	; 0x05
    3422:	8c 82       	std	Y+4, r8	; 0x04
    3424:	4e 2d       	mov	r20, r14
    3426:	5d 2d       	mov	r21, r13
    3428:	6f 2d       	mov	r22, r15
    342a:	8d 81       	ldd	r24, Y+5	; 0x05
    342c:	0e 94 44 18 	call	0x3088	; 0x3088 <debug_event>
                process_action(&tapping_key);
    3430:	00 ed       	ldi	r16, 0xD0	; 208
    3432:	11 e0       	ldi	r17, 0x01	; 1
    3434:	c8 01       	movw	r24, r16
    3436:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <process_action>
                tapping_key = (keyrecord_t){};
    343a:	86 e0       	ldi	r24, 0x06	; 6
    343c:	d8 01       	movw	r26, r16
    343e:	ab c0       	rjmp	.+342    	; 0x3596 <process_tapping+0x366>
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3440:	cd 14       	cp	r12, r13
    3442:	89 f4       	brne	.+34     	; 0x3466 <process_tapping+0x236>
    3444:	7e 14       	cp	r7, r14
    3446:	79 f4       	brne	.+30     	; 0x3466 <process_tapping+0x236>
    3448:	ff 20       	and	r15, r15
    344a:	69 f4       	brne	.+26     	; 0x3466 <process_tapping+0x236>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    344c:	f5 01       	movw	r30, r10
    344e:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    3450:	c5 01       	movw	r24, r10
    3452:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <process_action>
                    tapping_key = (keyrecord_t){};
    3456:	e0 ed       	ldi	r30, 0xD0	; 208
    3458:	f1 e0       	ldi	r31, 0x01	; 1
    345a:	86 e0       	ldi	r24, 0x06	; 6
    345c:	df 01       	movw	r26, r30
    345e:	1d 92       	st	X+, r1
    3460:	8a 95       	dec	r24
    3462:	e9 f7       	brne	.-6      	; 0x345e <process_tapping+0x22e>
    3464:	b8 c0       	rjmp	.+368    	; 0x35d6 <process_tapping+0x3a6>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3466:	e9 82       	std	Y+1, r14	; 0x01
    3468:	da 82       	std	Y+2, r13	; 0x02
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	9a 81       	ldd	r25, Y+2	; 0x02
    346e:	0e 94 18 18 	call	0x3030	; 0x3030 <is_tap_key>
    3472:	88 23       	and	r24, r24
    3474:	09 f4       	brne	.+2      	; 0x3478 <process_tapping+0x248>
    3476:	ac c0       	rjmp	.+344    	; 0x35d0 <process_tapping+0x3a0>
    3478:	ff 20       	and	r15, r15
    347a:	09 f4       	brne	.+2      	; 0x347e <process_tapping+0x24e>
    347c:	a9 c0       	rjmp	.+338    	; 0x35d0 <process_tapping+0x3a0>
                    if (tapping_key.tap.count > 1) {
    347e:	20 91 d5 01 	lds	r18, 0x01D5
    3482:	82 2f       	mov	r24, r18
    3484:	82 95       	swap	r24
    3486:	8f 70       	andi	r24, 0x0F	; 15
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	82 30       	cpi	r24, 0x02	; 2
    348c:	91 05       	cpc	r25, r1
    348e:	74 f0       	brlt	.+28     	; 0x34ac <process_tapping+0x27c>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3490:	80 91 d0 01 	lds	r24, 0x01D0
    3494:	90 91 d1 01 	lds	r25, 0x01D1
    3498:	9f 83       	std	Y+7, r25	; 0x07
    349a:	8e 83       	std	Y+6, r24	; 0x06
    349c:	18 86       	std	Y+8, r1	; 0x08
    349e:	9a 86       	std	Y+10, r9	; 0x0a
    34a0:	89 86       	std	Y+9, r8	; 0x09
    34a2:	2b 87       	std	Y+11, r18	; 0x0b
    34a4:	ce 01       	movw	r24, r28
    34a6:	06 96       	adiw	r24, 0x06	; 6
    34a8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    34ac:	a0 ed       	ldi	r26, 0xD0	; 208
    34ae:	b1 e0       	ldi	r27, 0x01	; 1
    34b0:	f5 01       	movw	r30, r10
    34b2:	86 e0       	ldi	r24, 0x06	; 6
    34b4:	01 90       	ld	r0, Z+
    34b6:	0d 92       	st	X+, r0
    34b8:	81 50       	subi	r24, 0x01	; 1
    34ba:	e1 f7       	brne	.-8      	; 0x34b4 <process_tapping+0x284>
    34bc:	84 c0       	rjmp	.+264    	; 0x35c6 <process_tapping+0x396>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    34be:	80 16       	cp	r8, r16
    34c0:	91 06       	cpc	r9, r17
    34c2:	38 f0       	brcs	.+14     	; 0x34d2 <process_tapping+0x2a2>
    34c4:	c4 01       	movw	r24, r8
    34c6:	80 1b       	sub	r24, r16
    34c8:	91 0b       	sbc	r25, r17
    34ca:	88 3c       	cpi	r24, 0xC8	; 200
    34cc:	91 05       	cpc	r25, r1
    34ce:	48 f0       	brcs	.+18     	; 0x34e2 <process_tapping+0x2b2>
    34d0:	52 c0       	rjmp	.+164    	; 0x3576 <process_tapping+0x346>
    34d2:	00 95       	com	r16
    34d4:	10 95       	com	r17
    34d6:	08 0d       	add	r16, r8
    34d8:	19 1d       	adc	r17, r9
    34da:	08 3c       	cpi	r16, 0xC8	; 200
    34dc:	11 05       	cpc	r17, r1
    34de:	08 f0       	brcs	.+2      	; 0x34e2 <process_tapping+0x2b2>
    34e0:	4a c0       	rjmp	.+148    	; 0x3576 <process_tapping+0x346>
            if (event.pressed) {
    34e2:	ff 20       	and	r15, r15
    34e4:	09 f4       	brne	.+2      	; 0x34e8 <process_tapping+0x2b8>
    34e6:	74 c0       	rjmp	.+232    	; 0x35d0 <process_tapping+0x3a0>
                if (IS_TAPPING_KEY(event.key)) {
    34e8:	cd 14       	cp	r12, r13
    34ea:	71 f5       	brne	.+92     	; 0x3548 <process_tapping+0x318>
    34ec:	7e 14       	cp	r7, r14
    34ee:	61 f5       	brne	.+88     	; 0x3548 <process_tapping+0x318>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    34f0:	20 91 d5 01 	lds	r18, 0x01D5
    34f4:	20 fd       	sbrc	r18, 0
    34f6:	1f c0       	rjmp	.+62     	; 0x3536 <process_tapping+0x306>
    34f8:	32 2f       	mov	r19, r18
    34fa:	32 95       	swap	r19
    34fc:	3f 70       	andi	r19, 0x0F	; 15
    34fe:	83 2f       	mov	r24, r19
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	00 97       	sbiw	r24, 0x00	; 0
    3504:	c1 f0       	breq	.+48     	; 0x3536 <process_tapping+0x306>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3506:	f5 01       	movw	r30, r10
    3508:	25 83       	std	Z+5, r18	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    350a:	8f 30       	cpi	r24, 0x0F	; 15
    350c:	91 05       	cpc	r25, r1
    350e:	39 f0       	breq	.+14     	; 0x351e <process_tapping+0x2ee>
    3510:	83 2f       	mov	r24, r19
    3512:	8f 5f       	subi	r24, 0xFF	; 255
    3514:	82 95       	swap	r24
    3516:	80 7f       	andi	r24, 0xF0	; 240
    3518:	2f 70       	andi	r18, 0x0F	; 15
    351a:	28 2b       	or	r18, r24
    351c:	25 83       	std	Z+5, r18	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    351e:	c5 01       	movw	r24, r10
    3520:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <process_action>
                        tapping_key = *keyp;
    3524:	a0 ed       	ldi	r26, 0xD0	; 208
    3526:	b1 e0       	ldi	r27, 0x01	; 1
    3528:	f5 01       	movw	r30, r10
    352a:	86 e0       	ldi	r24, 0x06	; 6
    352c:	01 90       	ld	r0, Z+
    352e:	0d 92       	st	X+, r0
    3530:	81 50       	subi	r24, 0x01	; 1
    3532:	e1 f7       	brne	.-8      	; 0x352c <process_tapping+0x2fc>
    3534:	4a c0       	rjmp	.+148    	; 0x35ca <process_tapping+0x39a>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    3536:	a0 ed       	ldi	r26, 0xD0	; 208
    3538:	b1 e0       	ldi	r27, 0x01	; 1
    353a:	f5 01       	movw	r30, r10
    353c:	86 e0       	ldi	r24, 0x06	; 6
    353e:	01 90       	ld	r0, Z+
    3540:	0d 92       	st	X+, r0
    3542:	81 50       	subi	r24, 0x01	; 1
    3544:	e1 f7       	brne	.-8      	; 0x353e <process_tapping+0x30e>
    3546:	47 c0       	rjmp	.+142    	; 0x35d6 <process_tapping+0x3a6>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    3548:	e9 82       	std	Y+1, r14	; 0x01
    354a:	da 82       	std	Y+2, r13	; 0x02
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	9a 81       	ldd	r25, Y+2	; 0x02
    3550:	0e 94 18 18 	call	0x3030	; 0x3030 <is_tap_key>
    3554:	88 23       	and	r24, r24
    3556:	49 f0       	breq	.+18     	; 0x356a <process_tapping+0x33a>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    3558:	a0 ed       	ldi	r26, 0xD0	; 208
    355a:	b1 e0       	ldi	r27, 0x01	; 1
    355c:	f5 01       	movw	r30, r10
    355e:	86 e0       	ldi	r24, 0x06	; 6
    3560:	01 90       	ld	r0, Z+
    3562:	0d 92       	st	X+, r0
    3564:	81 50       	subi	r24, 0x01	; 1
    3566:	e1 f7       	brne	.-8      	; 0x3560 <process_tapping+0x330>
    3568:	2e c0       	rjmp	.+92     	; 0x35c6 <process_tapping+0x396>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    356a:	80 91 d5 01 	lds	r24, 0x01D5
    356e:	81 60       	ori	r24, 0x01	; 1
    3570:	80 93 d5 01 	sts	0x01D5, r24
    3574:	2d c0       	rjmp	.+90     	; 0x35d0 <process_tapping+0x3a0>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    3576:	e9 82       	std	Y+1, r14	; 0x01
    3578:	da 82       	std	Y+2, r13	; 0x02
    357a:	fb 82       	std	Y+3, r15	; 0x03
    357c:	78 2d       	mov	r23, r8
    357e:	9d 82       	std	Y+5, r9	; 0x05
    3580:	8c 82       	std	Y+4, r8	; 0x04
    3582:	4e 2d       	mov	r20, r14
    3584:	5d 2d       	mov	r21, r13
    3586:	6f 2d       	mov	r22, r15
    3588:	8d 81       	ldd	r24, Y+5	; 0x05
    358a:	0e 94 44 18 	call	0x3088	; 0x3088 <debug_event>
            tapping_key = (keyrecord_t){};
    358e:	e0 ed       	ldi	r30, 0xD0	; 208
    3590:	f1 e0       	ldi	r31, 0x01	; 1
    3592:	86 e0       	ldi	r24, 0x06	; 6
    3594:	df 01       	movw	r26, r30
    3596:	1d 92       	st	X+, r1
    3598:	8a 95       	dec	r24
    359a:	e9 f7       	brne	.-6      	; 0x3596 <process_tapping+0x366>
            debug_tapping_key();
    359c:	0e 94 83 18 	call	0x3106	; 0x3106 <debug_tapping_key>
    35a0:	1c c0       	rjmp	.+56     	; 0x35da <process_tapping+0x3aa>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    35a2:	ff 20       	and	r15, r15
    35a4:	a9 f0       	breq	.+42     	; 0x35d0 <process_tapping+0x3a0>
    35a6:	e9 82       	std	Y+1, r14	; 0x01
    35a8:	da 82       	std	Y+2, r13	; 0x02
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	9a 81       	ldd	r25, Y+2	; 0x02
    35ae:	0e 94 18 18 	call	0x3030	; 0x3030 <is_tap_key>
    35b2:	88 23       	and	r24, r24
    35b4:	69 f0       	breq	.+26     	; 0x35d0 <process_tapping+0x3a0>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    35b6:	a0 ed       	ldi	r26, 0xD0	; 208
    35b8:	b1 e0       	ldi	r27, 0x01	; 1
    35ba:	f5 01       	movw	r30, r10
    35bc:	86 e0       	ldi	r24, 0x06	; 6
    35be:	01 90       	ld	r0, Z+
    35c0:	0d 92       	st	X+, r0
    35c2:	81 50       	subi	r24, 0x01	; 1
    35c4:	e1 f7       	brne	.-8      	; 0x35be <process_tapping+0x38e>
            waiting_buffer_scan_tap();
    35c6:	0e 94 a5 18 	call	0x314a	; 0x314a <waiting_buffer_scan_tap>
            debug_tapping_key();
    35ca:	0e 94 83 18 	call	0x3106	; 0x3106 <debug_tapping_key>
    35ce:	03 c0       	rjmp	.+6      	; 0x35d6 <process_tapping+0x3a6>
            return true;
        } else {
            process_action(keyp);
    35d0:	c5 01       	movw	r24, r10
    35d2:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <process_action>
            return true;
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	01 c0       	rjmp	.+2      	; 0x35dc <process_tapping+0x3ac>
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
                        tapping_key.tap.interrupted = true;
                    }
                    // enqueue 
                    return false;
    35da:	80 e0       	ldi	r24, 0x00	; 0
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    35dc:	61 96       	adiw	r28, 0x11	; 17
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	df 91       	pop	r29
    35ea:	cf 91       	pop	r28
    35ec:	1f 91       	pop	r17
    35ee:	0f 91       	pop	r16
    35f0:	ff 90       	pop	r15
    35f2:	ef 90       	pop	r14
    35f4:	df 90       	pop	r13
    35f6:	cf 90       	pop	r12
    35f8:	bf 90       	pop	r11
    35fa:	af 90       	pop	r10
    35fc:	9f 90       	pop	r9
    35fe:	8f 90       	pop	r8
    3600:	7f 90       	pop	r7
    3602:	08 95       	ret
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3604:	e9 82       	std	Y+1, r14	; 0x01
    3606:	da 82       	std	Y+2, r13	; 0x02
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	9a 81       	ldd	r25, Y+2	; 0x02
    360c:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <layer_switch_get_action>
                    switch (action.kind.id) {
    3610:	29 2f       	mov	r18, r25
    3612:	22 95       	swap	r18
    3614:	2f 70       	andi	r18, 0x0F	; 15
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	22 30       	cpi	r18, 0x02	; 2
    361a:	31 05       	cpc	r19, r1
    361c:	0c f4       	brge	.+2      	; 0x3620 <process_tapping+0x3f0>
    361e:	9b ce       	rjmp	.-714    	; 0x3356 <process_tapping+0x126>
    3620:	24 30       	cpi	r18, 0x04	; 4
    3622:	31 05       	cpc	r19, r1
    3624:	ac f6       	brge	.-86     	; 0x35d0 <process_tapping+0x3a0>
    3626:	9c ce       	rjmp	.-712    	; 0x3360 <process_tapping+0x130>

00003628 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3628:	ef 92       	push	r14
    362a:	ff 92       	push	r15
    362c:	0f 93       	push	r16
    362e:	1f 93       	push	r17
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
    3638:	2c 97       	sbiw	r28, 0x0c	; 12
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	f8 94       	cli
    363e:	de bf       	out	0x3e, r29	; 62
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	cd bf       	out	0x3d, r28	; 61
    3644:	4f 83       	std	Y+7, r20	; 0x07
    3646:	58 87       	std	Y+8, r21	; 0x08
    3648:	69 87       	std	Y+9, r22	; 0x09
    364a:	7a 87       	std	Y+10, r23	; 0x0a
    364c:	8b 87       	std	Y+11, r24	; 0x0b
    364e:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3650:	ce 01       	movw	r24, r28
    3652:	07 96       	adiw	r24, 0x07	; 7
    3654:	0e 94 18 19 	call	0x3230	; 0x3230 <process_tapping>
    3658:	88 23       	and	r24, r24
    365a:	91 f0       	breq	.+36     	; 0x3680 <action_tapping_process+0x58>
        if (!IS_NOEVENT(record.event)) {
    365c:	4a 85       	ldd	r20, Y+10	; 0x0a
    365e:	5b 85       	ldd	r21, Y+11	; 0x0b
    3660:	8f 81       	ldd	r24, Y+7	; 0x07
    3662:	68 85       	ldd	r22, Y+8	; 0x08
    3664:	0e 94 92 18 	call	0x3124	; 0x3124 <IS_NOEVENT.isra.0>
    3668:	88 23       	and	r24, r24
    366a:	09 f0       	breq	.+2      	; 0x366e <action_tapping_process+0x46>
    366c:	78 c0       	rjmp	.+240    	; 0x375e <action_tapping_process+0x136>
            debug("processed: "); debug_record(record); debug("\n");
    366e:	4f 81       	ldd	r20, Y+7	; 0x07
    3670:	58 85       	ldd	r21, Y+8	; 0x08
    3672:	69 85       	ldd	r22, Y+9	; 0x09
    3674:	7a 85       	ldd	r23, Y+10	; 0x0a
    3676:	8b 85       	ldd	r24, Y+11	; 0x0b
    3678:	9c 85       	ldd	r25, Y+12	; 0x0c
    367a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <debug_record>
    367e:	6f c0       	rjmp	.+222    	; 0x375e <action_tapping_process+0x136>
    3680:	de 01       	movw	r26, r28
    3682:	11 96       	adiw	r26, 0x01	; 1
    3684:	fe 01       	movw	r30, r28
    3686:	37 96       	adiw	r30, 0x07	; 7
    3688:	86 e0       	ldi	r24, 0x06	; 6
    368a:	01 90       	ld	r0, Z+
    368c:	0d 92       	st	X+, r0
    368e:	81 50       	subi	r24, 0x01	; 1
    3690:	e1 f7       	brne	.-8      	; 0x368a <action_tapping_process+0x62>
    3692:	1f 81       	ldd	r17, Y+7	; 0x07
    3694:	08 85       	ldd	r16, Y+8	; 0x08
    3696:	ea 84       	ldd	r14, Y+10	; 0x0a
    3698:	fb 84       	ldd	r15, Y+11	; 0x0b
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    369a:	81 2f       	mov	r24, r17
    369c:	60 2f       	mov	r22, r16
    369e:	a7 01       	movw	r20, r14
    36a0:	0e 94 92 18 	call	0x3124	; 0x3124 <IS_NOEVENT.isra.0>
    36a4:	88 23       	and	r24, r24
    36a6:	09 f0       	breq	.+2      	; 0x36aa <action_tapping_process+0x82>
    36a8:	5a c0       	rjmp	.+180    	; 0x375e <action_tapping_process+0x136>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    36aa:	80 91 07 02 	lds	r24, 0x0207
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	ac 01       	movw	r20, r24
    36b2:	4f 5f       	subi	r20, 0xFF	; 255
    36b4:	5f 4f       	sbci	r21, 0xFF	; 255
    36b6:	47 70       	andi	r20, 0x07	; 7
    36b8:	50 70       	andi	r21, 0x00	; 0
    36ba:	20 91 d6 01 	lds	r18, 0x01D6
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	42 17       	cp	r20, r18
    36c2:	53 07       	cpc	r21, r19
    36c4:	09 f4       	brne	.+2      	; 0x36c8 <action_tapping_process+0xa0>
    36c6:	52 c0       	rjmp	.+164    	; 0x376c <action_tapping_process+0x144>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    36c8:	9c 01       	movw	r18, r24
    36ca:	22 0f       	add	r18, r18
    36cc:	33 1f       	adc	r19, r19
    36ce:	f9 01       	movw	r30, r18
    36d0:	e8 0f       	add	r30, r24
    36d2:	f9 1f       	adc	r31, r25
    36d4:	ee 0f       	add	r30, r30
    36d6:	ff 1f       	adc	r31, r31
    36d8:	e9 52       	subi	r30, 0x29	; 41
    36da:	fe 4f       	sbci	r31, 0xFE	; 254
    36dc:	de 01       	movw	r26, r28
    36de:	11 96       	adiw	r26, 0x01	; 1
    36e0:	66 e0       	ldi	r22, 0x06	; 6
    36e2:	0d 90       	ld	r0, X+
    36e4:	01 92       	st	Z+, r0
    36e6:	61 50       	subi	r22, 0x01	; 1
    36e8:	e1 f7       	brne	.-8      	; 0x36e2 <action_tapping_process+0xba>
    36ea:	f9 01       	movw	r30, r18
    36ec:	e8 0f       	add	r30, r24
    36ee:	f9 1f       	adc	r31, r25
    36f0:	ee 0f       	add	r30, r30
    36f2:	ff 1f       	adc	r31, r31
    36f4:	e9 52       	subi	r30, 0x29	; 41
    36f6:	fe 4f       	sbci	r31, 0xFE	; 254
    36f8:	10 83       	st	Z, r17
    36fa:	01 83       	std	Z+1, r16	; 0x01
    36fc:	f4 82       	std	Z+4, r15	; 0x04
    36fe:	e3 82       	std	Z+3, r14	; 0x03
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3700:	40 93 07 02 	sts	0x0207, r20

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3704:	0e 94 63 18 	call	0x30c6	; 0x30c6 <debug_waiting_buffer>
    3708:	2a c0       	rjmp	.+84     	; 0x375e <action_tapping_process+0x136>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	c9 01       	movw	r24, r18
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	82 0f       	add	r24, r18
    3714:	93 1f       	adc	r25, r19
    3716:	88 0f       	add	r24, r24
    3718:	99 1f       	adc	r25, r25
    371a:	89 52       	subi	r24, 0x29	; 41
    371c:	9e 4f       	sbci	r25, 0xFE	; 254
    371e:	0e 94 18 19 	call	0x3230	; 0x3230 <process_tapping>
    3722:	88 23       	and	r24, r24
    3724:	89 f1       	breq	.+98     	; 0x3788 <action_tapping_process+0x160>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3726:	80 91 d6 01 	lds	r24, 0x01D6
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	fc 01       	movw	r30, r24
    372e:	ee 0f       	add	r30, r30
    3730:	ff 1f       	adc	r31, r31
    3732:	e8 0f       	add	r30, r24
    3734:	f9 1f       	adc	r31, r25
    3736:	ee 0f       	add	r30, r30
    3738:	ff 1f       	adc	r31, r31
    373a:	e9 52       	subi	r30, 0x29	; 41
    373c:	fe 4f       	sbci	r31, 0xFE	; 254
    373e:	40 81       	ld	r20, Z
    3740:	51 81       	ldd	r21, Z+1	; 0x01
    3742:	62 81       	ldd	r22, Z+2	; 0x02
    3744:	73 81       	ldd	r23, Z+3	; 0x03
    3746:	84 81       	ldd	r24, Z+4	; 0x04
    3748:	95 81       	ldd	r25, Z+5	; 0x05
    374a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    374e:	80 91 d6 01 	lds	r24, 0x01D6
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	01 96       	adiw	r24, 0x01	; 1
    3756:	87 70       	andi	r24, 0x07	; 7
    3758:	90 70       	andi	r25, 0x00	; 0
    375a:	80 93 d6 01 	sts	0x01D6, r24
    375e:	20 91 d6 01 	lds	r18, 0x01D6
    3762:	80 91 07 02 	lds	r24, 0x0207
    3766:	28 17       	cp	r18, r24
    3768:	81 f6       	brne	.-96     	; 0x370a <action_tapping_process+0xe2>
    376a:	0e c0       	rjmp	.+28     	; 0x3788 <action_tapping_process+0x160>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    376c:	0e 94 13 18 	call	0x3026	; 0x3026 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3770:	10 92 07 02 	sts	0x0207, r1
    waiting_buffer_tail = 0;
    3774:	10 92 d6 01 	sts	0x01D6, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3778:	e0 ed       	ldi	r30, 0xD0	; 208
    377a:	f1 e0       	ldi	r31, 0x01	; 1
    377c:	86 e0       	ldi	r24, 0x06	; 6
    377e:	df 01       	movw	r26, r30
    3780:	1d 92       	st	X+, r1
    3782:	8a 95       	dec	r24
    3784:	e9 f7       	brne	.-6      	; 0x3780 <action_tapping_process+0x158>
    3786:	eb cf       	rjmp	.-42     	; 0x375e <action_tapping_process+0x136>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3788:	2c 96       	adiw	r28, 0x0c	; 12
    378a:	0f b6       	in	r0, 0x3f	; 63
    378c:	f8 94       	cli
    378e:	de bf       	out	0x3e, r29	; 62
    3790:	0f be       	out	0x3f, r0	; 63
    3792:	cd bf       	out	0x3d, r28	; 61
    3794:	df 91       	pop	r29
    3796:	cf 91       	pop	r28
    3798:	1f 91       	pop	r17
    379a:	0f 91       	pop	r16
    379c:	ff 90       	pop	r15
    379e:	ef 90       	pop	r14
    37a0:	08 95       	ret

000037a2 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    37a2:	df 92       	push	r13
    37a4:	ef 92       	push	r14
    37a6:	ff 92       	push	r15
    37a8:	0f 93       	push	r16
    37aa:	1f 93       	push	r17
    37ac:	cf 93       	push	r28
    37ae:	df 93       	push	r29
    37b0:	ec 01       	movw	r28, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    37b2:	00 97       	sbiw	r24, 0x00	; 0
    37b4:	09 f4       	brne	.+2      	; 0x37b8 <action_macro_play+0x16>
    37b6:	6f c0       	rjmp	.+222    	; 0x3896 <action_macro_play+0xf4>
    37b8:	dd 24       	eor	r13, r13
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	e8 2e       	mov	r14, r24
    37be:	f1 2c       	mov	r15, r1
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    37c0:	8e 01       	movw	r16, r28
    37c2:	0f 5f       	subi	r16, 0xFF	; 255
    37c4:	1f 4f       	sbci	r17, 0xFF	; 255
    37c6:	fe 01       	movw	r30, r28
    37c8:	84 91       	lpm	r24, Z
    37ca:	84 37       	cpi	r24, 0x74	; 116
    37cc:	48 f4       	brcc	.+18     	; 0x37e0 <action_macro_play+0x3e>
    37ce:	84 30       	cpi	r24, 0x04	; 4
    37d0:	08 f0       	brcs	.+2      	; 0x37d4 <action_macro_play+0x32>
    37d2:	4d c0       	rjmp	.+154    	; 0x386e <action_macro_play+0xcc>
    37d4:	81 30       	cpi	r24, 0x01	; 1
    37d6:	79 f0       	breq	.+30     	; 0x37f6 <action_macro_play+0x54>
    37d8:	82 30       	cpi	r24, 0x02	; 2
    37da:	09 f0       	breq	.+2      	; 0x37de <action_macro_play+0x3c>
    37dc:	5c c0       	rjmp	.+184    	; 0x3896 <action_macro_play+0xf4>
    37de:	1f c0       	rjmp	.+62     	; 0x381e <action_macro_play+0x7c>
    37e0:	85 37       	cpi	r24, 0x75	; 117
    37e2:	09 f4       	brne	.+2      	; 0x37e6 <action_macro_play+0x44>
    37e4:	40 c0       	rjmp	.+128    	; 0x3866 <action_macro_play+0xc4>
    37e6:	85 37       	cpi	r24, 0x75	; 117
    37e8:	80 f1       	brcs	.+96     	; 0x384a <action_macro_play+0xa8>
    37ea:	98 2f       	mov	r25, r24
    37ec:	94 58       	subi	r25, 0x84	; 132
    37ee:	90 37       	cpi	r25, 0x70	; 112
    37f0:	08 f0       	brcs	.+2      	; 0x37f4 <action_macro_play+0x52>
    37f2:	51 c0       	rjmp	.+162    	; 0x3896 <action_macro_play+0xf4>
    37f4:	3f c0       	rjmp	.+126    	; 0x3874 <action_macro_play+0xd2>
            case KEY_DOWN:
                MACRO_READ();
    37f6:	22 96       	adiw	r28, 0x02	; 2
    37f8:	f8 01       	movw	r30, r16
    37fa:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    37fc:	98 2f       	mov	r25, r24
    37fe:	90 5e       	subi	r25, 0xE0	; 224
    3800:	98 30       	cpi	r25, 0x08	; 8
    3802:	50 f4       	brcc	.+20     	; 0x3818 <action_macro_play+0x76>
                    add_weak_mods(MOD_BIT(macro));
    3804:	87 70       	andi	r24, 0x07	; 7
    3806:	fe 2d       	mov	r31, r14
    3808:	01 c0       	rjmp	.+2      	; 0x380c <action_macro_play+0x6a>
    380a:	ff 0f       	add	r31, r31
    380c:	8a 95       	dec	r24
    380e:	ea f7       	brpl	.-6      	; 0x380a <action_macro_play+0x68>
    3810:	8f 2f       	mov	r24, r31
    3812:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <add_weak_mods>
    3816:	13 c0       	rjmp	.+38     	; 0x383e <action_macro_play+0x9c>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3818:	0e 94 47 14 	call	0x288e	; 0x288e <register_code>
    381c:	2f c0       	rjmp	.+94     	; 0x387c <action_macro_play+0xda>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    381e:	22 96       	adiw	r28, 0x02	; 2
    3820:	f8 01       	movw	r30, r16
    3822:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3824:	98 2f       	mov	r25, r24
    3826:	90 5e       	subi	r25, 0xE0	; 224
    3828:	98 30       	cpi	r25, 0x08	; 8
    382a:	60 f4       	brcc	.+24     	; 0x3844 <action_macro_play+0xa2>
                    del_weak_mods(MOD_BIT(macro));
    382c:	87 70       	andi	r24, 0x07	; 7
    382e:	fe 2d       	mov	r31, r14
    3830:	01 c0       	rjmp	.+2      	; 0x3834 <action_macro_play+0x92>
    3832:	ff 0f       	add	r31, r31
    3834:	8a 95       	dec	r24
    3836:	ea f7       	brpl	.-6      	; 0x3832 <action_macro_play+0x90>
    3838:	8f 2f       	mov	r24, r31
    383a:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <del_weak_mods>
                    send_keyboard_report();
    383e:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <send_keyboard_report>
    3842:	1c c0       	rjmp	.+56     	; 0x387c <action_macro_play+0xda>
                } else {
                    unregister_code(macro);
    3844:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <unregister_code>
    3848:	19 c0       	rjmp	.+50     	; 0x387c <action_macro_play+0xda>
                }
                break;
            case WAIT:
                MACRO_READ();
    384a:	22 96       	adiw	r28, 0x02	; 2
    384c:	f8 01       	movw	r30, r16
    384e:	04 91       	lpm	r16, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3850:	07 c0       	rjmp	.+14     	; 0x3860 <action_macro_play+0xbe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3852:	8f e9       	ldi	r24, 0x9F	; 159
    3854:	9f e0       	ldi	r25, 0x0F	; 15
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	f1 f7       	brne	.-4      	; 0x3856 <action_macro_play+0xb4>
    385a:	00 c0       	rjmp	.+0      	; 0x385c <action_macro_play+0xba>
    385c:	00 00       	nop
    385e:	01 50       	subi	r16, 0x01	; 1
    3860:	00 23       	and	r16, r16
    3862:	b9 f7       	brne	.-18     	; 0x3852 <action_macro_play+0xb0>
    3864:	0b c0       	rjmp	.+22     	; 0x387c <action_macro_play+0xda>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3866:	22 96       	adiw	r28, 0x02	; 2
    3868:	f8 01       	movw	r30, r16
    386a:	d4 90       	lpm	r13, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    386c:	07 c0       	rjmp	.+14     	; 0x387c <action_macro_play+0xda>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    386e:	0e 94 47 14 	call	0x288e	; 0x288e <register_code>
    3872:	03 c0       	rjmp	.+6      	; 0x387a <action_macro_play+0xd8>
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3874:	8f 77       	andi	r24, 0x7F	; 127
    3876:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <unregister_code>
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    387a:	e8 01       	movw	r28, r16
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    387c:	8d 2d       	mov	r24, r13
    387e:	07 c0       	rjmp	.+14     	; 0x388e <action_macro_play+0xec>
    3880:	ef e9       	ldi	r30, 0x9F	; 159
    3882:	ff e0       	ldi	r31, 0x0F	; 15
    3884:	31 97       	sbiw	r30, 0x01	; 1
    3886:	f1 f7       	brne	.-4      	; 0x3884 <action_macro_play+0xe2>
    3888:	00 c0       	rjmp	.+0      	; 0x388a <action_macro_play+0xe8>
    388a:	00 00       	nop
    388c:	81 50       	subi	r24, 0x01	; 1
    388e:	88 23       	and	r24, r24
    3890:	09 f4       	brne	.+2      	; 0x3894 <action_macro_play+0xf2>
    3892:	96 cf       	rjmp	.-212    	; 0x37c0 <action_macro_play+0x1e>
    3894:	f5 cf       	rjmp	.-22     	; 0x3880 <action_macro_play+0xde>
    }
}
    3896:	df 91       	pop	r29
    3898:	cf 91       	pop	r28
    389a:	1f 91       	pop	r17
    389c:	0f 91       	pop	r16
    389e:	ff 90       	pop	r15
    38a0:	ef 90       	pop	r14
    38a2:	df 90       	pop	r13
    38a4:	08 95       	ret

000038a6 <default_layer_state_set>:
 * Default Layer State
 */
uint32_t default_layer_state = 0;

static void default_layer_state_set(uint32_t state)
{
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    38aa:	80 93 0c 02 	sts	0x020C, r24
    38ae:	90 93 0d 02 	sts	0x020D, r25
    38b2:	a0 93 0e 02 	sts	0x020E, r26
    38b6:	b0 93 0f 02 	sts	0x020F, r27
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    38ba:	0e 94 00 18 	call	0x3000	; 0x3000 <clear_keyboard_but_mods>
}
    38be:	08 95       	ret

000038c0 <layer_state_set>:
 * Keymap Layer State
 */
uint32_t layer_state = 0;

static void layer_state_set(uint32_t state)
{
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    38c4:	80 93 08 02 	sts	0x0208, r24
    38c8:	90 93 09 02 	sts	0x0209, r25
    38cc:	a0 93 0a 02 	sts	0x020A, r26
    38d0:	b0 93 0b 02 	sts	0x020B, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    38d4:	0e 94 00 18 	call	0x3000	; 0x3000 <clear_keyboard_but_mods>
}
    38d8:	08 95       	ret

000038da <default_layer_debug>:
}

void default_layer_debug(void)
{
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}
    38da:	08 95       	ret

000038dc <default_layer_set>:

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    38dc:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <default_layer_state_set>
}
    38e0:	08 95       	ret

000038e2 <default_layer_or>:

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    38e2:	0f 93       	push	r16
    38e4:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    38e6:	00 91 0c 02 	lds	r16, 0x020C
    38ea:	10 91 0d 02 	lds	r17, 0x020D
    38ee:	20 91 0e 02 	lds	r18, 0x020E
    38f2:	30 91 0f 02 	lds	r19, 0x020F
    38f6:	60 2b       	or	r22, r16
    38f8:	71 2b       	or	r23, r17
    38fa:	82 2b       	or	r24, r18
    38fc:	93 2b       	or	r25, r19
    38fe:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <default_layer_state_set>
}
    3902:	1f 91       	pop	r17
    3904:	0f 91       	pop	r16
    3906:	08 95       	ret

00003908 <default_layer_and>:
void default_layer_and(uint32_t state)
{
    3908:	0f 93       	push	r16
    390a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    390c:	00 91 0c 02 	lds	r16, 0x020C
    3910:	10 91 0d 02 	lds	r17, 0x020D
    3914:	20 91 0e 02 	lds	r18, 0x020E
    3918:	30 91 0f 02 	lds	r19, 0x020F
    391c:	60 23       	and	r22, r16
    391e:	71 23       	and	r23, r17
    3920:	82 23       	and	r24, r18
    3922:	93 23       	and	r25, r19
    3924:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <default_layer_state_set>
}
    3928:	1f 91       	pop	r17
    392a:	0f 91       	pop	r16
    392c:	08 95       	ret

0000392e <default_layer_xor>:
void default_layer_xor(uint32_t state)
{
    392e:	0f 93       	push	r16
    3930:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3932:	00 91 0c 02 	lds	r16, 0x020C
    3936:	10 91 0d 02 	lds	r17, 0x020D
    393a:	20 91 0e 02 	lds	r18, 0x020E
    393e:	30 91 0f 02 	lds	r19, 0x020F
    3942:	60 27       	eor	r22, r16
    3944:	71 27       	eor	r23, r17
    3946:	82 27       	eor	r24, r18
    3948:	93 27       	eor	r25, r19
    394a:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <default_layer_state_set>
}
    394e:	1f 91       	pop	r17
    3950:	0f 91       	pop	r16
    3952:	08 95       	ret

00003954 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    3954:	60 e0       	ldi	r22, 0x00	; 0
    3956:	70 e0       	ldi	r23, 0x00	; 0
    3958:	cb 01       	movw	r24, r22
    395a:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <layer_state_set>
}
    395e:	08 95       	ret

00003960 <layer_move>:

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3960:	41 e0       	ldi	r20, 0x01	; 1
    3962:	50 e0       	ldi	r21, 0x00	; 0
    3964:	60 e0       	ldi	r22, 0x00	; 0
    3966:	70 e0       	ldi	r23, 0x00	; 0
    3968:	04 c0       	rjmp	.+8      	; 0x3972 <layer_move+0x12>
    396a:	44 0f       	add	r20, r20
    396c:	55 1f       	adc	r21, r21
    396e:	66 1f       	adc	r22, r22
    3970:	77 1f       	adc	r23, r23
    3972:	8a 95       	dec	r24
    3974:	d2 f7       	brpl	.-12     	; 0x396a <layer_move+0xa>
    3976:	cb 01       	movw	r24, r22
    3978:	ba 01       	movw	r22, r20
    397a:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <layer_state_set>
}
    397e:	08 95       	ret

00003980 <layer_on>:

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3980:	41 e0       	ldi	r20, 0x01	; 1
    3982:	50 e0       	ldi	r21, 0x00	; 0
    3984:	60 e0       	ldi	r22, 0x00	; 0
    3986:	70 e0       	ldi	r23, 0x00	; 0
    3988:	04 c0       	rjmp	.+8      	; 0x3992 <layer_on+0x12>
    398a:	44 0f       	add	r20, r20
    398c:	55 1f       	adc	r21, r21
    398e:	66 1f       	adc	r22, r22
    3990:	77 1f       	adc	r23, r23
    3992:	8a 95       	dec	r24
    3994:	d2 f7       	brpl	.-12     	; 0x398a <layer_on+0xa>
    3996:	80 91 08 02 	lds	r24, 0x0208
    399a:	90 91 09 02 	lds	r25, 0x0209
    399e:	a0 91 0a 02 	lds	r26, 0x020A
    39a2:	b0 91 0b 02 	lds	r27, 0x020B
    39a6:	48 2b       	or	r20, r24
    39a8:	59 2b       	or	r21, r25
    39aa:	6a 2b       	or	r22, r26
    39ac:	7b 2b       	or	r23, r27
    39ae:	cb 01       	movw	r24, r22
    39b0:	ba 01       	movw	r22, r20
    39b2:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <layer_state_set>
}
    39b6:	08 95       	ret

000039b8 <layer_off>:

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    39b8:	41 e0       	ldi	r20, 0x01	; 1
    39ba:	50 e0       	ldi	r21, 0x00	; 0
    39bc:	60 e0       	ldi	r22, 0x00	; 0
    39be:	70 e0       	ldi	r23, 0x00	; 0
    39c0:	04 c0       	rjmp	.+8      	; 0x39ca <layer_off+0x12>
    39c2:	44 0f       	add	r20, r20
    39c4:	55 1f       	adc	r21, r21
    39c6:	66 1f       	adc	r22, r22
    39c8:	77 1f       	adc	r23, r23
    39ca:	8a 95       	dec	r24
    39cc:	d2 f7       	brpl	.-12     	; 0x39c2 <layer_off+0xa>
    39ce:	40 95       	com	r20
    39d0:	50 95       	com	r21
    39d2:	60 95       	com	r22
    39d4:	70 95       	com	r23
    39d6:	80 91 08 02 	lds	r24, 0x0208
    39da:	90 91 09 02 	lds	r25, 0x0209
    39de:	a0 91 0a 02 	lds	r26, 0x020A
    39e2:	b0 91 0b 02 	lds	r27, 0x020B
    39e6:	48 23       	and	r20, r24
    39e8:	59 23       	and	r21, r25
    39ea:	6a 23       	and	r22, r26
    39ec:	7b 23       	and	r23, r27
    39ee:	cb 01       	movw	r24, r22
    39f0:	ba 01       	movw	r22, r20
    39f2:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <layer_state_set>
}
    39f6:	08 95       	ret

000039f8 <layer_invert>:

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    39f8:	41 e0       	ldi	r20, 0x01	; 1
    39fa:	50 e0       	ldi	r21, 0x00	; 0
    39fc:	60 e0       	ldi	r22, 0x00	; 0
    39fe:	70 e0       	ldi	r23, 0x00	; 0
    3a00:	04 c0       	rjmp	.+8      	; 0x3a0a <layer_invert+0x12>
    3a02:	44 0f       	add	r20, r20
    3a04:	55 1f       	adc	r21, r21
    3a06:	66 1f       	adc	r22, r22
    3a08:	77 1f       	adc	r23, r23
    3a0a:	8a 95       	dec	r24
    3a0c:	d2 f7       	brpl	.-12     	; 0x3a02 <layer_invert+0xa>
    3a0e:	80 91 08 02 	lds	r24, 0x0208
    3a12:	90 91 09 02 	lds	r25, 0x0209
    3a16:	a0 91 0a 02 	lds	r26, 0x020A
    3a1a:	b0 91 0b 02 	lds	r27, 0x020B
    3a1e:	48 27       	eor	r20, r24
    3a20:	59 27       	eor	r21, r25
    3a22:	6a 27       	eor	r22, r26
    3a24:	7b 27       	eor	r23, r27
    3a26:	cb 01       	movw	r24, r22
    3a28:	ba 01       	movw	r22, r20
    3a2a:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <layer_state_set>
}
    3a2e:	08 95       	ret

00003a30 <layer_or>:

void layer_or(uint32_t state)
{
    3a30:	0f 93       	push	r16
    3a32:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3a34:	00 91 08 02 	lds	r16, 0x0208
    3a38:	10 91 09 02 	lds	r17, 0x0209
    3a3c:	20 91 0a 02 	lds	r18, 0x020A
    3a40:	30 91 0b 02 	lds	r19, 0x020B
    3a44:	60 2b       	or	r22, r16
    3a46:	71 2b       	or	r23, r17
    3a48:	82 2b       	or	r24, r18
    3a4a:	93 2b       	or	r25, r19
    3a4c:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <layer_state_set>
}
    3a50:	1f 91       	pop	r17
    3a52:	0f 91       	pop	r16
    3a54:	08 95       	ret

00003a56 <layer_and>:
void layer_and(uint32_t state)
{
    3a56:	0f 93       	push	r16
    3a58:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3a5a:	00 91 08 02 	lds	r16, 0x0208
    3a5e:	10 91 09 02 	lds	r17, 0x0209
    3a62:	20 91 0a 02 	lds	r18, 0x020A
    3a66:	30 91 0b 02 	lds	r19, 0x020B
    3a6a:	60 23       	and	r22, r16
    3a6c:	71 23       	and	r23, r17
    3a6e:	82 23       	and	r24, r18
    3a70:	93 23       	and	r25, r19
    3a72:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <layer_state_set>
}
    3a76:	1f 91       	pop	r17
    3a78:	0f 91       	pop	r16
    3a7a:	08 95       	ret

00003a7c <layer_xor>:
void layer_xor(uint32_t state)
{
    3a7c:	0f 93       	push	r16
    3a7e:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3a80:	00 91 08 02 	lds	r16, 0x0208
    3a84:	10 91 09 02 	lds	r17, 0x0209
    3a88:	20 91 0a 02 	lds	r18, 0x020A
    3a8c:	30 91 0b 02 	lds	r19, 0x020B
    3a90:	60 27       	eor	r22, r16
    3a92:	71 27       	eor	r23, r17
    3a94:	82 27       	eor	r24, r18
    3a96:	93 27       	eor	r25, r19
    3a98:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <layer_state_set>
}
    3a9c:	1f 91       	pop	r17
    3a9e:	0f 91       	pop	r16
    3aa0:	08 95       	ret

00003aa2 <layer_debug>:

void layer_debug(void)
{
    dprintf("%08lX(%u)", layer_state, biton32(layer_state));
}
    3aa2:	08 95       	ret

00003aa4 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3aa4:	cf 92       	push	r12
    3aa6:	df 92       	push	r13
    3aa8:	ef 92       	push	r14
    3aaa:	ff 92       	push	r15
    3aac:	0f 93       	push	r16
    3aae:	1f 93       	push	r17
    3ab0:	cf 93       	push	r28
    3ab2:	df 93       	push	r29
    3ab4:	8c 01       	movw	r16, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3ab6:	c0 90 0c 02 	lds	r12, 0x020C
    3aba:	d0 90 0d 02 	lds	r13, 0x020D
    3abe:	e0 90 0e 02 	lds	r14, 0x020E
    3ac2:	f0 90 0f 02 	lds	r15, 0x020F
    3ac6:	80 91 08 02 	lds	r24, 0x0208
    3aca:	90 91 09 02 	lds	r25, 0x0209
    3ace:	a0 91 0a 02 	lds	r26, 0x020A
    3ad2:	b0 91 0b 02 	lds	r27, 0x020B
    3ad6:	c8 2a       	or	r12, r24
    3ad8:	d9 2a       	or	r13, r25
    3ada:	ea 2a       	or	r14, r26
    3adc:	fb 2a       	or	r15, r27
    3ade:	cf e1       	ldi	r28, 0x1F	; 31
    3ae0:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3ae2:	d7 01       	movw	r26, r14
    3ae4:	c6 01       	movw	r24, r12
    3ae6:	0c 2e       	mov	r0, r28
    3ae8:	04 c0       	rjmp	.+8      	; 0x3af2 <layer_switch_get_action+0x4e>
    3aea:	b6 95       	lsr	r27
    3aec:	a7 95       	ror	r26
    3aee:	97 95       	ror	r25
    3af0:	87 95       	ror	r24
    3af2:	0a 94       	dec	r0
    3af4:	d2 f7       	brpl	.-12     	; 0x3aea <layer_switch_get_action+0x46>
    3af6:	81 70       	andi	r24, 0x01	; 1
    3af8:	90 70       	andi	r25, 0x00	; 0
    3afa:	00 97       	sbiw	r24, 0x00	; 0
    3afc:	39 f0       	breq	.+14     	; 0x3b0c <layer_switch_get_action+0x68>
            action = action_for_key(i, key);
    3afe:	8c 2f       	mov	r24, r28
    3b00:	b8 01       	movw	r22, r16
    3b02:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3b06:	81 30       	cpi	r24, 0x01	; 1
    3b08:	91 05       	cpc	r25, r1
    3b0a:	49 f4       	brne	.+18     	; 0x3b1e <layer_switch_get_action+0x7a>
                return action;
    3b0c:	21 97       	sbiw	r28, 0x01	; 1
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
    3b0e:	8f ef       	ldi	r24, 0xFF	; 255
    3b10:	cf 3f       	cpi	r28, 0xFF	; 255
    3b12:	d8 07       	cpc	r29, r24
    3b14:	31 f7       	brne	.-52     	; 0x3ae2 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	b8 01       	movw	r22, r16
    3b1a:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3b1e:	df 91       	pop	r29
    3b20:	cf 91       	pop	r28
    3b22:	1f 91       	pop	r17
    3b24:	0f 91       	pop	r16
    3b26:	ff 90       	pop	r15
    3b28:	ef 90       	pop	r14
    3b2a:	df 90       	pop	r13
    3b2c:	cf 90       	pop	r12
    3b2e:	08 95       	ret

00003b30 <get_oneshot_locked_mods>:
report_keyboard_t *keyboard_report = &(report_keyboard_t){};

#ifndef NO_ACTION_ONESHOT
static int8_t oneshot_mods = 0;
static int8_t oneshot_locked_mods = 0;
int8_t get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
    3b30:	80 91 10 02 	lds	r24, 0x0210
    3b34:	08 95       	ret

00003b36 <set_oneshot_locked_mods>:
void set_oneshot_locked_mods(int8_t mods) { oneshot_locked_mods = mods; }
    3b36:	80 93 10 02 	sts	0x0210, r24
    3b3a:	08 95       	ret

00003b3c <clear_oneshot_locked_mods>:
void clear_oneshot_locked_mods(void) { oneshot_locked_mods = 0; }
    3b3c:	10 92 10 02 	sts	0x0210, r1
    3b40:	08 95       	ret

00003b42 <get_oneshot_layer>:
*   L => are layer bits
*   S => oneshot state bits
*/
static int8_t oneshot_layer_data = 0;

inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
    3b42:	80 91 11 02 	lds	r24, 0x0211
    3b46:	85 95       	asr	r24
    3b48:	85 95       	asr	r24
    3b4a:	85 95       	asr	r24
    3b4c:	08 95       	ret

00003b4e <get_oneshot_layer_state>:
inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
    3b4e:	80 91 11 02 	lds	r24, 0x0211
    3b52:	87 70       	andi	r24, 0x07	; 7
    3b54:	08 95       	ret

00003b56 <set_oneshot_layer>:
#endif

/* Oneshot layer */
void set_oneshot_layer(uint8_t layer, uint8_t state)
{
    oneshot_layer_data = layer << 3 | state;
    3b56:	98 2f       	mov	r25, r24
    3b58:	99 0f       	add	r25, r25
    3b5a:	99 0f       	add	r25, r25
    3b5c:	99 0f       	add	r25, r25
    3b5e:	96 2b       	or	r25, r22
    3b60:	90 93 11 02 	sts	0x0211, r25
    layer_on(layer);
    3b64:	0e 94 c0 1c 	call	0x3980	; 0x3980 <layer_on>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_layer_time = timer_read();
#endif
}
    3b68:	08 95       	ret

00003b6a <reset_oneshot_layer>:
void reset_oneshot_layer(void) {
    oneshot_layer_data = 0;
    3b6a:	10 92 11 02 	sts	0x0211, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_layer_time = 0;
#endif
}
    3b6e:	08 95       	ret

00003b70 <clear_oneshot_layer_state>:
void clear_oneshot_layer_state(oneshot_fullfillment_t state)
{
    uint8_t start_state = oneshot_layer_data;
    3b70:	40 91 11 02 	lds	r20, 0x0211
    oneshot_layer_data &= ~state;
    3b74:	80 95       	com	r24
    3b76:	84 23       	and	r24, r20
    3b78:	80 93 11 02 	sts	0x0211, r24
*   S => oneshot state bits
*/
static int8_t oneshot_layer_data = 0;

inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
    3b7c:	98 2f       	mov	r25, r24
    3b7e:	97 70       	andi	r25, 0x07	; 7
}
void clear_oneshot_layer_state(oneshot_fullfillment_t state)
{
    uint8_t start_state = oneshot_layer_data;
    oneshot_layer_data &= ~state;
    if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
    3b80:	69 f4       	brne	.+26     	; 0x3b9c <clear_oneshot_layer_state+0x2c>
    3b82:	50 e0       	ldi	r21, 0x00	; 0
    3b84:	28 2f       	mov	r18, r24
    3b86:	33 27       	eor	r19, r19
    3b88:	27 fd       	sbrc	r18, 7
    3b8a:	30 95       	com	r19
    3b8c:	42 17       	cp	r20, r18
    3b8e:	53 07       	cpc	r21, r19
    3b90:	29 f0       	breq	.+10     	; 0x3b9c <clear_oneshot_layer_state+0x2c>
        layer_off(get_oneshot_layer());
    3b92:	85 95       	asr	r24
    3b94:	85 95       	asr	r24
    3b96:	85 95       	asr	r24
    3b98:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <layer_off>
    3b9c:	08 95       	ret

00003b9e <is_oneshot_layer_active>:
*   S => oneshot state bits
*/
static int8_t oneshot_layer_data = 0;

inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
    3b9e:	90 91 11 02 	lds	r25, 0x0211
    3ba2:	97 70       	andi	r25, 0x07	; 7
#endif
    }
}
bool is_oneshot_layer_active(void)
{
    return get_oneshot_layer_state();
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	09 f4       	brne	.+2      	; 0x3baa <is_oneshot_layer_active+0xc>
    3ba8:	80 e0       	ldi	r24, 0x00	; 0
}
    3baa:	08 95       	ret

00003bac <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3bac:	90 91 0c 01 	lds	r25, 0x010C
    3bb0:	99 23       	and	r25, r25
    3bb2:	b1 f1       	breq	.+108    	; 0x3c20 <add_key+0x74>
    3bb4:	90 91 0d 01 	lds	r25, 0x010D
    3bb8:	99 23       	and	r25, r25
    3bba:	91 f1       	breq	.+100    	; 0x3c20 <add_key+0x74>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3bbc:	98 2f       	mov	r25, r24
    3bbe:	96 95       	lsr	r25
    3bc0:	96 95       	lsr	r25
    3bc2:	96 95       	lsr	r25
    3bc4:	9f 30       	cpi	r25, 0x0F	; 15
    3bc6:	90 f4       	brcc	.+36     	; 0x3bec <add_key+0x40>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3bc8:	e0 91 0e 01 	lds	r30, 0x010E
    3bcc:	f0 91 0f 01 	lds	r31, 0x010F
    3bd0:	e9 0f       	add	r30, r25
    3bd2:	f1 1d       	adc	r31, r1
    3bd4:	87 70       	andi	r24, 0x07	; 7
    3bd6:	21 e0       	ldi	r18, 0x01	; 1
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	02 c0       	rjmp	.+4      	; 0x3be0 <add_key+0x34>
    3bdc:	22 0f       	add	r18, r18
    3bde:	33 1f       	adc	r19, r19
    3be0:	8a 95       	dec	r24
    3be2:	e2 f7       	brpl	.-8      	; 0x3bdc <add_key+0x30>
    3be4:	81 81       	ldd	r24, Z+1	; 0x01
    3be6:	82 2b       	or	r24, r18
    3be8:	81 83       	std	Z+1, r24	; 0x01
    3bea:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3bec:	90 91 25 02 	lds	r25, 0x0225
    3bf0:	90 ff       	sbrs	r25, 0
    3bf2:	39 c0       	rjmp	.+114    	; 0x3c66 <add_key+0xba>
    3bf4:	00 d0       	rcall	.+0      	; 0x3bf6 <add_key+0x4a>
    3bf6:	00 d0       	rcall	.+0      	; 0x3bf8 <add_key+0x4c>
    3bf8:	ed b7       	in	r30, 0x3d	; 61
    3bfa:	fe b7       	in	r31, 0x3e	; 62
    3bfc:	31 96       	adiw	r30, 0x01	; 1
    3bfe:	25 ea       	ldi	r18, 0xA5	; 165
    3c00:	33 e0       	ldi	r19, 0x03	; 3
    3c02:	ad b7       	in	r26, 0x3d	; 61
    3c04:	be b7       	in	r27, 0x3e	; 62
    3c06:	12 96       	adiw	r26, 0x02	; 2
    3c08:	3c 93       	st	X, r19
    3c0a:	2e 93       	st	-X, r18
    3c0c:	11 97       	sbiw	r26, 0x01	; 1
    3c0e:	82 83       	std	Z+2, r24	; 0x02
    3c10:	13 82       	std	Z+3, r1	; 0x03
    3c12:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    3c16:	0f 90       	pop	r0
    3c18:	0f 90       	pop	r0
    3c1a:	0f 90       	pop	r0
    3c1c:	0f 90       	pop	r0
    3c1e:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3c20:	40 91 0e 01 	lds	r20, 0x010E
    3c24:	50 91 0f 01 	lds	r21, 0x010F
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	ef ef       	ldi	r30, 0xFF	; 255
#endif
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
    3c2e:	da 01       	movw	r26, r20
    3c30:	a2 0f       	add	r26, r18
    3c32:	b3 1f       	adc	r27, r19
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3c34:	12 96       	adiw	r26, 0x02	; 2
    3c36:	9c 91       	ld	r25, X
    3c38:	12 97       	sbiw	r26, 0x02	; 2
    3c3a:	98 17       	cp	r25, r24
    3c3c:	a1 f0       	breq	.+40     	; 0x3c66 <add_key+0xba>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3c3e:	ef 3f       	cpi	r30, 0xFF	; 255
    3c40:	19 f4       	brne	.+6      	; 0x3c48 <add_key+0x9c>
    3c42:	99 23       	and	r25, r25
    3c44:	09 f4       	brne	.+2      	; 0x3c48 <add_key+0x9c>
    3c46:	e2 2f       	mov	r30, r18
    3c48:	2f 5f       	subi	r18, 0xFF	; 255
    3c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3c4c:	2e 30       	cpi	r18, 0x0E	; 14
    3c4e:	31 05       	cpc	r19, r1
    3c50:	71 f7       	brne	.-36     	; 0x3c2e <add_key+0x82>
    3c52:	07 c0       	rjmp	.+14     	; 0x3c62 <add_key+0xb6>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
            keyboard_report->keys[empty] = code;
    3c54:	ff 27       	eor	r31, r31
    3c56:	e7 fd       	sbrc	r30, 7
    3c58:	f0 95       	com	r31
    3c5a:	e4 0f       	add	r30, r20
    3c5c:	f5 1f       	adc	r31, r21
    3c5e:	82 83       	std	Z+2, r24	; 0x02
    3c60:	08 95       	ret
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3c62:	ef 3f       	cpi	r30, 0xFF	; 255
    3c64:	b9 f7       	brne	.-18     	; 0x3c54 <add_key+0xa8>
    3c66:	08 95       	ret

00003c68 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3c68:	90 91 0c 01 	lds	r25, 0x010C
    3c6c:	99 23       	and	r25, r25
    3c6e:	b9 f1       	breq	.+110    	; 0x3cde <del_key+0x76>
    3c70:	90 91 0d 01 	lds	r25, 0x010D
    3c74:	99 23       	and	r25, r25
    3c76:	99 f1       	breq	.+102    	; 0x3cde <del_key+0x76>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3c78:	98 2f       	mov	r25, r24
    3c7a:	96 95       	lsr	r25
    3c7c:	96 95       	lsr	r25
    3c7e:	96 95       	lsr	r25
    3c80:	9f 30       	cpi	r25, 0x0F	; 15
    3c82:	98 f4       	brcc	.+38     	; 0x3caa <del_key+0x42>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3c84:	e0 91 0e 01 	lds	r30, 0x010E
    3c88:	f0 91 0f 01 	lds	r31, 0x010F
    3c8c:	e9 0f       	add	r30, r25
    3c8e:	f1 1d       	adc	r31, r1
    3c90:	87 70       	andi	r24, 0x07	; 7
    3c92:	21 e0       	ldi	r18, 0x01	; 1
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	02 c0       	rjmp	.+4      	; 0x3c9c <del_key+0x34>
    3c98:	22 0f       	add	r18, r18
    3c9a:	33 1f       	adc	r19, r19
    3c9c:	8a 95       	dec	r24
    3c9e:	e2 f7       	brpl	.-8      	; 0x3c98 <del_key+0x30>
    3ca0:	20 95       	com	r18
    3ca2:	81 81       	ldd	r24, Z+1	; 0x01
    3ca4:	28 23       	and	r18, r24
    3ca6:	21 83       	std	Z+1, r18	; 0x01
    3ca8:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3caa:	90 91 25 02 	lds	r25, 0x0225
    3cae:	90 ff       	sbrs	r25, 0
    3cb0:	25 c0       	rjmp	.+74     	; 0x3cfc <del_key+0x94>
    3cb2:	00 d0       	rcall	.+0      	; 0x3cb4 <del_key+0x4c>
    3cb4:	00 d0       	rcall	.+0      	; 0x3cb6 <del_key+0x4e>
    3cb6:	ed b7       	in	r30, 0x3d	; 61
    3cb8:	fe b7       	in	r31, 0x3e	; 62
    3cba:	31 96       	adiw	r30, 0x01	; 1
    3cbc:	23 ec       	ldi	r18, 0xC3	; 195
    3cbe:	33 e0       	ldi	r19, 0x03	; 3
    3cc0:	ad b7       	in	r26, 0x3d	; 61
    3cc2:	be b7       	in	r27, 0x3e	; 62
    3cc4:	12 96       	adiw	r26, 0x02	; 2
    3cc6:	3c 93       	st	X, r19
    3cc8:	2e 93       	st	-X, r18
    3cca:	11 97       	sbiw	r26, 0x01	; 1
    3ccc:	82 83       	std	Z+2, r24	; 0x02
    3cce:	13 82       	std	Z+3, r1	; 0x03
    3cd0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	0f 90       	pop	r0
    3cda:	0f 90       	pop	r0
    3cdc:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3cde:	20 91 0e 01 	lds	r18, 0x010E
    3ce2:	30 91 0f 01 	lds	r19, 0x010F
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	f9 01       	movw	r30, r18
    3cea:	e9 0f       	add	r30, r25
    3cec:	f1 1d       	adc	r31, r1
    3cee:	42 81       	ldd	r20, Z+2	; 0x02
    3cf0:	48 17       	cp	r20, r24
    3cf2:	09 f4       	brne	.+2      	; 0x3cf6 <del_key+0x8e>
            keyboard_report->keys[i] = 0;
    3cf4:	12 82       	std	Z+2, r1	; 0x02
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3cf6:	9f 5f       	subi	r25, 0xFF	; 255
    3cf8:	9e 30       	cpi	r25, 0x0E	; 14
    3cfa:	b1 f7       	brne	.-20     	; 0x3ce8 <del_key+0x80>
    3cfc:	08 95       	ret

00003cfe <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3d02:	e0 91 0e 01 	lds	r30, 0x010E
    3d06:	f0 91 0f 01 	lds	r31, 0x010F
    3d0a:	e8 0f       	add	r30, r24
    3d0c:	f9 1f       	adc	r31, r25
    3d0e:	10 82       	st	Z, r1
    3d10:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3d12:	80 31       	cpi	r24, 0x10	; 16
    3d14:	91 05       	cpc	r25, r1
    3d16:	a9 f7       	brne	.-22     	; 0x3d02 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3d18:	08 95       	ret

00003d1a <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    3d1a:	80 91 12 02 	lds	r24, 0x0212
    3d1e:	08 95       	ret

00003d20 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3d20:	90 91 12 02 	lds	r25, 0x0212
    3d24:	98 2b       	or	r25, r24
    3d26:	90 93 12 02 	sts	0x0212, r25
    3d2a:	08 95       	ret

00003d2c <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3d2c:	80 95       	com	r24
    3d2e:	90 91 12 02 	lds	r25, 0x0212
    3d32:	98 23       	and	r25, r24
    3d34:	90 93 12 02 	sts	0x0212, r25
    3d38:	08 95       	ret

00003d3a <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3d3a:	10 92 12 02 	sts	0x0212, r1
    3d3e:	08 95       	ret

00003d40 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3d40:	90 91 13 02 	lds	r25, 0x0213
    3d44:	98 2b       	or	r25, r24
    3d46:	90 93 13 02 	sts	0x0213, r25
    3d4a:	08 95       	ret

00003d4c <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3d4c:	80 95       	com	r24
    3d4e:	90 91 13 02 	lds	r25, 0x0213
    3d52:	98 23       	and	r25, r24
    3d54:	90 93 13 02 	sts	0x0213, r25
    3d58:	08 95       	ret

00003d5a <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3d5a:	10 92 13 02 	sts	0x0213, r1
    3d5e:	08 95       	ret

00003d60 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3d60:	80 93 14 02 	sts	0x0214, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
#endif
}
    3d64:	08 95       	ret

00003d66 <clear_oneshot_mods>:
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3d66:	10 92 14 02 	sts	0x0214, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
#endif
}
    3d6a:	08 95       	ret

00003d6c <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3d6c:	40 91 0e 01 	lds	r20, 0x010E
    3d70:	50 91 0f 01 	lds	r21, 0x010F
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3d78:	80 e0       	ldi	r24, 0x00	; 0
#endif

/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
    3d7a:	fa 01       	movw	r30, r20
    3d7c:	e2 0f       	add	r30, r18
    3d7e:	f3 1f       	adc	r31, r19
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3d80:	91 81       	ldd	r25, Z+1	; 0x01
    3d82:	91 11       	cpse	r25, r1
            cnt++;
    3d84:	8f 5f       	subi	r24, 0xFF	; 255
    3d86:	2f 5f       	subi	r18, 0xFF	; 255
    3d88:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3d8a:	2f 30       	cpi	r18, 0x0F	; 15
    3d8c:	31 05       	cpc	r19, r1
    3d8e:	a9 f7       	brne	.-22     	; 0x3d7a <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3d90:	08 95       	ret

00003d92 <send_keyboard_report>:
    return get_oneshot_layer_state();
}
#endif

void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3d92:	e0 91 0e 01 	lds	r30, 0x010E
    3d96:	f0 91 0f 01 	lds	r31, 0x010F
    3d9a:	80 91 12 02 	lds	r24, 0x0212
    3d9e:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3da0:	e0 91 0e 01 	lds	r30, 0x010E
    3da4:	f0 91 0f 01 	lds	r31, 0x010F
    3da8:	80 81       	ld	r24, Z
    3daa:	90 91 13 02 	lds	r25, 0x0213
    3dae:	89 2b       	or	r24, r25
    3db0:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3db2:	90 91 14 02 	lds	r25, 0x0214
    3db6:	99 23       	and	r25, r25
    3db8:	69 f0       	breq	.+26     	; 0x3dd4 <send_keyboard_report+0x42>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3dba:	e0 91 0e 01 	lds	r30, 0x010E
    3dbe:	f0 91 0f 01 	lds	r31, 0x010F
    3dc2:	80 81       	ld	r24, Z
    3dc4:	89 2b       	or	r24, r25
    3dc6:	80 83       	st	Z, r24
        if (has_anykey()) {
    3dc8:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <has_anykey>
    3dcc:	88 23       	and	r24, r24
    3dce:	11 f0       	breq	.+4      	; 0x3dd4 <send_keyboard_report+0x42>
            clear_oneshot_mods();
    3dd0:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <clear_oneshot_mods>
        }
    }

#endif
    host_keyboard_send(keyboard_report);
    3dd4:	80 91 0e 01 	lds	r24, 0x010E
    3dd8:	90 91 0f 01 	lds	r25, 0x010F
    3ddc:	0e 94 c3 12 	call	0x2586	; 0x2586 <host_keyboard_send>
}
    3de0:	08 95       	ret

00003de2 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3de2:	90 93 4b 01 	sts	0x014B, r25
    3de6:	80 93 4a 01 	sts	0x014A, r24
}
    3dea:	08 95       	ret

00003dec <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3dec:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	9c 01       	movw	r18, r24
    3df2:	2c 7c       	andi	r18, 0xCC	; 204
    3df4:	30 70       	andi	r19, 0x00	; 0
    3df6:	35 95       	asr	r19
    3df8:	27 95       	ror	r18
    3dfa:	35 95       	asr	r19
    3dfc:	27 95       	ror	r18
    3dfe:	83 73       	andi	r24, 0x33	; 51
    3e00:	90 70       	andi	r25, 0x00	; 0
    3e02:	88 0f       	add	r24, r24
    3e04:	99 1f       	adc	r25, r25
    3e06:	88 0f       	add	r24, r24
    3e08:	99 1f       	adc	r25, r25
    3e0a:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	c9 01       	movw	r24, r18
    3e10:	8a 7a       	andi	r24, 0xAA	; 170
    3e12:	90 70       	andi	r25, 0x00	; 0
    3e14:	95 95       	asr	r25
    3e16:	87 95       	ror	r24
    3e18:	25 75       	andi	r18, 0x55	; 85
    3e1a:	30 70       	andi	r19, 0x00	; 0
    3e1c:	22 0f       	add	r18, r18
    3e1e:	33 1f       	adc	r19, r19
    return bits;
}
    3e20:	82 2b       	or	r24, r18
    3e22:	08 95       	ret

00003e24 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3e24:	1f 93       	push	r17
    3e26:	cf 93       	push	r28
    3e28:	df 93       	push	r29
    3e2a:	0f 92       	push	r0
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3e30:	99 83       	std	Y+1, r25	; 0x01
    3e32:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <bitrev>
    3e36:	18 2f       	mov	r17, r24
    3e38:	99 81       	ldd	r25, Y+1	; 0x01
    3e3a:	89 2f       	mov	r24, r25
    3e3c:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <bitrev>
    3e40:	31 2f       	mov	r19, r17
    3e42:	20 e0       	ldi	r18, 0x00	; 0
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	82 2b       	or	r24, r18
    3e48:	93 2b       	or	r25, r19
    return bits;
}
    3e4a:	0f 90       	pop	r0
    3e4c:	df 91       	pop	r29
    3e4e:	cf 91       	pop	r28
    3e50:	1f 91       	pop	r17
    3e52:	08 95       	ret

00003e54 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3e54:	80 91 3c 02 	lds	r24, 0x023C
    3e58:	84 30       	cpi	r24, 0x04	; 4
    3e5a:	09 f1       	breq	.+66     	; 0x3e9e <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3e5c:	10 92 26 02 	sts	0x0226, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3e60:	20 e4       	ldi	r18, 0x40	; 64
    3e62:	88 e1       	ldi	r24, 0x18	; 24
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	0f b6       	in	r0, 0x3f	; 63
    3e68:	f8 94       	cli
    3e6a:	a8 95       	wdr
    3e6c:	80 93 60 00 	sts	0x0060, r24
    3e70:	0f be       	out	0x3f, r0	; 63
    3e72:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3e76:	83 b7       	in	r24, 0x33	; 51
    3e78:	81 7f       	andi	r24, 0xF1	; 241
    3e7a:	84 60       	ori	r24, 0x04	; 4
    3e7c:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3e7e:	83 b7       	in	r24, 0x33	; 51
    3e80:	81 60       	ori	r24, 0x01	; 1
    3e82:	83 bf       	out	0x33, r24	; 51
    sei();
    3e84:	78 94       	sei
    sleep_cpu();
    3e86:	88 95       	sleep
    sleep_disable();
    3e88:	83 b7       	in	r24, 0x33	; 51
    3e8a:	8e 7f       	andi	r24, 0xFE	; 254
    3e8c:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3e8e:	88 e1       	ldi	r24, 0x18	; 24
    3e90:	0f b6       	in	r0, 0x3f	; 63
    3e92:	f8 94       	cli
    3e94:	80 93 60 00 	sts	0x0060, r24
    3e98:	10 92 60 00 	sts	0x0060, r1
    3e9c:	0f be       	out	0x3f, r0	; 63
    3e9e:	08 95       	ret

00003ea0 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3ea0:	08 95       	ret

00003ea2 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3ea2:	08 95       	ret

00003ea4 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3ea4:	cf 93       	push	r28
    matrix_power_up();
    3ea6:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <matrix_power_up>
    matrix_scan();
    3eaa:	0e 94 68 08 	call	0x10d0	; 0x10d0 <matrix_scan>
    matrix_power_down();
    3eae:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3eb2:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3eb4:	8c 2f       	mov	r24, r28
    3eb6:	0e 94 ab 08 	call	0x1156	; 0x1156 <matrix_get_row>
    3eba:	88 23       	and	r24, r24
    3ebc:	21 f4       	brne	.+8      	; 0x3ec6 <suspend_wakeup_condition+0x22>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3ebe:	cf 5f       	subi	r28, 0xFF	; 255
    3ec0:	ca 30       	cpi	r28, 0x0A	; 10
    3ec2:	c1 f7       	brne	.-16     	; 0x3eb4 <suspend_wakeup_condition+0x10>
    3ec4:	01 c0       	rjmp	.+2      	; 0x3ec8 <suspend_wakeup_condition+0x24>
        if (matrix_get_row(r)) return true;
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3ec8:	cf 91       	pop	r28
    3eca:	08 95       	ret

00003ecc <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3ecc:	0e 94 13 18 	call	0x3026	; 0x3026 <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    3ed0:	08 95       	ret

00003ed2 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3ed2:	82 e0       	ldi	r24, 0x02	; 2
    3ed4:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3ed6:	93 e0       	ldi	r25, 0x03	; 3
    3ed8:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3eda:	9a ef       	ldi	r25, 0xFA	; 250
    3edc:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3ede:	80 93 6e 00 	sts	0x006E, r24
}
    3ee2:	08 95       	ret

00003ee4 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3ee4:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3ee6:	f8 94       	cli
    t = timer_count;
    3ee8:	40 91 27 02 	lds	r20, 0x0227
    3eec:	50 91 28 02 	lds	r21, 0x0228
    3ef0:	60 91 29 02 	lds	r22, 0x0229
    3ef4:	70 91 2a 02 	lds	r23, 0x022A
    SREG = sreg;
    3ef8:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    3efa:	ca 01       	movw	r24, r20
    3efc:	08 95       	ret

00003efe <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    3efe:	0f 93       	push	r16
    3f00:	1f 93       	push	r17
    3f02:	fc 01       	movw	r30, r24
    uint32_t t;

    uint8_t sreg = SREG;
    3f04:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3f06:	f8 94       	cli
    t = timer_count;
    3f08:	00 91 27 02 	lds	r16, 0x0227
    3f0c:	10 91 28 02 	lds	r17, 0x0228
    3f10:	20 91 29 02 	lds	r18, 0x0229
    3f14:	30 91 2a 02 	lds	r19, 0x022A
    SREG = sreg;
    3f18:	8f bf       	out	0x3f, r24	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3f1a:	b9 01       	movw	r22, r18
    3f1c:	a8 01       	movw	r20, r16
    3f1e:	60 70       	andi	r22, 0x00	; 0
    3f20:	70 70       	andi	r23, 0x00	; 0
    3f22:	cf 01       	movw	r24, r30
    3f24:	a0 e0       	ldi	r26, 0x00	; 0
    3f26:	b0 e0       	ldi	r27, 0x00	; 0
    3f28:	48 17       	cp	r20, r24
    3f2a:	59 07       	cpc	r21, r25
    3f2c:	6a 07       	cpc	r22, r26
    3f2e:	7b 07       	cpc	r23, r27
    3f30:	20 f0       	brcs	.+8      	; 0x3f3a <timer_elapsed+0x3c>
    3f32:	c8 01       	movw	r24, r16
    3f34:	8e 1b       	sub	r24, r30
    3f36:	9f 0b       	sbc	r25, r31
    3f38:	05 c0       	rjmp	.+10     	; 0x3f44 <timer_elapsed+0x46>
    3f3a:	cf 01       	movw	r24, r30
    3f3c:	80 95       	com	r24
    3f3e:	90 95       	com	r25
    3f40:	80 0f       	add	r24, r16
    3f42:	91 1f       	adc	r25, r17
}
    3f44:	1f 91       	pop	r17
    3f46:	0f 91       	pop	r16
    3f48:	08 95       	ret

00003f4a <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3f4a:	1f 92       	push	r1
    3f4c:	0f 92       	push	r0
    3f4e:	0f b6       	in	r0, 0x3f	; 63
    3f50:	0f 92       	push	r0
    3f52:	11 24       	eor	r1, r1
    3f54:	8f 93       	push	r24
    3f56:	9f 93       	push	r25
    3f58:	af 93       	push	r26
    3f5a:	bf 93       	push	r27
    timer_count++;
    3f5c:	80 91 27 02 	lds	r24, 0x0227
    3f60:	90 91 28 02 	lds	r25, 0x0228
    3f64:	a0 91 29 02 	lds	r26, 0x0229
    3f68:	b0 91 2a 02 	lds	r27, 0x022A
    3f6c:	01 96       	adiw	r24, 0x01	; 1
    3f6e:	a1 1d       	adc	r26, r1
    3f70:	b1 1d       	adc	r27, r1
    3f72:	80 93 27 02 	sts	0x0227, r24
    3f76:	90 93 28 02 	sts	0x0228, r25
    3f7a:	a0 93 29 02 	sts	0x0229, r26
    3f7e:	b0 93 2a 02 	sts	0x022A, r27
}
    3f82:	bf 91       	pop	r27
    3f84:	af 91       	pop	r26
    3f86:	9f 91       	pop	r25
    3f88:	8f 91       	pop	r24
    3f8a:	0f 90       	pop	r0
    3f8c:	0f be       	out	0x3f, r0	; 63
    3f8e:	0f 90       	pop	r0
    3f90:	1f 90       	pop	r1
    3f92:	18 95       	reti

00003f94 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3f94:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <USB_Disable>
    cli();
    3f98:	f8 94       	cli
    3f9a:	8f ef       	ldi	r24, 0xFF	; 255
    3f9c:	97 ea       	ldi	r25, 0xA7	; 167
    3f9e:	a1 e6       	ldi	r26, 0x61	; 97
    3fa0:	81 50       	subi	r24, 0x01	; 1
    3fa2:	90 40       	sbci	r25, 0x00	; 0
    3fa4:	a0 40       	sbci	r26, 0x00	; 0
    3fa6:	e1 f7       	brne	.-8      	; 0x3fa0 <bootloader_jump+0xc>
    3fa8:	00 c0       	rjmp	.+0      	; 0x3faa <bootloader_jump+0x16>
    3faa:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3fac:	87 e0       	ldi	r24, 0x07	; 7
    3fae:	90 eb       	ldi	r25, 0xB0	; 176
    3fb0:	dc 01       	movw	r26, r24
    3fb2:	80 93 46 02 	sts	0x0246, r24
    3fb6:	90 93 47 02 	sts	0x0247, r25
    3fba:	a0 93 48 02 	sts	0x0248, r26
    3fbe:	b0 93 49 02 	sts	0x0249, r27
    wdt_enable(WDTO_250MS);
    3fc2:	2c e0       	ldi	r18, 0x0C	; 12
    3fc4:	88 e1       	ldi	r24, 0x18	; 24
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	0f b6       	in	r0, 0x3f	; 63
    3fca:	f8 94       	cli
    3fcc:	a8 95       	wdr
    3fce:	80 93 60 00 	sts	0x0060, r24
    3fd2:	0f be       	out	0x3f, r0	; 63
    3fd4:	20 93 60 00 	sts	0x0060, r18
    3fd8:	ff cf       	rjmp	.-2      	; 0x3fd8 <bootloader_jump+0x44>

00003fda <action_for_key>:

/* Converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    return (action_t){ .code = pgm_read_word(&actionmaps[(layer)][(key.row)][(key.col)]) };
    3fda:	e6 2f       	mov	r30, r22
    3fdc:	f0 e0       	ldi	r31, 0x00	; 0
    3fde:	ee 0f       	add	r30, r30
    3fe0:	ff 1f       	adc	r31, r31
    3fe2:	47 2f       	mov	r20, r23
    3fe4:	50 e0       	ldi	r21, 0x00	; 0
    3fe6:	9a 01       	movw	r18, r20
    3fe8:	22 0f       	add	r18, r18
    3fea:	33 1f       	adc	r19, r19
    3fec:	24 0f       	add	r18, r20
    3fee:	35 1f       	adc	r19, r21
    3ff0:	22 0f       	add	r18, r18
    3ff2:	33 1f       	adc	r19, r19
    3ff4:	22 0f       	add	r18, r18
    3ff6:	33 1f       	adc	r19, r19
    3ff8:	e2 0f       	add	r30, r18
    3ffa:	f3 1f       	adc	r31, r19
    3ffc:	98 e7       	ldi	r25, 0x78	; 120
    3ffe:	89 9f       	mul	r24, r25
    4000:	c0 01       	movw	r24, r0
    4002:	11 24       	eor	r1, r1
    4004:	e8 0f       	add	r30, r24
    4006:	f9 1f       	adc	r31, r25
    4008:	e4 55       	subi	r30, 0x54	; 84
    400a:	ff 4f       	sbci	r31, 0xFF	; 255
    400c:	85 91       	lpm	r24, Z+
    400e:	94 91       	lpm	r25, Z
//    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
}
    4010:	08 95       	ret

00004012 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    4012:	80 e0       	ldi	r24, 0x00	; 0
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	08 95       	ret

00004018 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    4018:	cf 92       	push	r12
    401a:	df 92       	push	r13
    401c:	ef 92       	push	r14
    401e:	ff 92       	push	r15
    4020:	0f 93       	push	r16
    4022:	1f 93       	push	r17
    4024:	cf 93       	push	r28
    4026:	7c 01       	movw	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4028:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    402a:	8c 2f       	mov	r24, r28
    402c:	0e 94 ab 08 	call	0x1156	; 0x1156 <matrix_get_row>
    4030:	00 e0       	ldi	r16, 0x00	; 0
    4032:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    4034:	c8 2e       	mov	r12, r24
    4036:	dd 24       	eor	r13, r13
    4038:	c6 01       	movw	r24, r12
    403a:	00 2e       	mov	r0, r16
    403c:	02 c0       	rjmp	.+4      	; 0x4042 <scan_key+0x2a>
    403e:	95 95       	asr	r25
    4040:	87 95       	ror	r24
    4042:	0a 94       	dec	r0
    4044:	e2 f7       	brpl	.-8      	; 0x403e <scan_key+0x26>
    4046:	80 ff       	sbrs	r24, 0
    4048:	19 c0       	rjmp	.+50     	; 0x407c <scan_key+0x64>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    404a:	80 e0       	ldi	r24, 0x00	; 0
    404c:	60 2f       	mov	r22, r16
    404e:	7c 2f       	mov	r23, r28
    4050:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <action_for_key>
                if (action.code == code ||
    4054:	8e 15       	cp	r24, r14
    4056:	9f 05       	cpc	r25, r15
    4058:	d9 f0       	breq	.+54     	; 0x4090 <scan_key+0x78>
                    ((action.kind.id == ACT_LMODS ||
    405a:	29 2f       	mov	r18, r25
    405c:	20 7f       	andi	r18, 0xF0	; 240
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
                if (action.code == code ||
    405e:	51 f0       	breq	.+20     	; 0x4074 <scan_key+0x5c>
                    ((action.kind.id == ACT_LMODS ||
    4060:	20 31       	cpi	r18, 0x10	; 16
    4062:	41 f0       	breq	.+16     	; 0x4074 <scan_key+0x5c>
                      action.kind.id == ACT_RMODS ||
    4064:	20 32       	cpi	r18, 0x20	; 32
    4066:	31 f0       	breq	.+12     	; 0x4074 <scan_key+0x5c>
                      action.kind.id == ACT_LMODS_TAP ||
    4068:	20 33       	cpi	r18, 0x30	; 48
    406a:	21 f0       	breq	.+8      	; 0x4074 <scan_key+0x5c>
                      action.kind.id == ACT_RMODS_TAP ||
    406c:	20 3a       	cpi	r18, 0xA0	; 160
    406e:	11 f0       	breq	.+4      	; 0x4074 <scan_key+0x5c>
                      action.kind.id == ACT_LAYER_TAP ||
    4070:	20 3b       	cpi	r18, 0xB0	; 176
    4072:	21 f4       	brne	.+8      	; 0x407c <scan_key+0x64>
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    4074:	90 e0       	ldi	r25, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    4076:	8e 15       	cp	r24, r14
    4078:	9f 05       	cpc	r25, r15
    407a:	51 f0       	breq	.+20     	; 0x4090 <scan_key+0x78>
    407c:	0f 5f       	subi	r16, 0xFF	; 255
    407e:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4080:	06 30       	cpi	r16, 0x06	; 6
    4082:	11 05       	cpc	r17, r1
    4084:	c9 f6       	brne	.-78     	; 0x4038 <scan_key+0x20>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4086:	cf 5f       	subi	r28, 0xFF	; 255
    4088:	ca 30       	cpi	r28, 0x0A	; 10
    408a:	79 f6       	brne	.-98     	; 0x402a <scan_key+0x12>
                    return true;
                }
            }
        }
    }
    return false;
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	01 c0       	rjmp	.+2      	; 0x4092 <scan_key+0x7a>
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
                    return true;
    4090:	81 e0       	ldi	r24, 0x01	; 1
                }
            }
        }
    }
    return false;
}
    4092:	cf 91       	pop	r28
    4094:	1f 91       	pop	r17
    4096:	0f 91       	pop	r16
    4098:	ff 90       	pop	r15
    409a:	ef 90       	pop	r14
    409c:	df 90       	pop	r13
    409e:	cf 90       	pop	r12
    40a0:	08 95       	ret

000040a2 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    40a2:	cf 93       	push	r28
    40a4:	df 93       	push	r29
    40a6:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    40a8:	8c e2       	ldi	r24, 0x2C	; 44
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	0e 94 0c 20 	call	0x4018	; 0x4018 <scan_key>
    40b0:	88 23       	and	r24, r24
    40b2:	21 f0       	breq	.+8      	; 0x40bc <bootmagic_scan_key+0x1a>

    return scan_key(code);
    40b4:	ce 01       	movw	r24, r28
    40b6:	0e 94 0c 20 	call	0x4018	; 0x4018 <scan_key>
    40ba:	01 c0       	rjmp	.+2      	; 0x40be <bootmagic_scan_key+0x1c>
    return false;
}

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    40bc:	80 e0       	ldi	r24, 0x00	; 0

    return scan_key(code);
}
    40be:	df 91       	pop	r29
    40c0:	cf 91       	pop	r28
    40c2:	08 95       	ret

000040c4 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    40c4:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    40c6:	0e 94 bd 21 	call	0x437a	; 0x437a <eeconfig_is_enabled>
    40ca:	88 23       	and	r24, r24
    40cc:	11 f4       	brne	.+4      	; 0x40d2 <bootmagic+0xe>
        eeconfig_init();
    40ce:	0e 94 a2 21 	call	0x4344	; 0x4344 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    40d2:	81 ee       	ldi	r24, 0xE1	; 225
    40d4:	93 e0       	ldi	r25, 0x03	; 3
    40d6:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    40da:	c5 e6       	ldi	r28, 0x65	; 101
    40dc:	08 c0       	rjmp	.+16     	; 0x40ee <bootmagic+0x2a>
    40de:	0e 94 68 08 	call	0x10d0	; 0x10d0 <matrix_scan>
    40e2:	8f e3       	ldi	r24, 0x3F	; 63
    40e4:	9c e9       	ldi	r25, 0x9C	; 156
    40e6:	01 97       	sbiw	r24, 0x01	; 1
    40e8:	f1 f7       	brne	.-4      	; 0x40e6 <bootmagic+0x22>
    40ea:	00 c0       	rjmp	.+0      	; 0x40ec <bootmagic+0x28>
    40ec:	00 00       	nop
    40ee:	c1 50       	subi	r28, 0x01	; 1
    40f0:	b1 f7       	brne	.-20     	; 0x40de <bootmagic+0x1a>
    print("done.\n");
    40f2:	86 ef       	ldi	r24, 0xF6	; 246
    40f4:	93 e0       	ldi	r25, 0x03	; 3
    40f6:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    40fa:	89 e2       	ldi	r24, 0x29	; 41
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    4102:	88 23       	and	r24, r24
    4104:	09 f0       	breq	.+2      	; 0x4108 <bootmagic+0x44>
    4106:	1c c1       	rjmp	.+568    	; 0x4340 <bootmagic+0x27c>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4108:	8a e2       	ldi	r24, 0x2A	; 42
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    4110:	88 23       	and	r24, r24
    4112:	11 f0       	breq	.+4      	; 0x4118 <bootmagic+0x54>
        eeconfig_init();
    4114:	0e 94 a2 21 	call	0x4344	; 0x4344 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    4118:	85 e0       	ldi	r24, 0x05	; 5
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    4120:	88 23       	and	r24, r24
    4122:	11 f0       	breq	.+4      	; 0x4128 <bootmagic+0x64>
        bootloader_jump();
    4124:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    4128:	0e 94 c9 21 	call	0x4392	; 0x4392 <eeconfig_read_debug>
    412c:	80 93 25 02 	sts	0x0225, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    4130:	87 e0       	ldi	r24, 0x07	; 7
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    4138:	88 23       	and	r24, r24
    413a:	89 f1       	breq	.+98     	; 0x419e <bootmagic+0xda>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    413c:	8b e1       	ldi	r24, 0x1B	; 27
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    4144:	88 23       	and	r24, r24
    4146:	39 f0       	breq	.+14     	; 0x4156 <bootmagic+0x92>
            debug_config.matrix = !debug_config.matrix;
    4148:	80 91 25 02 	lds	r24, 0x0225
    414c:	98 2f       	mov	r25, r24
    414e:	90 95       	com	r25
    4150:	92 70       	andi	r25, 0x02	; 2
    4152:	8d 7f       	andi	r24, 0xFD	; 253
    4154:	0c c0       	rjmp	.+24     	; 0x416e <bootmagic+0xaa>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    4156:	8e e0       	ldi	r24, 0x0E	; 14
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    415e:	88 23       	and	r24, r24
    4160:	51 f0       	breq	.+20     	; 0x4176 <bootmagic+0xb2>
            debug_config.keyboard = !debug_config.keyboard;
    4162:	80 91 25 02 	lds	r24, 0x0225
    4166:	98 2f       	mov	r25, r24
    4168:	90 95       	com	r25
    416a:	94 70       	andi	r25, 0x04	; 4
    416c:	8b 7f       	andi	r24, 0xFB	; 251
    416e:	89 2b       	or	r24, r25
    4170:	80 93 25 02 	sts	0x0225, r24
    4174:	14 c0       	rjmp	.+40     	; 0x419e <bootmagic+0xda>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4176:	80 e1       	ldi	r24, 0x10	; 16
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    417e:	90 91 25 02 	lds	r25, 0x0225
    4182:	88 23       	and	r24, r24
    4184:	29 f0       	breq	.+10     	; 0x4190 <bootmagic+0xcc>
            debug_config.mouse = !debug_config.mouse;
    4186:	89 2f       	mov	r24, r25
    4188:	80 95       	com	r24
    418a:	88 70       	andi	r24, 0x08	; 8
    418c:	97 7f       	andi	r25, 0xF7	; 247
    418e:	04 c0       	rjmp	.+8      	; 0x4198 <bootmagic+0xd4>
        } else {
            debug_config.enable = !debug_config.enable;
    4190:	89 2f       	mov	r24, r25
    4192:	80 95       	com	r24
    4194:	81 70       	andi	r24, 0x01	; 1
    4196:	9e 7f       	andi	r25, 0xFE	; 254
    4198:	98 2b       	or	r25, r24
    419a:	90 93 25 02 	sts	0x0225, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    419e:	80 91 25 02 	lds	r24, 0x0225
    41a2:	0e 94 ce 21 	call	0x439c	; 0x439c <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    41a6:	0e 94 df 21 	call	0x43be	; 0x43be <eeconfig_read_keymap>
    41aa:	80 93 45 02 	sts	0x0245, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    41ae:	80 ee       	ldi	r24, 0xE0	; 224
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    41b6:	88 23       	and	r24, r24
    41b8:	49 f0       	breq	.+18     	; 0x41cc <bootmagic+0x108>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    41ba:	80 91 45 02 	lds	r24, 0x0245
    41be:	98 2f       	mov	r25, r24
    41c0:	90 95       	com	r25
    41c2:	91 70       	andi	r25, 0x01	; 1
    41c4:	8e 7f       	andi	r24, 0xFE	; 254
    41c6:	89 2b       	or	r24, r25
    41c8:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    41cc:	89 e3       	ldi	r24, 0x39	; 57
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    41d4:	88 23       	and	r24, r24
    41d6:	49 f0       	breq	.+18     	; 0x41ea <bootmagic+0x126>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    41d8:	80 91 45 02 	lds	r24, 0x0245
    41dc:	98 2f       	mov	r25, r24
    41de:	90 95       	com	r25
    41e0:	92 70       	andi	r25, 0x02	; 2
    41e2:	8d 7f       	andi	r24, 0xFD	; 253
    41e4:	89 2b       	or	r24, r25
    41e6:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    41ea:	82 ee       	ldi	r24, 0xE2	; 226
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    41f2:	88 23       	and	r24, r24
    41f4:	49 f0       	breq	.+18     	; 0x4208 <bootmagic+0x144>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    41f6:	80 91 45 02 	lds	r24, 0x0245
    41fa:	98 2f       	mov	r25, r24
    41fc:	90 95       	com	r25
    41fe:	94 70       	andi	r25, 0x04	; 4
    4200:	8b 7f       	andi	r24, 0xFB	; 251
    4202:	89 2b       	or	r24, r25
    4204:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    4208:	86 ee       	ldi	r24, 0xE6	; 230
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    4210:	88 23       	and	r24, r24
    4212:	49 f0       	breq	.+18     	; 0x4226 <bootmagic+0x162>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4214:	80 91 45 02 	lds	r24, 0x0245
    4218:	98 2f       	mov	r25, r24
    421a:	90 95       	com	r25
    421c:	98 70       	andi	r25, 0x08	; 8
    421e:	87 7f       	andi	r24, 0xF7	; 247
    4220:	89 2b       	or	r24, r25
    4222:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    4226:	83 ee       	ldi	r24, 0xE3	; 227
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    422e:	88 23       	and	r24, r24
    4230:	49 f0       	breq	.+18     	; 0x4244 <bootmagic+0x180>
        keymap_config.no_gui = !keymap_config.no_gui;
    4232:	80 91 45 02 	lds	r24, 0x0245
    4236:	98 2f       	mov	r25, r24
    4238:	90 95       	com	r25
    423a:	90 71       	andi	r25, 0x10	; 16
    423c:	8f 7e       	andi	r24, 0xEF	; 239
    423e:	89 2b       	or	r24, r25
    4240:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    4244:	85 e3       	ldi	r24, 0x35	; 53
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    424c:	88 23       	and	r24, r24
    424e:	49 f0       	breq	.+18     	; 0x4262 <bootmagic+0x19e>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    4250:	80 91 45 02 	lds	r24, 0x0245
    4254:	98 2f       	mov	r25, r24
    4256:	90 95       	com	r25
    4258:	90 72       	andi	r25, 0x20	; 32
    425a:	8f 7d       	andi	r24, 0xDF	; 223
    425c:	89 2b       	or	r24, r25
    425e:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4262:	81 e3       	ldi	r24, 0x31	; 49
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    426a:	88 23       	and	r24, r24
    426c:	49 f0       	breq	.+18     	; 0x4280 <bootmagic+0x1bc>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    426e:	80 91 45 02 	lds	r24, 0x0245
    4272:	98 2f       	mov	r25, r24
    4274:	90 95       	com	r25
    4276:	90 74       	andi	r25, 0x40	; 64
    4278:	8f 7b       	andi	r24, 0xBF	; 191
    427a:	89 2b       	or	r24, r25
    427c:	80 93 45 02 	sts	0x0245, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4280:	89 e1       	ldi	r24, 0x19	; 25
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    4288:	88 23       	and	r24, r24
    428a:	79 f0       	breq	.+30     	; 0x42aa <bootmagic+0x1e6>
        keymap_config.nkro = !keymap_config.nkro;
    428c:	90 91 45 02 	lds	r25, 0x0245
    4290:	89 2f       	mov	r24, r25
    4292:	88 1f       	adc	r24, r24
    4294:	88 27       	eor	r24, r24
    4296:	88 1f       	adc	r24, r24
    4298:	21 e0       	ldi	r18, 0x01	; 1
    429a:	82 27       	eor	r24, r18
    429c:	87 95       	ror	r24
    429e:	88 27       	eor	r24, r24
    42a0:	87 95       	ror	r24
    42a2:	9f 77       	andi	r25, 0x7F	; 127
    42a4:	98 2b       	or	r25, r24
    42a6:	90 93 45 02 	sts	0x0245, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    42aa:	80 91 45 02 	lds	r24, 0x0245
    42ae:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    42b2:	80 91 45 02 	lds	r24, 0x0245
    42b6:	88 1f       	adc	r24, r24
    42b8:	88 27       	eor	r24, r24
    42ba:	88 1f       	adc	r24, r24
    42bc:	80 93 0d 01 	sts	0x010D, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    42c0:	8d e1       	ldi	r24, 0x1D	; 29
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    42c8:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    42ca:	8b e1       	ldi	r24, 0x1B	; 27
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    42d2:	81 11       	cpse	r24, r1
    42d4:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    42d6:	86 e0       	ldi	r24, 0x06	; 6
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    42de:	81 11       	cpse	r24, r1
    42e0:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    42e2:	80 e2       	ldi	r24, 0x20	; 32
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    42ea:	81 11       	cpse	r24, r1
    42ec:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    42ee:	81 e2       	ldi	r24, 0x21	; 33
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    42f6:	81 11       	cpse	r24, r1
    42f8:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    42fa:	82 e2       	ldi	r24, 0x22	; 34
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    4302:	81 11       	cpse	r24, r1
    4304:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4306:	83 e2       	ldi	r24, 0x23	; 35
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    430e:	81 11       	cpse	r24, r1
    4310:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4312:	84 e2       	ldi	r24, 0x24	; 36
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	0e 94 51 20 	call	0x40a2	; 0x40a2 <bootmagic_scan_key>
    431a:	88 23       	and	r24, r24
    431c:	11 f0       	breq	.+4      	; 0x4322 <bootmagic+0x25e>
    431e:	c0 68       	ori	r28, 0x80	; 128
    4320:	02 c0       	rjmp	.+4      	; 0x4326 <bootmagic+0x262>
    if (default_layer) {
    4322:	cc 23       	and	r28, r28
    4324:	29 f0       	breq	.+10     	; 0x4330 <bootmagic+0x26c>
        eeconfig_write_default_layer(default_layer);
    4326:	8c 2f       	mov	r24, r28
    4328:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    432c:	6c 2f       	mov	r22, r28
    432e:	03 c0       	rjmp	.+6      	; 0x4336 <bootmagic+0x272>
    } else {
        default_layer = eeconfig_read_default_layer();
    4330:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4334:	68 2f       	mov	r22, r24
    4336:	70 e0       	ldi	r23, 0x00	; 0
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <default_layer_set>
    }
}
    4340:	cf 91       	pop	r28
    4342:	08 95       	ret

00004344 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	6d ee       	ldi	r22, 0xED	; 237
    434a:	7e ef       	ldi	r23, 0xFE	; 254
    434c:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4350:	82 e0       	ldi	r24, 0x02	; 2
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	60 e0       	ldi	r22, 0x00	; 0
    4356:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    435a:	83 e0       	ldi	r24, 0x03	; 3
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	60 e0       	ldi	r22, 0x00	; 0
    4360:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    4364:	84 e0       	ldi	r24, 0x04	; 4
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	60 e0       	ldi	r22, 0x00	; 0
    436a:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    436e:	85 e0       	ldi	r24, 0x05	; 5
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	60 e0       	ldi	r22, 0x00	; 0
    4374:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <__eewr_byte_m32u4>
#ifdef BACKLIGHT_ENABLE
    eeprom_write_byte(EECONFIG_BACKLIGHT,      0);
#endif
}
    4378:	08 95       	ret

0000437a <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <__eerd_word_m32u4>
    4382:	21 e0       	ldi	r18, 0x01	; 1
    4384:	3e ef       	ldi	r19, 0xFE	; 254
    4386:	8d 3e       	cpi	r24, 0xED	; 237
    4388:	93 07       	cpc	r25, r19
    438a:	09 f0       	breq	.+2      	; 0x438e <eeconfig_is_enabled+0x14>
    438c:	20 e0       	ldi	r18, 0x00	; 0
}
    438e:	82 2f       	mov	r24, r18
    4390:	08 95       	ret

00004392 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4392:	82 e0       	ldi	r24, 0x02	; 2
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <__eerd_byte_m32u4>
    439a:	08 95       	ret

0000439c <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    439c:	68 2f       	mov	r22, r24
    439e:	82 e0       	ldi	r24, 0x02	; 2
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <__eewr_byte_m32u4>
    43a6:	08 95       	ret

000043a8 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    43a8:	83 e0       	ldi	r24, 0x03	; 3
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <__eerd_byte_m32u4>
    43b0:	08 95       	ret

000043b2 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    43b2:	68 2f       	mov	r22, r24
    43b4:	83 e0       	ldi	r24, 0x03	; 3
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <__eewr_byte_m32u4>
    43bc:	08 95       	ret

000043be <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    43be:	84 e0       	ldi	r24, 0x04	; 4
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <__eerd_byte_m32u4>
    43c6:	08 95       	ret

000043c8 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    43c8:	68 2f       	mov	r22, r24
    43ca:	84 e0       	ldi	r24, 0x04	; 4
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <__eewr_byte_m32u4>
    43d2:	08 95       	ret

000043d4 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    43d4:	80 91 33 02 	lds	r24, 0x0233
    43d8:	80 ff       	sbrs	r24, 0
    43da:	0f c0       	rjmp	.+30     	; 0x43fa <move_unit+0x26>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    43dc:	80 91 13 01 	lds	r24, 0x0113
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	bc 01       	movw	r22, r24
    43e4:	66 0f       	add	r22, r22
    43e6:	77 1f       	adc	r23, r23
    43e8:	66 0f       	add	r22, r22
    43ea:	77 1f       	adc	r23, r23
    43ec:	68 0f       	add	r22, r24
    43ee:	79 1f       	adc	r23, r25
    43f0:	75 95       	asr	r23
    43f2:	67 95       	ror	r22
    43f4:	75 95       	asr	r23
    43f6:	67 95       	ror	r22
    43f8:	3a c0       	rjmp	.+116    	; 0x446e <move_unit+0x9a>
    } else if (mousekey_accel & (1<<1)) {
    43fa:	81 ff       	sbrs	r24, 1
    43fc:	0d c0       	rjmp	.+26     	; 0x4418 <move_unit+0x44>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    43fe:	80 91 13 01 	lds	r24, 0x0113
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	bc 01       	movw	r22, r24
    4406:	66 0f       	add	r22, r22
    4408:	77 1f       	adc	r23, r23
    440a:	66 0f       	add	r22, r22
    440c:	77 1f       	adc	r23, r23
    440e:	68 0f       	add	r22, r24
    4410:	79 1f       	adc	r23, r25
    4412:	75 95       	asr	r23
    4414:	67 95       	ror	r22
    4416:	2b c0       	rjmp	.+86     	; 0x446e <move_unit+0x9a>
    } else if (mousekey_accel & (1<<2)) {
    4418:	82 ff       	sbrs	r24, 2
    441a:	04 c0       	rjmp	.+8      	; 0x4424 <move_unit+0x50>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    441c:	80 91 13 01 	lds	r24, 0x0113
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	0b c0       	rjmp	.+22     	; 0x443a <move_unit+0x66>
    } else if (mousekey_repeat == 0) {
    4424:	40 91 2d 02 	lds	r20, 0x022D
    4428:	44 23       	and	r20, r20
    442a:	41 f1       	breq	.+80     	; 0x447c <move_unit+0xa8>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    442c:	60 91 12 01 	lds	r22, 0x0112
    4430:	80 91 13 01 	lds	r24, 0x0113
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    4434:	90 e0       	ldi	r25, 0x00	; 0
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4436:	46 17       	cp	r20, r22
    4438:	40 f0       	brcs	.+16     	; 0x444a <move_unit+0x76>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    443a:	bc 01       	movw	r22, r24
    443c:	66 0f       	add	r22, r22
    443e:	77 1f       	adc	r23, r23
    4440:	66 0f       	add	r22, r22
    4442:	77 1f       	adc	r23, r23
    4444:	68 0f       	add	r22, r24
    4446:	79 1f       	adc	r23, r25
    4448:	12 c0       	rjmp	.+36     	; 0x446e <move_unit+0x9a>
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    444a:	9c 01       	movw	r18, r24
    444c:	22 0f       	add	r18, r18
    444e:	33 1f       	adc	r19, r19
    4450:	22 0f       	add	r18, r18
    4452:	33 1f       	adc	r19, r19
    4454:	28 0f       	add	r18, r24
    4456:	39 1f       	adc	r19, r25
    4458:	50 e0       	ldi	r21, 0x00	; 0
    445a:	24 9f       	mul	r18, r20
    445c:	c0 01       	movw	r24, r0
    445e:	25 9f       	mul	r18, r21
    4460:	90 0d       	add	r25, r0
    4462:	34 9f       	mul	r19, r20
    4464:	90 0d       	add	r25, r0
    4466:	11 24       	eor	r1, r1
    4468:	70 e0       	ldi	r23, 0x00	; 0
    446a:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    446e:	60 38       	cpi	r22, 0x80	; 128
    4470:	71 05       	cpc	r23, r1
    4472:	40 f4       	brcc	.+16     	; 0x4484 <move_unit+0xb0>
    4474:	61 15       	cp	r22, r1
    4476:	71 05       	cpc	r23, r1
    4478:	39 f0       	breq	.+14     	; 0x4488 <move_unit+0xb4>
    447a:	02 c0       	rjmp	.+4      	; 0x4480 <move_unit+0xac>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    447c:	65 e0       	ldi	r22, 0x05	; 5
    447e:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4480:	86 2f       	mov	r24, r22
    4482:	08 95       	ret
    4484:	8f e7       	ldi	r24, 0x7F	; 127
    4486:	08 95       	ret
    4488:	81 e0       	ldi	r24, 0x01	; 1
}
    448a:	08 95       	ret

0000448c <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    448c:	80 91 33 02 	lds	r24, 0x0233
    4490:	80 ff       	sbrs	r24, 0
    4492:	08 c0       	rjmp	.+16     	; 0x44a4 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4494:	60 91 11 01 	lds	r22, 0x0111
    4498:	70 e0       	ldi	r23, 0x00	; 0
    449a:	75 95       	asr	r23
    449c:	67 95       	ror	r22
    449e:	75 95       	asr	r23
    44a0:	67 95       	ror	r22
    44a2:	23 c0       	rjmp	.+70     	; 0x44ea <wheel_unit+0x5e>
    } else if (mousekey_accel & (1<<1)) {
    44a4:	81 ff       	sbrs	r24, 1
    44a6:	06 c0       	rjmp	.+12     	; 0x44b4 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    44a8:	60 91 11 01 	lds	r22, 0x0111
    44ac:	70 e0       	ldi	r23, 0x00	; 0
    44ae:	75 95       	asr	r23
    44b0:	67 95       	ror	r22
    44b2:	1b c0       	rjmp	.+54     	; 0x44ea <wheel_unit+0x5e>
    } else if (mousekey_accel & (1<<2)) {
    44b4:	82 ff       	sbrs	r24, 2
    44b6:	03 c0       	rjmp	.+6      	; 0x44be <wheel_unit+0x32>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    44b8:	60 91 11 01 	lds	r22, 0x0111
    44bc:	0b c0       	rjmp	.+22     	; 0x44d4 <wheel_unit+0x48>
    } else if (mousekey_repeat == 0) {
    44be:	80 91 2d 02 	lds	r24, 0x022D
    44c2:	88 23       	and	r24, r24
    44c4:	d9 f0       	breq	.+54     	; 0x44fc <wheel_unit+0x70>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    44c6:	60 91 10 01 	lds	r22, 0x0110
    44ca:	90 91 11 01 	lds	r25, 0x0111
    44ce:	86 17       	cp	r24, r22
    44d0:	18 f0       	brcs	.+6      	; 0x44d8 <wheel_unit+0x4c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    44d2:	69 2f       	mov	r22, r25
    44d4:	70 e0       	ldi	r23, 0x00	; 0
    44d6:	06 c0       	rjmp	.+12     	; 0x44e4 <wheel_unit+0x58>
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    44d8:	98 9f       	mul	r25, r24
    44da:	c0 01       	movw	r24, r0
    44dc:	11 24       	eor	r1, r1
    44de:	70 e0       	ldi	r23, 0x00	; 0
    44e0:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    44e4:	60 38       	cpi	r22, 0x80	; 128
    44e6:	71 05       	cpc	r23, r1
    44e8:	28 f4       	brcc	.+10     	; 0x44f4 <wheel_unit+0x68>
    44ea:	61 15       	cp	r22, r1
    44ec:	71 05       	cpc	r23, r1
    44ee:	21 f0       	breq	.+8      	; 0x44f8 <wheel_unit+0x6c>
    44f0:	86 2f       	mov	r24, r22
    44f2:	08 95       	ret
    44f4:	8f e7       	ldi	r24, 0x7F	; 127
    44f6:	08 95       	ret
    44f8:	81 e0       	ldi	r24, 0x01	; 1
}
    44fa:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    44fc:	61 e0       	ldi	r22, 0x01	; 1
    44fe:	70 e0       	ldi	r23, 0x00	; 0
    4500:	f4 cf       	rjmp	.-24     	; 0x44ea <wheel_unit+0x5e>

00004502 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4502:	80 3f       	cpi	r24, 0xF0	; 240
    4504:	21 f4       	brne	.+8      	; 0x450e <mousekey_on+0xc>
    4506:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <move_unit>
    450a:	81 95       	neg	r24
    450c:	04 c0       	rjmp	.+8      	; 0x4516 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    450e:	81 3f       	cpi	r24, 0xF1	; 241
    4510:	29 f4       	brne	.+10     	; 0x451c <mousekey_on+0x1a>
    4512:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <move_unit>
    4516:	80 93 30 02 	sts	0x0230, r24
    451a:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    451c:	82 3f       	cpi	r24, 0xF2	; 242
    451e:	21 f4       	brne	.+8      	; 0x4528 <mousekey_on+0x26>
    4520:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <move_unit>
    4524:	81 95       	neg	r24
    4526:	04 c0       	rjmp	.+8      	; 0x4530 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4528:	83 3f       	cpi	r24, 0xF3	; 243
    452a:	29 f4       	brne	.+10     	; 0x4536 <mousekey_on+0x34>
    452c:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <move_unit>
    4530:	80 93 2f 02 	sts	0x022F, r24
    4534:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4536:	89 3f       	cpi	r24, 0xF9	; 249
    4538:	19 f4       	brne	.+6      	; 0x4540 <mousekey_on+0x3e>
    453a:	0e 94 46 22 	call	0x448c	; 0x448c <wheel_unit>
    453e:	05 c0       	rjmp	.+10     	; 0x454a <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4540:	8a 3f       	cpi	r24, 0xFA	; 250
    4542:	31 f4       	brne	.+12     	; 0x4550 <mousekey_on+0x4e>
    4544:	0e 94 46 22 	call	0x448c	; 0x448c <wheel_unit>
    4548:	81 95       	neg	r24
    454a:	80 93 31 02 	sts	0x0231, r24
    454e:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4550:	8b 3f       	cpi	r24, 0xFB	; 251
    4552:	21 f4       	brne	.+8      	; 0x455c <mousekey_on+0x5a>
    4554:	0e 94 46 22 	call	0x448c	; 0x448c <wheel_unit>
    4558:	81 95       	neg	r24
    455a:	04 c0       	rjmp	.+8      	; 0x4564 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    455c:	8c 3f       	cpi	r24, 0xFC	; 252
    455e:	29 f4       	brne	.+10     	; 0x456a <mousekey_on+0x68>
    4560:	0e 94 46 22 	call	0x448c	; 0x448c <wheel_unit>
    4564:	80 93 32 02 	sts	0x0232, r24
    4568:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    456a:	84 3f       	cpi	r24, 0xF4	; 244
    456c:	21 f4       	brne	.+8      	; 0x4576 <mousekey_on+0x74>
    456e:	80 91 2e 02 	lds	r24, 0x022E
    4572:	81 60       	ori	r24, 0x01	; 1
    4574:	17 c0       	rjmp	.+46     	; 0x45a4 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4576:	85 3f       	cpi	r24, 0xF5	; 245
    4578:	21 f4       	brne	.+8      	; 0x4582 <mousekey_on+0x80>
    457a:	80 91 2e 02 	lds	r24, 0x022E
    457e:	82 60       	ori	r24, 0x02	; 2
    4580:	11 c0       	rjmp	.+34     	; 0x45a4 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4582:	86 3f       	cpi	r24, 0xF6	; 246
    4584:	21 f4       	brne	.+8      	; 0x458e <mousekey_on+0x8c>
    4586:	80 91 2e 02 	lds	r24, 0x022E
    458a:	84 60       	ori	r24, 0x04	; 4
    458c:	0b c0       	rjmp	.+22     	; 0x45a4 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    458e:	87 3f       	cpi	r24, 0xF7	; 247
    4590:	21 f4       	brne	.+8      	; 0x459a <mousekey_on+0x98>
    4592:	80 91 2e 02 	lds	r24, 0x022E
    4596:	88 60       	ori	r24, 0x08	; 8
    4598:	05 c0       	rjmp	.+10     	; 0x45a4 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    459a:	88 3f       	cpi	r24, 0xF8	; 248
    459c:	31 f4       	brne	.+12     	; 0x45aa <mousekey_on+0xa8>
    459e:	80 91 2e 02 	lds	r24, 0x022E
    45a2:	80 61       	ori	r24, 0x10	; 16
    45a4:	80 93 2e 02 	sts	0x022E, r24
    45a8:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    45aa:	8d 3f       	cpi	r24, 0xFD	; 253
    45ac:	21 f4       	brne	.+8      	; 0x45b6 <mousekey_on+0xb4>
    45ae:	80 91 33 02 	lds	r24, 0x0233
    45b2:	81 60       	ori	r24, 0x01	; 1
    45b4:	05 c0       	rjmp	.+10     	; 0x45c0 <mousekey_on+0xbe>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    45b6:	8e 3f       	cpi	r24, 0xFE	; 254
    45b8:	31 f4       	brne	.+12     	; 0x45c6 <mousekey_on+0xc4>
    45ba:	80 91 33 02 	lds	r24, 0x0233
    45be:	82 60       	ori	r24, 0x02	; 2
    45c0:	80 93 33 02 	sts	0x0233, r24
    45c4:	08 95       	ret
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    45c6:	8f 3f       	cpi	r24, 0xFF	; 255
    45c8:	29 f4       	brne	.+10     	; 0x45d4 <mousekey_on+0xd2>
    45ca:	80 91 33 02 	lds	r24, 0x0233
    45ce:	84 60       	ori	r24, 0x04	; 4
    45d0:	80 93 33 02 	sts	0x0233, r24
    45d4:	08 95       	ret

000045d6 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    45d6:	80 3f       	cpi	r24, 0xF0	; 240
    45d8:	29 f4       	brne	.+10     	; 0x45e4 <mousekey_off+0xe>
    45da:	80 91 30 02 	lds	r24, 0x0230
    45de:	87 ff       	sbrs	r24, 7
    45e0:	6d c0       	rjmp	.+218    	; 0x46bc <mousekey_off+0xe6>
    45e2:	07 c0       	rjmp	.+14     	; 0x45f2 <mousekey_off+0x1c>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    45e4:	81 3f       	cpi	r24, 0xF1	; 241
    45e6:	41 f4       	brne	.+16     	; 0x45f8 <mousekey_off+0x22>
    45e8:	80 91 30 02 	lds	r24, 0x0230
    45ec:	18 16       	cp	r1, r24
    45ee:	0c f0       	brlt	.+2      	; 0x45f2 <mousekey_off+0x1c>
    45f0:	65 c0       	rjmp	.+202    	; 0x46bc <mousekey_off+0xe6>
    45f2:	10 92 30 02 	sts	0x0230, r1
    45f6:	62 c0       	rjmp	.+196    	; 0x46bc <mousekey_off+0xe6>
    45f8:	90 91 2f 02 	lds	r25, 0x022F
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    45fc:	82 3f       	cpi	r24, 0xF2	; 242
    45fe:	19 f4       	brne	.+6      	; 0x4606 <mousekey_off+0x30>
    4600:	97 ff       	sbrs	r25, 7
    4602:	5c c0       	rjmp	.+184    	; 0x46bc <mousekey_off+0xe6>
    4604:	05 c0       	rjmp	.+10     	; 0x4610 <mousekey_off+0x3a>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4606:	83 3f       	cpi	r24, 0xF3	; 243
    4608:	31 f4       	brne	.+12     	; 0x4616 <mousekey_off+0x40>
    460a:	19 16       	cp	r1, r25
    460c:	0c f0       	brlt	.+2      	; 0x4610 <mousekey_off+0x3a>
    460e:	56 c0       	rjmp	.+172    	; 0x46bc <mousekey_off+0xe6>
    4610:	10 92 2f 02 	sts	0x022F, r1
    4614:	53 c0       	rjmp	.+166    	; 0x46bc <mousekey_off+0xe6>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4616:	89 3f       	cpi	r24, 0xF9	; 249
    4618:	29 f4       	brne	.+10     	; 0x4624 <mousekey_off+0x4e>
    461a:	80 91 31 02 	lds	r24, 0x0231
    461e:	18 16       	cp	r1, r24
    4620:	3c f0       	brlt	.+14     	; 0x4630 <mousekey_off+0x5a>
    4622:	4c c0       	rjmp	.+152    	; 0x46bc <mousekey_off+0xe6>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4624:	8a 3f       	cpi	r24, 0xFA	; 250
    4626:	39 f4       	brne	.+14     	; 0x4636 <mousekey_off+0x60>
    4628:	80 91 31 02 	lds	r24, 0x0231
    462c:	87 ff       	sbrs	r24, 7
    462e:	46 c0       	rjmp	.+140    	; 0x46bc <mousekey_off+0xe6>
    4630:	10 92 31 02 	sts	0x0231, r1
    4634:	43 c0       	rjmp	.+134    	; 0x46bc <mousekey_off+0xe6>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4636:	8b 3f       	cpi	r24, 0xFB	; 251
    4638:	29 f4       	brne	.+10     	; 0x4644 <mousekey_off+0x6e>
    463a:	80 91 32 02 	lds	r24, 0x0232
    463e:	87 ff       	sbrs	r24, 7
    4640:	3d c0       	rjmp	.+122    	; 0x46bc <mousekey_off+0xe6>
    4642:	06 c0       	rjmp	.+12     	; 0x4650 <mousekey_off+0x7a>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4644:	8c 3f       	cpi	r24, 0xFC	; 252
    4646:	39 f4       	brne	.+14     	; 0x4656 <mousekey_off+0x80>
    4648:	80 91 32 02 	lds	r24, 0x0232
    464c:	18 16       	cp	r1, r24
    464e:	b4 f5       	brge	.+108    	; 0x46bc <mousekey_off+0xe6>
    4650:	10 92 32 02 	sts	0x0232, r1
    4654:	33 c0       	rjmp	.+102    	; 0x46bc <mousekey_off+0xe6>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4656:	84 3f       	cpi	r24, 0xF4	; 244
    4658:	21 f4       	brne	.+8      	; 0x4662 <mousekey_off+0x8c>
    465a:	80 91 2e 02 	lds	r24, 0x022E
    465e:	8e 7f       	andi	r24, 0xFE	; 254
    4660:	05 c0       	rjmp	.+10     	; 0x466c <mousekey_off+0x96>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4662:	85 3f       	cpi	r24, 0xF5	; 245
    4664:	31 f4       	brne	.+12     	; 0x4672 <mousekey_off+0x9c>
    4666:	80 91 2e 02 	lds	r24, 0x022E
    466a:	8d 7f       	andi	r24, 0xFD	; 253
    466c:	80 93 2e 02 	sts	0x022E, r24
    4670:	25 c0       	rjmp	.+74     	; 0x46bc <mousekey_off+0xe6>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4672:	86 3f       	cpi	r24, 0xF6	; 246
    4674:	21 f4       	brne	.+8      	; 0x467e <mousekey_off+0xa8>
    4676:	80 91 2e 02 	lds	r24, 0x022E
    467a:	8b 7f       	andi	r24, 0xFB	; 251
    467c:	f7 cf       	rjmp	.-18     	; 0x466c <mousekey_off+0x96>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    467e:	87 3f       	cpi	r24, 0xF7	; 247
    4680:	21 f4       	brne	.+8      	; 0x468a <mousekey_off+0xb4>
    4682:	80 91 2e 02 	lds	r24, 0x022E
    4686:	87 7f       	andi	r24, 0xF7	; 247
    4688:	f1 cf       	rjmp	.-30     	; 0x466c <mousekey_off+0x96>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    468a:	88 3f       	cpi	r24, 0xF8	; 248
    468c:	21 f4       	brne	.+8      	; 0x4696 <mousekey_off+0xc0>
    468e:	80 91 2e 02 	lds	r24, 0x022E
    4692:	8f 7e       	andi	r24, 0xEF	; 239
    4694:	eb cf       	rjmp	.-42     	; 0x466c <mousekey_off+0x96>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4696:	8d 3f       	cpi	r24, 0xFD	; 253
    4698:	21 f4       	brne	.+8      	; 0x46a2 <mousekey_off+0xcc>
    469a:	80 91 33 02 	lds	r24, 0x0233
    469e:	8e 7f       	andi	r24, 0xFE	; 254
    46a0:	0b c0       	rjmp	.+22     	; 0x46b8 <mousekey_off+0xe2>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    46a2:	8e 3f       	cpi	r24, 0xFE	; 254
    46a4:	21 f4       	brne	.+8      	; 0x46ae <mousekey_off+0xd8>
    46a6:	80 91 33 02 	lds	r24, 0x0233
    46aa:	8d 7f       	andi	r24, 0xFD	; 253
    46ac:	05 c0       	rjmp	.+10     	; 0x46b8 <mousekey_off+0xe2>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    46ae:	8f 3f       	cpi	r24, 0xFF	; 255
    46b0:	29 f4       	brne	.+10     	; 0x46bc <mousekey_off+0xe6>
    46b2:	80 91 33 02 	lds	r24, 0x0233
    46b6:	8b 7f       	andi	r24, 0xFB	; 251
    46b8:	80 93 33 02 	sts	0x0233, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    46bc:	80 91 2f 02 	lds	r24, 0x022F
    46c0:	88 23       	and	r24, r24
    46c2:	71 f4       	brne	.+28     	; 0x46e0 <mousekey_off+0x10a>
    46c4:	80 91 30 02 	lds	r24, 0x0230
    46c8:	88 23       	and	r24, r24
    46ca:	51 f4       	brne	.+20     	; 0x46e0 <mousekey_off+0x10a>
    46cc:	80 91 31 02 	lds	r24, 0x0231
    46d0:	88 23       	and	r24, r24
    46d2:	31 f4       	brne	.+12     	; 0x46e0 <mousekey_off+0x10a>
    46d4:	80 91 32 02 	lds	r24, 0x0232
    46d8:	88 23       	and	r24, r24
    46da:	11 f4       	brne	.+4      	; 0x46e0 <mousekey_off+0x10a>
        mousekey_repeat = 0;
    46dc:	10 92 2d 02 	sts	0x022D, r1
    46e0:	08 95       	ret

000046e2 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    46e2:	80 91 25 02 	lds	r24, 0x0225
    46e6:	83 ff       	sbrs	r24, 3
    46e8:	c1 c0       	rjmp	.+386    	; 0x486c <mousekey_send+0x18a>
    print("mousekey [btn|x y v h](rep/acl): [");
    46ea:	8d ef       	ldi	r24, 0xFD	; 253
    46ec:	93 e0       	ldi	r25, 0x03	; 3
    46ee:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    phex(mouse_report.buttons); print("|");
    46f2:	00 d0       	rcall	.+0      	; 0x46f4 <mousekey_send+0x12>
    46f4:	00 d0       	rcall	.+0      	; 0x46f6 <mousekey_send+0x14>
    46f6:	ed b7       	in	r30, 0x3d	; 61
    46f8:	fe b7       	in	r31, 0x3e	; 62
    46fa:	31 96       	adiw	r30, 0x01	; 1
    46fc:	80 e2       	ldi	r24, 0x20	; 32
    46fe:	94 e0       	ldi	r25, 0x04	; 4
    4700:	ad b7       	in	r26, 0x3d	; 61
    4702:	be b7       	in	r27, 0x3e	; 62
    4704:	12 96       	adiw	r26, 0x02	; 2
    4706:	9c 93       	st	X, r25
    4708:	8e 93       	st	-X, r24
    470a:	11 97       	sbiw	r26, 0x01	; 1
    470c:	80 91 2e 02 	lds	r24, 0x022E
    4710:	82 83       	std	Z+2, r24	; 0x02
    4712:	13 82       	std	Z+3, r1	; 0x03
    4714:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4718:	0f 90       	pop	r0
    471a:	0f 90       	pop	r0
    471c:	0f 90       	pop	r0
    471e:	0f 90       	pop	r0
    4720:	85 e2       	ldi	r24, 0x25	; 37
    4722:	94 e0       	ldi	r25, 0x04	; 4
    4724:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print_decs(mouse_report.x); print(" ");
    4728:	00 d0       	rcall	.+0      	; 0x472a <mousekey_send+0x48>
    472a:	00 d0       	rcall	.+0      	; 0x472c <mousekey_send+0x4a>
    472c:	87 e2       	ldi	r24, 0x27	; 39
    472e:	94 e0       	ldi	r25, 0x04	; 4
    4730:	ed b7       	in	r30, 0x3d	; 61
    4732:	fe b7       	in	r31, 0x3e	; 62
    4734:	92 83       	std	Z+2, r25	; 0x02
    4736:	81 83       	std	Z+1, r24	; 0x01
    4738:	80 91 2f 02 	lds	r24, 0x022F
    473c:	99 27       	eor	r25, r25
    473e:	87 fd       	sbrc	r24, 7
    4740:	90 95       	com	r25
    4742:	94 83       	std	Z+4, r25	; 0x04
    4744:	83 83       	std	Z+3, r24	; 0x03
    4746:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    474a:	0f 90       	pop	r0
    474c:	0f 90       	pop	r0
    474e:	0f 90       	pop	r0
    4750:	0f 90       	pop	r0
    4752:	8a e2       	ldi	r24, 0x2A	; 42
    4754:	94 e0       	ldi	r25, 0x04	; 4
    4756:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print_decs(mouse_report.y); print(" ");
    475a:	00 d0       	rcall	.+0      	; 0x475c <mousekey_send+0x7a>
    475c:	00 d0       	rcall	.+0      	; 0x475e <mousekey_send+0x7c>
    475e:	8c e2       	ldi	r24, 0x2C	; 44
    4760:	94 e0       	ldi	r25, 0x04	; 4
    4762:	ad b7       	in	r26, 0x3d	; 61
    4764:	be b7       	in	r27, 0x3e	; 62
    4766:	12 96       	adiw	r26, 0x02	; 2
    4768:	9c 93       	st	X, r25
    476a:	8e 93       	st	-X, r24
    476c:	11 97       	sbiw	r26, 0x01	; 1
    476e:	80 91 30 02 	lds	r24, 0x0230
    4772:	99 27       	eor	r25, r25
    4774:	87 fd       	sbrc	r24, 7
    4776:	90 95       	com	r25
    4778:	14 96       	adiw	r26, 0x04	; 4
    477a:	9c 93       	st	X, r25
    477c:	8e 93       	st	-X, r24
    477e:	13 97       	sbiw	r26, 0x03	; 3
    4780:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4784:	0f 90       	pop	r0
    4786:	0f 90       	pop	r0
    4788:	0f 90       	pop	r0
    478a:	0f 90       	pop	r0
    478c:	8f e2       	ldi	r24, 0x2F	; 47
    478e:	94 e0       	ldi	r25, 0x04	; 4
    4790:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print_decs(mouse_report.v); print(" ");
    4794:	00 d0       	rcall	.+0      	; 0x4796 <mousekey_send+0xb4>
    4796:	00 d0       	rcall	.+0      	; 0x4798 <mousekey_send+0xb6>
    4798:	81 e3       	ldi	r24, 0x31	; 49
    479a:	94 e0       	ldi	r25, 0x04	; 4
    479c:	ed b7       	in	r30, 0x3d	; 61
    479e:	fe b7       	in	r31, 0x3e	; 62
    47a0:	92 83       	std	Z+2, r25	; 0x02
    47a2:	81 83       	std	Z+1, r24	; 0x01
    47a4:	80 91 31 02 	lds	r24, 0x0231
    47a8:	99 27       	eor	r25, r25
    47aa:	87 fd       	sbrc	r24, 7
    47ac:	90 95       	com	r25
    47ae:	94 83       	std	Z+4, r25	; 0x04
    47b0:	83 83       	std	Z+3, r24	; 0x03
    47b2:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    47b6:	0f 90       	pop	r0
    47b8:	0f 90       	pop	r0
    47ba:	0f 90       	pop	r0
    47bc:	0f 90       	pop	r0
    47be:	84 e3       	ldi	r24, 0x34	; 52
    47c0:	94 e0       	ldi	r25, 0x04	; 4
    47c2:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print_decs(mouse_report.h); print("](");
    47c6:	00 d0       	rcall	.+0      	; 0x47c8 <mousekey_send+0xe6>
    47c8:	00 d0       	rcall	.+0      	; 0x47ca <mousekey_send+0xe8>
    47ca:	86 e3       	ldi	r24, 0x36	; 54
    47cc:	94 e0       	ldi	r25, 0x04	; 4
    47ce:	ad b7       	in	r26, 0x3d	; 61
    47d0:	be b7       	in	r27, 0x3e	; 62
    47d2:	12 96       	adiw	r26, 0x02	; 2
    47d4:	9c 93       	st	X, r25
    47d6:	8e 93       	st	-X, r24
    47d8:	11 97       	sbiw	r26, 0x01	; 1
    47da:	80 91 32 02 	lds	r24, 0x0232
    47de:	99 27       	eor	r25, r25
    47e0:	87 fd       	sbrc	r24, 7
    47e2:	90 95       	com	r25
    47e4:	14 96       	adiw	r26, 0x04	; 4
    47e6:	9c 93       	st	X, r25
    47e8:	8e 93       	st	-X, r24
    47ea:	13 97       	sbiw	r26, 0x03	; 3
    47ec:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    47f0:	0f 90       	pop	r0
    47f2:	0f 90       	pop	r0
    47f4:	0f 90       	pop	r0
    47f6:	0f 90       	pop	r0
    47f8:	89 e3       	ldi	r24, 0x39	; 57
    47fa:	94 e0       	ldi	r25, 0x04	; 4
    47fc:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print_dec(mousekey_repeat); print("/");
    4800:	00 d0       	rcall	.+0      	; 0x4802 <mousekey_send+0x120>
    4802:	00 d0       	rcall	.+0      	; 0x4804 <mousekey_send+0x122>
    4804:	ed b7       	in	r30, 0x3d	; 61
    4806:	fe b7       	in	r31, 0x3e	; 62
    4808:	31 96       	adiw	r30, 0x01	; 1
    480a:	8c e3       	ldi	r24, 0x3C	; 60
    480c:	94 e0       	ldi	r25, 0x04	; 4
    480e:	ad b7       	in	r26, 0x3d	; 61
    4810:	be b7       	in	r27, 0x3e	; 62
    4812:	12 96       	adiw	r26, 0x02	; 2
    4814:	9c 93       	st	X, r25
    4816:	8e 93       	st	-X, r24
    4818:	11 97       	sbiw	r26, 0x01	; 1
    481a:	80 91 2d 02 	lds	r24, 0x022D
    481e:	82 83       	std	Z+2, r24	; 0x02
    4820:	13 82       	std	Z+3, r1	; 0x03
    4822:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4826:	0f 90       	pop	r0
    4828:	0f 90       	pop	r0
    482a:	0f 90       	pop	r0
    482c:	0f 90       	pop	r0
    482e:	8f e3       	ldi	r24, 0x3F	; 63
    4830:	94 e0       	ldi	r25, 0x04	; 4
    4832:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4836:	00 d0       	rcall	.+0      	; 0x4838 <mousekey_send+0x156>
    4838:	00 d0       	rcall	.+0      	; 0x483a <mousekey_send+0x158>
    483a:	ed b7       	in	r30, 0x3d	; 61
    483c:	fe b7       	in	r31, 0x3e	; 62
    483e:	31 96       	adiw	r30, 0x01	; 1
    4840:	81 e4       	ldi	r24, 0x41	; 65
    4842:	94 e0       	ldi	r25, 0x04	; 4
    4844:	ad b7       	in	r26, 0x3d	; 61
    4846:	be b7       	in	r27, 0x3e	; 62
    4848:	12 96       	adiw	r26, 0x02	; 2
    484a:	9c 93       	st	X, r25
    484c:	8e 93       	st	-X, r24
    484e:	11 97       	sbiw	r26, 0x01	; 1
    4850:	80 91 33 02 	lds	r24, 0x0233
    4854:	82 83       	std	Z+2, r24	; 0x02
    4856:	13 82       	std	Z+3, r1	; 0x03
    4858:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    485c:	0f 90       	pop	r0
    485e:	0f 90       	pop	r0
    4860:	0f 90       	pop	r0
    4862:	0f 90       	pop	r0
    4864:	84 e4       	ldi	r24, 0x44	; 68
    4866:	94 e0       	ldi	r25, 0x04	; 4
    4868:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    486c:	8e e2       	ldi	r24, 0x2E	; 46
    486e:	92 e0       	ldi	r25, 0x02	; 2
    4870:	0e 94 0e 13 	call	0x261c	; 0x261c <host_mouse_send>
    last_timer = timer_read();
    4874:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <timer_read>
    4878:	90 93 2c 02 	sts	0x022C, r25
    487c:	80 93 2b 02 	sts	0x022B, r24
}
    4880:	08 95       	ret

00004882 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4882:	cf 93       	push	r28
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4884:	80 91 2b 02 	lds	r24, 0x022B
    4888:	90 91 2c 02 	lds	r25, 0x022C
    488c:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <timer_elapsed>
    4890:	60 91 2d 02 	lds	r22, 0x022D
    4894:	66 23       	and	r22, r22
    4896:	21 f0       	breq	.+8      	; 0x48a0 <mousekey_task+0x1e>
    4898:	20 91 14 01 	lds	r18, 0x0114
    489c:	30 e0       	ldi	r19, 0x00	; 0
    489e:	0d c0       	rjmp	.+26     	; 0x48ba <mousekey_task+0x38>
    48a0:	40 91 15 01 	lds	r20, 0x0115
    48a4:	50 e0       	ldi	r21, 0x00	; 0
    48a6:	9a 01       	movw	r18, r20
    48a8:	22 0f       	add	r18, r18
    48aa:	33 1f       	adc	r19, r19
    48ac:	e3 e0       	ldi	r30, 0x03	; 3
    48ae:	44 0f       	add	r20, r20
    48b0:	55 1f       	adc	r21, r21
    48b2:	ea 95       	dec	r30
    48b4:	e1 f7       	brne	.-8      	; 0x48ae <mousekey_task+0x2c>
    48b6:	24 0f       	add	r18, r20
    48b8:	35 1f       	adc	r19, r21
    48ba:	82 17       	cp	r24, r18
    48bc:	93 07       	cpc	r25, r19
    48be:	08 f4       	brcc	.+2      	; 0x48c2 <mousekey_task+0x40>
    48c0:	85 c0       	rjmp	.+266    	; 0x49cc <mousekey_task+0x14a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    48c2:	80 91 2f 02 	lds	r24, 0x022F
    48c6:	88 23       	and	r24, r24
    48c8:	69 f4       	brne	.+26     	; 0x48e4 <mousekey_task+0x62>
    48ca:	90 91 30 02 	lds	r25, 0x0230
    48ce:	99 23       	and	r25, r25
    48d0:	49 f4       	brne	.+18     	; 0x48e4 <mousekey_task+0x62>
    48d2:	90 91 31 02 	lds	r25, 0x0231
    48d6:	99 23       	and	r25, r25
    48d8:	29 f4       	brne	.+10     	; 0x48e4 <mousekey_task+0x62>
    48da:	90 91 32 02 	lds	r25, 0x0232
    48de:	99 23       	and	r25, r25
    48e0:	09 f4       	brne	.+2      	; 0x48e4 <mousekey_task+0x62>
    48e2:	74 c0       	rjmp	.+232    	; 0x49cc <mousekey_task+0x14a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    48e4:	6f 3f       	cpi	r22, 0xFF	; 255
    48e6:	19 f0       	breq	.+6      	; 0x48ee <mousekey_task+0x6c>
        mousekey_repeat++;
    48e8:	6f 5f       	subi	r22, 0xFF	; 255
    48ea:	60 93 2d 02 	sts	0x022D, r22


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    48ee:	18 16       	cp	r1, r24
    48f0:	24 f4       	brge	.+8      	; 0x48fa <mousekey_task+0x78>
    48f2:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <move_unit>
    48f6:	80 93 2f 02 	sts	0x022F, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    48fa:	80 91 2f 02 	lds	r24, 0x022F
    48fe:	87 ff       	sbrs	r24, 7
    4900:	05 c0       	rjmp	.+10     	; 0x490c <mousekey_task+0x8a>
    4902:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <move_unit>
    4906:	81 95       	neg	r24
    4908:	80 93 2f 02 	sts	0x022F, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    490c:	80 91 30 02 	lds	r24, 0x0230
    4910:	18 16       	cp	r1, r24
    4912:	24 f4       	brge	.+8      	; 0x491c <mousekey_task+0x9a>
    4914:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <move_unit>
    4918:	80 93 30 02 	sts	0x0230, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    491c:	80 91 30 02 	lds	r24, 0x0230
    4920:	87 ff       	sbrs	r24, 7
    4922:	05 c0       	rjmp	.+10     	; 0x492e <mousekey_task+0xac>
    4924:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <move_unit>
    4928:	81 95       	neg	r24
    492a:	80 93 30 02 	sts	0x0230, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    492e:	60 91 2f 02 	lds	r22, 0x022F
    4932:	66 23       	and	r22, r22
    4934:	39 f1       	breq	.+78     	; 0x4984 <mousekey_task+0x102>
    4936:	c0 91 30 02 	lds	r28, 0x0230
    493a:	cc 23       	and	r28, r28
    493c:	19 f1       	breq	.+70     	; 0x4984 <mousekey_task+0x102>
        mouse_report.x *= 0.7;
    493e:	77 27       	eor	r23, r23
    4940:	67 fd       	sbrc	r22, 7
    4942:	70 95       	com	r23
    4944:	87 2f       	mov	r24, r23
    4946:	97 2f       	mov	r25, r23
    4948:	0e 94 95 2c 	call	0x592a	; 0x592a <__floatsisf>
    494c:	23 e3       	ldi	r18, 0x33	; 51
    494e:	33 e3       	ldi	r19, 0x33	; 51
    4950:	43 e3       	ldi	r20, 0x33	; 51
    4952:	5f e3       	ldi	r21, 0x3F	; 63
    4954:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <__mulsf3>
    4958:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <__fixsfsi>
    495c:	60 93 2f 02 	sts	0x022F, r22
        mouse_report.y *= 0.7;
    4960:	6c 2f       	mov	r22, r28
    4962:	77 27       	eor	r23, r23
    4964:	67 fd       	sbrc	r22, 7
    4966:	70 95       	com	r23
    4968:	87 2f       	mov	r24, r23
    496a:	97 2f       	mov	r25, r23
    496c:	0e 94 95 2c 	call	0x592a	; 0x592a <__floatsisf>
    4970:	23 e3       	ldi	r18, 0x33	; 51
    4972:	33 e3       	ldi	r19, 0x33	; 51
    4974:	43 e3       	ldi	r20, 0x33	; 51
    4976:	5f e3       	ldi	r21, 0x3F	; 63
    4978:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <__mulsf3>
    497c:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <__fixsfsi>
    4980:	60 93 30 02 	sts	0x0230, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4984:	80 91 31 02 	lds	r24, 0x0231
    4988:	18 16       	cp	r1, r24
    498a:	24 f4       	brge	.+8      	; 0x4994 <mousekey_task+0x112>
    498c:	0e 94 46 22 	call	0x448c	; 0x448c <wheel_unit>
    4990:	80 93 31 02 	sts	0x0231, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4994:	80 91 31 02 	lds	r24, 0x0231
    4998:	87 ff       	sbrs	r24, 7
    499a:	05 c0       	rjmp	.+10     	; 0x49a6 <mousekey_task+0x124>
    499c:	0e 94 46 22 	call	0x448c	; 0x448c <wheel_unit>
    49a0:	81 95       	neg	r24
    49a2:	80 93 31 02 	sts	0x0231, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    49a6:	80 91 32 02 	lds	r24, 0x0232
    49aa:	18 16       	cp	r1, r24
    49ac:	24 f4       	brge	.+8      	; 0x49b6 <mousekey_task+0x134>
    49ae:	0e 94 46 22 	call	0x448c	; 0x448c <wheel_unit>
    49b2:	80 93 32 02 	sts	0x0232, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    49b6:	80 91 32 02 	lds	r24, 0x0232
    49ba:	87 ff       	sbrs	r24, 7
    49bc:	05 c0       	rjmp	.+10     	; 0x49c8 <mousekey_task+0x146>
    49be:	0e 94 46 22 	call	0x448c	; 0x448c <wheel_unit>
    49c2:	81 95       	neg	r24
    49c4:	80 93 32 02 	sts	0x0232, r24

    mousekey_send();
    49c8:	0e 94 71 23 	call	0x46e2	; 0x46e2 <mousekey_send>
}
    49cc:	cf 91       	pop	r28
    49ce:	08 95       	ret

000049d0 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    49d0:	ee e2       	ldi	r30, 0x2E	; 46
    49d2:	f2 e0       	ldi	r31, 0x02	; 2
    49d4:	85 e0       	ldi	r24, 0x05	; 5
    49d6:	df 01       	movw	r26, r30
    49d8:	1d 92       	st	X+, r1
    49da:	8a 95       	dec	r24
    49dc:	e9 f7       	brne	.-6      	; 0x49d8 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    49de:	10 92 2d 02 	sts	0x022D, r1
    mousekey_accel = 0;
    49e2:	10 92 33 02 	sts	0x0233, r1
}
    49e6:	08 95       	ret

000049e8 <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    49e8:	88 e7       	ldi	r24, 0x78	; 120
    49ea:	98 e0       	ldi	r25, 0x08	; 8
    49ec:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
          "ESC/q:	quit\n"
#ifdef MOUSEKEY_ENABLE
          "m:	mousekey\n"
#endif
    );
}
    49f0:	08 95       	ret

000049f2 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    49f2:	8e ea       	ldi	r24, 0xAE	; 174
    49f4:	98 e0       	ldi	r25, 0x08	; 8
    49f6:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    49fa:	00 d0       	rcall	.+0      	; 0x49fc <mousekey_console_help+0xa>
    49fc:	00 d0       	rcall	.+0      	; 0x49fe <mousekey_console_help+0xc>
    49fe:	00 d0       	rcall	.+0      	; 0x4a00 <mousekey_console_help+0xe>
    4a00:	ed b7       	in	r30, 0x3d	; 61
    4a02:	fe b7       	in	r31, 0x3e	; 62
    4a04:	31 96       	adiw	r30, 0x01	; 1
    4a06:	89 ea       	ldi	r24, 0xA9	; 169
    4a08:	99 e0       	ldi	r25, 0x09	; 9
    4a0a:	ad b7       	in	r26, 0x3d	; 61
    4a0c:	be b7       	in	r27, 0x3e	; 62
    4a0e:	12 96       	adiw	r26, 0x02	; 2
    4a10:	9c 93       	st	X, r25
    4a12:	8e 93       	st	-X, r24
    4a14:	11 97       	sbiw	r26, 0x01	; 1
    4a16:	85 e0       	ldi	r24, 0x05	; 5
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	93 83       	std	Z+3, r25	; 0x03
    4a1c:	82 83       	std	Z+2, r24	; 0x02
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	95 83       	std	Z+5, r25	; 0x05
    4a24:	84 83       	std	Z+4, r24	; 0x04
    4a26:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4a2a:	8d b7       	in	r24, 0x3d	; 61
    4a2c:	9e b7       	in	r25, 0x3e	; 62
    4a2e:	06 96       	adiw	r24, 0x06	; 6
    4a30:	0f b6       	in	r0, 0x3f	; 63
    4a32:	f8 94       	cli
    4a34:	9e bf       	out	0x3e, r25	; 62
    4a36:	0f be       	out	0x3f, r0	; 63
    4a38:	8d bf       	out	0x3d, r24	; 61
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    4a3a:	08 95       	ret

00004a3c <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4a3c:	83 30       	cpi	r24, 0x03	; 3
    4a3e:	09 f4       	brne	.+2      	; 0x4a42 <mousekey_param_inc+0x6>
    4a40:	52 c0       	rjmp	.+164    	; 0x4ae6 <mousekey_param_inc+0xaa>
    4a42:	84 30       	cpi	r24, 0x04	; 4
    4a44:	30 f4       	brcc	.+12     	; 0x4a52 <mousekey_param_inc+0x16>
    4a46:	81 30       	cpi	r24, 0x01	; 1
    4a48:	71 f0       	breq	.+28     	; 0x4a66 <mousekey_param_inc+0x2a>
    4a4a:	82 30       	cpi	r24, 0x02	; 2
    4a4c:	09 f0       	breq	.+2      	; 0x4a50 <mousekey_param_inc+0x14>
    4a4e:	da c0       	rjmp	.+436    	; 0x4c04 <mousekey_param_inc+0x1c8>
    4a50:	2a c0       	rjmp	.+84     	; 0x4aa6 <mousekey_param_inc+0x6a>
    4a52:	85 30       	cpi	r24, 0x05	; 5
    4a54:	09 f4       	brne	.+2      	; 0x4a58 <mousekey_param_inc+0x1c>
    4a56:	87 c0       	rjmp	.+270    	; 0x4b66 <mousekey_param_inc+0x12a>
    4a58:	85 30       	cpi	r24, 0x05	; 5
    4a5a:	08 f4       	brcc	.+2      	; 0x4a5e <mousekey_param_inc+0x22>
    4a5c:	64 c0       	rjmp	.+200    	; 0x4b26 <mousekey_param_inc+0xea>
    4a5e:	86 30       	cpi	r24, 0x06	; 6
    4a60:	09 f0       	breq	.+2      	; 0x4a64 <mousekey_param_inc+0x28>
    4a62:	d0 c0       	rjmp	.+416    	; 0x4c04 <mousekey_param_inc+0x1c8>
    4a64:	a8 c0       	rjmp	.+336    	; 0x4bb6 <mousekey_param_inc+0x17a>
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4a66:	20 91 15 01 	lds	r18, 0x0115
    4a6a:	86 2f       	mov	r24, r22
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	82 0f       	add	r24, r18
    4a70:	91 1d       	adc	r25, r1
    4a72:	8f 3f       	cpi	r24, 0xFF	; 255
    4a74:	91 05       	cpc	r25, r1
    4a76:	20 f4       	brcc	.+8      	; 0x4a80 <mousekey_param_inc+0x44>
                mk_delay += inc;
    4a78:	62 0f       	add	r22, r18
    4a7a:	60 93 15 01 	sts	0x0115, r22
    4a7e:	03 c0       	rjmp	.+6      	; 0x4a86 <mousekey_param_inc+0x4a>
            else
                mk_delay = UINT8_MAX;
    4a80:	8f ef       	ldi	r24, 0xFF	; 255
    4a82:	80 93 15 01 	sts	0x0115, r24
            PRINT_SET_VAL(mk_delay);
    4a86:	00 d0       	rcall	.+0      	; 0x4a88 <mousekey_param_inc+0x4c>
    4a88:	00 d0       	rcall	.+0      	; 0x4a8a <mousekey_param_inc+0x4e>
    4a8a:	ed b7       	in	r30, 0x3d	; 61
    4a8c:	fe b7       	in	r31, 0x3e	; 62
    4a8e:	31 96       	adiw	r30, 0x01	; 1
    4a90:	8f ea       	ldi	r24, 0xAF	; 175
    4a92:	9a e0       	ldi	r25, 0x0A	; 10
    4a94:	ad b7       	in	r26, 0x3d	; 61
    4a96:	be b7       	in	r27, 0x3e	; 62
    4a98:	12 96       	adiw	r26, 0x02	; 2
    4a9a:	9c 93       	st	X, r25
    4a9c:	8e 93       	st	-X, r24
    4a9e:	11 97       	sbiw	r26, 0x01	; 1
    4aa0:	80 91 15 01 	lds	r24, 0x0115
    4aa4:	7f c0       	rjmp	.+254    	; 0x4ba4 <mousekey_param_inc+0x168>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4aa6:	20 91 14 01 	lds	r18, 0x0114
    4aaa:	86 2f       	mov	r24, r22
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	82 0f       	add	r24, r18
    4ab0:	91 1d       	adc	r25, r1
    4ab2:	8f 3f       	cpi	r24, 0xFF	; 255
    4ab4:	91 05       	cpc	r25, r1
    4ab6:	20 f4       	brcc	.+8      	; 0x4ac0 <mousekey_param_inc+0x84>
                mk_interval += inc;
    4ab8:	62 0f       	add	r22, r18
    4aba:	60 93 14 01 	sts	0x0114, r22
    4abe:	03 c0       	rjmp	.+6      	; 0x4ac6 <mousekey_param_inc+0x8a>
            else
                mk_interval = UINT8_MAX;
    4ac0:	8f ef       	ldi	r24, 0xFF	; 255
    4ac2:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_interval);
    4ac6:	00 d0       	rcall	.+0      	; 0x4ac8 <mousekey_param_inc+0x8c>
    4ac8:	00 d0       	rcall	.+0      	; 0x4aca <mousekey_param_inc+0x8e>
    4aca:	ed b7       	in	r30, 0x3d	; 61
    4acc:	fe b7       	in	r31, 0x3e	; 62
    4ace:	31 96       	adiw	r30, 0x01	; 1
    4ad0:	8e eb       	ldi	r24, 0xBE	; 190
    4ad2:	9a e0       	ldi	r25, 0x0A	; 10
    4ad4:	ad b7       	in	r26, 0x3d	; 61
    4ad6:	be b7       	in	r27, 0x3e	; 62
    4ad8:	12 96       	adiw	r26, 0x02	; 2
    4ada:	9c 93       	st	X, r25
    4adc:	8e 93       	st	-X, r24
    4ade:	11 97       	sbiw	r26, 0x01	; 1
    4ae0:	80 91 14 01 	lds	r24, 0x0114
    4ae4:	5f c0       	rjmp	.+190    	; 0x4ba4 <mousekey_param_inc+0x168>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4ae6:	20 91 13 01 	lds	r18, 0x0113
    4aea:	86 2f       	mov	r24, r22
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	82 0f       	add	r24, r18
    4af0:	91 1d       	adc	r25, r1
    4af2:	8f 3f       	cpi	r24, 0xFF	; 255
    4af4:	91 05       	cpc	r25, r1
    4af6:	20 f4       	brcc	.+8      	; 0x4b00 <mousekey_param_inc+0xc4>
                mk_max_speed += inc;
    4af8:	62 0f       	add	r22, r18
    4afa:	60 93 13 01 	sts	0x0113, r22
    4afe:	03 c0       	rjmp	.+6      	; 0x4b06 <mousekey_param_inc+0xca>
            else
                mk_max_speed = UINT8_MAX;
    4b00:	8f ef       	ldi	r24, 0xFF	; 255
    4b02:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_max_speed);
    4b06:	00 d0       	rcall	.+0      	; 0x4b08 <mousekey_param_inc+0xcc>
    4b08:	00 d0       	rcall	.+0      	; 0x4b0a <mousekey_param_inc+0xce>
    4b0a:	ed b7       	in	r30, 0x3d	; 61
    4b0c:	fe b7       	in	r31, 0x3e	; 62
    4b0e:	31 96       	adiw	r30, 0x01	; 1
    4b10:	80 ed       	ldi	r24, 0xD0	; 208
    4b12:	9a e0       	ldi	r25, 0x0A	; 10
    4b14:	ad b7       	in	r26, 0x3d	; 61
    4b16:	be b7       	in	r27, 0x3e	; 62
    4b18:	12 96       	adiw	r26, 0x02	; 2
    4b1a:	9c 93       	st	X, r25
    4b1c:	8e 93       	st	-X, r24
    4b1e:	11 97       	sbiw	r26, 0x01	; 1
    4b20:	80 91 13 01 	lds	r24, 0x0113
    4b24:	3f c0       	rjmp	.+126    	; 0x4ba4 <mousekey_param_inc+0x168>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4b26:	20 91 12 01 	lds	r18, 0x0112
    4b2a:	86 2f       	mov	r24, r22
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	82 0f       	add	r24, r18
    4b30:	91 1d       	adc	r25, r1
    4b32:	8f 3f       	cpi	r24, 0xFF	; 255
    4b34:	91 05       	cpc	r25, r1
    4b36:	20 f4       	brcc	.+8      	; 0x4b40 <mousekey_param_inc+0x104>
                mk_time_to_max += inc;
    4b38:	62 0f       	add	r22, r18
    4b3a:	60 93 12 01 	sts	0x0112, r22
    4b3e:	03 c0       	rjmp	.+6      	; 0x4b46 <mousekey_param_inc+0x10a>
            else
                mk_time_to_max = UINT8_MAX;
    4b40:	8f ef       	ldi	r24, 0xFF	; 255
    4b42:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_time_to_max);
    4b46:	00 d0       	rcall	.+0      	; 0x4b48 <mousekey_param_inc+0x10c>
    4b48:	00 d0       	rcall	.+0      	; 0x4b4a <mousekey_param_inc+0x10e>
    4b4a:	ed b7       	in	r30, 0x3d	; 61
    4b4c:	fe b7       	in	r31, 0x3e	; 62
    4b4e:	31 96       	adiw	r30, 0x01	; 1
    4b50:	83 ee       	ldi	r24, 0xE3	; 227
    4b52:	9a e0       	ldi	r25, 0x0A	; 10
    4b54:	ad b7       	in	r26, 0x3d	; 61
    4b56:	be b7       	in	r27, 0x3e	; 62
    4b58:	12 96       	adiw	r26, 0x02	; 2
    4b5a:	9c 93       	st	X, r25
    4b5c:	8e 93       	st	-X, r24
    4b5e:	11 97       	sbiw	r26, 0x01	; 1
    4b60:	80 91 12 01 	lds	r24, 0x0112
    4b64:	1f c0       	rjmp	.+62     	; 0x4ba4 <mousekey_param_inc+0x168>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4b66:	20 91 11 01 	lds	r18, 0x0111
    4b6a:	86 2f       	mov	r24, r22
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	82 0f       	add	r24, r18
    4b70:	91 1d       	adc	r25, r1
    4b72:	8f 3f       	cpi	r24, 0xFF	; 255
    4b74:	91 05       	cpc	r25, r1
    4b76:	20 f4       	brcc	.+8      	; 0x4b80 <mousekey_param_inc+0x144>
                mk_wheel_max_speed += inc;
    4b78:	62 0f       	add	r22, r18
    4b7a:	60 93 11 01 	sts	0x0111, r22
    4b7e:	03 c0       	rjmp	.+6      	; 0x4b86 <mousekey_param_inc+0x14a>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4b80:	8f ef       	ldi	r24, 0xFF	; 255
    4b82:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4b86:	00 d0       	rcall	.+0      	; 0x4b88 <mousekey_param_inc+0x14c>
    4b88:	00 d0       	rcall	.+0      	; 0x4b8a <mousekey_param_inc+0x14e>
    4b8a:	ed b7       	in	r30, 0x3d	; 61
    4b8c:	fe b7       	in	r31, 0x3e	; 62
    4b8e:	31 96       	adiw	r30, 0x01	; 1
    4b90:	88 ef       	ldi	r24, 0xF8	; 248
    4b92:	9a e0       	ldi	r25, 0x0A	; 10
    4b94:	ad b7       	in	r26, 0x3d	; 61
    4b96:	be b7       	in	r27, 0x3e	; 62
    4b98:	12 96       	adiw	r26, 0x02	; 2
    4b9a:	9c 93       	st	X, r25
    4b9c:	8e 93       	st	-X, r24
    4b9e:	11 97       	sbiw	r26, 0x01	; 1
    4ba0:	80 91 11 01 	lds	r24, 0x0111
    4ba4:	82 83       	std	Z+2, r24	; 0x02
    4ba6:	13 82       	std	Z+3, r1	; 0x03
    4ba8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
            break;
    4bac:	0f 90       	pop	r0
    4bae:	0f 90       	pop	r0
    4bb0:	0f 90       	pop	r0
    4bb2:	0f 90       	pop	r0
    4bb4:	08 95       	ret
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4bb6:	20 91 10 01 	lds	r18, 0x0110
    4bba:	86 2f       	mov	r24, r22
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	82 0f       	add	r24, r18
    4bc0:	91 1d       	adc	r25, r1
    4bc2:	8f 3f       	cpi	r24, 0xFF	; 255
    4bc4:	91 05       	cpc	r25, r1
    4bc6:	20 f4       	brcc	.+8      	; 0x4bd0 <mousekey_param_inc+0x194>
                mk_wheel_time_to_max += inc;
    4bc8:	62 0f       	add	r22, r18
    4bca:	60 93 10 01 	sts	0x0110, r22
    4bce:	03 c0       	rjmp	.+6      	; 0x4bd6 <mousekey_param_inc+0x19a>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4bd0:	8f ef       	ldi	r24, 0xFF	; 255
    4bd2:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4bd6:	00 d0       	rcall	.+0      	; 0x4bd8 <mousekey_param_inc+0x19c>
    4bd8:	00 d0       	rcall	.+0      	; 0x4bda <mousekey_param_inc+0x19e>
    4bda:	ed b7       	in	r30, 0x3d	; 61
    4bdc:	fe b7       	in	r31, 0x3e	; 62
    4bde:	31 96       	adiw	r30, 0x01	; 1
    4be0:	81 e1       	ldi	r24, 0x11	; 17
    4be2:	9b e0       	ldi	r25, 0x0B	; 11
    4be4:	ad b7       	in	r26, 0x3d	; 61
    4be6:	be b7       	in	r27, 0x3e	; 62
    4be8:	12 96       	adiw	r26, 0x02	; 2
    4bea:	9c 93       	st	X, r25
    4bec:	8e 93       	st	-X, r24
    4bee:	11 97       	sbiw	r26, 0x01	; 1
    4bf0:	80 91 10 01 	lds	r24, 0x0110
    4bf4:	82 83       	std	Z+2, r24	; 0x02
    4bf6:	13 82       	std	Z+3, r1	; 0x03
    4bf8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
            break;
    4bfc:	0f 90       	pop	r0
    4bfe:	0f 90       	pop	r0
    4c00:	0f 90       	pop	r0
    4c02:	0f 90       	pop	r0
    4c04:	08 95       	ret

00004c06 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4c06:	83 30       	cpi	r24, 0x03	; 3
    4c08:	09 f4       	brne	.+2      	; 0x4c0c <mousekey_param_dec+0x6>
    4c0a:	46 c0       	rjmp	.+140    	; 0x4c98 <mousekey_param_dec+0x92>
    4c0c:	84 30       	cpi	r24, 0x04	; 4
    4c0e:	30 f4       	brcc	.+12     	; 0x4c1c <mousekey_param_dec+0x16>
    4c10:	81 30       	cpi	r24, 0x01	; 1
    4c12:	71 f0       	breq	.+28     	; 0x4c30 <mousekey_param_dec+0x2a>
    4c14:	82 30       	cpi	r24, 0x02	; 2
    4c16:	09 f0       	breq	.+2      	; 0x4c1a <mousekey_param_dec+0x14>
    4c18:	b6 c0       	rjmp	.+364    	; 0x4d86 <mousekey_param_dec+0x180>
    4c1a:	24 c0       	rjmp	.+72     	; 0x4c64 <mousekey_param_dec+0x5e>
    4c1c:	85 30       	cpi	r24, 0x05	; 5
    4c1e:	09 f4       	brne	.+2      	; 0x4c22 <mousekey_param_dec+0x1c>
    4c20:	6f c0       	rjmp	.+222    	; 0x4d00 <mousekey_param_dec+0xfa>
    4c22:	85 30       	cpi	r24, 0x05	; 5
    4c24:	08 f4       	brcc	.+2      	; 0x4c28 <mousekey_param_dec+0x22>
    4c26:	52 c0       	rjmp	.+164    	; 0x4ccc <mousekey_param_dec+0xc6>
    4c28:	86 30       	cpi	r24, 0x06	; 6
    4c2a:	09 f0       	breq	.+2      	; 0x4c2e <mousekey_param_dec+0x28>
    4c2c:	ac c0       	rjmp	.+344    	; 0x4d86 <mousekey_param_dec+0x180>
    4c2e:	8a c0       	rjmp	.+276    	; 0x4d44 <mousekey_param_dec+0x13e>
        case 1:
            if (mk_delay > dec)
    4c30:	80 91 15 01 	lds	r24, 0x0115
    4c34:	68 17       	cp	r22, r24
    4c36:	20 f4       	brcc	.+8      	; 0x4c40 <mousekey_param_dec+0x3a>
                mk_delay -= dec;
    4c38:	86 1b       	sub	r24, r22
    4c3a:	80 93 15 01 	sts	0x0115, r24
    4c3e:	02 c0       	rjmp	.+4      	; 0x4c44 <mousekey_param_dec+0x3e>
            else
                mk_delay = 0;
    4c40:	10 92 15 01 	sts	0x0115, r1
            PRINT_SET_VAL(mk_delay);
    4c44:	00 d0       	rcall	.+0      	; 0x4c46 <mousekey_param_dec+0x40>
    4c46:	00 d0       	rcall	.+0      	; 0x4c48 <mousekey_param_dec+0x42>
    4c48:	ed b7       	in	r30, 0x3d	; 61
    4c4a:	fe b7       	in	r31, 0x3e	; 62
    4c4c:	31 96       	adiw	r30, 0x01	; 1
    4c4e:	8c e2       	ldi	r24, 0x2C	; 44
    4c50:	9b e0       	ldi	r25, 0x0B	; 11
    4c52:	ad b7       	in	r26, 0x3d	; 61
    4c54:	be b7       	in	r27, 0x3e	; 62
    4c56:	12 96       	adiw	r26, 0x02	; 2
    4c58:	9c 93       	st	X, r25
    4c5a:	8e 93       	st	-X, r24
    4c5c:	11 97       	sbiw	r26, 0x01	; 1
    4c5e:	80 91 15 01 	lds	r24, 0x0115
    4c62:	67 c0       	rjmp	.+206    	; 0x4d32 <mousekey_param_dec+0x12c>
            break;
        case 2:
            if (mk_interval > dec)
    4c64:	80 91 14 01 	lds	r24, 0x0114
    4c68:	68 17       	cp	r22, r24
    4c6a:	20 f4       	brcc	.+8      	; 0x4c74 <mousekey_param_dec+0x6e>
                mk_interval -= dec;
    4c6c:	86 1b       	sub	r24, r22
    4c6e:	80 93 14 01 	sts	0x0114, r24
    4c72:	02 c0       	rjmp	.+4      	; 0x4c78 <mousekey_param_dec+0x72>
            else
                mk_interval = 0;
    4c74:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_interval);
    4c78:	00 d0       	rcall	.+0      	; 0x4c7a <mousekey_param_dec+0x74>
    4c7a:	00 d0       	rcall	.+0      	; 0x4c7c <mousekey_param_dec+0x76>
    4c7c:	ed b7       	in	r30, 0x3d	; 61
    4c7e:	fe b7       	in	r31, 0x3e	; 62
    4c80:	31 96       	adiw	r30, 0x01	; 1
    4c82:	8b e3       	ldi	r24, 0x3B	; 59
    4c84:	9b e0       	ldi	r25, 0x0B	; 11
    4c86:	ad b7       	in	r26, 0x3d	; 61
    4c88:	be b7       	in	r27, 0x3e	; 62
    4c8a:	12 96       	adiw	r26, 0x02	; 2
    4c8c:	9c 93       	st	X, r25
    4c8e:	8e 93       	st	-X, r24
    4c90:	11 97       	sbiw	r26, 0x01	; 1
    4c92:	80 91 14 01 	lds	r24, 0x0114
    4c96:	4d c0       	rjmp	.+154    	; 0x4d32 <mousekey_param_dec+0x12c>
            break;
        case 3:
            if (mk_max_speed > dec)
    4c98:	80 91 13 01 	lds	r24, 0x0113
    4c9c:	68 17       	cp	r22, r24
    4c9e:	20 f4       	brcc	.+8      	; 0x4ca8 <mousekey_param_dec+0xa2>
                mk_max_speed -= dec;
    4ca0:	86 1b       	sub	r24, r22
    4ca2:	80 93 13 01 	sts	0x0113, r24
    4ca6:	02 c0       	rjmp	.+4      	; 0x4cac <mousekey_param_dec+0xa6>
            else
                mk_max_speed = 0;
    4ca8:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_max_speed);
    4cac:	00 d0       	rcall	.+0      	; 0x4cae <mousekey_param_dec+0xa8>
    4cae:	00 d0       	rcall	.+0      	; 0x4cb0 <mousekey_param_dec+0xaa>
    4cb0:	ed b7       	in	r30, 0x3d	; 61
    4cb2:	fe b7       	in	r31, 0x3e	; 62
    4cb4:	31 96       	adiw	r30, 0x01	; 1
    4cb6:	8d e4       	ldi	r24, 0x4D	; 77
    4cb8:	9b e0       	ldi	r25, 0x0B	; 11
    4cba:	ad b7       	in	r26, 0x3d	; 61
    4cbc:	be b7       	in	r27, 0x3e	; 62
    4cbe:	12 96       	adiw	r26, 0x02	; 2
    4cc0:	9c 93       	st	X, r25
    4cc2:	8e 93       	st	-X, r24
    4cc4:	11 97       	sbiw	r26, 0x01	; 1
    4cc6:	80 91 13 01 	lds	r24, 0x0113
    4cca:	33 c0       	rjmp	.+102    	; 0x4d32 <mousekey_param_dec+0x12c>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4ccc:	80 91 12 01 	lds	r24, 0x0112
    4cd0:	68 17       	cp	r22, r24
    4cd2:	20 f4       	brcc	.+8      	; 0x4cdc <mousekey_param_dec+0xd6>
                mk_time_to_max -= dec;
    4cd4:	86 1b       	sub	r24, r22
    4cd6:	80 93 12 01 	sts	0x0112, r24
    4cda:	02 c0       	rjmp	.+4      	; 0x4ce0 <mousekey_param_dec+0xda>
            else
                mk_time_to_max = 0;
    4cdc:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_time_to_max);
    4ce0:	00 d0       	rcall	.+0      	; 0x4ce2 <mousekey_param_dec+0xdc>
    4ce2:	00 d0       	rcall	.+0      	; 0x4ce4 <mousekey_param_dec+0xde>
    4ce4:	ed b7       	in	r30, 0x3d	; 61
    4ce6:	fe b7       	in	r31, 0x3e	; 62
    4ce8:	31 96       	adiw	r30, 0x01	; 1
    4cea:	80 e6       	ldi	r24, 0x60	; 96
    4cec:	9b e0       	ldi	r25, 0x0B	; 11
    4cee:	ad b7       	in	r26, 0x3d	; 61
    4cf0:	be b7       	in	r27, 0x3e	; 62
    4cf2:	12 96       	adiw	r26, 0x02	; 2
    4cf4:	9c 93       	st	X, r25
    4cf6:	8e 93       	st	-X, r24
    4cf8:	11 97       	sbiw	r26, 0x01	; 1
    4cfa:	80 91 12 01 	lds	r24, 0x0112
    4cfe:	19 c0       	rjmp	.+50     	; 0x4d32 <mousekey_param_dec+0x12c>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4d00:	80 91 11 01 	lds	r24, 0x0111
    4d04:	68 17       	cp	r22, r24
    4d06:	20 f4       	brcc	.+8      	; 0x4d10 <mousekey_param_dec+0x10a>
                mk_wheel_max_speed -= dec;
    4d08:	86 1b       	sub	r24, r22
    4d0a:	80 93 11 01 	sts	0x0111, r24
    4d0e:	02 c0       	rjmp	.+4      	; 0x4d14 <mousekey_param_dec+0x10e>
            else
                mk_wheel_max_speed = 0;
    4d10:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4d14:	00 d0       	rcall	.+0      	; 0x4d16 <mousekey_param_dec+0x110>
    4d16:	00 d0       	rcall	.+0      	; 0x4d18 <mousekey_param_dec+0x112>
    4d18:	ed b7       	in	r30, 0x3d	; 61
    4d1a:	fe b7       	in	r31, 0x3e	; 62
    4d1c:	31 96       	adiw	r30, 0x01	; 1
    4d1e:	85 e7       	ldi	r24, 0x75	; 117
    4d20:	9b e0       	ldi	r25, 0x0B	; 11
    4d22:	ad b7       	in	r26, 0x3d	; 61
    4d24:	be b7       	in	r27, 0x3e	; 62
    4d26:	12 96       	adiw	r26, 0x02	; 2
    4d28:	9c 93       	st	X, r25
    4d2a:	8e 93       	st	-X, r24
    4d2c:	11 97       	sbiw	r26, 0x01	; 1
    4d2e:	80 91 11 01 	lds	r24, 0x0111
    4d32:	82 83       	std	Z+2, r24	; 0x02
    4d34:	13 82       	std	Z+3, r1	; 0x03
    4d36:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
            break;
    4d3a:	0f 90       	pop	r0
    4d3c:	0f 90       	pop	r0
    4d3e:	0f 90       	pop	r0
    4d40:	0f 90       	pop	r0
    4d42:	08 95       	ret
        case 6:
            if (mk_wheel_time_to_max > dec)
    4d44:	80 91 10 01 	lds	r24, 0x0110
    4d48:	68 17       	cp	r22, r24
    4d4a:	20 f4       	brcc	.+8      	; 0x4d54 <mousekey_param_dec+0x14e>
                mk_wheel_time_to_max -= dec;
    4d4c:	86 1b       	sub	r24, r22
    4d4e:	80 93 10 01 	sts	0x0110, r24
    4d52:	02 c0       	rjmp	.+4      	; 0x4d58 <mousekey_param_dec+0x152>
            else
                mk_wheel_time_to_max = 0;
    4d54:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4d58:	00 d0       	rcall	.+0      	; 0x4d5a <mousekey_param_dec+0x154>
    4d5a:	00 d0       	rcall	.+0      	; 0x4d5c <mousekey_param_dec+0x156>
    4d5c:	ed b7       	in	r30, 0x3d	; 61
    4d5e:	fe b7       	in	r31, 0x3e	; 62
    4d60:	31 96       	adiw	r30, 0x01	; 1
    4d62:	8e e8       	ldi	r24, 0x8E	; 142
    4d64:	9b e0       	ldi	r25, 0x0B	; 11
    4d66:	ad b7       	in	r26, 0x3d	; 61
    4d68:	be b7       	in	r27, 0x3e	; 62
    4d6a:	12 96       	adiw	r26, 0x02	; 2
    4d6c:	9c 93       	st	X, r25
    4d6e:	8e 93       	st	-X, r24
    4d70:	11 97       	sbiw	r26, 0x01	; 1
    4d72:	80 91 10 01 	lds	r24, 0x0110
    4d76:	82 83       	std	Z+2, r24	; 0x02
    4d78:	13 82       	std	Z+3, r1	; 0x03
    4d7a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
            break;
    4d7e:	0f 90       	pop	r0
    4d80:	0f 90       	pop	r0
    4d82:	0f 90       	pop	r0
    4d84:	0f 90       	pop	r0
    4d86:	08 95       	ret

00004d88 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4d88:	cf 93       	push	r28
    4d8a:	df 93       	push	r29
    4d8c:	0f 92       	push	r0
    4d8e:	cd b7       	in	r28, 0x3d	; 61
    4d90:	de b7       	in	r29, 0x3e	; 62
    xprintf("L%d\n", layer);
    4d92:	00 d0       	rcall	.+0      	; 0x4d94 <switch_default_layer+0xc>
    4d94:	00 d0       	rcall	.+0      	; 0x4d96 <switch_default_layer+0xe>
    4d96:	ed b7       	in	r30, 0x3d	; 61
    4d98:	fe b7       	in	r31, 0x3e	; 62
    4d9a:	31 96       	adiw	r30, 0x01	; 1
    4d9c:	2f e9       	ldi	r18, 0x9F	; 159
    4d9e:	38 e0       	ldi	r19, 0x08	; 8
    4da0:	ad b7       	in	r26, 0x3d	; 61
    4da2:	be b7       	in	r27, 0x3e	; 62
    4da4:	12 96       	adiw	r26, 0x02	; 2
    4da6:	3c 93       	st	X, r19
    4da8:	2e 93       	st	-X, r18
    4daa:	11 97       	sbiw	r26, 0x01	; 1
    4dac:	82 83       	std	Z+2, r24	; 0x02
    4dae:	13 82       	std	Z+3, r1	; 0x03
    4db0:	89 83       	std	Y+1, r24	; 0x01
    4db2:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    default_layer_set(1UL<<layer);
    4db6:	0f 90       	pop	r0
    4db8:	0f 90       	pop	r0
    4dba:	0f 90       	pop	r0
    4dbc:	0f 90       	pop	r0
    4dbe:	41 e0       	ldi	r20, 0x01	; 1
    4dc0:	50 e0       	ldi	r21, 0x00	; 0
    4dc2:	60 e0       	ldi	r22, 0x00	; 0
    4dc4:	70 e0       	ldi	r23, 0x00	; 0
    4dc6:	89 81       	ldd	r24, Y+1	; 0x01
    4dc8:	04 c0       	rjmp	.+8      	; 0x4dd2 <switch_default_layer+0x4a>
    4dca:	44 0f       	add	r20, r20
    4dcc:	55 1f       	adc	r21, r21
    4dce:	66 1f       	adc	r22, r22
    4dd0:	77 1f       	adc	r23, r23
    4dd2:	8a 95       	dec	r24
    4dd4:	d2 f7       	brpl	.-12     	; 0x4dca <switch_default_layer+0x42>
    4dd6:	cb 01       	movw	r24, r22
    4dd8:	ba 01       	movw	r22, r20
    4dda:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <default_layer_set>
    clear_keyboard();
    4dde:	0e 94 13 18 	call	0x3026	; 0x3026 <clear_keyboard>
}
    4de2:	0f 90       	pop	r0
    4de4:	df 91       	pop	r29
    4de6:	cf 91       	pop	r28
    4de8:	08 95       	ret

00004dea <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4dea:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    4dec:	8d 31       	cpi	r24, 0x1D	; 29
    4dee:	09 f4       	brne	.+2      	; 0x4df2 <command_common+0x8>
    4df0:	49 c0       	rjmp	.+146    	; 0x4e84 <command_common+0x9a>
    4df2:	8e 31       	cpi	r24, 0x1E	; 30
    4df4:	40 f5       	brcc	.+80     	; 0x4e46 <command_common+0x5c>
    4df6:	8e 30       	cpi	r24, 0x0E	; 14
    4df8:	09 f4       	brne	.+2      	; 0x4dfc <command_common+0x12>
    4dfa:	88 c2       	rjmp	.+1296   	; 0x530c <command_common+0x522>
    4dfc:	8f 30       	cpi	r24, 0x0F	; 15
    4dfe:	80 f4       	brcc	.+32     	; 0x4e20 <command_common+0x36>
    4e00:	87 30       	cpi	r24, 0x07	; 7
    4e02:	09 f4       	brne	.+2      	; 0x4e06 <command_common+0x1c>
    4e04:	59 c2       	rjmp	.+1202   	; 0x52b8 <command_common+0x4ce>
    4e06:	88 30       	cpi	r24, 0x08	; 8
    4e08:	20 f4       	brcc	.+8      	; 0x4e12 <command_common+0x28>
    4e0a:	86 30       	cpi	r24, 0x06	; 6
    4e0c:	09 f0       	breq	.+2      	; 0x4e10 <command_common+0x26>
    4e0e:	43 c3       	rjmp	.+1670   	; 0x5496 <command_common+0x6ac>
    4e10:	32 c2       	rjmp	.+1124   	; 0x5276 <command_common+0x48c>
    4e12:	88 30       	cpi	r24, 0x08	; 8
    4e14:	09 f4       	brne	.+2      	; 0x4e18 <command_common+0x2e>
    4e16:	41 c0       	rjmp	.+130    	; 0x4e9a <command_common+0xb0>
    4e18:	8b 30       	cpi	r24, 0x0B	; 11
    4e1a:	09 f0       	breq	.+2      	; 0x4e1e <command_common+0x34>
    4e1c:	3c c3       	rjmp	.+1656   	; 0x5496 <command_common+0x6ac>
    4e1e:	28 c2       	rjmp	.+1104   	; 0x5270 <command_common+0x486>
    4e20:	86 31       	cpi	r24, 0x16	; 22
    4e22:	09 f4       	brne	.+2      	; 0x4e26 <command_common+0x3c>
    4e24:	b8 c2       	rjmp	.+1392   	; 0x5396 <command_common+0x5ac>
    4e26:	87 31       	cpi	r24, 0x17	; 23
    4e28:	38 f4       	brcc	.+14     	; 0x4e38 <command_common+0x4e>
    4e2a:	80 31       	cpi	r24, 0x10	; 16
    4e2c:	09 f4       	brne	.+2      	; 0x4e30 <command_common+0x46>
    4e2e:	84 c2       	rjmp	.+1288   	; 0x5338 <command_common+0x54e>
    4e30:	81 31       	cpi	r24, 0x11	; 17
    4e32:	09 f0       	breq	.+2      	; 0x4e36 <command_common+0x4c>
    4e34:	30 c3       	rjmp	.+1632   	; 0x5496 <command_common+0x6ac>
    4e36:	17 c3       	rjmp	.+1582   	; 0x5466 <command_common+0x67c>
    4e38:	89 31       	cpi	r24, 0x19	; 25
    4e3a:	09 f4       	brne	.+2      	; 0x4e3e <command_common+0x54>
    4e3c:	95 c2       	rjmp	.+1322   	; 0x5368 <command_common+0x57e>
    4e3e:	8b 31       	cpi	r24, 0x1B	; 27
    4e40:	09 f0       	breq	.+2      	; 0x4e44 <command_common+0x5a>
    4e42:	29 c3       	rjmp	.+1618   	; 0x5496 <command_common+0x6ac>
    4e44:	48 c2       	rjmp	.+1168   	; 0x52d6 <command_common+0x4ec>
    4e46:	85 33       	cpi	r24, 0x35	; 53
    4e48:	09 f4       	brne	.+2      	; 0x4e4c <command_common+0x62>
    4e4a:	1d c3       	rjmp	.+1594   	; 0x5486 <command_common+0x69c>
    4e4c:	86 33       	cpi	r24, 0x36	; 54
    4e4e:	50 f4       	brcc	.+20     	; 0x4e64 <command_common+0x7a>
    4e50:	87 32       	cpi	r24, 0x27	; 39
    4e52:	09 f4       	brne	.+2      	; 0x4e56 <command_common+0x6c>
    4e54:	18 c3       	rjmp	.+1584   	; 0x5486 <command_common+0x69c>
    4e56:	87 32       	cpi	r24, 0x27	; 39
    4e58:	08 f4       	brcc	.+2      	; 0x4e5c <command_common+0x72>
    4e5a:	17 c3       	rjmp	.+1582   	; 0x548a <command_common+0x6a0>
    4e5c:	89 32       	cpi	r24, 0x29	; 41
    4e5e:	09 f0       	breq	.+2      	; 0x4e62 <command_common+0x78>
    4e60:	1a c3       	rjmp	.+1588   	; 0x5496 <command_common+0x6ac>
    4e62:	11 c3       	rjmp	.+1570   	; 0x5486 <command_common+0x69c>
    4e64:	83 34       	cpi	r24, 0x43	; 67
    4e66:	38 f4       	brcc	.+14     	; 0x4e76 <command_common+0x8c>
    4e68:	8a 33       	cpi	r24, 0x3A	; 58
    4e6a:	08 f0       	brcs	.+2      	; 0x4e6e <command_common+0x84>
    4e6c:	10 c3       	rjmp	.+1568   	; 0x548e <command_common+0x6a4>
    4e6e:	88 33       	cpi	r24, 0x38	; 56
    4e70:	09 f0       	breq	.+2      	; 0x4e74 <command_common+0x8a>
    4e72:	11 c3       	rjmp	.+1570   	; 0x5496 <command_common+0x6ac>
    4e74:	fd c1       	rjmp	.+1018   	; 0x5270 <command_common+0x486>
    4e76:	83 34       	cpi	r24, 0x43	; 67
    4e78:	09 f4       	brne	.+2      	; 0x4e7c <command_common+0x92>
    4e7a:	05 c3       	rjmp	.+1546   	; 0x5486 <command_common+0x69c>
    4e7c:	88 34       	cpi	r24, 0x48	; 72
    4e7e:	09 f0       	breq	.+2      	; 0x4e82 <command_common+0x98>
    4e80:	0a c3       	rjmp	.+1556   	; 0x5496 <command_common+0x6ac>
    4e82:	08 c2       	rjmp	.+1040   	; 0x5294 <command_common+0x4aa>
#ifdef SLEEP_LED_ENABLE
        case KC_Z:
            // test breathing sleep LED
            print("Sleep LED test\n");
    4e84:	87 e4       	ldi	r24, 0x47	; 71
    4e86:	94 e0       	ldi	r25, 0x04	; 4
    4e88:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            sleep_led_toggle();
    4e8c:	0e 94 1c 2c 	call	0x5838	; 0x5838 <sleep_led_toggle>
            led_set(host_keyboard_leds());
    4e90:	0e 94 b6 12 	call	0x256c	; 0x256c <host_keyboard_leds>
    4e94:	0e 94 c0 0a 	call	0x1580	; 0x1580 <led_set>
    4e98:	e9 c1       	rjmp	.+978    	; 0x526c <command_common+0x482>
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4e9a:	87 e5       	ldi	r24, 0x57	; 87
    4e9c:	94 e0       	ldi	r25, 0x04	; 4
    4e9e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4ea2:	8e e7       	ldi	r24, 0x7E	; 126
    4ea4:	96 e0       	ldi	r25, 0x06	; 6
    4ea6:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    4eaa:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <eeconfig_read_default_layer>
    4eae:	00 d0       	rcall	.+0      	; 0x4eb0 <command_common+0xc6>
    4eb0:	00 d0       	rcall	.+0      	; 0x4eb2 <command_common+0xc8>
    4eb2:	ed b7       	in	r30, 0x3d	; 61
    4eb4:	fe b7       	in	r31, 0x3e	; 62
    4eb6:	31 96       	adiw	r30, 0x01	; 1
    4eb8:	2e e8       	ldi	r18, 0x8E	; 142
    4eba:	36 e0       	ldi	r19, 0x06	; 6
    4ebc:	ad b7       	in	r26, 0x3d	; 61
    4ebe:	be b7       	in	r27, 0x3e	; 62
    4ec0:	12 96       	adiw	r26, 0x02	; 2
    4ec2:	3c 93       	st	X, r19
    4ec4:	2e 93       	st	-X, r18
    4ec6:	11 97       	sbiw	r26, 0x01	; 1
    4ec8:	82 83       	std	Z+2, r24	; 0x02
    4eca:	13 82       	std	Z+3, r1	; 0x03
    4ecc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4ed0:	0f 90       	pop	r0
    4ed2:	0f 90       	pop	r0
    4ed4:	0f 90       	pop	r0
    4ed6:	0f 90       	pop	r0
    4ed8:	81 e9       	ldi	r24, 0x91	; 145
    4eda:	96 e0       	ldi	r25, 0x06	; 6
    4edc:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4ee0:	0e 94 c9 21 	call	0x4392	; 0x4392 <eeconfig_read_debug>
    4ee4:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4ee6:	83 e9       	ldi	r24, 0x93	; 147
    4ee8:	96 e0       	ldi	r25, 0x06	; 6
    4eea:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    4eee:	00 d0       	rcall	.+0      	; 0x4ef0 <command_common+0x106>
    4ef0:	00 d0       	rcall	.+0      	; 0x4ef2 <command_common+0x108>
    4ef2:	ed b7       	in	r30, 0x3d	; 61
    4ef4:	fe b7       	in	r31, 0x3e	; 62
    4ef6:	31 96       	adiw	r30, 0x01	; 1
    4ef8:	86 ea       	ldi	r24, 0xA6	; 166
    4efa:	96 e0       	ldi	r25, 0x06	; 6
    4efc:	ad b7       	in	r26, 0x3d	; 61
    4efe:	be b7       	in	r27, 0x3e	; 62
    4f00:	12 96       	adiw	r26, 0x02	; 2
    4f02:	9c 93       	st	X, r25
    4f04:	8e 93       	st	-X, r24
    4f06:	11 97       	sbiw	r26, 0x01	; 1
    4f08:	c2 83       	std	Z+2, r28	; 0x02
    4f0a:	13 82       	std	Z+3, r1	; 0x03
    4f0c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4f10:	0f 90       	pop	r0
    4f12:	0f 90       	pop	r0
    4f14:	0f 90       	pop	r0
    4f16:	0f 90       	pop	r0
    4f18:	8b ea       	ldi	r24, 0xAB	; 171
    4f1a:	96 e0       	ldi	r25, 0x06	; 6
    4f1c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4f20:	8d ea       	ldi	r24, 0xAD	; 173
    4f22:	96 e0       	ldi	r25, 0x06	; 6
    4f24:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    4f28:	00 d0       	rcall	.+0      	; 0x4f2a <command_common+0x140>
    4f2a:	00 d0       	rcall	.+0      	; 0x4f2c <command_common+0x142>
    4f2c:	ed b7       	in	r30, 0x3d	; 61
    4f2e:	fe b7       	in	r31, 0x3e	; 62
    4f30:	31 96       	adiw	r30, 0x01	; 1
    4f32:	87 eb       	ldi	r24, 0xB7	; 183
    4f34:	96 e0       	ldi	r25, 0x06	; 6
    4f36:	ad b7       	in	r26, 0x3d	; 61
    4f38:	be b7       	in	r27, 0x3e	; 62
    4f3a:	12 96       	adiw	r26, 0x02	; 2
    4f3c:	9c 93       	st	X, r25
    4f3e:	8e 93       	st	-X, r24
    4f40:	11 97       	sbiw	r26, 0x01	; 1
    4f42:	8c 2f       	mov	r24, r28
    4f44:	81 70       	andi	r24, 0x01	; 1
    4f46:	82 83       	std	Z+2, r24	; 0x02
    4f48:	13 82       	std	Z+3, r1	; 0x03
    4f4a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4f4e:	0f 90       	pop	r0
    4f50:	0f 90       	pop	r0
    4f52:	0f 90       	pop	r0
    4f54:	0f 90       	pop	r0
    4f56:	8a eb       	ldi	r24, 0xBA	; 186
    4f58:	96 e0       	ldi	r25, 0x06	; 6
    4f5a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4f5e:	8c eb       	ldi	r24, 0xBC	; 188
    4f60:	96 e0       	ldi	r25, 0x06	; 6
    4f62:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    4f66:	00 d0       	rcall	.+0      	; 0x4f68 <command_common+0x17e>
    4f68:	00 d0       	rcall	.+0      	; 0x4f6a <command_common+0x180>
    4f6a:	ed b7       	in	r30, 0x3d	; 61
    4f6c:	fe b7       	in	r31, 0x3e	; 62
    4f6e:	31 96       	adiw	r30, 0x01	; 1
    4f70:	86 ec       	ldi	r24, 0xC6	; 198
    4f72:	96 e0       	ldi	r25, 0x06	; 6
    4f74:	ad b7       	in	r26, 0x3d	; 61
    4f76:	be b7       	in	r27, 0x3e	; 62
    4f78:	12 96       	adiw	r26, 0x02	; 2
    4f7a:	9c 93       	st	X, r25
    4f7c:	8e 93       	st	-X, r24
    4f7e:	11 97       	sbiw	r26, 0x01	; 1
    4f80:	8c 2f       	mov	r24, r28
    4f82:	86 95       	lsr	r24
    4f84:	81 70       	andi	r24, 0x01	; 1
    4f86:	82 83       	std	Z+2, r24	; 0x02
    4f88:	13 82       	std	Z+3, r1	; 0x03
    4f8a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4f8e:	0f 90       	pop	r0
    4f90:	0f 90       	pop	r0
    4f92:	0f 90       	pop	r0
    4f94:	0f 90       	pop	r0
    4f96:	89 ec       	ldi	r24, 0xC9	; 201
    4f98:	96 e0       	ldi	r25, 0x06	; 6
    4f9a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4f9e:	8b ec       	ldi	r24, 0xCB	; 203
    4fa0:	96 e0       	ldi	r25, 0x06	; 6
    4fa2:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    4fa6:	00 d0       	rcall	.+0      	; 0x4fa8 <command_common+0x1be>
    4fa8:	00 d0       	rcall	.+0      	; 0x4faa <command_common+0x1c0>
    4faa:	ed b7       	in	r30, 0x3d	; 61
    4fac:	fe b7       	in	r31, 0x3e	; 62
    4fae:	31 96       	adiw	r30, 0x01	; 1
    4fb0:	87 ed       	ldi	r24, 0xD7	; 215
    4fb2:	96 e0       	ldi	r25, 0x06	; 6
    4fb4:	ad b7       	in	r26, 0x3d	; 61
    4fb6:	be b7       	in	r27, 0x3e	; 62
    4fb8:	12 96       	adiw	r26, 0x02	; 2
    4fba:	9c 93       	st	X, r25
    4fbc:	8e 93       	st	-X, r24
    4fbe:	11 97       	sbiw	r26, 0x01	; 1
    4fc0:	8c 2f       	mov	r24, r28
    4fc2:	86 95       	lsr	r24
    4fc4:	86 95       	lsr	r24
    4fc6:	81 70       	andi	r24, 0x01	; 1
    4fc8:	82 83       	std	Z+2, r24	; 0x02
    4fca:	13 82       	std	Z+3, r1	; 0x03
    4fcc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    4fd0:	0f 90       	pop	r0
    4fd2:	0f 90       	pop	r0
    4fd4:	0f 90       	pop	r0
    4fd6:	0f 90       	pop	r0
    4fd8:	8a ed       	ldi	r24, 0xDA	; 218
    4fda:	96 e0       	ldi	r25, 0x06	; 6
    4fdc:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4fe0:	8c ed       	ldi	r24, 0xDC	; 220
    4fe2:	96 e0       	ldi	r25, 0x06	; 6
    4fe4:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    4fe8:	00 d0       	rcall	.+0      	; 0x4fea <command_common+0x200>
    4fea:	00 d0       	rcall	.+0      	; 0x4fec <command_common+0x202>
    4fec:	ed b7       	in	r30, 0x3d	; 61
    4fee:	fe b7       	in	r31, 0x3e	; 62
    4ff0:	31 96       	adiw	r30, 0x01	; 1
    4ff2:	85 ee       	ldi	r24, 0xE5	; 229
    4ff4:	96 e0       	ldi	r25, 0x06	; 6
    4ff6:	ad b7       	in	r26, 0x3d	; 61
    4ff8:	be b7       	in	r27, 0x3e	; 62
    4ffa:	12 96       	adiw	r26, 0x02	; 2
    4ffc:	9c 93       	st	X, r25
    4ffe:	8e 93       	st	-X, r24
    5000:	11 97       	sbiw	r26, 0x01	; 1
    5002:	c6 95       	lsr	r28
    5004:	c6 95       	lsr	r28
    5006:	c6 95       	lsr	r28
    5008:	c1 70       	andi	r28, 0x01	; 1
    500a:	c2 83       	std	Z+2, r28	; 0x02
    500c:	13 82       	std	Z+3, r1	; 0x03
    500e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5012:	0f 90       	pop	r0
    5014:	0f 90       	pop	r0
    5016:	0f 90       	pop	r0
    5018:	0f 90       	pop	r0
    501a:	88 ee       	ldi	r24, 0xE8	; 232
    501c:	96 e0       	ldi	r25, 0x06	; 6
    501e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    5022:	0e 94 df 21 	call	0x43be	; 0x43be <eeconfig_read_keymap>
    5026:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    5028:	8a ee       	ldi	r24, 0xEA	; 234
    502a:	96 e0       	ldi	r25, 0x06	; 6
    502c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5030:	00 d0       	rcall	.+0      	; 0x5032 <command_common+0x248>
    5032:	00 d0       	rcall	.+0      	; 0x5034 <command_common+0x24a>
    5034:	ed b7       	in	r30, 0x3d	; 61
    5036:	fe b7       	in	r31, 0x3e	; 62
    5038:	31 96       	adiw	r30, 0x01	; 1
    503a:	8e ef       	ldi	r24, 0xFE	; 254
    503c:	96 e0       	ldi	r25, 0x06	; 6
    503e:	ad b7       	in	r26, 0x3d	; 61
    5040:	be b7       	in	r27, 0x3e	; 62
    5042:	12 96       	adiw	r26, 0x02	; 2
    5044:	9c 93       	st	X, r25
    5046:	8e 93       	st	-X, r24
    5048:	11 97       	sbiw	r26, 0x01	; 1
    504a:	c2 83       	std	Z+2, r28	; 0x02
    504c:	13 82       	std	Z+3, r1	; 0x03
    504e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5052:	0f 90       	pop	r0
    5054:	0f 90       	pop	r0
    5056:	0f 90       	pop	r0
    5058:	0f 90       	pop	r0
    505a:	83 e0       	ldi	r24, 0x03	; 3
    505c:	97 e0       	ldi	r25, 0x07	; 7
    505e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    5062:	85 e0       	ldi	r24, 0x05	; 5
    5064:	97 e0       	ldi	r25, 0x07	; 7
    5066:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    506a:	00 d0       	rcall	.+0      	; 0x506c <command_common+0x282>
    506c:	00 d0       	rcall	.+0      	; 0x506e <command_common+0x284>
    506e:	ed b7       	in	r30, 0x3d	; 61
    5070:	fe b7       	in	r31, 0x3e	; 62
    5072:	31 96       	adiw	r30, 0x01	; 1
    5074:	8e e1       	ldi	r24, 0x1E	; 30
    5076:	97 e0       	ldi	r25, 0x07	; 7
    5078:	ad b7       	in	r26, 0x3d	; 61
    507a:	be b7       	in	r27, 0x3e	; 62
    507c:	12 96       	adiw	r26, 0x02	; 2
    507e:	9c 93       	st	X, r25
    5080:	8e 93       	st	-X, r24
    5082:	11 97       	sbiw	r26, 0x01	; 1
    5084:	8c 2f       	mov	r24, r28
    5086:	81 70       	andi	r24, 0x01	; 1
    5088:	82 83       	std	Z+2, r24	; 0x02
    508a:	13 82       	std	Z+3, r1	; 0x03
    508c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5090:	0f 90       	pop	r0
    5092:	0f 90       	pop	r0
    5094:	0f 90       	pop	r0
    5096:	0f 90       	pop	r0
    5098:	81 e2       	ldi	r24, 0x21	; 33
    509a:	97 e0       	ldi	r25, 0x07	; 7
    509c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    50a0:	83 e2       	ldi	r24, 0x23	; 35
    50a2:	97 e0       	ldi	r25, 0x07	; 7
    50a4:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    50a8:	00 d0       	rcall	.+0      	; 0x50aa <command_common+0x2c0>
    50aa:	00 d0       	rcall	.+0      	; 0x50ac <command_common+0x2c2>
    50ac:	ed b7       	in	r30, 0x3d	; 61
    50ae:	fe b7       	in	r31, 0x3e	; 62
    50b0:	31 96       	adiw	r30, 0x01	; 1
    50b2:	8a e3       	ldi	r24, 0x3A	; 58
    50b4:	97 e0       	ldi	r25, 0x07	; 7
    50b6:	ad b7       	in	r26, 0x3d	; 61
    50b8:	be b7       	in	r27, 0x3e	; 62
    50ba:	12 96       	adiw	r26, 0x02	; 2
    50bc:	9c 93       	st	X, r25
    50be:	8e 93       	st	-X, r24
    50c0:	11 97       	sbiw	r26, 0x01	; 1
    50c2:	8c 2f       	mov	r24, r28
    50c4:	86 95       	lsr	r24
    50c6:	81 70       	andi	r24, 0x01	; 1
    50c8:	82 83       	std	Z+2, r24	; 0x02
    50ca:	13 82       	std	Z+3, r1	; 0x03
    50cc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    50d0:	0f 90       	pop	r0
    50d2:	0f 90       	pop	r0
    50d4:	0f 90       	pop	r0
    50d6:	0f 90       	pop	r0
    50d8:	8d e3       	ldi	r24, 0x3D	; 61
    50da:	97 e0       	ldi	r25, 0x07	; 7
    50dc:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    50e0:	8f e3       	ldi	r24, 0x3F	; 63
    50e2:	97 e0       	ldi	r25, 0x07	; 7
    50e4:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    50e8:	00 d0       	rcall	.+0      	; 0x50ea <command_common+0x300>
    50ea:	00 d0       	rcall	.+0      	; 0x50ec <command_common+0x302>
    50ec:	ed b7       	in	r30, 0x3d	; 61
    50ee:	fe b7       	in	r31, 0x3e	; 62
    50f0:	31 96       	adiw	r30, 0x01	; 1
    50f2:	81 e5       	ldi	r24, 0x51	; 81
    50f4:	97 e0       	ldi	r25, 0x07	; 7
    50f6:	ad b7       	in	r26, 0x3d	; 61
    50f8:	be b7       	in	r27, 0x3e	; 62
    50fa:	12 96       	adiw	r26, 0x02	; 2
    50fc:	9c 93       	st	X, r25
    50fe:	8e 93       	st	-X, r24
    5100:	11 97       	sbiw	r26, 0x01	; 1
    5102:	8c 2f       	mov	r24, r28
    5104:	86 95       	lsr	r24
    5106:	86 95       	lsr	r24
    5108:	81 70       	andi	r24, 0x01	; 1
    510a:	82 83       	std	Z+2, r24	; 0x02
    510c:	13 82       	std	Z+3, r1	; 0x03
    510e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5112:	0f 90       	pop	r0
    5114:	0f 90       	pop	r0
    5116:	0f 90       	pop	r0
    5118:	0f 90       	pop	r0
    511a:	84 e5       	ldi	r24, 0x54	; 84
    511c:	97 e0       	ldi	r25, 0x07	; 7
    511e:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    5122:	86 e5       	ldi	r24, 0x56	; 86
    5124:	97 e0       	ldi	r25, 0x07	; 7
    5126:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    512a:	00 d0       	rcall	.+0      	; 0x512c <command_common+0x342>
    512c:	00 d0       	rcall	.+0      	; 0x512e <command_common+0x344>
    512e:	ed b7       	in	r30, 0x3d	; 61
    5130:	fe b7       	in	r31, 0x3e	; 62
    5132:	31 96       	adiw	r30, 0x01	; 1
    5134:	88 e6       	ldi	r24, 0x68	; 104
    5136:	97 e0       	ldi	r25, 0x07	; 7
    5138:	ad b7       	in	r26, 0x3d	; 61
    513a:	be b7       	in	r27, 0x3e	; 62
    513c:	12 96       	adiw	r26, 0x02	; 2
    513e:	9c 93       	st	X, r25
    5140:	8e 93       	st	-X, r24
    5142:	11 97       	sbiw	r26, 0x01	; 1
    5144:	8c 2f       	mov	r24, r28
    5146:	86 95       	lsr	r24
    5148:	86 95       	lsr	r24
    514a:	86 95       	lsr	r24
    514c:	81 70       	andi	r24, 0x01	; 1
    514e:	82 83       	std	Z+2, r24	; 0x02
    5150:	13 82       	std	Z+3, r1	; 0x03
    5152:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5156:	0f 90       	pop	r0
    5158:	0f 90       	pop	r0
    515a:	0f 90       	pop	r0
    515c:	0f 90       	pop	r0
    515e:	8b e6       	ldi	r24, 0x6B	; 107
    5160:	97 e0       	ldi	r25, 0x07	; 7
    5162:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    5166:	8d e6       	ldi	r24, 0x6D	; 109
    5168:	97 e0       	ldi	r25, 0x07	; 7
    516a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    516e:	00 d0       	rcall	.+0      	; 0x5170 <command_common+0x386>
    5170:	00 d0       	rcall	.+0      	; 0x5172 <command_common+0x388>
    5172:	ed b7       	in	r30, 0x3d	; 61
    5174:	fe b7       	in	r31, 0x3e	; 62
    5176:	31 96       	adiw	r30, 0x01	; 1
    5178:	87 e7       	ldi	r24, 0x77	; 119
    517a:	97 e0       	ldi	r25, 0x07	; 7
    517c:	ad b7       	in	r26, 0x3d	; 61
    517e:	be b7       	in	r27, 0x3e	; 62
    5180:	12 96       	adiw	r26, 0x02	; 2
    5182:	9c 93       	st	X, r25
    5184:	8e 93       	st	-X, r24
    5186:	11 97       	sbiw	r26, 0x01	; 1
    5188:	8c 2f       	mov	r24, r28
    518a:	82 95       	swap	r24
    518c:	81 70       	andi	r24, 0x01	; 1
    518e:	82 83       	std	Z+2, r24	; 0x02
    5190:	13 82       	std	Z+3, r1	; 0x03
    5192:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5196:	0f 90       	pop	r0
    5198:	0f 90       	pop	r0
    519a:	0f 90       	pop	r0
    519c:	0f 90       	pop	r0
    519e:	8a e7       	ldi	r24, 0x7A	; 122
    51a0:	97 e0       	ldi	r25, 0x07	; 7
    51a2:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    51a6:	8c e7       	ldi	r24, 0x7C	; 124
    51a8:	97 e0       	ldi	r25, 0x07	; 7
    51aa:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    51ae:	00 d0       	rcall	.+0      	; 0x51b0 <command_common+0x3c6>
    51b0:	00 d0       	rcall	.+0      	; 0x51b2 <command_common+0x3c8>
    51b2:	ed b7       	in	r30, 0x3d	; 61
    51b4:	fe b7       	in	r31, 0x3e	; 62
    51b6:	31 96       	adiw	r30, 0x01	; 1
    51b8:	8e e8       	ldi	r24, 0x8E	; 142
    51ba:	97 e0       	ldi	r25, 0x07	; 7
    51bc:	ad b7       	in	r26, 0x3d	; 61
    51be:	be b7       	in	r27, 0x3e	; 62
    51c0:	12 96       	adiw	r26, 0x02	; 2
    51c2:	9c 93       	st	X, r25
    51c4:	8e 93       	st	-X, r24
    51c6:	11 97       	sbiw	r26, 0x01	; 1
    51c8:	8c 2f       	mov	r24, r28
    51ca:	82 95       	swap	r24
    51cc:	86 95       	lsr	r24
    51ce:	81 70       	andi	r24, 0x01	; 1
    51d0:	82 83       	std	Z+2, r24	; 0x02
    51d2:	13 82       	std	Z+3, r1	; 0x03
    51d4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    51d8:	0f 90       	pop	r0
    51da:	0f 90       	pop	r0
    51dc:	0f 90       	pop	r0
    51de:	0f 90       	pop	r0
    51e0:	81 e9       	ldi	r24, 0x91	; 145
    51e2:	97 e0       	ldi	r25, 0x07	; 7
    51e4:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    51e8:	83 e9       	ldi	r24, 0x93	; 147
    51ea:	97 e0       	ldi	r25, 0x07	; 7
    51ec:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    51f0:	00 d0       	rcall	.+0      	; 0x51f2 <command_common+0x408>
    51f2:	00 d0       	rcall	.+0      	; 0x51f4 <command_common+0x40a>
    51f4:	ed b7       	in	r30, 0x3d	; 61
    51f6:	fe b7       	in	r31, 0x3e	; 62
    51f8:	31 96       	adiw	r30, 0x01	; 1
    51fa:	8f ea       	ldi	r24, 0xAF	; 175
    51fc:	97 e0       	ldi	r25, 0x07	; 7
    51fe:	ad b7       	in	r26, 0x3d	; 61
    5200:	be b7       	in	r27, 0x3e	; 62
    5202:	12 96       	adiw	r26, 0x02	; 2
    5204:	9c 93       	st	X, r25
    5206:	8e 93       	st	-X, r24
    5208:	11 97       	sbiw	r26, 0x01	; 1
    520a:	8c 2f       	mov	r24, r28
    520c:	82 95       	swap	r24
    520e:	86 95       	lsr	r24
    5210:	86 95       	lsr	r24
    5212:	81 70       	andi	r24, 0x01	; 1
    5214:	82 83       	std	Z+2, r24	; 0x02
    5216:	13 82       	std	Z+3, r1	; 0x03
    5218:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    521c:	0f 90       	pop	r0
    521e:	0f 90       	pop	r0
    5220:	0f 90       	pop	r0
    5222:	0f 90       	pop	r0
    5224:	82 eb       	ldi	r24, 0xB2	; 178
    5226:	97 e0       	ldi	r25, 0x07	; 7
    5228:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    522c:	84 eb       	ldi	r24, 0xB4	; 180
    522e:	97 e0       	ldi	r25, 0x07	; 7
    5230:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5234:	00 d0       	rcall	.+0      	; 0x5236 <command_common+0x44c>
    5236:	00 d0       	rcall	.+0      	; 0x5238 <command_common+0x44e>
    5238:	ed b7       	in	r30, 0x3d	; 61
    523a:	fe b7       	in	r31, 0x3e	; 62
    523c:	31 96       	adiw	r30, 0x01	; 1
    523e:	8c eb       	ldi	r24, 0xBC	; 188
    5240:	97 e0       	ldi	r25, 0x07	; 7
    5242:	ad b7       	in	r26, 0x3d	; 61
    5244:	be b7       	in	r27, 0x3e	; 62
    5246:	12 96       	adiw	r26, 0x02	; 2
    5248:	9c 93       	st	X, r25
    524a:	8e 93       	st	-X, r24
    524c:	11 97       	sbiw	r26, 0x01	; 1
    524e:	cc 1f       	adc	r28, r28
    5250:	cc 27       	eor	r28, r28
    5252:	cc 1f       	adc	r28, r28
    5254:	c2 83       	std	Z+2, r28	; 0x02
    5256:	13 82       	std	Z+3, r1	; 0x03
    5258:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    525c:	0f 90       	pop	r0
    525e:	0f 90       	pop	r0
    5260:	0f 90       	pop	r0
    5262:	0f 90       	pop	r0
    5264:	8f eb       	ldi	r24, 0xBF	; 191
    5266:	97 e0       	ldi	r25, 0x07	; 7
    5268:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    526c:	81 e0       	ldi	r24, 0x01	; 1
    526e:	18 c1       	rjmp	.+560    	; 0x54a0 <command_common+0x6b6>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    5270:	81 ec       	ldi	r24, 0xC1	; 193
    5272:	97 e0       	ldi	r25, 0x07	; 7
    5274:	f9 cf       	rjmp	.-14     	; 0x5268 <command_common+0x47e>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    5276:	80 91 25 02 	lds	r24, 0x0225
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    527a:	80 7f       	andi	r24, 0xF0	; 240
    527c:	80 93 25 02 	sts	0x0225, r24
            command_console_help();
    5280:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <command_console_help>
            print("C> ");
    5284:	82 e6       	ldi	r24, 0x62	; 98
    5286:	94 e0       	ldi	r25, 0x04	; 4
    5288:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            command_state = CONSOLE;
    528c:	81 e0       	ldi	r24, 0x01	; 1
    528e:	80 93 34 02 	sts	0x0234, r24
            break;
    5292:	06 c1       	rjmp	.+524    	; 0x54a0 <command_common+0x6b6>
        case KC_PAUSE:
            clear_keyboard();
    5294:	0e 94 13 18 	call	0x3026	; 0x3026 <clear_keyboard>
            print("\n\nbootloader... ");
    5298:	86 e6       	ldi	r24, 0x66	; 102
    529a:	94 e0       	ldi	r25, 0x04	; 4
    529c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    52a0:	8f ef       	ldi	r24, 0xFF	; 255
    52a2:	93 ed       	ldi	r25, 0xD3	; 211
    52a4:	a0 e3       	ldi	r26, 0x30	; 48
    52a6:	81 50       	subi	r24, 0x01	; 1
    52a8:	90 40       	sbci	r25, 0x00	; 0
    52aa:	a0 40       	sbci	r26, 0x00	; 0
    52ac:	e1 f7       	brne	.-8      	; 0x52a6 <command_common+0x4bc>
    52ae:	00 c0       	rjmp	.+0      	; 0x52b0 <command_common+0x4c6>
    52b0:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    52b2:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <bootloader_jump>
    52b6:	da cf       	rjmp	.-76     	; 0x526c <command_common+0x482>
            break;
        case KC_D:
            if (debug_enable) {
    52b8:	80 91 25 02 	lds	r24, 0x0225
    52bc:	80 ff       	sbrs	r24, 0
    52be:	08 c0       	rjmp	.+16     	; 0x52d0 <command_common+0x4e6>
                print("\ndebug: off\n");
    52c0:	87 e7       	ldi	r24, 0x77	; 119
    52c2:	94 e0       	ldi	r25, 0x04	; 4
    52c4:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
                debug_matrix   = false;
    52c8:	80 91 25 02 	lds	r24, 0x0225
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    52cc:	80 7f       	andi	r24, 0xF0	; 240
    52ce:	18 c0       	rjmp	.+48     	; 0x5300 <command_common+0x516>
            } else {
                print("\ndebug: on\n");
    52d0:	84 e8       	ldi	r24, 0x84	; 132
    52d2:	94 e0       	ldi	r25, 0x04	; 4
    52d4:	10 c0       	rjmp	.+32     	; 0x52f6 <command_common+0x50c>
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    52d6:	90 91 25 02 	lds	r25, 0x0225
    52da:	89 2f       	mov	r24, r25
    52dc:	86 95       	lsr	r24
    52de:	80 95       	com	r24
    52e0:	81 70       	andi	r24, 0x01	; 1
    52e2:	28 2f       	mov	r18, r24
    52e4:	22 0f       	add	r18, r18
    52e6:	9d 7f       	andi	r25, 0xFD	; 253
    52e8:	92 2b       	or	r25, r18
    52ea:	90 93 25 02 	sts	0x0225, r25
            if (debug_matrix) {
    52ee:	88 23       	and	r24, r24
    52f0:	51 f0       	breq	.+20     	; 0x5306 <command_common+0x51c>
                print("\nmatrix: on\n");
    52f2:	80 e9       	ldi	r24, 0x90	; 144
    52f4:	94 e0       	ldi	r25, 0x04	; 4
    52f6:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
                debug_enable = true;
    52fa:	80 91 25 02 	lds	r24, 0x0225
    52fe:	81 60       	ori	r24, 0x01	; 1
    5300:	80 93 25 02 	sts	0x0225, r24
    5304:	b3 cf       	rjmp	.-154    	; 0x526c <command_common+0x482>
            } else {
                print("\nmatrix: off\n");
    5306:	8d e9       	ldi	r24, 0x9D	; 157
    5308:	94 e0       	ldi	r25, 0x04	; 4
    530a:	ae cf       	rjmp	.-164    	; 0x5268 <command_common+0x47e>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    530c:	90 91 25 02 	lds	r25, 0x0225
    5310:	89 2f       	mov	r24, r25
    5312:	86 95       	lsr	r24
    5314:	86 95       	lsr	r24
    5316:	80 95       	com	r24
    5318:	81 70       	andi	r24, 0x01	; 1
    531a:	28 2f       	mov	r18, r24
    531c:	22 0f       	add	r18, r18
    531e:	22 0f       	add	r18, r18
    5320:	9b 7f       	andi	r25, 0xFB	; 251
    5322:	92 2b       	or	r25, r18
    5324:	90 93 25 02 	sts	0x0225, r25
            if (debug_keyboard) {
    5328:	88 23       	and	r24, r24
    532a:	19 f0       	breq	.+6      	; 0x5332 <command_common+0x548>
                print("\nkeyboard: on\n");
    532c:	8b ea       	ldi	r24, 0xAB	; 171
    532e:	94 e0       	ldi	r25, 0x04	; 4
    5330:	e2 cf       	rjmp	.-60     	; 0x52f6 <command_common+0x50c>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    5332:	8a eb       	ldi	r24, 0xBA	; 186
    5334:	94 e0       	ldi	r25, 0x04	; 4
    5336:	98 cf       	rjmp	.-208    	; 0x5268 <command_common+0x47e>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    5338:	90 91 25 02 	lds	r25, 0x0225
    533c:	89 2f       	mov	r24, r25
    533e:	86 95       	lsr	r24
    5340:	86 95       	lsr	r24
    5342:	86 95       	lsr	r24
    5344:	80 95       	com	r24
    5346:	81 70       	andi	r24, 0x01	; 1
    5348:	28 2f       	mov	r18, r24
    534a:	22 0f       	add	r18, r18
    534c:	22 0f       	add	r18, r18
    534e:	22 0f       	add	r18, r18
    5350:	97 7f       	andi	r25, 0xF7	; 247
    5352:	92 2b       	or	r25, r18
    5354:	90 93 25 02 	sts	0x0225, r25
            if (debug_mouse) {
    5358:	88 23       	and	r24, r24
    535a:	19 f0       	breq	.+6      	; 0x5362 <command_common+0x578>
                print("\nmouse: on\n");
    535c:	8a ec       	ldi	r24, 0xCA	; 202
    535e:	94 e0       	ldi	r25, 0x04	; 4
    5360:	ca cf       	rjmp	.-108    	; 0x52f6 <command_common+0x50c>
                debug_enable = true;
            } else {
                print("\nmouse: off\n");
    5362:	86 ed       	ldi	r24, 0xD6	; 214
    5364:	94 e0       	ldi	r25, 0x04	; 4
    5366:	80 cf       	rjmp	.-256    	; 0x5268 <command_common+0x47e>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    5368:	83 ee       	ldi	r24, 0xE3	; 227
    536a:	94 e0       	ldi	r25, 0x04	; 4
    536c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    5370:	82 ef       	ldi	r24, 0xF2	; 242
    5372:	94 e0       	ldi	r25, 0x04	; 4
    5374:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    5378:	85 e1       	ldi	r24, 0x15	; 21
    537a:	95 e0       	ldi	r25, 0x05	; 5
    537c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    5380:	81 e5       	ldi	r24, 0x51	; 81
    5382:	95 e0       	ldi	r25, 0x05	; 5
    5384:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            /* build options */
            print("OPTIONS:"
    5388:	8e e7       	ldi	r24, 0x7E	; 126
    538a:	95 e0       	ldi	r25, 0x05	; 5
    538c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    5390:	83 ec       	ldi	r24, 0xC3	; 195
    5392:	95 e0       	ldi	r25, 0x05	; 5
    5394:	69 cf       	rjmp	.-302    	; 0x5268 <command_common+0x47e>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_S:
            print("\n\t- Status -\n");
    5396:	8e ee       	ldi	r24, 0xEE	; 238
    5398:	95 e0       	ldi	r25, 0x05	; 5
    539a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            print_val_hex8(host_keyboard_leds());
    539e:	0e 94 b6 12 	call	0x256c	; 0x256c <host_keyboard_leds>
    53a2:	00 d0       	rcall	.+0      	; 0x53a4 <command_common+0x5ba>
    53a4:	00 d0       	rcall	.+0      	; 0x53a6 <command_common+0x5bc>
    53a6:	ed b7       	in	r30, 0x3d	; 61
    53a8:	fe b7       	in	r31, 0x3e	; 62
    53aa:	31 96       	adiw	r30, 0x01	; 1
    53ac:	2c ef       	ldi	r18, 0xFC	; 252
    53ae:	35 e0       	ldi	r19, 0x05	; 5
    53b0:	ad b7       	in	r26, 0x3d	; 61
    53b2:	be b7       	in	r27, 0x3e	; 62
    53b4:	12 96       	adiw	r26, 0x02	; 2
    53b6:	3c 93       	st	X, r19
    53b8:	2e 93       	st	-X, r18
    53ba:	11 97       	sbiw	r26, 0x01	; 1
    53bc:	82 83       	std	Z+2, r24	; 0x02
    53be:	13 82       	std	Z+3, r1	; 0x03
    53c0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
            print_val_hex8(keyboard_protocol);
    53c4:	ed b7       	in	r30, 0x3d	; 61
    53c6:	fe b7       	in	r31, 0x3e	; 62
    53c8:	31 96       	adiw	r30, 0x01	; 1
    53ca:	86 e1       	ldi	r24, 0x16	; 22
    53cc:	96 e0       	ldi	r25, 0x06	; 6
    53ce:	ad b7       	in	r26, 0x3d	; 61
    53d0:	be b7       	in	r27, 0x3e	; 62
    53d2:	12 96       	adiw	r26, 0x02	; 2
    53d4:	9c 93       	st	X, r25
    53d6:	8e 93       	st	-X, r24
    53d8:	11 97       	sbiw	r26, 0x01	; 1
    53da:	80 91 0c 01 	lds	r24, 0x010C
    53de:	82 83       	std	Z+2, r24	; 0x02
    53e0:	13 82       	std	Z+3, r1	; 0x03
    53e2:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
            print_val_hex8(keyboard_idle);
    53e6:	ed b7       	in	r30, 0x3d	; 61
    53e8:	fe b7       	in	r31, 0x3e	; 62
    53ea:	31 96       	adiw	r30, 0x01	; 1
    53ec:	8d e2       	ldi	r24, 0x2D	; 45
    53ee:	96 e0       	ldi	r25, 0x06	; 6
    53f0:	ad b7       	in	r26, 0x3d	; 61
    53f2:	be b7       	in	r27, 0x3e	; 62
    53f4:	12 96       	adiw	r26, 0x02	; 2
    53f6:	9c 93       	st	X, r25
    53f8:	8e 93       	st	-X, r24
    53fa:	11 97       	sbiw	r26, 0x01	; 1
    53fc:	80 91 aa 01 	lds	r24, 0x01AA
    5400:	82 83       	std	Z+2, r24	; 0x02
    5402:	13 82       	std	Z+3, r1	; 0x03
    5404:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    5408:	ed b7       	in	r30, 0x3d	; 61
    540a:	fe b7       	in	r31, 0x3e	; 62
    540c:	31 96       	adiw	r30, 0x01	; 1
    540e:	80 e4       	ldi	r24, 0x40	; 64
    5410:	96 e0       	ldi	r25, 0x06	; 6
    5412:	ad b7       	in	r26, 0x3d	; 61
    5414:	be b7       	in	r27, 0x3e	; 62
    5416:	12 96       	adiw	r26, 0x02	; 2
    5418:	9c 93       	st	X, r25
    541a:	8e 93       	st	-X, r24
    541c:	11 97       	sbiw	r26, 0x01	; 1
    541e:	80 91 0d 01 	lds	r24, 0x010D
    5422:	82 83       	std	Z+2, r24	; 0x02
    5424:	13 82       	std	Z+3, r1	; 0x03
    5426:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
#endif
            print_val_hex32(timer_count);
    542a:	80 91 27 02 	lds	r24, 0x0227
    542e:	90 91 28 02 	lds	r25, 0x0228
    5432:	a0 91 29 02 	lds	r26, 0x0229
    5436:	b0 91 2a 02 	lds	r27, 0x022A
    543a:	00 d0       	rcall	.+0      	; 0x543c <command_common+0x652>
    543c:	23 e5       	ldi	r18, 0x53	; 83
    543e:	36 e0       	ldi	r19, 0x06	; 6
    5440:	ed b7       	in	r30, 0x3d	; 61
    5442:	fe b7       	in	r31, 0x3e	; 62
    5444:	32 83       	std	Z+2, r19	; 0x02
    5446:	21 83       	std	Z+1, r18	; 0x01
    5448:	83 83       	std	Z+3, r24	; 0x03
    544a:	94 83       	std	Z+4, r25	; 0x04
    544c:	a5 83       	std	Z+5, r26	; 0x05
    544e:	b6 83       	std	Z+6, r27	; 0x06
    5450:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    5454:	8d b7       	in	r24, 0x3d	; 61
    5456:	9e b7       	in	r25, 0x3e	; 62
    5458:	06 96       	adiw	r24, 0x06	; 6
    545a:	0f b6       	in	r0, 0x3f	; 63
    545c:	f8 94       	cli
    545e:	9e bf       	out	0x3e, r25	; 62
    5460:	0f be       	out	0x3f, r0	; 63
    5462:	8d bf       	out	0x3d, r24	; 61
    5464:	03 cf       	rjmp	.-506    	; 0x526c <command_common+0x482>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    5466:	0e 94 13 18 	call	0x3026	; 0x3026 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    546a:	80 91 0d 01 	lds	r24, 0x010D
    546e:	91 e0       	ldi	r25, 0x01	; 1
    5470:	89 27       	eor	r24, r25
    5472:	80 93 0d 01 	sts	0x010D, r24
            if (keyboard_nkro)
    5476:	88 23       	and	r24, r24
    5478:	19 f0       	breq	.+6      	; 0x5480 <command_common+0x696>
                print("NKRO: on\n");
    547a:	87 e6       	ldi	r24, 0x67	; 103
    547c:	96 e0       	ldi	r25, 0x06	; 6
    547e:	f4 ce       	rjmp	.-536    	; 0x5268 <command_common+0x47e>
            else
                print("NKRO: off\n");
    5480:	81 e7       	ldi	r24, 0x71	; 113
    5482:	96 e0       	ldi	r25, 0x06	; 6
    5484:	f1 ce       	rjmp	.-542    	; 0x5268 <command_common+0x47e>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    5486:	80 e0       	ldi	r24, 0x00	; 0
    5488:	03 c0       	rjmp	.+6      	; 0x5490 <command_common+0x6a6>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    548a:	8d 51       	subi	r24, 0x1D	; 29
    548c:	01 c0       	rjmp	.+2      	; 0x5490 <command_common+0x6a6>
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    548e:	89 53       	subi	r24, 0x39	; 57
    5490:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <switch_default_layer>
    5494:	eb ce       	rjmp	.-554    	; 0x526c <command_common+0x482>
            break;
        default:
            print("?");
    5496:	8c e7       	ldi	r24, 0x7C	; 124
    5498:	96 e0       	ldi	r25, 0x06	; 6
    549a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            return false;
    549e:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
}
    54a0:	cf 91       	pop	r28
    54a2:	08 95       	ret

000054a4 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    54a4:	80 e0       	ldi	r24, 0x00	; 0
    54a6:	08 95       	ret

000054a8 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    54a8:	80 e0       	ldi	r24, 0x00	; 0
    54aa:	08 95       	ret

000054ac <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    54ac:	cf 93       	push	r28
    54ae:	c8 2f       	mov	r28, r24
    switch (command_state) {
    54b0:	80 91 34 02 	lds	r24, 0x0234
    54b4:	81 30       	cpi	r24, 0x01	; 1
    54b6:	79 f0       	breq	.+30     	; 0x54d6 <command_proc+0x2a>
    54b8:	81 30       	cpi	r24, 0x01	; 1
    54ba:	20 f0       	brcs	.+8      	; 0x54c4 <command_proc+0x18>
    54bc:	82 30       	cpi	r24, 0x02	; 2
    54be:	09 f0       	breq	.+2      	; 0x54c2 <command_proc+0x16>
    54c0:	98 c1       	rjmp	.+816    	; 0x57f2 <command_proc+0x346>
    54c2:	49 c0       	rjmp	.+146    	; 0x5556 <command_proc+0xaa>
        case ONESHOT:
            if (!IS_COMMAND())
    54c4:	a0 91 0e 01 	lds	r26, 0x010E
    54c8:	b0 91 0f 01 	lds	r27, 0x010F
    54cc:	8c 91       	ld	r24, X
    54ce:	8d 30       	cpi	r24, 0x0D	; 13
    54d0:	09 f0       	breq	.+2      	; 0x54d4 <command_proc+0x28>
    54d2:	91 c1       	rjmp	.+802    	; 0x57f6 <command_proc+0x34a>
    54d4:	07 c0       	rjmp	.+14     	; 0x54e4 <command_proc+0x38>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    54d6:	a0 91 0e 01 	lds	r26, 0x010E
    54da:	b0 91 0f 01 	lds	r27, 0x010F
    54de:	8c 91       	ld	r24, X
    54e0:	8d 30       	cpi	r24, 0x0D	; 13
    54e2:	49 f4       	brne	.+18     	; 0x54f6 <command_proc+0x4a>
                return (command_extra(code) || command_common(code));
    54e4:	8c 2f       	mov	r24, r28
    54e6:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <command_extra>
    54ea:	88 23       	and	r24, r24
    54ec:	89 f5       	brne	.+98     	; 0x5550 <command_proc+0xa4>
    54ee:	8c 2f       	mov	r24, r28
    54f0:	0e 94 f5 26 	call	0x4dea	; 0x4dea <command_common>
    54f4:	81 c1       	rjmp	.+770    	; 0x57f8 <command_proc+0x34c>
            else
                return (command_console_extra(code) || command_console(code));
    54f6:	8c 2f       	mov	r24, r28
    54f8:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <command_console_extra>
    54fc:	88 23       	and	r24, r24
    54fe:	41 f5       	brne	.+80     	; 0x5550 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5500:	c4 31       	cpi	r28, 0x14	; 20
    5502:	91 f0       	breq	.+36     	; 0x5528 <command_proc+0x7c>
    5504:	c5 31       	cpi	r28, 0x15	; 21
    5506:	28 f4       	brcc	.+10     	; 0x5512 <command_proc+0x66>
    5508:	cb 30       	cpi	r28, 0x0B	; 11
    550a:	39 f0       	breq	.+14     	; 0x551a <command_proc+0x6e>
    550c:	c0 31       	cpi	r28, 0x10	; 16
    550e:	c9 f4       	brne	.+50     	; 0x5542 <command_proc+0x96>
    5510:	0e c0       	rjmp	.+28     	; 0x552e <command_proc+0x82>
    5512:	c9 32       	cpi	r28, 0x29	; 41
    5514:	49 f0       	breq	.+18     	; 0x5528 <command_proc+0x7c>
    5516:	c8 33       	cpi	r28, 0x38	; 56
    5518:	a1 f4       	brne	.+40     	; 0x5542 <command_proc+0x96>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    551a:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    551e:	84 ea       	ldi	r24, 0xA4	; 164
    5520:	98 e0       	ldi	r25, 0x08	; 8
    5522:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5526:	14 c0       	rjmp	.+40     	; 0x5550 <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    5528:	10 92 34 02 	sts	0x0234, r1
    552c:	0e c0       	rjmp	.+28     	; 0x554a <command_proc+0x9e>
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    552e:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <mousekey_console_help>
            print("M> ");
    5532:	88 ea       	ldi	r24, 0xA8	; 168
    5534:	98 e0       	ldi	r25, 0x08	; 8
    5536:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            command_state = MOUSEKEY;
    553a:	82 e0       	ldi	r24, 0x02	; 2
    553c:	80 93 34 02 	sts	0x0234, r24
    5540:	07 c0       	rjmp	.+14     	; 0x5550 <command_proc+0xa4>
            return true;
#endif
        default:
            print("?");
    5542:	8c ea       	ldi	r24, 0xAC	; 172
    5544:	98 e0       	ldi	r25, 0x08	; 8
    5546:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    554a:	80 e0       	ldi	r24, 0x00	; 0
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	54 c1       	rjmp	.+680    	; 0x57f8 <command_proc+0x34c>
    5550:	81 e0       	ldi	r24, 0x01	; 1
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	51 c1       	rjmp	.+674    	; 0x57f8 <command_proc+0x34c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5556:	c4 32       	cpi	r28, 0x24	; 36
    5558:	88 f4       	brcc	.+34     	; 0x557c <command_proc+0xd0>
    555a:	ce 31       	cpi	r28, 0x1E	; 30
    555c:	08 f0       	brcs	.+2      	; 0x5560 <command_proc+0xb4>
    555e:	f2 c0       	rjmp	.+484    	; 0x5744 <command_proc+0x298>
    5560:	cb 30       	cpi	r28, 0x0B	; 11
    5562:	09 f1       	breq	.+66     	; 0x55a6 <command_proc+0xfa>
    5564:	cc 30       	cpi	r28, 0x0C	; 12
    5566:	20 f4       	brcc	.+8      	; 0x5570 <command_proc+0xc4>
    5568:	c7 30       	cpi	r28, 0x07	; 7
    556a:	09 f0       	breq	.+2      	; 0x556e <command_proc+0xc2>
    556c:	1f c1       	rjmp	.+574    	; 0x57ac <command_proc+0x300>
    556e:	07 c1       	rjmp	.+526    	; 0x577e <command_proc+0x2d2>
    5570:	c3 31       	cpi	r28, 0x13	; 19
    5572:	59 f1       	breq	.+86     	; 0x55ca <command_proc+0x11e>
    5574:	c4 31       	cpi	r28, 0x14	; 20
    5576:	09 f0       	breq	.+2      	; 0x557a <command_proc+0xce>
    5578:	19 c1       	rjmp	.+562    	; 0x57ac <command_proc+0x300>
    557a:	18 c0       	rjmp	.+48     	; 0x55ac <command_proc+0x100>
    557c:	cb 34       	cpi	r28, 0x4B	; 75
    557e:	09 f4       	brne	.+2      	; 0x5582 <command_proc+0xd6>
    5580:	f2 c0       	rjmp	.+484    	; 0x5766 <command_proc+0x2ba>
    5582:	cc 34       	cpi	r28, 0x4C	; 76
    5584:	30 f4       	brcc	.+12     	; 0x5592 <command_proc+0xe6>
    5586:	c9 32       	cpi	r28, 0x29	; 41
    5588:	89 f0       	breq	.+34     	; 0x55ac <command_proc+0x100>
    558a:	c8 33       	cpi	r28, 0x38	; 56
    558c:	09 f0       	breq	.+2      	; 0x5590 <command_proc+0xe4>
    558e:	0e c1       	rjmp	.+540    	; 0x57ac <command_proc+0x300>
    5590:	0a c0       	rjmp	.+20     	; 0x55a6 <command_proc+0xfa>
    5592:	c1 35       	cpi	r28, 0x51	; 81
    5594:	09 f4       	brne	.+2      	; 0x5598 <command_proc+0xec>
    5596:	e3 c0       	rjmp	.+454    	; 0x575e <command_proc+0x2b2>
    5598:	c2 35       	cpi	r28, 0x52	; 82
    559a:	09 f4       	brne	.+2      	; 0x559e <command_proc+0xf2>
    559c:	dc c0       	rjmp	.+440    	; 0x5756 <command_proc+0x2aa>
    559e:	ce 34       	cpi	r28, 0x4E	; 78
    55a0:	09 f0       	breq	.+2      	; 0x55a4 <command_proc+0xf8>
    55a2:	04 c1       	rjmp	.+520    	; 0x57ac <command_proc+0x300>
    55a4:	e6 c0       	rjmp	.+460    	; 0x5772 <command_proc+0x2c6>
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    55a6:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <mousekey_console_help>
    55aa:	03 c1       	rjmp	.+518    	; 0x57b2 <command_proc+0x306>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    55ac:	80 91 35 02 	lds	r24, 0x0235
    55b0:	88 23       	and	r24, r24
    55b2:	19 f0       	breq	.+6      	; 0x55ba <command_proc+0x10e>
                mousekey_param = 0;
    55b4:	10 92 35 02 	sts	0x0235, r1
    55b8:	fc c0       	rjmp	.+504    	; 0x57b2 <command_proc+0x306>
            } else {
                print("C> ");
    55ba:	87 ef       	ldi	r24, 0xF7	; 247
    55bc:	99 e0       	ldi	r25, 0x09	; 9
    55be:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
                command_state = CONSOLE;
    55c2:	81 e0       	ldi	r24, 0x01	; 1
    55c4:	80 93 34 02 	sts	0x0234, r24
    55c8:	17 c1       	rjmp	.+558    	; 0x57f8 <command_proc+0x34c>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    55ca:	83 e1       	ldi	r24, 0x13	; 19
    55cc:	9a e0       	ldi	r25, 0x0A	; 10
    55ce:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    55d2:	81 e2       	ldi	r24, 0x21	; 33
    55d4:	9a e0       	ldi	r25, 0x0A	; 10
    55d6:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    55da:	00 d0       	rcall	.+0      	; 0x55dc <command_proc+0x130>
    55dc:	00 d0       	rcall	.+0      	; 0x55de <command_proc+0x132>
    55de:	ed b7       	in	r30, 0x3d	; 61
    55e0:	fe b7       	in	r31, 0x3e	; 62
    55e2:	31 96       	adiw	r30, 0x01	; 1
    55e4:	83 e3       	ldi	r24, 0x33	; 51
    55e6:	9a e0       	ldi	r25, 0x0A	; 10
    55e8:	ad b7       	in	r26, 0x3d	; 61
    55ea:	be b7       	in	r27, 0x3e	; 62
    55ec:	12 96       	adiw	r26, 0x02	; 2
    55ee:	9c 93       	st	X, r25
    55f0:	8e 93       	st	-X, r24
    55f2:	11 97       	sbiw	r26, 0x01	; 1
    55f4:	80 91 15 01 	lds	r24, 0x0115
    55f8:	82 83       	std	Z+2, r24	; 0x02
    55fa:	13 82       	std	Z+3, r1	; 0x03
    55fc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5600:	0f 90       	pop	r0
    5602:	0f 90       	pop	r0
    5604:	0f 90       	pop	r0
    5606:	0f 90       	pop	r0
    5608:	86 e3       	ldi	r24, 0x36	; 54
    560a:	9a e0       	ldi	r25, 0x0A	; 10
    560c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5610:	88 e3       	ldi	r24, 0x38	; 56
    5612:	9a e0       	ldi	r25, 0x0A	; 10
    5614:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5618:	00 d0       	rcall	.+0      	; 0x561a <command_proc+0x16e>
    561a:	00 d0       	rcall	.+0      	; 0x561c <command_proc+0x170>
    561c:	ed b7       	in	r30, 0x3d	; 61
    561e:	fe b7       	in	r31, 0x3e	; 62
    5620:	31 96       	adiw	r30, 0x01	; 1
    5622:	8a e4       	ldi	r24, 0x4A	; 74
    5624:	9a e0       	ldi	r25, 0x0A	; 10
    5626:	ad b7       	in	r26, 0x3d	; 61
    5628:	be b7       	in	r27, 0x3e	; 62
    562a:	12 96       	adiw	r26, 0x02	; 2
    562c:	9c 93       	st	X, r25
    562e:	8e 93       	st	-X, r24
    5630:	11 97       	sbiw	r26, 0x01	; 1
    5632:	80 91 14 01 	lds	r24, 0x0114
    5636:	82 83       	std	Z+2, r24	; 0x02
    5638:	13 82       	std	Z+3, r1	; 0x03
    563a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    563e:	0f 90       	pop	r0
    5640:	0f 90       	pop	r0
    5642:	0f 90       	pop	r0
    5644:	0f 90       	pop	r0
    5646:	8d e4       	ldi	r24, 0x4D	; 77
    5648:	9a e0       	ldi	r25, 0x0A	; 10
    564a:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    564e:	8f e4       	ldi	r24, 0x4F	; 79
    5650:	9a e0       	ldi	r25, 0x0A	; 10
    5652:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5656:	00 d0       	rcall	.+0      	; 0x5658 <command_proc+0x1ac>
    5658:	00 d0       	rcall	.+0      	; 0x565a <command_proc+0x1ae>
    565a:	ed b7       	in	r30, 0x3d	; 61
    565c:	fe b7       	in	r31, 0x3e	; 62
    565e:	31 96       	adiw	r30, 0x01	; 1
    5660:	8e e5       	ldi	r24, 0x5E	; 94
    5662:	9a e0       	ldi	r25, 0x0A	; 10
    5664:	ad b7       	in	r26, 0x3d	; 61
    5666:	be b7       	in	r27, 0x3e	; 62
    5668:	12 96       	adiw	r26, 0x02	; 2
    566a:	9c 93       	st	X, r25
    566c:	8e 93       	st	-X, r24
    566e:	11 97       	sbiw	r26, 0x01	; 1
    5670:	80 91 13 01 	lds	r24, 0x0113
    5674:	82 83       	std	Z+2, r24	; 0x02
    5676:	13 82       	std	Z+3, r1	; 0x03
    5678:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    567c:	0f 90       	pop	r0
    567e:	0f 90       	pop	r0
    5680:	0f 90       	pop	r0
    5682:	0f 90       	pop	r0
    5684:	81 e6       	ldi	r24, 0x61	; 97
    5686:	9a e0       	ldi	r25, 0x0A	; 10
    5688:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    568c:	83 e6       	ldi	r24, 0x63	; 99
    568e:	9a e0       	ldi	r25, 0x0A	; 10
    5690:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5694:	00 d0       	rcall	.+0      	; 0x5696 <command_proc+0x1ea>
    5696:	00 d0       	rcall	.+0      	; 0x5698 <command_proc+0x1ec>
    5698:	ed b7       	in	r30, 0x3d	; 61
    569a:	fe b7       	in	r31, 0x3e	; 62
    569c:	31 96       	adiw	r30, 0x01	; 1
    569e:	84 e7       	ldi	r24, 0x74	; 116
    56a0:	9a e0       	ldi	r25, 0x0A	; 10
    56a2:	ad b7       	in	r26, 0x3d	; 61
    56a4:	be b7       	in	r27, 0x3e	; 62
    56a6:	12 96       	adiw	r26, 0x02	; 2
    56a8:	9c 93       	st	X, r25
    56aa:	8e 93       	st	-X, r24
    56ac:	11 97       	sbiw	r26, 0x01	; 1
    56ae:	80 91 12 01 	lds	r24, 0x0112
    56b2:	82 83       	std	Z+2, r24	; 0x02
    56b4:	13 82       	std	Z+3, r1	; 0x03
    56b6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    56ba:	0f 90       	pop	r0
    56bc:	0f 90       	pop	r0
    56be:	0f 90       	pop	r0
    56c0:	0f 90       	pop	r0
    56c2:	87 e7       	ldi	r24, 0x77	; 119
    56c4:	9a e0       	ldi	r25, 0x0A	; 10
    56c6:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    56ca:	89 e7       	ldi	r24, 0x79	; 121
    56cc:	9a e0       	ldi	r25, 0x0A	; 10
    56ce:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    56d2:	00 d0       	rcall	.+0      	; 0x56d4 <command_proc+0x228>
    56d4:	00 d0       	rcall	.+0      	; 0x56d6 <command_proc+0x22a>
    56d6:	ed b7       	in	r30, 0x3d	; 61
    56d8:	fe b7       	in	r31, 0x3e	; 62
    56da:	31 96       	adiw	r30, 0x01	; 1
    56dc:	8e e8       	ldi	r24, 0x8E	; 142
    56de:	9a e0       	ldi	r25, 0x0A	; 10
    56e0:	ad b7       	in	r26, 0x3d	; 61
    56e2:	be b7       	in	r27, 0x3e	; 62
    56e4:	12 96       	adiw	r26, 0x02	; 2
    56e6:	9c 93       	st	X, r25
    56e8:	8e 93       	st	-X, r24
    56ea:	11 97       	sbiw	r26, 0x01	; 1
    56ec:	80 91 11 01 	lds	r24, 0x0111
    56f0:	82 83       	std	Z+2, r24	; 0x02
    56f2:	13 82       	std	Z+3, r1	; 0x03
    56f4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    56f8:	0f 90       	pop	r0
    56fa:	0f 90       	pop	r0
    56fc:	0f 90       	pop	r0
    56fe:	0f 90       	pop	r0
    5700:	81 e9       	ldi	r24, 0x91	; 145
    5702:	9a e0       	ldi	r25, 0x0A	; 10
    5704:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5708:	83 e9       	ldi	r24, 0x93	; 147
    570a:	9a e0       	ldi	r25, 0x0A	; 10
    570c:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    5710:	00 d0       	rcall	.+0      	; 0x5712 <command_proc+0x266>
    5712:	00 d0       	rcall	.+0      	; 0x5714 <command_proc+0x268>
    5714:	ed b7       	in	r30, 0x3d	; 61
    5716:	fe b7       	in	r31, 0x3e	; 62
    5718:	31 96       	adiw	r30, 0x01	; 1
    571a:	8a ea       	ldi	r24, 0xAA	; 170
    571c:	9a e0       	ldi	r25, 0x0A	; 10
    571e:	ad b7       	in	r26, 0x3d	; 61
    5720:	be b7       	in	r27, 0x3e	; 62
    5722:	12 96       	adiw	r26, 0x02	; 2
    5724:	9c 93       	st	X, r25
    5726:	8e 93       	st	-X, r24
    5728:	11 97       	sbiw	r26, 0x01	; 1
    572a:	80 91 10 01 	lds	r24, 0x0110
    572e:	82 83       	std	Z+2, r24	; 0x02
    5730:	13 82       	std	Z+3, r1	; 0x03
    5732:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    5736:	0f 90       	pop	r0
    5738:	0f 90       	pop	r0
    573a:	0f 90       	pop	r0
    573c:	0f 90       	pop	r0
    573e:	8d ea       	ldi	r24, 0xAD	; 173
    5740:	9a e0       	ldi	r25, 0x0A	; 10
    5742:	31 c0       	rjmp	.+98     	; 0x57a6 <command_proc+0x2fa>
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    5744:	ce 51       	subi	r28, 0x1E	; 30
    5746:	ec 2f       	mov	r30, r28
    5748:	f0 e0       	ldi	r31, 0x00	; 0
    574a:	e1 5c       	subi	r30, 0xC1	; 193
    574c:	fe 4f       	sbci	r31, 0xFE	; 254
    574e:	80 81       	ld	r24, Z
    5750:	80 93 35 02 	sts	0x0235, r24
    5754:	2e c0       	rjmp	.+92     	; 0x57b2 <command_proc+0x306>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    5756:	80 91 35 02 	lds	r24, 0x0235
    575a:	61 e0       	ldi	r22, 0x01	; 1
    575c:	07 c0       	rjmp	.+14     	; 0x576c <command_proc+0x2c0>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    575e:	80 91 35 02 	lds	r24, 0x0235
    5762:	61 e0       	ldi	r22, 0x01	; 1
    5764:	09 c0       	rjmp	.+18     	; 0x5778 <command_proc+0x2cc>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5766:	80 91 35 02 	lds	r24, 0x0235
    576a:	6a e0       	ldi	r22, 0x0A	; 10
    576c:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <mousekey_param_inc>
    5770:	20 c0       	rjmp	.+64     	; 0x57b2 <command_proc+0x306>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5772:	80 91 35 02 	lds	r24, 0x0235
    5776:	6a e0       	ldi	r22, 0x0A	; 10
    5778:	0e 94 03 26 	call	0x4c06	; 0x4c06 <mousekey_param_dec>
    577c:	1a c0       	rjmp	.+52     	; 0x57b2 <command_proc+0x306>
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    577e:	8e e1       	ldi	r24, 0x1E	; 30
    5780:	80 93 15 01 	sts	0x0115, r24
            mk_interval = MOUSEKEY_INTERVAL;
    5784:	82 e3       	ldi	r24, 0x32	; 50
    5786:	80 93 14 01 	sts	0x0114, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    578a:	85 e0       	ldi	r24, 0x05	; 5
    578c:	80 93 13 01 	sts	0x0113, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5790:	8a e0       	ldi	r24, 0x0A	; 10
    5792:	80 93 12 01 	sts	0x0112, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5796:	88 e0       	ldi	r24, 0x08	; 8
    5798:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    579c:	88 e2       	ldi	r24, 0x28	; 40
    579e:	80 93 10 01 	sts	0x0110, r24
            print("set default\n");
    57a2:	8b ef       	ldi	r24, 0xFB	; 251
    57a4:	99 e0       	ldi	r25, 0x09	; 9
    57a6:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
    57aa:	03 c0       	rjmp	.+6      	; 0x57b2 <command_proc+0x306>
            break;
        default:
            print("?");
    57ac:	88 e0       	ldi	r24, 0x08	; 8
    57ae:	9a e0       	ldi	r25, 0x0A	; 10
    57b0:	1c c0       	rjmp	.+56     	; 0x57ea <command_proc+0x33e>
            return false;
    }
    if (mousekey_param)
    57b2:	20 91 35 02 	lds	r18, 0x0235
    57b6:	22 23       	and	r18, r18
    57b8:	b1 f0       	breq	.+44     	; 0x57e6 <command_proc+0x33a>
        xprintf("M%d> ", mousekey_param);
    57ba:	00 d0       	rcall	.+0      	; 0x57bc <command_proc+0x310>
    57bc:	00 d0       	rcall	.+0      	; 0x57be <command_proc+0x312>
    57be:	ed b7       	in	r30, 0x3d	; 61
    57c0:	fe b7       	in	r31, 0x3e	; 62
    57c2:	31 96       	adiw	r30, 0x01	; 1
    57c4:	8a e0       	ldi	r24, 0x0A	; 10
    57c6:	9a e0       	ldi	r25, 0x0A	; 10
    57c8:	ad b7       	in	r26, 0x3d	; 61
    57ca:	be b7       	in	r27, 0x3e	; 62
    57cc:	12 96       	adiw	r26, 0x02	; 2
    57ce:	9c 93       	st	X, r25
    57d0:	8e 93       	st	-X, r24
    57d2:	11 97       	sbiw	r26, 0x01	; 1
    57d4:	22 83       	std	Z+2, r18	; 0x02
    57d6:	13 82       	std	Z+3, r1	; 0x03
    57d8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__xprintf>
    57dc:	0f 90       	pop	r0
    57de:	0f 90       	pop	r0
    57e0:	0f 90       	pop	r0
    57e2:	0f 90       	pop	r0
    57e4:	04 c0       	rjmp	.+8      	; 0x57ee <command_proc+0x342>
    else
        print("M>" );
    57e6:	80 e1       	ldi	r24, 0x10	; 16
    57e8:	9a e0       	ldi	r25, 0x0A	; 10
    57ea:	0e 94 4a 06 	call	0xc94	; 0xc94 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    57ee:	81 e0       	ldi	r24, 0x01	; 1
    57f0:	03 c0       	rjmp	.+6      	; 0x57f8 <command_proc+0x34c>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    57f2:	10 92 34 02 	sts	0x0234, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    57f6:	80 e0       	ldi	r24, 0x00	; 0
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    57f8:	cf 91       	pop	r28
    57fa:	08 95       	ret

000057fc <sleep_led_init>:

void sleep_led_init(void)
{
    /* Timer1 setup */
    /* CTC mode */
    TCCR1B |= _BV(WGM12);
    57fc:	e1 e8       	ldi	r30, 0x81	; 129
    57fe:	f0 e0       	ldi	r31, 0x00	; 0
    5800:	80 81       	ld	r24, Z
    5802:	88 60       	ori	r24, 0x08	; 8
    5804:	80 83       	st	Z, r24
    /* Clock selelct: clk/1 */
    TCCR1B |= _BV(CS10);
    5806:	80 81       	ld	r24, Z
    5808:	81 60       	ori	r24, 0x01	; 1
    580a:	80 83       	st	Z, r24
    /* Set TOP value */
    uint8_t sreg = SREG;
    580c:	8f b7       	in	r24, 0x3f	; 63
    cli();
    580e:	f8 94       	cli
    OCR1AH = (SLEEP_LED_TIMER_TOP>>8)&0xff;
    5810:	93 e0       	ldi	r25, 0x03	; 3
    5812:	90 93 89 00 	sts	0x0089, r25
    OCR1AL = SLEEP_LED_TIMER_TOP&0xff;
    5816:	90 ed       	ldi	r25, 0xD0	; 208
    5818:	90 93 88 00 	sts	0x0088, r25
    SREG = sreg;
    581c:	8f bf       	out	0x3f, r24	; 63
}
    581e:	08 95       	ret

00005820 <sleep_led_enable>:

void sleep_led_enable(void)
{
    /* Enable Compare Match Interrupt */
    TIMSK1 |= _BV(OCIE1A);
    5820:	ef e6       	ldi	r30, 0x6F	; 111
    5822:	f0 e0       	ldi	r31, 0x00	; 0
    5824:	80 81       	ld	r24, Z
    5826:	82 60       	ori	r24, 0x02	; 2
    5828:	80 83       	st	Z, r24
}
    582a:	08 95       	ret

0000582c <sleep_led_disable>:

void sleep_led_disable(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 &= ~_BV(OCIE1A);
    582c:	ef e6       	ldi	r30, 0x6F	; 111
    582e:	f0 e0       	ldi	r31, 0x00	; 0
    5830:	80 81       	ld	r24, Z
    5832:	8d 7f       	andi	r24, 0xFD	; 253
    5834:	80 83       	st	Z, r24
}
    5836:	08 95       	ret

00005838 <sleep_led_toggle>:

void sleep_led_toggle(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 ^= _BV(OCIE1A);
    5838:	ef e6       	ldi	r30, 0x6F	; 111
    583a:	f0 e0       	ldi	r31, 0x00	; 0
    583c:	80 81       	ld	r24, Z
    583e:	92 e0       	ldi	r25, 0x02	; 2
    5840:	89 27       	eor	r24, r25
    5842:	80 83       	st	Z, r24
}
    5844:	08 95       	ret

00005846 <__vector_17>:
255, 252, 245, 233, 218, 199, 179, 157, 135, 113, 93, 74, 58, 44, 32, 23,
15, 10, 6, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

ISR(TIMER1_COMPA_vect)
{
    5846:	1f 92       	push	r1
    5848:	0f 92       	push	r0
    584a:	0f b6       	in	r0, 0x3f	; 63
    584c:	0f 92       	push	r0
    584e:	11 24       	eor	r1, r1
    5850:	2f 93       	push	r18
    5852:	3f 93       	push	r19
    5854:	4f 93       	push	r20
    5856:	5f 93       	push	r21
    5858:	6f 93       	push	r22
    585a:	7f 93       	push	r23
    585c:	8f 93       	push	r24
    585e:	9f 93       	push	r25
    5860:	af 93       	push	r26
    5862:	bf 93       	push	r27
    5864:	ef 93       	push	r30
    5866:	ff 93       	push	r31
            uint8_t duration:2;
            uint8_t index:6;
        } pwm;
    } timer = { .row = 0 };

    timer.row++;
    5868:	80 91 36 02 	lds	r24, 0x0236
    586c:	90 91 37 02 	lds	r25, 0x0237
    5870:	01 96       	adiw	r24, 0x01	; 1
    5872:	90 93 37 02 	sts	0x0237, r25
    5876:	80 93 36 02 	sts	0x0236, r24
    
    // LED on
    if (timer.pwm.count == 0) {
    587a:	88 23       	and	r24, r24
    587c:	19 f4       	brne	.+6      	; 0x5884 <__vector_17+0x3e>
        led_set(1<<USB_LED_CAPS_LOCK);
    587e:	82 e0       	ldi	r24, 0x02	; 2
    5880:	0e 94 c0 0a 	call	0x1580	; 0x1580 <led_set>
    }
    // LED off
    if (timer.pwm.count == pgm_read_byte(&breathing_table[timer.pwm.index])) {
    5884:	e0 91 37 02 	lds	r30, 0x0237
    5888:	e6 95       	lsr	r30
    588a:	e6 95       	lsr	r30
    588c:	f0 e0       	ldi	r31, 0x00	; 0
    588e:	e7 55       	subi	r30, 0x57	; 87
    5890:	f4 4f       	sbci	r31, 0xF4	; 244
    5892:	e4 91       	lpm	r30, Z
    5894:	80 91 36 02 	lds	r24, 0x0236
    5898:	8e 17       	cp	r24, r30
    589a:	19 f4       	brne	.+6      	; 0x58a2 <__vector_17+0x5c>
        led_set(0);
    589c:	80 e0       	ldi	r24, 0x00	; 0
    589e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <led_set>
    }
}
    58a2:	ff 91       	pop	r31
    58a4:	ef 91       	pop	r30
    58a6:	bf 91       	pop	r27
    58a8:	af 91       	pop	r26
    58aa:	9f 91       	pop	r25
    58ac:	8f 91       	pop	r24
    58ae:	7f 91       	pop	r23
    58b0:	6f 91       	pop	r22
    58b2:	5f 91       	pop	r21
    58b4:	4f 91       	pop	r20
    58b6:	3f 91       	pop	r19
    58b8:	2f 91       	pop	r18
    58ba:	0f 90       	pop	r0
    58bc:	0f be       	out	0x3f, r0	; 63
    58be:	0f 90       	pop	r0
    58c0:	1f 90       	pop	r1
    58c2:	18 95       	reti

000058c4 <__fixsfsi>:
    58c4:	04 d0       	rcall	.+8      	; 0x58ce <__fixunssfsi>
    58c6:	68 94       	set
    58c8:	b1 11       	cpse	r27, r1
    58ca:	8d c0       	rjmp	.+282    	; 0x59e6 <__fp_szero>
    58cc:	08 95       	ret

000058ce <__fixunssfsi>:
    58ce:	70 d0       	rcall	.+224    	; 0x59b0 <__fp_splitA>
    58d0:	88 f0       	brcs	.+34     	; 0x58f4 <__fixunssfsi+0x26>
    58d2:	9f 57       	subi	r25, 0x7F	; 127
    58d4:	90 f0       	brcs	.+36     	; 0x58fa <__fixunssfsi+0x2c>
    58d6:	b9 2f       	mov	r27, r25
    58d8:	99 27       	eor	r25, r25
    58da:	b7 51       	subi	r27, 0x17	; 23
    58dc:	a0 f0       	brcs	.+40     	; 0x5906 <__fixunssfsi+0x38>
    58de:	d1 f0       	breq	.+52     	; 0x5914 <__fixunssfsi+0x46>
    58e0:	66 0f       	add	r22, r22
    58e2:	77 1f       	adc	r23, r23
    58e4:	88 1f       	adc	r24, r24
    58e6:	99 1f       	adc	r25, r25
    58e8:	1a f0       	brmi	.+6      	; 0x58f0 <__fixunssfsi+0x22>
    58ea:	ba 95       	dec	r27
    58ec:	c9 f7       	brne	.-14     	; 0x58e0 <__fixunssfsi+0x12>
    58ee:	12 c0       	rjmp	.+36     	; 0x5914 <__fixunssfsi+0x46>
    58f0:	b1 30       	cpi	r27, 0x01	; 1
    58f2:	81 f0       	breq	.+32     	; 0x5914 <__fixunssfsi+0x46>
    58f4:	77 d0       	rcall	.+238    	; 0x59e4 <__fp_zero>
    58f6:	b1 e0       	ldi	r27, 0x01	; 1
    58f8:	08 95       	ret
    58fa:	74 c0       	rjmp	.+232    	; 0x59e4 <__fp_zero>
    58fc:	67 2f       	mov	r22, r23
    58fe:	78 2f       	mov	r23, r24
    5900:	88 27       	eor	r24, r24
    5902:	b8 5f       	subi	r27, 0xF8	; 248
    5904:	39 f0       	breq	.+14     	; 0x5914 <__fixunssfsi+0x46>
    5906:	b9 3f       	cpi	r27, 0xF9	; 249
    5908:	cc f3       	brlt	.-14     	; 0x58fc <__fixunssfsi+0x2e>
    590a:	86 95       	lsr	r24
    590c:	77 95       	ror	r23
    590e:	67 95       	ror	r22
    5910:	b3 95       	inc	r27
    5912:	d9 f7       	brne	.-10     	; 0x590a <__fixunssfsi+0x3c>
    5914:	3e f4       	brtc	.+14     	; 0x5924 <__fixunssfsi+0x56>
    5916:	90 95       	com	r25
    5918:	80 95       	com	r24
    591a:	70 95       	com	r23
    591c:	61 95       	neg	r22
    591e:	7f 4f       	sbci	r23, 0xFF	; 255
    5920:	8f 4f       	sbci	r24, 0xFF	; 255
    5922:	9f 4f       	sbci	r25, 0xFF	; 255
    5924:	08 95       	ret

00005926 <__floatunsisf>:
    5926:	e8 94       	clt
    5928:	09 c0       	rjmp	.+18     	; 0x593c <__floatsisf+0x12>

0000592a <__floatsisf>:
    592a:	97 fb       	bst	r25, 7
    592c:	3e f4       	brtc	.+14     	; 0x593c <__floatsisf+0x12>
    592e:	90 95       	com	r25
    5930:	80 95       	com	r24
    5932:	70 95       	com	r23
    5934:	61 95       	neg	r22
    5936:	7f 4f       	sbci	r23, 0xFF	; 255
    5938:	8f 4f       	sbci	r24, 0xFF	; 255
    593a:	9f 4f       	sbci	r25, 0xFF	; 255
    593c:	99 23       	and	r25, r25
    593e:	a9 f0       	breq	.+42     	; 0x596a <__floatsisf+0x40>
    5940:	f9 2f       	mov	r31, r25
    5942:	96 e9       	ldi	r25, 0x96	; 150
    5944:	bb 27       	eor	r27, r27
    5946:	93 95       	inc	r25
    5948:	f6 95       	lsr	r31
    594a:	87 95       	ror	r24
    594c:	77 95       	ror	r23
    594e:	67 95       	ror	r22
    5950:	b7 95       	ror	r27
    5952:	f1 11       	cpse	r31, r1
    5954:	f8 cf       	rjmp	.-16     	; 0x5946 <__floatsisf+0x1c>
    5956:	fa f4       	brpl	.+62     	; 0x5996 <__floatsisf+0x6c>
    5958:	bb 0f       	add	r27, r27
    595a:	11 f4       	brne	.+4      	; 0x5960 <__floatsisf+0x36>
    595c:	60 ff       	sbrs	r22, 0
    595e:	1b c0       	rjmp	.+54     	; 0x5996 <__floatsisf+0x6c>
    5960:	6f 5f       	subi	r22, 0xFF	; 255
    5962:	7f 4f       	sbci	r23, 0xFF	; 255
    5964:	8f 4f       	sbci	r24, 0xFF	; 255
    5966:	9f 4f       	sbci	r25, 0xFF	; 255
    5968:	16 c0       	rjmp	.+44     	; 0x5996 <__floatsisf+0x6c>
    596a:	88 23       	and	r24, r24
    596c:	11 f0       	breq	.+4      	; 0x5972 <__floatsisf+0x48>
    596e:	96 e9       	ldi	r25, 0x96	; 150
    5970:	11 c0       	rjmp	.+34     	; 0x5994 <__floatsisf+0x6a>
    5972:	77 23       	and	r23, r23
    5974:	21 f0       	breq	.+8      	; 0x597e <__floatsisf+0x54>
    5976:	9e e8       	ldi	r25, 0x8E	; 142
    5978:	87 2f       	mov	r24, r23
    597a:	76 2f       	mov	r23, r22
    597c:	05 c0       	rjmp	.+10     	; 0x5988 <__floatsisf+0x5e>
    597e:	66 23       	and	r22, r22
    5980:	71 f0       	breq	.+28     	; 0x599e <__floatsisf+0x74>
    5982:	96 e8       	ldi	r25, 0x86	; 134
    5984:	86 2f       	mov	r24, r22
    5986:	70 e0       	ldi	r23, 0x00	; 0
    5988:	60 e0       	ldi	r22, 0x00	; 0
    598a:	2a f0       	brmi	.+10     	; 0x5996 <__floatsisf+0x6c>
    598c:	9a 95       	dec	r25
    598e:	66 0f       	add	r22, r22
    5990:	77 1f       	adc	r23, r23
    5992:	88 1f       	adc	r24, r24
    5994:	da f7       	brpl	.-10     	; 0x598c <__floatsisf+0x62>
    5996:	88 0f       	add	r24, r24
    5998:	96 95       	lsr	r25
    599a:	87 95       	ror	r24
    599c:	97 f9       	bld	r25, 7
    599e:	08 95       	ret

000059a0 <__fp_split3>:
    59a0:	57 fd       	sbrc	r21, 7
    59a2:	90 58       	subi	r25, 0x80	; 128
    59a4:	44 0f       	add	r20, r20
    59a6:	55 1f       	adc	r21, r21
    59a8:	59 f0       	breq	.+22     	; 0x59c0 <__fp_splitA+0x10>
    59aa:	5f 3f       	cpi	r21, 0xFF	; 255
    59ac:	71 f0       	breq	.+28     	; 0x59ca <__fp_splitA+0x1a>
    59ae:	47 95       	ror	r20

000059b0 <__fp_splitA>:
    59b0:	88 0f       	add	r24, r24
    59b2:	97 fb       	bst	r25, 7
    59b4:	99 1f       	adc	r25, r25
    59b6:	61 f0       	breq	.+24     	; 0x59d0 <__fp_splitA+0x20>
    59b8:	9f 3f       	cpi	r25, 0xFF	; 255
    59ba:	79 f0       	breq	.+30     	; 0x59da <__fp_splitA+0x2a>
    59bc:	87 95       	ror	r24
    59be:	08 95       	ret
    59c0:	12 16       	cp	r1, r18
    59c2:	13 06       	cpc	r1, r19
    59c4:	14 06       	cpc	r1, r20
    59c6:	55 1f       	adc	r21, r21
    59c8:	f2 cf       	rjmp	.-28     	; 0x59ae <__fp_split3+0xe>
    59ca:	46 95       	lsr	r20
    59cc:	f1 df       	rcall	.-30     	; 0x59b0 <__fp_splitA>
    59ce:	08 c0       	rjmp	.+16     	; 0x59e0 <__fp_splitA+0x30>
    59d0:	16 16       	cp	r1, r22
    59d2:	17 06       	cpc	r1, r23
    59d4:	18 06       	cpc	r1, r24
    59d6:	99 1f       	adc	r25, r25
    59d8:	f1 cf       	rjmp	.-30     	; 0x59bc <__fp_splitA+0xc>
    59da:	86 95       	lsr	r24
    59dc:	71 05       	cpc	r23, r1
    59de:	61 05       	cpc	r22, r1
    59e0:	08 94       	sec
    59e2:	08 95       	ret

000059e4 <__fp_zero>:
    59e4:	e8 94       	clt

000059e6 <__fp_szero>:
    59e6:	bb 27       	eor	r27, r27
    59e8:	66 27       	eor	r22, r22
    59ea:	77 27       	eor	r23, r23
    59ec:	cb 01       	movw	r24, r22
    59ee:	97 f9       	bld	r25, 7
    59f0:	08 95       	ret

000059f2 <__mulsf3>:
    59f2:	0b d0       	rcall	.+22     	; 0x5a0a <__mulsf3x>
    59f4:	78 c0       	rjmp	.+240    	; 0x5ae6 <__fp_round>
    59f6:	69 d0       	rcall	.+210    	; 0x5aca <__fp_pscA>
    59f8:	28 f0       	brcs	.+10     	; 0x5a04 <__mulsf3+0x12>
    59fa:	6e d0       	rcall	.+220    	; 0x5ad8 <__fp_pscB>
    59fc:	18 f0       	brcs	.+6      	; 0x5a04 <__mulsf3+0x12>
    59fe:	95 23       	and	r25, r21
    5a00:	09 f0       	breq	.+2      	; 0x5a04 <__mulsf3+0x12>
    5a02:	5a c0       	rjmp	.+180    	; 0x5ab8 <__fp_inf>
    5a04:	5f c0       	rjmp	.+190    	; 0x5ac4 <__fp_nan>
    5a06:	11 24       	eor	r1, r1
    5a08:	ee cf       	rjmp	.-36     	; 0x59e6 <__fp_szero>

00005a0a <__mulsf3x>:
    5a0a:	ca df       	rcall	.-108    	; 0x59a0 <__fp_split3>
    5a0c:	a0 f3       	brcs	.-24     	; 0x59f6 <__mulsf3+0x4>

00005a0e <__mulsf3_pse>:
    5a0e:	95 9f       	mul	r25, r21
    5a10:	d1 f3       	breq	.-12     	; 0x5a06 <__mulsf3+0x14>
    5a12:	95 0f       	add	r25, r21
    5a14:	50 e0       	ldi	r21, 0x00	; 0
    5a16:	55 1f       	adc	r21, r21
    5a18:	62 9f       	mul	r22, r18
    5a1a:	f0 01       	movw	r30, r0
    5a1c:	72 9f       	mul	r23, r18
    5a1e:	bb 27       	eor	r27, r27
    5a20:	f0 0d       	add	r31, r0
    5a22:	b1 1d       	adc	r27, r1
    5a24:	63 9f       	mul	r22, r19
    5a26:	aa 27       	eor	r26, r26
    5a28:	f0 0d       	add	r31, r0
    5a2a:	b1 1d       	adc	r27, r1
    5a2c:	aa 1f       	adc	r26, r26
    5a2e:	64 9f       	mul	r22, r20
    5a30:	66 27       	eor	r22, r22
    5a32:	b0 0d       	add	r27, r0
    5a34:	a1 1d       	adc	r26, r1
    5a36:	66 1f       	adc	r22, r22
    5a38:	82 9f       	mul	r24, r18
    5a3a:	22 27       	eor	r18, r18
    5a3c:	b0 0d       	add	r27, r0
    5a3e:	a1 1d       	adc	r26, r1
    5a40:	62 1f       	adc	r22, r18
    5a42:	73 9f       	mul	r23, r19
    5a44:	b0 0d       	add	r27, r0
    5a46:	a1 1d       	adc	r26, r1
    5a48:	62 1f       	adc	r22, r18
    5a4a:	83 9f       	mul	r24, r19
    5a4c:	a0 0d       	add	r26, r0
    5a4e:	61 1d       	adc	r22, r1
    5a50:	22 1f       	adc	r18, r18
    5a52:	74 9f       	mul	r23, r20
    5a54:	33 27       	eor	r19, r19
    5a56:	a0 0d       	add	r26, r0
    5a58:	61 1d       	adc	r22, r1
    5a5a:	23 1f       	adc	r18, r19
    5a5c:	84 9f       	mul	r24, r20
    5a5e:	60 0d       	add	r22, r0
    5a60:	21 1d       	adc	r18, r1
    5a62:	82 2f       	mov	r24, r18
    5a64:	76 2f       	mov	r23, r22
    5a66:	6a 2f       	mov	r22, r26
    5a68:	11 24       	eor	r1, r1
    5a6a:	9f 57       	subi	r25, 0x7F	; 127
    5a6c:	50 40       	sbci	r21, 0x00	; 0
    5a6e:	8a f0       	brmi	.+34     	; 0x5a92 <__mulsf3_pse+0x84>
    5a70:	e1 f0       	breq	.+56     	; 0x5aaa <__mulsf3_pse+0x9c>
    5a72:	88 23       	and	r24, r24
    5a74:	4a f0       	brmi	.+18     	; 0x5a88 <__mulsf3_pse+0x7a>
    5a76:	ee 0f       	add	r30, r30
    5a78:	ff 1f       	adc	r31, r31
    5a7a:	bb 1f       	adc	r27, r27
    5a7c:	66 1f       	adc	r22, r22
    5a7e:	77 1f       	adc	r23, r23
    5a80:	88 1f       	adc	r24, r24
    5a82:	91 50       	subi	r25, 0x01	; 1
    5a84:	50 40       	sbci	r21, 0x00	; 0
    5a86:	a9 f7       	brne	.-22     	; 0x5a72 <__mulsf3_pse+0x64>
    5a88:	9e 3f       	cpi	r25, 0xFE	; 254
    5a8a:	51 05       	cpc	r21, r1
    5a8c:	70 f0       	brcs	.+28     	; 0x5aaa <__mulsf3_pse+0x9c>
    5a8e:	14 c0       	rjmp	.+40     	; 0x5ab8 <__fp_inf>
    5a90:	aa cf       	rjmp	.-172    	; 0x59e6 <__fp_szero>
    5a92:	5f 3f       	cpi	r21, 0xFF	; 255
    5a94:	ec f3       	brlt	.-6      	; 0x5a90 <__mulsf3_pse+0x82>
    5a96:	98 3e       	cpi	r25, 0xE8	; 232
    5a98:	dc f3       	brlt	.-10     	; 0x5a90 <__mulsf3_pse+0x82>
    5a9a:	86 95       	lsr	r24
    5a9c:	77 95       	ror	r23
    5a9e:	67 95       	ror	r22
    5aa0:	b7 95       	ror	r27
    5aa2:	f7 95       	ror	r31
    5aa4:	e7 95       	ror	r30
    5aa6:	9f 5f       	subi	r25, 0xFF	; 255
    5aa8:	c1 f7       	brne	.-16     	; 0x5a9a <__mulsf3_pse+0x8c>
    5aaa:	fe 2b       	or	r31, r30
    5aac:	88 0f       	add	r24, r24
    5aae:	91 1d       	adc	r25, r1
    5ab0:	96 95       	lsr	r25
    5ab2:	87 95       	ror	r24
    5ab4:	97 f9       	bld	r25, 7
    5ab6:	08 95       	ret

00005ab8 <__fp_inf>:
    5ab8:	97 f9       	bld	r25, 7
    5aba:	9f 67       	ori	r25, 0x7F	; 127
    5abc:	80 e8       	ldi	r24, 0x80	; 128
    5abe:	70 e0       	ldi	r23, 0x00	; 0
    5ac0:	60 e0       	ldi	r22, 0x00	; 0
    5ac2:	08 95       	ret

00005ac4 <__fp_nan>:
    5ac4:	9f ef       	ldi	r25, 0xFF	; 255
    5ac6:	80 ec       	ldi	r24, 0xC0	; 192
    5ac8:	08 95       	ret

00005aca <__fp_pscA>:
    5aca:	00 24       	eor	r0, r0
    5acc:	0a 94       	dec	r0
    5ace:	16 16       	cp	r1, r22
    5ad0:	17 06       	cpc	r1, r23
    5ad2:	18 06       	cpc	r1, r24
    5ad4:	09 06       	cpc	r0, r25
    5ad6:	08 95       	ret

00005ad8 <__fp_pscB>:
    5ad8:	00 24       	eor	r0, r0
    5ada:	0a 94       	dec	r0
    5adc:	12 16       	cp	r1, r18
    5ade:	13 06       	cpc	r1, r19
    5ae0:	14 06       	cpc	r1, r20
    5ae2:	05 06       	cpc	r0, r21
    5ae4:	08 95       	ret

00005ae6 <__fp_round>:
    5ae6:	09 2e       	mov	r0, r25
    5ae8:	03 94       	inc	r0
    5aea:	00 0c       	add	r0, r0
    5aec:	11 f4       	brne	.+4      	; 0x5af2 <__fp_round+0xc>
    5aee:	88 23       	and	r24, r24
    5af0:	52 f0       	brmi	.+20     	; 0x5b06 <__fp_round+0x20>
    5af2:	bb 0f       	add	r27, r27
    5af4:	40 f4       	brcc	.+16     	; 0x5b06 <__fp_round+0x20>
    5af6:	bf 2b       	or	r27, r31
    5af8:	11 f4       	brne	.+4      	; 0x5afe <__fp_round+0x18>
    5afa:	60 ff       	sbrs	r22, 0
    5afc:	04 c0       	rjmp	.+8      	; 0x5b06 <__fp_round+0x20>
    5afe:	6f 5f       	subi	r22, 0xFF	; 255
    5b00:	7f 4f       	sbci	r23, 0xFF	; 255
    5b02:	8f 4f       	sbci	r24, 0xFF	; 255
    5b04:	9f 4f       	sbci	r25, 0xFF	; 255
    5b06:	08 95       	ret

00005b08 <__udivmodqi4>:
    5b08:	99 1b       	sub	r25, r25
    5b0a:	79 e0       	ldi	r23, 0x09	; 9
    5b0c:	04 c0       	rjmp	.+8      	; 0x5b16 <__udivmodqi4_ep>

00005b0e <__udivmodqi4_loop>:
    5b0e:	99 1f       	adc	r25, r25
    5b10:	96 17       	cp	r25, r22
    5b12:	08 f0       	brcs	.+2      	; 0x5b16 <__udivmodqi4_ep>
    5b14:	96 1b       	sub	r25, r22

00005b16 <__udivmodqi4_ep>:
    5b16:	88 1f       	adc	r24, r24
    5b18:	7a 95       	dec	r23
    5b1a:	c9 f7       	brne	.-14     	; 0x5b0e <__udivmodqi4_loop>
    5b1c:	80 95       	com	r24
    5b1e:	08 95       	ret

00005b20 <__divmodhi4>:
    5b20:	97 fb       	bst	r25, 7
    5b22:	09 2e       	mov	r0, r25
    5b24:	07 26       	eor	r0, r23
    5b26:	0a d0       	rcall	.+20     	; 0x5b3c <__divmodhi4_neg1>
    5b28:	77 fd       	sbrc	r23, 7
    5b2a:	04 d0       	rcall	.+8      	; 0x5b34 <__divmodhi4_neg2>
    5b2c:	0c d0       	rcall	.+24     	; 0x5b46 <__udivmodhi4>
    5b2e:	06 d0       	rcall	.+12     	; 0x5b3c <__divmodhi4_neg1>
    5b30:	00 20       	and	r0, r0
    5b32:	1a f4       	brpl	.+6      	; 0x5b3a <__divmodhi4_exit>

00005b34 <__divmodhi4_neg2>:
    5b34:	70 95       	com	r23
    5b36:	61 95       	neg	r22
    5b38:	7f 4f       	sbci	r23, 0xFF	; 255

00005b3a <__divmodhi4_exit>:
    5b3a:	08 95       	ret

00005b3c <__divmodhi4_neg1>:
    5b3c:	f6 f7       	brtc	.-4      	; 0x5b3a <__divmodhi4_exit>
    5b3e:	90 95       	com	r25
    5b40:	81 95       	neg	r24
    5b42:	9f 4f       	sbci	r25, 0xFF	; 255
    5b44:	08 95       	ret

00005b46 <__udivmodhi4>:
    5b46:	aa 1b       	sub	r26, r26
    5b48:	bb 1b       	sub	r27, r27
    5b4a:	51 e1       	ldi	r21, 0x11	; 17
    5b4c:	07 c0       	rjmp	.+14     	; 0x5b5c <__udivmodhi4_ep>

00005b4e <__udivmodhi4_loop>:
    5b4e:	aa 1f       	adc	r26, r26
    5b50:	bb 1f       	adc	r27, r27
    5b52:	a6 17       	cp	r26, r22
    5b54:	b7 07       	cpc	r27, r23
    5b56:	10 f0       	brcs	.+4      	; 0x5b5c <__udivmodhi4_ep>
    5b58:	a6 1b       	sub	r26, r22
    5b5a:	b7 0b       	sbc	r27, r23

00005b5c <__udivmodhi4_ep>:
    5b5c:	88 1f       	adc	r24, r24
    5b5e:	99 1f       	adc	r25, r25
    5b60:	5a 95       	dec	r21
    5b62:	a9 f7       	brne	.-22     	; 0x5b4e <__udivmodhi4_loop>
    5b64:	80 95       	com	r24
    5b66:	90 95       	com	r25
    5b68:	bc 01       	movw	r22, r24
    5b6a:	cd 01       	movw	r24, r26
    5b6c:	08 95       	ret

00005b6e <__eerd_byte_m32u4>:
    5b6e:	f9 99       	sbic	0x1f, 1	; 31
    5b70:	fe cf       	rjmp	.-4      	; 0x5b6e <__eerd_byte_m32u4>
    5b72:	92 bd       	out	0x22, r25	; 34
    5b74:	81 bd       	out	0x21, r24	; 33
    5b76:	f8 9a       	sbi	0x1f, 0	; 31
    5b78:	99 27       	eor	r25, r25
    5b7a:	80 b5       	in	r24, 0x20	; 32
    5b7c:	08 95       	ret

00005b7e <__eerd_word_m32u4>:
    5b7e:	a8 e1       	ldi	r26, 0x18	; 24
    5b80:	b0 e0       	ldi	r27, 0x00	; 0
    5b82:	42 e0       	ldi	r20, 0x02	; 2
    5b84:	50 e0       	ldi	r21, 0x00	; 0
    5b86:	0c 94 da 2d 	jmp	0x5bb4	; 0x5bb4 <__eerd_blraw_m32u4>

00005b8a <__eewr_byte_m32u4>:
    5b8a:	26 2f       	mov	r18, r22

00005b8c <__eewr_r18_m32u4>:
    5b8c:	f9 99       	sbic	0x1f, 1	; 31
    5b8e:	fe cf       	rjmp	.-4      	; 0x5b8c <__eewr_r18_m32u4>
    5b90:	1f ba       	out	0x1f, r1	; 31
    5b92:	92 bd       	out	0x22, r25	; 34
    5b94:	81 bd       	out	0x21, r24	; 33
    5b96:	20 bd       	out	0x20, r18	; 32
    5b98:	0f b6       	in	r0, 0x3f	; 63
    5b9a:	f8 94       	cli
    5b9c:	fa 9a       	sbi	0x1f, 2	; 31
    5b9e:	f9 9a       	sbi	0x1f, 1	; 31
    5ba0:	0f be       	out	0x3f, r0	; 63
    5ba2:	01 96       	adiw	r24, 0x01	; 1
    5ba4:	08 95       	ret

00005ba6 <__eewr_word_m32u4>:
    5ba6:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <__eewr_byte_m32u4>
    5baa:	27 2f       	mov	r18, r23
    5bac:	0c 94 c6 2d 	jmp	0x5b8c	; 0x5b8c <__eewr_r18_m32u4>

00005bb0 <__eerd_block_m32u4>:
    5bb0:	dc 01       	movw	r26, r24
    5bb2:	cb 01       	movw	r24, r22

00005bb4 <__eerd_blraw_m32u4>:
    5bb4:	fc 01       	movw	r30, r24
    5bb6:	f9 99       	sbic	0x1f, 1	; 31
    5bb8:	fe cf       	rjmp	.-4      	; 0x5bb6 <__eerd_blraw_m32u4+0x2>
    5bba:	06 c0       	rjmp	.+12     	; 0x5bc8 <__eerd_blraw_m32u4+0x14>
    5bbc:	f2 bd       	out	0x22, r31	; 34
    5bbe:	e1 bd       	out	0x21, r30	; 33
    5bc0:	f8 9a       	sbi	0x1f, 0	; 31
    5bc2:	31 96       	adiw	r30, 0x01	; 1
    5bc4:	00 b4       	in	r0, 0x20	; 32
    5bc6:	0d 92       	st	X+, r0
    5bc8:	41 50       	subi	r20, 0x01	; 1
    5bca:	50 40       	sbci	r21, 0x00	; 0
    5bcc:	b8 f7       	brcc	.-18     	; 0x5bbc <__eerd_blraw_m32u4+0x8>
    5bce:	08 95       	ret

00005bd0 <_exit>:
    5bd0:	f8 94       	cli

00005bd2 <__stop_program>:
    5bd2:	ff cf       	rjmp	.-2      	; 0x5bd2 <__stop_program>
