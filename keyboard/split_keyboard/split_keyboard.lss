
split_keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000581c  000058b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000581c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f5  00800148  00800148  000058f8  2**0
                  ALLOC
  3 .noinit       00000004  0080023d  0080023d  000058f8  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000058f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000007e  00000000  00000000  000061b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000030  00000000  00000000  0000622e  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006260  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000a80  00000000  00000000  000062a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00010faf  00000000  00000000  00006d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004b2f  00000000  00000000  00017ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000086e6  00000000  00000000  0001c7fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001dc8  00000000  00000000  00024ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000046d3  00000000  00000000  00026cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000876b  00000000  00000000  0002b37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb0  00000000  00000000  00033aea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__ctors_end>
       4:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__vector_1>
       8:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
       c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      10:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      14:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      18:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      1c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      20:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      24:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      28:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__vector_10>
      2c:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_11>
      30:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      34:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      38:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      3c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      40:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      44:	0c 94 31 2a 	jmp	0x5462	; 0x5462 <__vector_17>
      48:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      4c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      50:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      54:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__vector_21>
      58:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      5c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      60:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      64:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      68:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      6c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      70:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      74:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      78:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      7c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      80:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      84:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      88:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      8c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      90:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__vector_36>
      94:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      98:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      9c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      a0:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      a4:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      a8:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__bad_interrupt>
      ac:	2d 12       	cpse	r2, r29
      ae:	4f 12       	cpse	r4, r31
      b0:	3d 13       	cpse	r19, r29
      b2:	4f 12       	cpse	r4, r31
      b4:	3d 13       	cpse	r19, r29
      b6:	94 12       	cpse	r9, r20
      b8:	b7 12       	cpse	r11, r23
      ba:	3d 13       	cpse	r19, r29
      bc:	0c 13       	cpse	r16, r28
      be:	1f 13       	cpse	r17, r31
      c0:	6c 16       	cp	r6, r28
      c2:	6c 16       	cp	r6, r28
      c4:	8a 16       	cp	r8, r26
      c6:	8a 16       	cp	r8, r26
      c8:	d5 16       	cp	r13, r21
      ca:	f3 16       	cp	r15, r19
      cc:	69 18       	sub	r6, r9
      ce:	69 18       	sub	r6, r9
      d0:	fe 16       	cp	r15, r30
      d2:	69 18       	sub	r6, r9
      d4:	af 17       	cp	r26, r31
      d6:	af 17       	cp	r26, r31
      d8:	5a 18       	sub	r5, r10
      da:	69 18       	sub	r6, r9
      dc:	69 18       	sub	r6, r9
      de:	63 18       	sub	r6, r3
      e0:	bc 17       	cp	r27, r28
      e2:	bc 17       	cp	r27, r28
      e4:	bc 17       	cp	r27, r28
      e6:	bc 17       	cp	r27, r28
      e8:	bc 17       	cp	r27, r28
      ea:	bc 17       	cp	r27, r28
      ec:	bc 17       	cp	r27, r28
      ee:	bc 17       	cp	r27, r28
      f0:	bc 17       	cp	r27, r28
      f2:	bc 17       	cp	r27, r28
      f4:	bc 17       	cp	r27, r28
      f6:	bc 17       	cp	r27, r28
      f8:	bc 17       	cp	r27, r28
      fa:	bc 17       	cp	r27, r28
      fc:	bc 17       	cp	r27, r28
      fe:	bc 17       	cp	r27, r28
     100:	cb 17       	cp	r28, r27
     102:	d8 17       	cp	r29, r24
     104:	df 17       	cp	r29, r31
     106:	e6 17       	cp	r30, r22
     108:	f0 17       	cp	r31, r16

0000010a <__trampolines_end>:
     10a:	14 00       	.word	0x0014	; ????
     10c:	1a 00       	.word	0x001a	; ????
     10e:	08 00       	.word	0x0008	; ????
     110:	15 00       	.word	0x0015	; ????
     112:	17 00       	.word	0x0017	; ????
     114:	00 00       	nop
     116:	04 00       	.word	0x0004	; ????
     118:	16 00       	.word	0x0016	; ????
     11a:	07 00       	.word	0x0007	; ????
     11c:	09 00       	.word	0x0009	; ????
     11e:	0a 00       	.word	0x000a	; ????
     120:	00 00       	nop
     122:	1d 00       	.word	0x001d	; ????
     124:	1b 00       	.word	0x001b	; ????
     126:	06 00       	.word	0x0006	; ????
     128:	19 00       	.word	0x0019	; ????
     12a:	05 00       	.word	0x0005	; ????
     12c:	00 00       	nop
     12e:	29 00       	.word	0x0029	; ????
     130:	39 28       	or	r3, r9
     132:	2b 00       	.word	0x002b	; ????
     134:	00 22       	and	r0, r16
     136:	2c 00       	.word	0x002c	; ????
     138:	e0 00       	.word	0x00e0	; ????
     13a:	00 00       	nop
     13c:	1c 00       	.word	0x001c	; ????
     13e:	18 00       	.word	0x0018	; ????
     140:	0c 00       	.word	0x000c	; ????
     142:	12 00       	.word	0x0012	; ????
     144:	13 00       	.word	0x0013	; ????
     146:	00 00       	nop
     148:	0b 00       	.word	0x000b	; ????
     14a:	0d 00       	.word	0x000d	; ????
     14c:	0e 00       	.word	0x000e	; ????
     14e:	0f 00       	.word	0x000f	; ????
     150:	33 00       	.word	0x0033	; ????
     152:	00 00       	nop
     154:	11 00       	.word	0x0011	; ????
     156:	10 00       	.word	0x0010	; ????
     158:	36 00       	.word	0x0036	; ????
     15a:	37 00       	.word	0x0037	; ????
     15c:	38 00       	.word	0x0038	; ????
     15e:	f0 a3       	std	Z+32, r31	; 0x20
     160:	28 00       	.word	0x0028	; ????
     162:	2a 00       	.word	0x002a	; ????
     164:	51 00       	.word	0x0051	; ????
     166:	34 00       	.word	0x0034	; ????
     168:	e6 00       	.word	0x00e6	; ????
     16a:	34 00       	.word	0x0034	; ????
     16c:	36 00       	.word	0x0036	; ????
     16e:	37 00       	.word	0x0037	; ????
     170:	13 00       	.word	0x0013	; ????
     172:	1c 00       	.word	0x001c	; ????
     174:	00 00       	nop
     176:	04 00       	.word	0x0004	; ????
     178:	12 00       	.word	0x0012	; ????
     17a:	08 00       	.word	0x0008	; ????
     17c:	18 00       	.word	0x0018	; ????
     17e:	0c 00       	.word	0x000c	; ????
     180:	00 00       	nop
     182:	33 00       	.word	0x0033	; ????
     184:	14 00       	.word	0x0014	; ????
     186:	0d 00       	.word	0x000d	; ????
     188:	0e 00       	.word	0x000e	; ????
     18a:	1b 00       	.word	0x001b	; ????
     18c:	00 00       	nop
     18e:	01 00       	.word	0x0001	; ????
     190:	01 00       	.word	0x0001	; ????
     192:	01 00       	.word	0x0001	; ????
     194:	01 00       	.word	0x0001	; ????
     196:	01 00       	.word	0x0001	; ????
     198:	01 00       	.word	0x0001	; ????
     19a:	00 00       	nop
     19c:	09 00       	.word	0x0009	; ????
     19e:	0a 00       	.word	0x000a	; ????
     1a0:	06 00       	.word	0x0006	; ????
     1a2:	15 00       	.word	0x0015	; ????
     1a4:	0f 00       	.word	0x000f	; ????
     1a6:	00 00       	nop
     1a8:	07 00       	.word	0x0007	; ????
     1aa:	0b 00       	.word	0x000b	; ????
     1ac:	17 00       	.word	0x0017	; ????
     1ae:	11 00       	.word	0x0011	; ????
     1b0:	16 00       	.word	0x0016	; ????
     1b2:	00 00       	nop
     1b4:	05 00       	.word	0x0005	; ????
     1b6:	10 00       	.word	0x0010	; ????
     1b8:	1a 00       	.word	0x001a	; ????
     1ba:	19 00       	.word	0x0019	; ????
     1bc:	1d 00       	.word	0x001d	; ????
     1be:	01 00       	.word	0x0001	; ????
     1c0:	01 00       	.word	0x0001	; ????
     1c2:	01 00       	.word	0x0001	; ????
     1c4:	01 00       	.word	0x0001	; ????
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	01 00       	.word	0x0001	; ????
     1ca:	14 00       	.word	0x0014	; ????
     1cc:	1a 00       	.word	0x001a	; ????
     1ce:	09 00       	.word	0x0009	; ????
     1d0:	13 00       	.word	0x0013	; ????
     1d2:	0a 00       	.word	0x000a	; ????
     1d4:	00 00       	nop
     1d6:	04 00       	.word	0x0004	; ????
     1d8:	15 00       	.word	0x0015	; ????
     1da:	16 00       	.word	0x0016	; ????
     1dc:	17 00       	.word	0x0017	; ????
     1de:	07 00       	.word	0x0007	; ????
     1e0:	00 00       	nop
     1e2:	1d 00       	.word	0x001d	; ????
     1e4:	1b 00       	.word	0x001b	; ????
     1e6:	06 00       	.word	0x0006	; ????
     1e8:	19 00       	.word	0x0019	; ????
     1ea:	05 00       	.word	0x0005	; ????
     1ec:	00 00       	nop
     1ee:	01 00       	.word	0x0001	; ????
     1f0:	01 00       	.word	0x0001	; ????
     1f2:	01 00       	.word	0x0001	; ????
     1f4:	01 00       	.word	0x0001	; ????
     1f6:	01 00       	.word	0x0001	; ????
     1f8:	01 00       	.word	0x0001	; ????
     1fa:	00 00       	nop
     1fc:	0d 00       	.word	0x000d	; ????
     1fe:	0f 00       	.word	0x000f	; ????
     200:	18 00       	.word	0x0018	; ????
     202:	1c 00       	.word	0x001c	; ????
     204:	33 00       	.word	0x0033	; ????
     206:	00 00       	nop
     208:	0b 00       	.word	0x000b	; ????
     20a:	11 00       	.word	0x0011	; ????
     20c:	08 00       	.word	0x0008	; ????
     20e:	0c 00       	.word	0x000c	; ????
     210:	12 00       	.word	0x0012	; ????
     212:	00 00       	nop
     214:	0e 00       	.word	0x000e	; ????
     216:	10 00       	.word	0x0010	; ????
     218:	36 00       	.word	0x0036	; ????
     21a:	37 00       	.word	0x0037	; ????
     21c:	38 00       	.word	0x0038	; ????
     21e:	01 00       	.word	0x0001	; ????
     220:	01 00       	.word	0x0001	; ????
     222:	01 00       	.word	0x0001	; ????
     224:	01 00       	.word	0x0001	; ????
     226:	01 00       	.word	0x0001	; ????
     228:	01 00       	.word	0x0001	; ????
     22a:	1e 00       	.word	0x001e	; ????
     22c:	1f 00       	.word	0x001f	; ????
     22e:	20 00       	.word	0x0020	; ????
     230:	21 00       	.word	0x0021	; ????
     232:	22 00       	.word	0x0022	; ????
     234:	00 00       	nop
     236:	26 02       	muls	r18, r22
     238:	2f 00       	.word	0x002f	; ????
     23a:	52 00       	.word	0x0052	; ????
     23c:	30 00       	.word	0x0030	; ????
     23e:	27 02       	muls	r18, r23
     240:	00 00       	nop
     242:	2e 00       	.word	0x002e	; ????
     244:	50 00       	.word	0x0050	; ????
     246:	51 00       	.word	0x0051	; ????
     248:	4f 00       	.word	0x004f	; ????
     24a:	2d 00       	.word	0x002d	; ????
     24c:	00 00       	nop
     24e:	01 00       	.word	0x0001	; ????
     250:	01 00       	.word	0x0001	; ????
     252:	01 00       	.word	0x0001	; ????
     254:	01 00       	.word	0x0001	; ????
     256:	01 00       	.word	0x0001	; ????
     258:	01 00       	.word	0x0001	; ????
     25a:	00 00       	nop
     25c:	23 00       	.word	0x0023	; ????
     25e:	24 00       	.word	0x0024	; ????
     260:	25 00       	.word	0x0025	; ????
     262:	26 00       	.word	0x0026	; ????
     264:	27 00       	.word	0x0027	; ????
     266:	00 00       	nop
     268:	31 00       	.word	0x0031	; ????
     26a:	4c 00       	.word	0x004c	; ????
     26c:	2e 00       	.word	0x002e	; ????
     26e:	46 00       	.word	0x0046	; ????
     270:	35 00       	.word	0x0035	; ????
     272:	00 00       	nop
     274:	4a 00       	.word	0x004a	; ????
     276:	4b 00       	.word	0x004b	; ????
     278:	4e 00       	.word	0x004e	; ????
     27a:	4d 00       	.word	0x004d	; ????
     27c:	49 00       	.word	0x0049	; ????
     27e:	01 00       	.word	0x0001	; ????
     280:	f0 a4       	ldd	r15, Z+40	; 0x28
     282:	01 00       	.word	0x0001	; ????
     284:	01 00       	.word	0x0001	; ????
     286:	01 00       	.word	0x0001	; ????
     288:	01 00       	.word	0x0001	; ????
     28a:	01 00       	.word	0x0001	; ????
     28c:	01 00       	.word	0x0001	; ????
     28e:	01 00       	.word	0x0001	; ????
     290:	01 00       	.word	0x0001	; ????
     292:	01 00       	.word	0x0001	; ????
     294:	00 00       	nop
     296:	01 00       	.word	0x0001	; ????
     298:	01 00       	.word	0x0001	; ????
     29a:	01 00       	.word	0x0001	; ????
     29c:	01 00       	.word	0x0001	; ????
     29e:	01 00       	.word	0x0001	; ????
     2a0:	00 00       	nop
     2a2:	3a 00       	.word	0x003a	; ????
     2a4:	3b 00       	.word	0x003b	; ????
     2a6:	3c 00       	.word	0x003c	; ????
     2a8:	3d 00       	.word	0x003d	; ????
     2aa:	3e 00       	.word	0x003e	; ????
     2ac:	00 00       	nop
     2ae:	01 00       	.word	0x0001	; ????
     2b0:	01 00       	.word	0x0001	; ????
     2b2:	01 00       	.word	0x0001	; ????
     2b4:	01 00       	.word	0x0001	; ????
     2b6:	01 00       	.word	0x0001	; ????
     2b8:	01 00       	.word	0x0001	; ????
     2ba:	00 00       	nop
     2bc:	01 00       	.word	0x0001	; ????
     2be:	01 00       	.word	0x0001	; ????
     2c0:	01 00       	.word	0x0001	; ????
     2c2:	01 00       	.word	0x0001	; ????
     2c4:	01 00       	.word	0x0001	; ????
     2c6:	00 00       	nop
     2c8:	01 00       	.word	0x0001	; ????
     2ca:	01 00       	.word	0x0001	; ????
     2cc:	01 00       	.word	0x0001	; ????
     2ce:	01 00       	.word	0x0001	; ????
     2d0:	01 00       	.word	0x0001	; ????
     2d2:	00 00       	nop
     2d4:	3f 00       	.word	0x003f	; ????
     2d6:	40 00       	.word	0x0040	; ????
     2d8:	41 00       	.word	0x0041	; ????
     2da:	42 00       	.word	0x0042	; ????
     2dc:	43 00       	.word	0x0043	; ????
     2de:	01 00       	.word	0x0001	; ????
     2e0:	01 00       	.word	0x0001	; ????
     2e2:	f0 a5       	ldd	r31, Z+40	; 0x28
     2e4:	01 00       	.word	0x0001	; ????
     2e6:	01 00       	.word	0x0001	; ????
     2e8:	01 00       	.word	0x0001	; ????
     2ea:	01 00       	.word	0x0001	; ????
     2ec:	01 00       	.word	0x0001	; ????
     2ee:	01 00       	.word	0x0001	; ????
     2f0:	01 00       	.word	0x0001	; ????
     2f2:	01 f8       	bld	r0, 1
     2f4:	00 00       	nop
     2f6:	01 00       	.word	0x0001	; ????
     2f8:	01 00       	.word	0x0001	; ????
     2fa:	01 00       	.word	0x0001	; ????
     2fc:	01 00       	.word	0x0001	; ????
     2fe:	01 00       	.word	0x0001	; ????
     300:	00 00       	nop
     302:	01 00       	.word	0x0001	; ????
     304:	01 00       	.word	0x0001	; ????
     306:	01 00       	.word	0x0001	; ????
     308:	01 00       	.word	0x0001	; ????
     30a:	01 00       	.word	0x0001	; ????
     30c:	00 00       	nop
     30e:	01 00       	.word	0x0001	; ????
     310:	01 00       	.word	0x0001	; ????
     312:	01 00       	.word	0x0001	; ????
     314:	01 00       	.word	0x0001	; ????
     316:	01 00       	.word	0x0001	; ????
     318:	01 00       	.word	0x0001	; ????
     31a:	00 00       	nop
     31c:	01 00       	.word	0x0001	; ????
     31e:	01 00       	.word	0x0001	; ????
     320:	01 00       	.word	0x0001	; ????
     322:	01 00       	.word	0x0001	; ????
     324:	01 00       	.word	0x0001	; ????
     326:	00 00       	nop
     328:	01 00       	.word	0x0001	; ????
     32a:	01 00       	.word	0x0001	; ????
     32c:	01 00       	.word	0x0001	; ????
     32e:	01 00       	.word	0x0001	; ????
     330:	01 00       	.word	0x0001	; ????
     332:	00 00       	nop
     334:	01 00       	.word	0x0001	; ????
     336:	01 00       	.word	0x0001	; ????
     338:	01 00       	.word	0x0001	; ????
     33a:	01 00       	.word	0x0001	; ????
     33c:	01 00       	.word	0x0001	; ????
     33e:	01 00       	.word	0x0001	; ????
     340:	01 00       	.word	0x0001	; ????
     342:	01 00       	.word	0x0001	; ????
     344:	f3 a0       	ldd	r15, Z+35	; 0x23
     346:	01 00       	.word	0x0001	; ????
     348:	01 00       	.word	0x0001	; ????

0000034a <__c.2017>:
     34a:	0a 00                                               ..

0000034c <__c.2015>:
     34c:	25 30 31 36 62 00                                   %016b.

00000352 <__c.2013>:
     352:	3a 20 00                                            : .

00000355 <__c.2011>:
     355:	25 30 32 58 00                                      %02X.

0000035a <__c.2008>:
     35a:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     36a:	42 43 44 45 46 0a 00                                BCDEF..

00000371 <__c.4842>:
     371:	5b 73 5d 00                                         [s].

00000375 <__c.4840>:
     375:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     385:	00                                                  .

00000386 <__c.4838>:
     386:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     396:	00                                                  .

00000397 <__c.4736>:
     397:	5b 57 5d 00                                         [W].

0000039b <__c.4732>:
     39b:	5b 53 5d 00                                         [S].

0000039f <__c.4728>:
     39f:	5b 52 5d 00                                         [R].

000003a3 <__c.4723>:
     3a3:	5b 44 5d 00                                         [D].

000003a7 <__c.4718>:
     3a7:	5b 43 5d 00                                         [C].

000003ab <ProductString>:
     3ab:	28 03 6e 00 69 00 67 00 68 00 74 00 6d 00 61 00     (.n.i.g.h.t.m.a.
     3bb:	72 00 65 00 73 00 2d 00 6b 00 65 00 79 00 62 00     r.e.s.-.k.e.y.b.
     3cb:	6f 00 61 00 72 00 64 00 00 00                       o.a.r.d...

000003d5 <ManufacturerString>:
     3d5:	14 03 74 00 6d 00 6b 00 2d 00 73 00 70 00 6c 00     ..t.m.k.-.s.p.l.
     3e5:	69 00 74 00 00 00                                   i.t...

000003eb <LanguageString>:
     3eb:	04 03 09 04                                         ....

000003ef <ConfigurationDescriptor>:
     3ef:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     3ff:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     40f:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     41f:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     42f:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     43f:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     44f:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
     45f:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     46f:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

0000047c <DeviceDescriptor>:
     47c:	12 01 10 01 00 00 00 08 ed fe 44 44 01 00 01 02     ..........DD....
     48c:	00 01                                               ..

0000048e <NKROReport>:
     48e:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     49e:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     4ae:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     4be:	25 01 95 78 75 01 81 02 c0                          %..xu....

000004c7 <ConsoleReport>:
     4c7:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     4d7:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

000004e7 <ExtrakeyReport>:
     4e7:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     4f7:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     507:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     517:	10 95 01 81 00 c0                                   ......

0000051d <MouseReport>:
     51d:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     52d:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     53d:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     54d:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     55d:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

0000056a <KeyboardReport>:
     56a:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     57a:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     58a:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     59a:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000005a9 <__c.4472>:
     5a9:	0a 00                                               ..

000005ab <__c.4467>:
     5ab:	25 30 32 58 20 00                                   %02X .

000005b1 <__c.4464>:
     5b1:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     5c1:	20 00                                                .

000005c3 <__c.4810>:
     5c3:	0a 00                                               ..

000005c5 <__c.4808>:
     5c5:	25 30 32 58 00                                      %02X.

000005ca <__c.4806>:
     5ca:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     5da:	3a 20 00                                            : .

000005dd <__c.4898>:
     5dd:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     5ed:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000005fb <__c.4893>:
     5fb:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     60b:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000619 <__c.4751>:
     619:	64 6f 6e 65 2e 0a 00                                done...

00000620 <__c.4745>:
     620:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
     630:	2e 2e 2e 20 00                                      ... .

00000635 <__c.4544>:
     635:	29 0a 00                                            )..

00000638 <__c.4542>:
     638:	25 75 00                                            %u.

0000063b <__c.4540>:
     63b:	2f 00                                               /.

0000063d <__c.4538>:
     63d:	25 75 00                                            %u.

00000640 <__c.4536>:
     640:	5d 28 00                                            ](.

00000643 <__c.4534>:
     643:	25 64 00                                            %d.

00000646 <__c.4532>:
     646:	20 00                                                .

00000648 <__c.4530>:
     648:	25 64 00                                            %d.

0000064b <__c.4528>:
     64b:	20 00                                                .

0000064d <__c.4526>:
     64d:	25 64 00                                            %d.

00000650 <__c.4524>:
     650:	20 00                                                .

00000652 <__c.4522>:
     652:	25 64 00                                            %d.

00000655 <__c.4520>:
     655:	7c 00                                               |.

00000657 <__c.4518>:
     657:	25 30 32 58 00                                      %02X.

0000065c <__c.4516>:
     65c:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     66c:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     67c:	20 5b 00                                             [.

0000067f <__c.5181>:
     67f:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     68f:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000069a <__c.5178>:
     69a:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     6aa:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000006b3 <__c.5175>:
     6b3:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     6c3:	20 25 64 0a 00                                       %d..

000006c8 <__c.5172>:
     6c8:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     6d8:	64 0a 00                                            d..

000006db <__c.5169>:
     6db:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     6eb:	0a 00                                               ..

000006ed <__c.5165>:
     6ed:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000006fc <__c.5158>:
     6fc:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     70c:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000717 <__c.5155>:
     717:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     727:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000730 <__c.5152>:
     730:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     740:	20 25 64 0a 00                                       %d..

00000745 <__c.5149>:
     745:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     755:	64 0a 00                                            d..

00000758 <__c.5146>:
     758:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     768:	0a 00                                               ..

0000076a <__c.5142>:
     76a:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000779 <__c.5135>:
     779:	0a 00                                               ..

0000077b <__c.5133>:
     77b:	25 75 00                                            %u.

0000077e <__c.5131>:
     77e:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     78e:	5f 6d 61 78 3a 20 00                                _max: .

00000795 <__c.5129>:
     795:	0a 00                                               ..

00000797 <__c.5127>:
     797:	25 75 00                                            %u.

0000079a <__c.5125>:
     79a:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     7aa:	65 64 3a 20 00                                      ed: .

000007af <__c.5123>:
     7af:	0a 00                                               ..

000007b1 <__c.5121>:
     7b1:	25 75 00                                            %u.

000007b4 <__c.5119>:
     7b4:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     7c4:	00                                                  .

000007c5 <__c.5117>:
     7c5:	0a 00                                               ..

000007c7 <__c.5115>:
     7c7:	25 75 00                                            %u.

000007ca <__c.5113>:
     7ca:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000007d9 <__c.5111>:
     7d9:	0a 00                                               ..

000007db <__c.5109>:
     7db:	25 75 00                                            %u.

000007de <__c.5107>:
     7de:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     7ee:	20 00                                                .

000007f0 <__c.5105>:
     7f0:	0a 00                                               ..

000007f2 <__c.5103>:
     7f2:	25 75 00                                            %u.

000007f5 <__c.5101>:
     7f5:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     805:	20 00                                                .

00000807 <__c.5099>:
     807:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000815 <__c.5219>:
     815:	4d 3e 00                                            M>.

00000818 <__c.5217>:
     818:	4d 25 64 3e 20 00                                   M%d> .

0000081e <__c.5215>:
     81e:	3f 00                                               ?.

00000820 <__c.5212>:
     820:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

0000082d <__c.5198>:
     82d:	43 3e 20 00                                         C> .

00000831 <__c.5188>:
     831:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     841:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     851:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     861:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     871:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

0000087f <__c.5186>:
     87f:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     88f:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     89f:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     8af:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     8bf:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     8cf:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     8df:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     8ef:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     8ff:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     90f:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     91f:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     92f:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     93f:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     94f:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     95f:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     96f:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

0000097a <__c.5091>:
     97a:	3f 00                                               ?.

0000097c <__c.5088>:
     97c:	4d 3e 20 00                                         M> .

00000980 <__c.5093>:
     980:	43 3e 20 00                                         C> .

00000984 <__c.5237>:
     984:	4c 25 64 0a 00                                      L%d..

00000989 <__c.5077>:
     989:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     999:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     9a9:	73 65 6b 65 79 0a 00                                sekey..

000009b0 <__c.4898>:
     9b0:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     9c0:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     9d0:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     9e0:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     9f0:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     a00:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     a10:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     a20:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     a30:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     a40:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     a50:	4b 52 4f 0a 7a 3a 09 73 6c 65 65 70 20 4c 45 44     KRO.z:.sleep LED
     a60:	20 74 65 73 74 0a 00                                 test..

00000a67 <__c.4993>:
     a67:	0a 00                                               ..

00000a69 <__c.4991>:
     a69:	25 75 00                                            %u.

00000a6c <__c.4989>:
     a6c:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000a74 <__c.4987>:
     a74:	0a 00                                               ..

00000a76 <__c.4985>:
     a76:	25 75 00                                            %u.

00000a79 <__c.4983>:
     a79:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     a89:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000a95 <__c.4981>:
     a95:	0a 00                                               ..

00000a97 <__c.4979>:
     a97:	25 75 00                                            %u.

00000a9a <__c.4977>:
     a9a:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     aaa:	20 00                                                .

00000aac <__c.4975>:
     aac:	0a 00                                               ..

00000aae <__c.4973>:
     aae:	25 75 00                                            %u.

00000ab1 <__c.4971>:
     ab1:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000abb <__c.4969>:
     abb:	0a 00                                               ..

00000abd <__c.4967>:
     abd:	25 75 00                                            %u.

00000ac0 <__c.4965>:
     ac0:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     ad0:	20 00                                                .

00000ad2 <__c.4963>:
     ad2:	0a 00                                               ..

00000ad4 <__c.4961>:
     ad4:	25 75 00                                            %u.

00000ad7 <__c.4959>:
     ad7:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     ae7:	20 00                                                .

00000ae9 <__c.4957>:
     ae9:	0a 00                                               ..

00000aeb <__c.4955>:
     aeb:	25 75 00                                            %u.

00000aee <__c.4953>:
     aee:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     afe:	74 72 6f 6c 3a 20 00                                trol: .

00000b05 <__c.4951>:
     b05:	0a 00                                               ..

00000b07 <__c.4949>:
     b07:	25 75 00                                            %u.

00000b0a <__c.4947>:
     b0a:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     b1a:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000b23 <__c.4945>:
     b23:	0a 00                                               ..

00000b25 <__c.4943>:
     b25:	25 30 32 58 00                                      %02X.

00000b2a <__c.4941>:
     b2a:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     b3a:	77 3a 20 00                                         w: .

00000b3e <__c.4938>:
     b3e:	0a 00                                               ..

00000b40 <__c.4936>:
     b40:	25 75 00                                            %u.

00000b43 <__c.4934>:
     b43:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000b4c <__c.4932>:
     b4c:	0a 00                                               ..

00000b4e <__c.4930>:
     b4e:	25 75 00                                            %u.

00000b51 <__c.4928>:
     b51:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000b5d <__c.4926>:
     b5d:	0a 00                                               ..

00000b5f <__c.4924>:
     b5f:	25 75 00                                            %u.

00000b62 <__c.4922>:
     b62:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000b6c <__c.4920>:
     b6c:	0a 00                                               ..

00000b6e <__c.4918>:
     b6e:	25 75 00                                            %u.

00000b71 <__c.4916>:
     b71:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000b7b <__c.4914>:
     b7b:	0a 00                                               ..

00000b7d <__c.4912>:
     b7d:	25 30 32 58 00                                      %02X.

00000b82 <__c.4910>:
     b82:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     b92:	3a 20 00                                            : .

00000b95 <__c.4907>:
     b95:	0a 00                                               ..

00000b97 <__c.4905>:
     b97:	25 75 00                                            %u.

00000b9a <__c.4903>:
     b9a:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000baa <__c.5072>:
     baa:	3f 00                                               ?.

00000bac <__c.5063>:
     bac:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000bb7 <__c.5061>:
     bb7:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000bc1 <__c.5058>:
     bc1:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     bd1:	6c 58 0a 00                                         lX..

00000bd5 <__c.5056>:
     bd5:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     be5:	58 0a 00                                            X..

00000be8 <__c.5054>:
     be8:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     bf8:	58 0a 00                                            X..

00000bfb <__c.5052>:
     bfb:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     c0b:	6c 3a 20 25 58 0a 00                                l: %X..

00000c12 <__c.5050>:
     c12:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     c22:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000c2c <__c.5048>:
     c2c:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000c3a <__c.5045>:
     c3a:	47 43 43 3a 20 34 2e 39 2e 32 20 41 56 52 2d 4c     GCC: 4.9.2 AVR-L
     c4a:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     c5a:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000c65 <__c.5043>:
     c65:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     c75:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     c85:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     c95:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     ca5:	30 39 36 0a 00                                      096..

00000caa <__c.5041>:
     caa:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     cba:	31 34 3a 33 38 3a 34 30 20 4e 6f 76 20 32 32 20     14:38:40 Nov 22 
     cca:	32 30 31 37 29 0a 00                                2017)..

00000cd1 <__c.5039>:
     cd1:	56 49 44 3a 20 30 78 46 45 45 44 28 74 6d 6b 2d     VID: 0xFEED(tmk-
     ce1:	73 70 6c 69 74 29 20 50 49 44 3a 20 30 78 34 34     split) PID: 0x44
     cf1:	34 34 28 6e 69 67 68 74 6d 61 72 65 73 2d 6b 65     44(nightmares-ke
     d01:	79 62 6f 61 72 64 29 20 56 45 52 3a 20 30 78 30     yboard) VER: 0x0
     d11:	30 30 31 0a 00                                      001..

00000d16 <__c.5037>:
     d16:	44 45 53 43 3a 20 74 6d 6b 20 73 70 6c 69 74 20     DESC: tmk split 
     d26:	6b 65 79 62 6f 61 72 64 20 66 69 72 6d 77 61 72     keyboard firmwar
     d36:	65 0a 00                                            e..

00000d39 <__c.5035>:
     d39:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000d48 <__c.5032>:
     d48:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000d55 <__c.5030>:
     d55:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000d61 <__c.5027>:
     d61:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000d71 <__c.5025>:
     d71:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000d80 <__c.5022>:
     d80:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000d8e <__c.5020>:
     d8e:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000d9b <__c.5017>:
     d9b:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000da7 <__c.5015>:
     da7:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000db4 <__c.5012>:
     db4:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     dc4:	00                                                  .

00000dc5 <__c.5009>:
     dc5:	43 3e 20 00                                         C> .

00000dc9 <__c.5004>:
     dc9:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000dd4 <__c.5000>:
     dd4:	53 6c 65 65 70 20 4c 45 44 20 74 65 73 74 0a 00     Sleep LED test..

00000de4 <breathing_table>:
     de4:	00 00 00 00 00 00 00 00 00 00 00 01 02 04 06 0a     ................
     df4:	0f 17 20 2c 3a 4a 5d 71 87 9d b3 c7 da e9 f5 fc     .. ,:J]q........
     e04:	ff fc f5 e9 da c7 b3 9d 87 71 5d 4a 3a 2c 20 17     .........q]J:, .
     e14:	0f 0a 06 04 02 01 00 00 00 00 00 00 00 00 00 00     ................

00000e24 <__ctors_end>:
     e24:	11 24       	eor	r1, r1
     e26:	1f be       	out	0x3f, r1	; 63
     e28:	cf ef       	ldi	r28, 0xFF	; 255
     e2a:	da e0       	ldi	r29, 0x0A	; 10
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	cd bf       	out	0x3d, r28	; 61

00000e30 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     e30:	04 b6       	in	r0, 0x34	; 52
     e32:	03 fe       	sbrs	r0, 3
     e34:	27 c0       	rjmp	.+78     	; 0xe84 <__do_copy_data>
     e36:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <__bss_end>
     e3a:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <__bss_end+0x1>
     e3e:	a0 91 3f 02 	lds	r26, 0x023F	; 0x80023f <__bss_end+0x2>
     e42:	b0 91 40 02 	lds	r27, 0x0240	; 0x800240 <__bss_end+0x3>
     e46:	87 30       	cpi	r24, 0x07	; 7
     e48:	90 4b       	sbci	r25, 0xB0	; 176
     e4a:	a7 40       	sbci	r26, 0x07	; 7
     e4c:	b0 4b       	sbci	r27, 0xB0	; 176
     e4e:	d1 f4       	brne	.+52     	; 0xe84 <__do_copy_data>
        reset_key = 0;
     e50:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <__bss_end>
     e54:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__bss_end+0x1>
     e58:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <__bss_end+0x2>
     e5c:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     e60:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     e62:	84 b7       	in	r24, 0x34	; 52
     e64:	87 7f       	andi	r24, 0xF7	; 247
     e66:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	a8 95       	wdr
     e6e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     e72:	88 61       	ori	r24, 0x18	; 24
     e74:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     e78:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     e7c:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     e7e:	e0 e0       	ldi	r30, 0x00	; 0
     e80:	f8 e3       	ldi	r31, 0x38	; 56
     e82:	09 95       	icall

00000e84 <__do_copy_data>:
     e84:	11 e0       	ldi	r17, 0x01	; 1
     e86:	a0 e0       	ldi	r26, 0x00	; 0
     e88:	b1 e0       	ldi	r27, 0x01	; 1
     e8a:	ec e1       	ldi	r30, 0x1C	; 28
     e8c:	f8 e5       	ldi	r31, 0x58	; 88
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <__do_copy_data+0x10>
     e90:	05 90       	lpm	r0, Z+
     e92:	0d 92       	st	X+, r0
     e94:	a8 34       	cpi	r26, 0x48	; 72
     e96:	b1 07       	cpc	r27, r17
     e98:	d9 f7       	brne	.-10     	; 0xe90 <__do_copy_data+0xc>

00000e9a <__do_clear_bss>:
     e9a:	22 e0       	ldi	r18, 0x02	; 2
     e9c:	a8 e4       	ldi	r26, 0x48	; 72
     e9e:	b1 e0       	ldi	r27, 0x01	; 1
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <.do_clear_bss_start>

00000ea2 <.do_clear_bss_loop>:
     ea2:	1d 92       	st	X+, r1

00000ea4 <.do_clear_bss_start>:
     ea4:	ad 33       	cpi	r26, 0x3D	; 61
     ea6:	b2 07       	cpc	r27, r18
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <.do_clear_bss_loop>
     eaa:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <main>
     eae:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <_exit>

00000eb2 <__bad_interrupt>:
     eb2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000eb6 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     eb6:	ff 93       	push	r31
	push	ZL
     eb8:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     eba:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <__data_end>
	lds	ZH, xfunc_out+1	;/
     ebe:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <__data_end+0x1>
	sbiw	ZL, 0		;Skip if null
     ec2:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     ec4:	09 f0       	breq	.+2      	; 0xec8 <xputc+0x12>
	icall
     ec6:	09 95       	icall
2:	pop	ZL
     ec8:	ef 91       	pop	r30
	pop	ZH
     eca:	ff 91       	pop	r31
	ret
     ecc:	08 95       	ret

00000ece <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     ece:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     ed0:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     ed2:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     ed4:	11 f0       	breq	.+4      	; 0xeda <xputs+0xc>
	rcall	xputc
     ed6:	ef df       	rcall	.-34     	; 0xeb6 <xputc>
	rjmp	1b
     ed8:	fb cf       	rjmp	.-10     	; 0xed0 <xputs+0x2>
2:	ret
     eda:	08 95       	ret

00000edc <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     edc:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     ede:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     ee0:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     ee2:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     ee4:	0c c0       	rjmp	.+24     	; 0xefe <xitoa+0x22>
	neg	r20		;
     ee6:	41 95       	neg	r20
	sbrs	r25, 7		;
     ee8:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     eea:	09 c0       	rjmp	.+18     	; 0xefe <xitoa+0x22>
	ldi	r30, '-'	;
     eec:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     eee:	60 95       	com	r22
	com	r23		;
     ef0:	70 95       	com	r23
	com	r24		;
     ef2:	80 95       	com	r24
	com	r25		;
     ef4:	90 95       	com	r25
	adc	r22, r1		;
     ef6:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     ef8:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     efa:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     efc:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     efe:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <xitoa+0x2a>
	neg	r18		;
     f02:	21 95       	neg	r18
	ldi	r19, '0'	;/
     f04:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     f06:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     f08:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     f0a:	66 0f       	add	r22, r22
	rol	r23		;
     f0c:	77 1f       	adc	r23, r23
	rol	r24		;
     f0e:	88 1f       	adc	r24, r24
	rol	r25		;
     f10:	99 1f       	adc	r25, r25
	rol	r26		;
     f12:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     f14:	a4 17       	cp	r26, r20
	brcs	3f		;
     f16:	10 f0       	brcs	.+4      	; 0xf1c <xitoa+0x40>
	sub	r26, r20	;
     f18:	a4 1b       	sub	r26, r20
	inc	r22		;
     f1a:	63 95       	inc	r22
3:	dec	r21		;
     f1c:	5a 95       	dec	r21
	brne	2b		;/
     f1e:	a9 f7       	brne	.-22     	; 0xf0a <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     f20:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     f22:	08 f0       	brcs	.+2      	; 0xf26 <xitoa+0x4a>
	subi	r26, -7		;
     f24:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     f26:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     f28:	af 93       	push	r26
	inc	r31		;/
     f2a:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     f2c:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     f2e:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     f30:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     f32:	91 05       	cpc	r25, r1
	brne	1b		;/
     f34:	41 f7       	brne	.-48     	; 0xf06 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     f36:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     f38:	11 f4       	brne	.+4      	; 0xf3e <xitoa+0x62>
	push	r30		;
     f3a:	ef 93       	push	r30
	inc	r31		;/
     f3c:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     f3e:	f2 17       	cp	r31, r18
	brcc	6f		;
     f40:	18 f4       	brcc	.+6      	; 0xf48 <xitoa+0x6c>
	push	r19		;
     f42:	3f 93       	push	r19
	inc	r31		;
     f44:	f3 95       	inc	r31
	rjmp	5b		;/
     f46:	fb cf       	rjmp	.-10     	; 0xf3e <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     f48:	8f 91       	pop	r24
	rcall	xputc		;
     f4a:	b5 df       	rcall	.-150    	; 0xeb6 <xputc>
	dec	r31		;
     f4c:	fa 95       	dec	r31
	brne	6b		;/
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <xitoa+0x6c>

	ret
     f50:	08 95       	ret

00000f52 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     f52:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     f54:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     f56:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     f58:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     f5a:	21 f0       	breq	.+8      	; 0xf64 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     f5c:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     f5e:	19 f0       	breq	.+6      	; 0xf66 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     f60:	aa df       	rcall	.-172    	; 0xeb6 <xputc>
	rjmp	0b		;/
     f62:	f9 cf       	rjmp	.-14     	; 0xf56 <xvprintf+0x4>
90:	ret
     f64:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     f66:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     f68:	e8 94       	clt
	_LPMI	r21		;Get flags
     f6a:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     f6c:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     f6e:	c1 f3       	breq	.-16     	; 0xf60 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     f70:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     f72:	11 f4       	brne	.+4      	; 0xf78 <xvprintf+0x26>
	set			;/
     f74:	68 94       	set
22:	_LPMI	r21		;Get width
     f76:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     f78:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     f7a:	48 f4       	brcc	.+18     	; 0xf8e <xvprintf+0x3c>
	subi	r21, '0'	;
     f7c:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     f7e:	90 f3       	brcs	.-28     	; 0xf64 <xvprintf+0x12>
	lsl	r18		;
     f80:	22 0f       	add	r18, r18
	mov	r0, r18		;
     f82:	02 2e       	mov	r0, r18
	lsl	r18		;
     f84:	22 0f       	add	r18, r18
	lsl	r18		;
     f86:	22 0f       	add	r18, r18
	add	r18, r0		;
     f88:	20 0d       	add	r18, r0
	add	r18, r21	;
     f8a:	25 0f       	add	r18, r21
	rjmp	22b		;/
     f8c:	f4 cf       	rjmp	.-24     	; 0xf76 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     f8e:	0e f4       	brtc	.+2      	; 0xf92 <xvprintf+0x40>
	neg	r18		;
     f90:	21 95       	neg	r18
25:	ld	r24, Y+		;
     f92:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     f94:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     f96:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     f98:	19 f3       	breq	.-58     	; 0xf60 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     f9a:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     f9c:	29 f1       	breq	.+74     	; 0xfe8 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     f9e:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     fa0:	59 f1       	breq	.+86     	; 0xff8 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     fa2:	bc 01       	movw	r22, r24
	clr	r24		;
     fa4:	88 27       	eor	r24, r24
	clr	r25		;
     fa6:	99 27       	eor	r25, r25
	clt			;/
     fa8:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     faa:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     fac:	21 f4       	brne	.+8      	; 0xfb6 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     fae:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     fb0:	99 91       	ld	r25, Y+
	set			;
     fb2:	68 94       	set
	_LPMI	r21		;/
     fb4:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     fb6:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     fb8:	39 f4       	brne	.+14     	; 0xfc8 <xvprintf+0x76>
	ldi	r20, -10	;
     fba:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     fbc:	7e f0       	brts	.+30     	; 0xfdc <xvprintf+0x8a>
	sbrs	r23, 7		;
     fbe:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     fc0:	0d c0       	rjmp	.+26     	; 0xfdc <xvprintf+0x8a>
	ldi	r24, -1		;
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     fc4:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     fc6:	0a c0       	rjmp	.+20     	; 0xfdc <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     fc8:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     fca:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     fcc:	39 f0       	breq	.+14     	; 0xfdc <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     fce:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     fd0:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     fd2:	21 f0       	breq	.+8      	; 0xfdc <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     fd4:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     fd6:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     fd8:	09 f0       	breq	.+2      	; 0xfdc <xvprintf+0x8a>
	ret			;abort
     fda:	08 95       	ret
40:	push	ZH		;Output the value
     fdc:	ff 93       	push	r31
	push	ZL		;
     fde:	ef 93       	push	r30
	rcall	xitoa		;
     fe0:	7d df       	rcall	.-262    	; 0xedc <xitoa>
42:	pop	ZL		;
     fe2:	ef 91       	pop	r30
	pop	ZH		;
     fe4:	ff 91       	pop	r31
	rjmp	0b		;/
     fe6:	b7 cf       	rjmp	.-146    	; 0xf56 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     fe8:	ff 93       	push	r31
	push	ZL
     fea:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     fec:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     fee:	81 91       	ld	r24, Z+
	cpi	r24, 0
     ff0:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     ff2:	b9 f3       	breq	.-18     	; 0xfe2 <xvprintf+0x90>
	rcall	xputc
     ff4:	60 df       	rcall	.-320    	; 0xeb6 <xputc>
	rjmp	51b
     ff6:	fb cf       	rjmp	.-10     	; 0xfee <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     ff8:	ff 93       	push	r31
	push	ZL
     ffa:	ef 93       	push	r30
	rcall	xputs
     ffc:	68 df       	rcall	.-304    	; 0xece <xputs>
	rjmp	42b
     ffe:	f1 cf       	rjmp	.-30     	; 0xfe2 <xvprintf+0x90>

00001000 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
    1000:	df 93       	push	r29
	push	YL
    1002:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    1004:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    1006:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    1008:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
    100a:	a3 df       	rcall	.-186    	; 0xf52 <xvprintf>
	pop	YL
    100c:	cf 91       	pop	r28
	pop	YH
    100e:	df 91       	pop	r29
	ret
    1010:	08 95       	ret

00001012 <promicro_bootloader_jmp>:
void kprint(char *s) {
    while(*s) {
        kput_char(*s);
        s++;
    }
}
    1012:	81 11       	cpse	r24, r1
    1014:	03 c0       	rjmp	.+6      	; 0x101c <promicro_bootloader_jmp+0xa>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <promicro_bootloader_jmp+0xe>
    101c:	87 e7       	ldi	r24, 0x77	; 119
    101e:	97 e7       	ldi	r25, 0x77	; 119
    1020:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <_end+0x5c0>
    1024:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <_end+0x5bf>
    1028:	9a e0       	ldi	r25, 0x0A	; 10
    102a:	88 e1       	ldi	r24, 0x18	; 24
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	a8 95       	wdr
    1032:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    103c:	ff cf       	rjmp	.-2      	; 0x103c <promicro_bootloader_jmp+0x2a>

0000103e <action_function>:

/*
 * user defined action function
 */
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    103e:	fc 01       	movw	r30, r24
    uint8_t tap_count = record->tap.count;
    1040:	95 81       	ldd	r25, Z+5	; 0x05
    1042:	92 95       	swap	r25
    1044:	9f 70       	andi	r25, 0x0F	; 15
    switch (id) {
    1046:	61 30       	cpi	r22, 0x01	; 1
    1048:	29 f1       	breq	.+74     	; 0x1094 <action_function+0x56>
    104a:	18 f0       	brcs	.+6      	; 0x1052 <action_function+0x14>
    104c:	62 30       	cpi	r22, 0x02	; 2
    104e:	31 f1       	breq	.+76     	; 0x109c <action_function+0x5e>
    1050:	08 95       	ret
        case RESET_LAYER_STATE:
            if (record->event.pressed) {
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	88 23       	and	r24, r24
    1056:	59 f0       	breq	.+22     	; 0x106e <action_function+0x30>
                if (!get_oneshot_locked_mods() && !get_oneshot_layer_state()) {
    1058:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <get_oneshot_locked_mods>
    105c:	81 11       	cpse	r24, r1
    105e:	23 c0       	rjmp	.+70     	; 0x10a6 <action_function+0x68>
    1060:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <get_oneshot_layer_state>
    1064:	81 11       	cpse	r24, r1
    1066:	1f c0       	rjmp	.+62     	; 0x10a6 <action_function+0x68>
                    register_code(KC_ESC);
    1068:	89 e2       	ldi	r24, 0x29	; 41
    106a:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <register_code>
                }
            } else {
                if (!get_oneshot_locked_mods() && !get_oneshot_layer_state()) {
    106e:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <get_oneshot_locked_mods>
    1072:	81 11       	cpse	r24, r1
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <action_function+0x46>
    1076:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <get_oneshot_layer_state>
    107a:	81 11       	cpse	r24, r1
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <action_function+0x46>
                    unregister_code(KC_ESC);
    107e:	89 e2       	ldi	r24, 0x29	; 41
    1080:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <unregister_code>
                } else {
                    reset_oneshot_layer();
    1084:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <reset_oneshot_layer>
                    clear_oneshot_locked_mods();
    1088:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <clear_oneshot_locked_mods>
                    layer_clear();
    108c:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <layer_clear>
                    clear_keyboard();
    1090:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <clear_keyboard>
                }
            }
            break;
        case PROMICRO_RESET:
            if(tap_count == 5) {
    1094:	95 30       	cpi	r25, 0x05	; 5
    1096:	39 f4       	brne	.+14     	; 0x10a6 <action_function+0x68>
                promicro_bootloader_jmp(false);
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <action_function+0x64>
            }
            break;
        case PROMICRO_PROGRAM:
            if(tap_count == 5) {
    109c:	95 30       	cpi	r25, 0x05	; 5
    109e:	19 f4       	brne	.+6      	; 0x10a6 <action_function+0x68>
                promicro_bootloader_jmp(true);
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	0e 94 09 08 	call	0x1012	; 0x1012 <promicro_bootloader_jmp>
    10a6:	08 95       	ret

000010a8 <unselect_rows>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
    10a8:	ac e1       	ldi	r26, 0x1C	; 28
    10aa:	b1 e0       	ldi	r27, 0x01	; 1
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	8d 91       	ld	r24, X+
    10b2:	e8 2f       	mov	r30, r24
    10b4:	e2 95       	swap	r30
    10b6:	ef 70       	andi	r30, 0x0F	; 15
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	21 a1       	ldd	r18, Z+33	; 0x21
    10bc:	8f 70       	andi	r24, 0x0F	; 15
    10be:	ba 01       	movw	r22, r20
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <unselect_rows+0x1e>
    10c2:	66 0f       	add	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	8a 95       	dec	r24
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <unselect_rows+0x1a>
    10ca:	cb 01       	movw	r24, r22
    10cc:	96 2f       	mov	r25, r22
    10ce:	90 95       	com	r25
    10d0:	92 23       	and	r25, r18
    10d2:	91 a3       	std	Z+33, r25	; 0x21
    10d4:	92 a1       	ldd	r25, Z+34	; 0x22
    10d6:	89 2b       	or	r24, r25
    10d8:	82 a3       	std	Z+34, r24	; 0x22
    10da:	71 e0       	ldi	r23, 0x01	; 1
    10dc:	a0 32       	cpi	r26, 0x20	; 32
    10de:	b7 07       	cpc	r27, r23
    10e0:	39 f7       	brne	.-50     	; 0x10b0 <unselect_rows+0x8>
    10e2:	08 95       	ret

000010e4 <matrix_init>:
    10e4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    10e8:	83 60       	ori	r24, 0x03	; 3
    10ea:	88 60       	ori	r24, 0x08	; 8
    10ec:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <debug_config>
    10f0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <unselect_rows>
    10f4:	a6 e1       	ldi	r26, 0x16	; 22
    10f6:	b1 e0       	ldi	r27, 0x01	; 1
    10f8:	41 e0       	ldi	r20, 0x01	; 1
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	8d 91       	ld	r24, X+
    10fe:	e8 2f       	mov	r30, r24
    1100:	e2 95       	swap	r30
    1102:	ef 70       	andi	r30, 0x0F	; 15
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	21 a1       	ldd	r18, Z+33	; 0x21
    1108:	8f 70       	andi	r24, 0x0F	; 15
    110a:	ba 01       	movw	r22, r20
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <matrix_init+0x2e>
    110e:	66 0f       	add	r22, r22
    1110:	77 1f       	adc	r23, r23
    1112:	8a 95       	dec	r24
    1114:	e2 f7       	brpl	.-8      	; 0x110e <matrix_init+0x2a>
    1116:	cb 01       	movw	r24, r22
    1118:	96 2f       	mov	r25, r22
    111a:	90 95       	com	r25
    111c:	92 23       	and	r25, r18
    111e:	91 a3       	std	Z+33, r25	; 0x21
    1120:	92 a1       	ldd	r25, Z+34	; 0x22
    1122:	89 2b       	or	r24, r25
    1124:	82 a3       	std	Z+34, r24	; 0x22
    1126:	71 e0       	ldi	r23, 0x01	; 1
    1128:	ac 31       	cpi	r26, 0x1C	; 28
    112a:	b7 07       	cpc	r27, r23
    112c:	39 f7       	brne	.-50     	; 0x10fc <matrix_init+0x18>
    112e:	55 9a       	sbi	0x0a, 5	; 10
    1130:	20 9a       	sbi	0x04, 0	; 4
    1132:	aa e4       	ldi	r26, 0x4A	; 74
    1134:	b1 e0       	ldi	r27, 0x01	; 1
    1136:	e2 e5       	ldi	r30, 0x52	; 82
    1138:	f1 e0       	ldi	r31, 0x01	; 1
    113a:	88 e0       	ldi	r24, 0x08	; 8
    113c:	8e 0f       	add	r24, r30
    113e:	11 92       	st	Z+, r1
    1140:	1d 92       	st	X+, r1
    1142:	8e 13       	cpse	r24, r30
    1144:	fc cf       	rjmp	.-8      	; 0x113e <matrix_init+0x5a>
    1146:	08 95       	ret

00001148 <_matrix_scan>:
    1148:	8f 92       	push	r8
    114a:	9f 92       	push	r9
    114c:	af 92       	push	r10
    114e:	bf 92       	push	r11
    1150:	cf 92       	push	r12
    1152:	df 92       	push	r13
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isLeftHand>
    1164:	81 11       	cpse	r24, r1
    1166:	03 c0       	rjmp	.+6      	; 0x116e <_matrix_scan+0x26>
    1168:	c4 e0       	ldi	r28, 0x04	; 4
    116a:	d0 e0       	ldi	r29, 0x00	; 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <_matrix_scan+0x2a>
    116e:	c0 e0       	ldi	r28, 0x00	; 0
    1170:	d0 e0       	ldi	r29, 0x00	; 0
    1172:	ae 01       	movw	r20, r28
    1174:	46 5b       	subi	r20, 0xB6	; 182
    1176:	5e 4f       	sbci	r21, 0xFE	; 254
    1178:	7a 01       	movw	r14, r20
    117a:	6a 01       	movw	r12, r20
    117c:	0c e1       	ldi	r16, 0x1C	; 28
    117e:	11 e0       	ldi	r17, 0x01	; 1
    1180:	aa 24       	eor	r10, r10
    1182:	a3 94       	inc	r10
    1184:	b1 2c       	mov	r11, r1
    1186:	95 e0       	ldi	r25, 0x05	; 5
    1188:	89 2e       	mov	r8, r25
    118a:	24 e0       	ldi	r18, 0x04	; 4
    118c:	92 2e       	mov	r9, r18
    118e:	90 0e       	add	r9, r16
    1190:	f8 01       	movw	r30, r16
    1192:	81 91       	ld	r24, Z+
    1194:	8f 01       	movw	r16, r30
    1196:	e8 2f       	mov	r30, r24
    1198:	e2 95       	swap	r30
    119a:	ef 70       	andi	r30, 0x0F	; 15
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	21 a1       	ldd	r18, Z+33	; 0x21
    11a0:	8f 70       	andi	r24, 0x0F	; 15
    11a2:	a5 01       	movw	r20, r10
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <_matrix_scan+0x62>
    11a6:	44 0f       	add	r20, r20
    11a8:	55 1f       	adc	r21, r21
    11aa:	8a 95       	dec	r24
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <_matrix_scan+0x5e>
    11ae:	ca 01       	movw	r24, r20
    11b0:	92 2f       	mov	r25, r18
    11b2:	98 2b       	or	r25, r24
    11b4:	91 a3       	std	Z+33, r25	; 0x21
    11b6:	92 a1       	ldd	r25, Z+34	; 0x22
    11b8:	80 95       	com	r24
    11ba:	89 23       	and	r24, r25
    11bc:	82 a3       	std	Z+34, r24	; 0x22
    11be:	50 ea       	ldi	r21, 0xA0	; 160
    11c0:	5a 95       	dec	r21
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <_matrix_scan+0x78>
    11c4:	e6 e1       	ldi	r30, 0x16	; 22
    11c6:	f1 e0       	ldi	r31, 0x01	; 1
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	31 91       	ld	r19, Z+
    11d0:	a3 2f       	mov	r26, r19
    11d2:	a2 95       	swap	r26
    11d4:	af 70       	andi	r26, 0x0F	; 15
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	90 96       	adiw	r26, 0x20	; 32
    11da:	8c 91       	ld	r24, X
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	3f 70       	andi	r19, 0x0F	; 15
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <_matrix_scan+0x9e>
    11e2:	95 95       	asr	r25
    11e4:	87 95       	ror	r24
    11e6:	3a 95       	dec	r19
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <_matrix_scan+0x9a>
    11ea:	80 fd       	sbrc	r24, 0
    11ec:	07 c0       	rjmp	.+14     	; 0x11fc <_matrix_scan+0xb4>
    11ee:	c5 01       	movw	r24, r10
    11f0:	04 2e       	mov	r0, r20
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <_matrix_scan+0xae>
    11f4:	88 0f       	add	r24, r24
    11f6:	0a 94       	dec	r0
    11f8:	ea f7       	brpl	.-6      	; 0x11f4 <_matrix_scan+0xac>
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <_matrix_scan+0xb8>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	28 2b       	or	r18, r24
    1202:	4f 5f       	subi	r20, 0xFF	; 255
    1204:	5f 4f       	sbci	r21, 0xFF	; 255
    1206:	46 30       	cpi	r20, 0x06	; 6
    1208:	51 05       	cpc	r21, r1
    120a:	09 f7       	brne	.-62     	; 0x11ce <_matrix_scan+0x86>
    120c:	f6 01       	movw	r30, r12
    120e:	80 81       	ld	r24, Z
    1210:	82 17       	cp	r24, r18
    1212:	19 f0       	breq	.+6      	; 0x121a <_matrix_scan+0xd2>
    1214:	20 83       	st	Z, r18
    1216:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__data_start>
    121a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <unselect_rows>
    121e:	ff ef       	ldi	r31, 0xFF	; 255
    1220:	cf 1a       	sub	r12, r31
    1222:	df 0a       	sbc	r13, r31
    1224:	90 12       	cpse	r9, r16
    1226:	b4 cf       	rjmp	.-152    	; 0x1190 <_matrix_scan+0x48>
    1228:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    122c:	88 23       	and	r24, r24
    122e:	b1 f0       	breq	.+44     	; 0x125c <_matrix_scan+0x114>
    1230:	81 50       	subi	r24, 0x01	; 1
    1232:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1236:	88 23       	and	r24, r24
    1238:	39 f0       	breq	.+14     	; 0x1248 <_matrix_scan+0x100>
    123a:	8f e9       	ldi	r24, 0x9F	; 159
    123c:	9f e0       	ldi	r25, 0x0F	; 15
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <_matrix_scan+0xf6>
    1242:	00 c0       	rjmp	.+0      	; 0x1244 <_matrix_scan+0xfc>
    1244:	00 00       	nop
    1246:	0a c0       	rjmp	.+20     	; 0x125c <_matrix_scan+0x114>
    1248:	ce 5a       	subi	r28, 0xAE	; 174
    124a:	de 4f       	sbci	r29, 0xFE	; 254
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	f7 01       	movw	r30, r14
    1250:	91 91       	ld	r25, Z+
    1252:	7f 01       	movw	r14, r30
    1254:	99 93       	st	Y+, r25
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	c9 f7       	brne	.-14     	; 0x124e <_matrix_scan+0x106>
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	bf 90       	pop	r11
    1270:	af 90       	pop	r10
    1272:	9f 90       	pop	r9
    1274:	8f 90       	pop	r8
    1276:	08 95       	ret

00001278 <serial_transaction>:
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isLeftHand>
    1280:	81 11       	cpse	r24, r1
    1282:	03 c0       	rjmp	.+6      	; 0x128a <serial_transaction+0x12>
    1284:	c0 e0       	ldi	r28, 0x00	; 0
    1286:	d0 e0       	ldi	r29, 0x00	; 0
    1288:	02 c0       	rjmp	.+4      	; 0x128e <serial_transaction+0x16>
    128a:	c4 e0       	ldi	r28, 0x04	; 4
    128c:	d0 e0       	ldi	r29, 0x00	; 0
    128e:	0e 94 13 0b 	call	0x1626	; 0x1626 <serial_update_buffers>
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	79 f4       	brne	.+30     	; 0x12b4 <serial_transaction+0x3c>
    1296:	ce 5a       	subi	r28, 0xAE	; 174
    1298:	de 4f       	sbci	r29, 0xFE	; 254
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	f9 01       	movw	r30, r18
    12a0:	e1 56       	subi	r30, 0x61	; 97
    12a2:	fe 4f       	sbci	r31, 0xFE	; 254
    12a4:	40 81       	ld	r20, Z
    12a6:	49 93       	st	Y+, r20
    12a8:	2f 5f       	subi	r18, 0xFF	; 255
    12aa:	3f 4f       	sbci	r19, 0xFF	; 255
    12ac:	24 30       	cpi	r18, 0x04	; 4
    12ae:	31 05       	cpc	r19, r1
    12b0:	b1 f7       	brne	.-20     	; 0x129e <serial_transaction+0x26>
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <serial_transaction+0x40>
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <matrix_scan>:
    12be:	cf 93       	push	r28
    12c0:	0e 94 a4 08 	call	0x1148	; 0x1148 <_matrix_scan>
    12c4:	c8 2f       	mov	r28, r24
    12c6:	0e 94 3c 09 	call	0x1278	; 0x1278 <serial_transaction>
    12ca:	89 2b       	or	r24, r25
    12cc:	c1 f0       	breq	.+48     	; 0x12fe <matrix_scan+0x40>
    12ce:	5d 98       	cbi	0x0b, 5	; 11
    12d0:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <error_count>
    12d4:	9f 5f       	subi	r25, 0xFF	; 255
    12d6:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <error_count>
    12da:	96 30       	cpi	r25, 0x06	; 6
    12dc:	98 f0       	brcs	.+38     	; 0x1304 <matrix_scan+0x46>
    12de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isLeftHand>
    12e2:	81 11       	cpse	r24, r1
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <matrix_scan+0x2e>
    12e6:	e0 e0       	ldi	r30, 0x00	; 0
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <matrix_scan+0x32>
    12ec:	e4 e0       	ldi	r30, 0x04	; 4
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	ee 5a       	subi	r30, 0xAE	; 174
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
    12f4:	10 82       	st	Z, r1
    12f6:	11 82       	std	Z+1, r1	; 0x01
    12f8:	12 82       	std	Z+2, r1	; 0x02
    12fa:	13 82       	std	Z+3, r1	; 0x03
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <matrix_scan+0x46>
    12fe:	5d 9a       	sbi	0x0b, 5	; 11
    1300:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <error_count>
    1304:	8c 2f       	mov	r24, r28
    1306:	cf 91       	pop	r28
    1308:	08 95       	ret

0000130a <matrix_slave_scan>:
    130a:	0e 94 a4 08 	call	0x1148	; 0x1148 <_matrix_scan>
    130e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isLeftHand>
    1312:	81 11       	cpse	r24, r1
    1314:	03 c0       	rjmp	.+6      	; 0x131c <matrix_slave_scan+0x12>
    1316:	e4 e0       	ldi	r30, 0x04	; 4
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <matrix_slave_scan+0x16>
    131c:	e0 e0       	ldi	r30, 0x00	; 0
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	ee 5a       	subi	r30, 0xAE	; 174
    1322:	fe 4f       	sbci	r31, 0xFE	; 254
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	21 91       	ld	r18, Z+
    132a:	dc 01       	movw	r26, r24
    132c:	a1 56       	subi	r26, 0x61	; 97
    132e:	be 4f       	sbci	r27, 0xFE	; 254
    1330:	2c 93       	st	X, r18
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	84 30       	cpi	r24, 0x04	; 4
    1336:	91 05       	cpc	r25, r1
    1338:	b9 f7       	brne	.-18     	; 0x1328 <matrix_slave_scan+0x1e>
    133a:	08 95       	ret

0000133c <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    133c:	e8 2f       	mov	r30, r24
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	ee 5a       	subi	r30, 0xAE	; 174
    1342:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1344:	80 81       	ld	r24, Z
    1346:	08 95       	ret

00001348 <matrix_print>:

void matrix_print(void)
{
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    1358:	8a e5       	ldi	r24, 0x5A	; 90
    135a:	93 e0       	ldi	r25, 0x03	; 3
    135c:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    1360:	82 e5       	ldi	r24, 0x52	; 82
    1362:	e8 2e       	mov	r14, r24
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	f8 2e       	mov	r15, r24
    1368:	c0 e0       	ldi	r28, 0x00	; 0
    136a:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    136c:	95 e5       	ldi	r25, 0x55	; 85
    136e:	c9 2e       	mov	r12, r25
    1370:	93 e0       	ldi	r25, 0x03	; 3
    1372:	d9 2e       	mov	r13, r25
        pbin_reverse16(matrix_get_row(row));
    1374:	0c e4       	ldi	r16, 0x4C	; 76
    1376:	13 e0       	ldi	r17, 0x03	; 3

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	df 92       	push	r13
    137e:	cf 92       	push	r12
    1380:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    1384:	82 e5       	ldi	r24, 0x52	; 82
    1386:	93 e0       	ldi	r25, 0x03	; 3
    1388:	0e 94 67 07 	call	0xece	; 0xece <xputs>
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    138c:	f7 01       	movw	r30, r14
    138e:	81 91       	ld	r24, Z+
    1390:	7f 01       	movw	r14, r30
void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <bitrev16>
    1398:	9f 93       	push	r25
    139a:	8f 93       	push	r24
    139c:	1f 93       	push	r17
    139e:	0f 93       	push	r16
    13a0:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
        print("\n");
    13a4:	8a e4       	ldi	r24, 0x4A	; 74
    13a6:	93 e0       	ldi	r25, 0x03	; 3
    13a8:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    13ac:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    13ae:	8d b7       	in	r24, 0x3d	; 61
    13b0:	9e b7       	in	r25, 0x3e	; 62
    13b2:	08 96       	adiw	r24, 0x08	; 8
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	9e bf       	out	0x3e, r25	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	8d bf       	out	0x3d, r24	; 61
    13be:	c8 30       	cpi	r28, 0x08	; 8
    13c0:	d1 05       	cpc	r29, r1
    13c2:	d1 f6       	brne	.-76     	; 0x1378 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	08 95       	ret

000013d6 <__vector_36>:
  TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
}

ISR(TWI_vect);

ISR(TWI_vect) {
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
    13e4:	ef 93       	push	r30
    13e6:	ff 93       	push	r31
  uint8_t ack = 1;
  switch(TW_STATUS) {
    13e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    13ec:	88 7f       	andi	r24, 0xF8	; 248
    13ee:	80 38       	cpi	r24, 0x80	; 128
    13f0:	69 f0       	breq	.+26     	; 0x140c <__vector_36+0x36>
    13f2:	38 f4       	brcc	.+14     	; 0x1402 <__vector_36+0x2c>
    13f4:	88 23       	and	r24, r24
    13f6:	c9 f1       	breq	.+114    	; 0x146a <__vector_36+0x94>
    13f8:	80 36       	cpi	r24, 0x60	; 96
    13fa:	c9 f5       	brne	.+114    	; 0x146e <__vector_36+0x98>
    case TW_SR_SLA_ACK:
      // this device has been addressed as a slave receiver
      slave_has_register_set = false;
    13fc:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <slave_has_register_set>
    1400:	36 c0       	rjmp	.+108    	; 0x146e <__vector_36+0x98>

ISR(TWI_vect);

ISR(TWI_vect) {
  uint8_t ack = 1;
  switch(TW_STATUS) {
    1402:	88 3a       	cpi	r24, 0xA8	; 168
    1404:	09 f1       	breq	.+66     	; 0x1448 <__vector_36+0x72>
    1406:	88 3b       	cpi	r24, 0xB8	; 184
    1408:	f9 f0       	breq	.+62     	; 0x1448 <__vector_36+0x72>
    140a:	31 c0       	rjmp	.+98     	; 0x146e <__vector_36+0x98>
      // this device has received data as a slave receiver
      // The first byte that we receive in this transaction sets the location
      // of the read/write location of the slaves memory that it exposes over
      // i2c.  After that, bytes will be written at slave_buffer_pos, incrementing
      // slave_buffer_pos after each write.
      if(!slave_has_register_set) {
    140c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <slave_has_register_set>
    1410:	81 11       	cpse	r24, r1
    1412:	11 c0       	rjmp	.+34     	; 0x1436 <__vector_36+0x60>
        slave_buffer_pos = TWDR;
    1414:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1418:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <slave_buffer_pos>
        // don't acknowledge the master if this memory loctaion is out of bounds
        if ( slave_buffer_pos >= SLAVE_BUFFER_SIZE ) {
    141c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <slave_buffer_pos>
    1420:	80 34       	cpi	r24, 0x40	; 64
    1422:	20 f0       	brcs	.+8      	; 0x142c <__vector_36+0x56>
          ack = 0;
          slave_buffer_pos = 0;
    1424:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <slave_buffer_pos>
      // slave_buffer_pos after each write.
      if(!slave_has_register_set) {
        slave_buffer_pos = TWDR;
        // don't acknowledge the master if this memory loctaion is out of bounds
        if ( slave_buffer_pos >= SLAVE_BUFFER_SIZE ) {
          ack = 0;
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	01 c0       	rjmp	.+2      	; 0x142e <__vector_36+0x58>
}

ISR(TWI_vect);

ISR(TWI_vect) {
  uint8_t ack = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
        // don't acknowledge the master if this memory loctaion is out of bounds
        if ( slave_buffer_pos >= SLAVE_BUFFER_SIZE ) {
          ack = 0;
          slave_buffer_pos = 0;
        }
        slave_has_register_set = true;
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <slave_has_register_set>
    1434:	1d c0       	rjmp	.+58     	; 0x1470 <__vector_36+0x9a>
      } else {
        i2c_slave_buffer[slave_buffer_pos] = TWDR;
    1436:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <slave_buffer_pos>
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1440:	e3 5a       	subi	r30, 0xA3	; 163
    1442:	fe 4f       	sbci	r31, 0xFE	; 254
    1444:	80 83       	st	Z, r24
    1446:	08 c0       	rjmp	.+16     	; 0x1458 <__vector_36+0x82>

    case TW_ST_SLA_ACK:
    case TW_ST_DATA_ACK:
      // master has addressed this device as a slave transmitter and is
      // requesting data.
      TWDR = i2c_slave_buffer[slave_buffer_pos];
    1448:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <slave_buffer_pos>
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	e3 5a       	subi	r30, 0xA3	; 163
    1450:	fe 4f       	sbci	r31, 0xFE	; 254
    1452:	80 81       	ld	r24, Z
    1454:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      BUFFER_POS_INC();
    1458:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <slave_buffer_pos>
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	8f 73       	andi	r24, 0x3F	; 63
    1462:	99 27       	eor	r25, r25
    1464:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <slave_buffer_pos>
    1468:	02 c0       	rjmp	.+4      	; 0x146e <__vector_36+0x98>
      break;

    case TW_BUS_ERROR: // something went wrong, reset twi state
      TWCR = 0;
    146a:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}

ISR(TWI_vect);

ISR(TWI_vect) {
  uint8_t ack = 1;
    146e:	81 e0       	ldi	r24, 0x01	; 1
      TWCR = 0;
    default:
      break;
  }
  // Reset everything, so we are ready for the next TWI interrupt
  TWCR |= (1<<TWIE) | (1<<TWINT) | (ack<<TWEA) | (1<<TWEN);
    1470:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1474:	95 68       	ori	r25, 0x85	; 133
    1476:	82 95       	swap	r24
    1478:	88 0f       	add	r24, r24
    147a:	88 0f       	add	r24, r24
    147c:	80 7c       	andi	r24, 0xC0	; 192
    147e:	89 2b       	or	r24, r25
    1480:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    1484:	ff 91       	pop	r31
    1486:	ef 91       	pop	r30
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	0f 90       	pop	r0
    1492:	1f 90       	pop	r1
    1494:	18 95       	reti

00001496 <serial_output>:
  _delay_us(SERIAL_DELAY);
}

inline static
void serial_output(void) {
  SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
    1496:	50 9a       	sbi	0x0a, 0	; 10
    1498:	08 95       	ret

0000149a <serial_input>:
}

// make the serial pin an input with pull-up resistor
inline static
void serial_input(void) {
  SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
    149a:	50 98       	cbi	0x0a, 0	; 10
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
    149c:	58 9a       	sbi	0x0b, 0	; 11
    149e:	08 95       	ret

000014a0 <serial_high>:
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
}

inline static
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
    14a0:	58 9a       	sbi	0x0b, 0	; 11
    14a2:	08 95       	ret

000014a4 <sync_send>:
}

// Used by the slave to send a synchronization signal to the master.
static
void sync_send(void) {
  serial_output();
    14a4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <serial_output>
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
    14a8:	58 98       	cbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14aa:	80 e8       	ldi	r24, 0x80	; 128
    14ac:	8a 95       	dec	r24
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <sync_send+0x8>
  serial_output();

  serial_low();
  serial_delay();

  serial_high();
    14b0:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <serial_high>

000014b4 <sync_recv>:
}

// Used by the master to synchronize timing with the slave.
static
void sync_recv(void) {
  serial_input();
    14b4:	0e 94 4d 0a 	call	0x149a	; 0x149a <serial_input>
  // This shouldn't hang if the slave disconnects because the
  // serial line will float to high if the slave does disconnect.
  while (!serial_read_pin());
    14b8:	48 9b       	sbis	0x09, 0	; 9
    14ba:	fe cf       	rjmp	.-4      	; 0x14b8 <sync_recv+0x4>
    14bc:	80 e8       	ldi	r24, 0x80	; 128
    14be:	8a 95       	dec	r24
    14c0:	f1 f7       	brne	.-4      	; 0x14be <sync_recv+0xa>
    14c2:	08 95       	ret

000014c4 <serial_read_byte>:

// Reads a byte from the serial line
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
    14c4:	0e 94 4d 0a 	call	0x149a	; 0x149a <serial_input>
    14c8:	98 e0       	ldi	r25, 0x08	; 8
}

// Reads a byte from the serial line
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
    14ca:	80 e0       	ldi	r24, 0x00	; 0
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
}

inline static
uint8_t serial_read_pin(void) {
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
    14cc:	29 b1       	in	r18, 0x09	; 9
    14ce:	21 70       	andi	r18, 0x01	; 1
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
  for ( uint8_t i = 0; i < 8; ++i) {
    byte = (byte << 1) | serial_read_pin();
    14d0:	88 0f       	add	r24, r24
    14d2:	82 2b       	or	r24, r18
    14d4:	20 e8       	ldi	r18, 0x80	; 128
    14d6:	2a 95       	dec	r18
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <serial_read_byte+0x12>
    14da:	25 e0       	ldi	r18, 0x05	; 5
    14dc:	2a 95       	dec	r18
    14de:	f1 f7       	brne	.-4      	; 0x14dc <serial_read_byte+0x18>
    14e0:	00 00       	nop
    14e2:	91 50       	subi	r25, 0x01	; 1
// Reads a byte from the serial line
static
uint8_t serial_read_byte(void) {
  uint8_t byte = 0;
  serial_input();
  for ( uint8_t i = 0; i < 8; ++i) {
    14e4:	99 f7       	brne	.-26     	; 0x14cc <serial_read_byte+0x8>
    serial_delay();
    _delay_us(1);
  }

  return byte;
}
    14e6:	08 95       	ret

000014e8 <serial_write_byte>:

// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	08 2f       	mov	r16, r24
  uint8_t b = 8;
  serial_output();
    14f0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <serial_output>
}

// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
    14f4:	c8 e0       	ldi	r28, 0x08	; 8
  serial_output();
  while( b-- ) {
    if(data & (1 << b)) {
    14f6:	10 e0       	ldi	r17, 0x00	; 0
// Sends a byte with MSB ordering
static
void serial_write_byte(uint8_t data) {
  uint8_t b = 8;
  serial_output();
  while( b-- ) {
    14f8:	c1 50       	subi	r28, 0x01	; 1
    14fa:	88 f0       	brcs	.+34     	; 0x151e <serial_write_byte+0x36>
    if(data & (1 << b)) {
    14fc:	c8 01       	movw	r24, r16
    14fe:	0c 2e       	mov	r0, r28
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <serial_write_byte+0x1e>
    1502:	95 95       	asr	r25
    1504:	87 95       	ror	r24
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <serial_write_byte+0x1a>
    150a:	80 ff       	sbrs	r24, 0
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <serial_write_byte+0x2c>
      serial_high();
    150e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <serial_high>
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <serial_write_byte+0x2e>
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
    1514:	58 98       	cbi	0x0b, 0	; 11
    1516:	80 e8       	ldi	r24, 0x80	; 128
    1518:	8a 95       	dec	r24
    151a:	f1 f7       	brne	.-4      	; 0x1518 <serial_write_byte+0x30>
    151c:	ed cf       	rjmp	.-38     	; 0x14f8 <serial_write_byte+0x10>
    } else {
      serial_low();
    }
    serial_delay();
  }
}
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	08 95       	ret

00001526 <serial_master_init>:
void serial_high(void) {
  SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
}

void serial_master_init(void) {
  serial_output();
    1526:	0e 94 4b 0a 	call	0x1496	; 0x1496 <serial_output>
  serial_high();
    152a:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <serial_high>

0000152e <serial_slave_init>:
}

void serial_slave_init(void) {
  serial_input();
    152e:	0e 94 4d 0a 	call	0x149a	; 0x149a <serial_input>

  // Enable INT0
  EIMSK |= _BV(INT0);
    1532:	e8 9a       	sbi	0x1d, 0	; 29
  // Trigger on falling edge of INT0
  EICRA &= ~(_BV(ISC00) | _BV(ISC01));
    1534:	e9 e6       	ldi	r30, 0x69	; 105
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	8c 7f       	andi	r24, 0xFC	; 252
    153c:	80 83       	st	Z, r24
    153e:	08 95       	ret

00001540 <__vector_1>:
    serial_delay();
  }
}

// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
    1540:	1f 92       	push	r1
    1542:	0f 92       	push	r0
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	0f 92       	push	r0
    1548:	11 24       	eor	r1, r1
    154a:	cf 92       	push	r12
    154c:	df 92       	push	r13
    154e:	ef 92       	push	r14
    1550:	ff 92       	push	r15
    1552:	1f 93       	push	r17
    1554:	2f 93       	push	r18
    1556:	3f 93       	push	r19
    1558:	4f 93       	push	r20
    155a:	5f 93       	push	r21
    155c:	6f 93       	push	r22
    155e:	7f 93       	push	r23
    1560:	8f 93       	push	r24
    1562:	9f 93       	push	r25
    1564:	af 93       	push	r26
    1566:	bf 93       	push	r27
    1568:	ef 93       	push	r30
    156a:	ff 93       	push	r31
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	1f 92       	push	r1
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
  sync_send();
    1576:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <sync_send>

  uint8_t checksum = 0;
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    157a:	c1 2c       	mov	r12, r1
    157c:	d1 2c       	mov	r13, r1

// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
  sync_send();

  uint8_t checksum = 0;
    157e:	10 e0       	ldi	r17, 0x00	; 0
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_slave_buffer[i]);
    1580:	c6 01       	movw	r24, r12
    1582:	81 56       	subi	r24, 0x61	; 97
    1584:	9e 4f       	sbci	r25, 0xFE	; 254
    1586:	7c 01       	movw	r14, r24
    1588:	fc 01       	movw	r30, r24
    158a:	80 81       	ld	r24, Z
    158c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <serial_write_byte>
    sync_send();
    1590:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <sync_send>
    checksum += serial_slave_buffer[i];
    1594:	f7 01       	movw	r30, r14
    1596:	80 81       	ld	r24, Z
    1598:	18 0f       	add	r17, r24
// interrupt handle to be used by the slave device
ISR(SERIAL_PIN_INTERRUPT) {
  sync_send();

  uint8_t checksum = 0;
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    159a:	ff ef       	ldi	r31, 0xFF	; 255
    159c:	cf 1a       	sub	r12, r31
    159e:	df 0a       	sbc	r13, r31
    15a0:	84 e0       	ldi	r24, 0x04	; 4
    15a2:	c8 16       	cp	r12, r24
    15a4:	d1 04       	cpc	r13, r1
    15a6:	61 f7       	brne	.-40     	; 0x1580 <__vector_1+0x40>
    serial_write_byte(serial_slave_buffer[i]);
    sync_send();
    checksum += serial_slave_buffer[i];
  }
  serial_write_byte(checksum);
    15a8:	81 2f       	mov	r24, r17
    15aa:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <serial_write_byte>
  sync_send();
    15ae:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <sync_send>
    15b2:	90 e8       	ldi	r25, 0x80	; 128
    15b4:	9a 95       	dec	r25
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <__vector_1+0x74>
    15b8:	e0 e4       	ldi	r30, 0x40	; 64
    15ba:	ea 95       	dec	r30
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <__vector_1+0x7a>
  // read the middle of pulses
  _delay_us(SERIAL_DELAY/2);

  uint8_t checksum_computed = 0;
  for (int i = 0; i < SERIAL_MASTER_BUFFER_LENGTH; ++i) {
    serial_master_buffer[i] = serial_read_byte();
    15be:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <serial_read_byte>
    15c2:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <serial_master_buffer>
    sync_send();
    15c6:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <sync_send>
    checksum_computed += serial_master_buffer[i];
    15ca:	10 91 9e 01 	lds	r17, 0x019E	; 0x80019e <serial_master_buffer>
  }
  uint8_t checksum_received = serial_read_byte();
    15ce:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <serial_read_byte>
  sync_send();
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <sync_send>

  serial_input(); // end transaction
    15d8:	0e 94 4d 0a 	call	0x149a	; 0x149a <serial_input>

  if ( checksum_computed != checksum_received ) {
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	18 17       	cp	r17, r24
    15e0:	21 f0       	breq	.+8      	; 0x15ea <__vector_1+0xaa>
    status |= SLAVE_DATA_CORRUPT;
    15e2:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <status>
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <__vector_1+0xb0>
  } else {
    status &= ~SLAVE_DATA_CORRUPT;
    15ea:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <status>
    15ee:	8e 7f       	andi	r24, 0xFE	; 254
    15f0:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <status>
  }
}
    15f4:	0f 90       	pop	r0
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	ff 91       	pop	r31
    15fc:	ef 91       	pop	r30
    15fe:	bf 91       	pop	r27
    1600:	af 91       	pop	r26
    1602:	9f 91       	pop	r25
    1604:	8f 91       	pop	r24
    1606:	7f 91       	pop	r23
    1608:	6f 91       	pop	r22
    160a:	5f 91       	pop	r21
    160c:	4f 91       	pop	r20
    160e:	3f 91       	pop	r19
    1610:	2f 91       	pop	r18
    1612:	1f 91       	pop	r17
    1614:	ff 90       	pop	r15
    1616:	ef 90       	pop	r14
    1618:	df 90       	pop	r13
    161a:	cf 90       	pop	r12
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	0f 90       	pop	r0
    1622:	1f 90       	pop	r1
    1624:	18 95       	reti

00001626 <serial_update_buffers>:
// serial_master_buffer to the slave.
//
// Returns:
// 0 => no error
// 1 => slave did not respond
int serial_update_buffers(void) {
    1626:	cf 92       	push	r12
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	1f 93       	push	r17
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	1f 92       	push	r1
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
  // this code is very time dependent, so we need to disable interrupts
  cli();
    163a:	f8 94       	cli

  // signal to the slave that we want to start a transaction
  serial_output();
    163c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <serial_output>
  return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
}

inline static
void serial_low(void) {
  SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
    1640:	58 98       	cbi	0x0b, 0	; 11
    1642:	25 e0       	ldi	r18, 0x05	; 5
    1644:	2a 95       	dec	r18
    1646:	f1 f7       	brne	.-4      	; 0x1644 <serial_update_buffers+0x1e>
    1648:	00 00       	nop
  serial_output();
  serial_low();
  _delay_us(1);

  // wait for the slaves response
  serial_input();
    164a:	0e 94 4d 0a 	call	0x149a	; 0x149a <serial_input>
  serial_high();
    164e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <serial_high>
    1652:	30 e8       	ldi	r19, 0x80	; 128
    1654:	3a 95       	dec	r19
    1656:	f1 f7       	brne	.-4      	; 0x1654 <serial_update_buffers+0x2e>
  _delay_us(SERIAL_DELAY);

  // check if the slave is present
  if (serial_read_pin()) {
    1658:	48 99       	sbic	0x09, 0	; 9
    165a:	34 c0       	rjmp	.+104    	; 0x16c4 <serial_update_buffers+0x9e>
    sei();
    return 1;
  }

  // if the slave is present syncronize with it
  sync_recv();
    165c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <sync_recv>

  uint8_t checksum_computed = 0;
  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    1660:	c1 2c       	mov	r12, r1
    1662:	d1 2c       	mov	r13, r1
  }

  // if the slave is present syncronize with it
  sync_recv();

  uint8_t checksum_computed = 0;
    1664:	10 e0       	ldi	r17, 0x00	; 0
  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    serial_slave_buffer[i] = serial_read_byte();
    1666:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <serial_read_byte>
    166a:	f6 01       	movw	r30, r12
    166c:	e1 56       	subi	r30, 0x61	; 97
    166e:	fe 4f       	sbci	r31, 0xFE	; 254
    1670:	7f 01       	movw	r14, r30
    1672:	80 83       	st	Z, r24
    sync_recv();
    1674:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <sync_recv>
    checksum_computed += serial_slave_buffer[i];
    1678:	f7 01       	movw	r30, r14
    167a:	80 81       	ld	r24, Z
    167c:	18 0f       	add	r17, r24
  // if the slave is present syncronize with it
  sync_recv();

  uint8_t checksum_computed = 0;
  // receive data from the slave
  for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
    167e:	ff ef       	ldi	r31, 0xFF	; 255
    1680:	cf 1a       	sub	r12, r31
    1682:	df 0a       	sbc	r13, r31
    1684:	24 e0       	ldi	r18, 0x04	; 4
    1686:	c2 16       	cp	r12, r18
    1688:	d1 04       	cpc	r13, r1
    168a:	69 f7       	brne	.-38     	; 0x1666 <serial_update_buffers+0x40>
    serial_slave_buffer[i] = serial_read_byte();
    sync_recv();
    checksum_computed += serial_slave_buffer[i];
  }
  uint8_t checksum_received = serial_read_byte();
    168c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <serial_read_byte>
  sync_recv();
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <sync_recv>

  if (checksum_computed != checksum_received) {
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	18 13       	cpse	r17, r24
    169a:	14 c0       	rjmp	.+40     	; 0x16c4 <serial_update_buffers+0x9e>
  }

  uint8_t checksum = 0;
  // send data to the slave
  for (int i = 0; i < SERIAL_MASTER_BUFFER_LENGTH; ++i) {
    serial_write_byte(serial_master_buffer[i]);
    169c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <serial_master_buffer>
    16a0:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <serial_write_byte>
    sync_recv();
    16a4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <sync_recv>
    checksum += serial_master_buffer[i];
    16a8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <serial_master_buffer>
  }
  serial_write_byte(checksum);
    16ac:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <serial_write_byte>
  sync_recv();
    16b0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <sync_recv>

  // always, release the line when not in use
  serial_output();
    16b4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <serial_output>
  serial_high();
    16b8:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <serial_high>

  sei();
    16bc:	78 94       	sei
  return 0;
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <serial_update_buffers+0xa4>
  }
  uint8_t checksum_received = serial_read_byte();
  sync_recv();

  if (checksum_computed != checksum_received) {
    sei();
    16c4:	78 94       	sei
    return 1;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
  serial_output();
  serial_high();

  sei();
  return 0;
}
    16ca:	0f 90       	pop	r0
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	ff 90       	pop	r15
    16d4:	ef 90       	pop	r14
    16d6:	df 90       	pop	r13
    16d8:	cf 90       	pop	r12
    16da:	08 95       	ret

000016dc <has_usb>:
    serial_slave_init();
#endif
}

bool has_usb(void) {
   USBCON |= (1 << OTGPADE); //enables VBUS pad
    16dc:	e8 ed       	ldi	r30, 0xD8	; 216
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	80 61       	ori	r24, 0x10	; 16
    16e4:	80 83       	st	Z, r24
    16e6:	8a e1       	ldi	r24, 0x1A	; 26
    16e8:	8a 95       	dec	r24
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <has_usb+0xc>
    16ec:	00 c0       	rjmp	.+0      	; 0x16ee <has_usb+0x12>
   _delay_us(5);
   return (USBSTA & (1<<VBUS));  //checks state of VBUS
    16ee:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
}
    16f2:	81 70       	andi	r24, 0x01	; 1
    16f4:	08 95       	ret

000016f6 <split_keyboard_setup>:
#include "config.h"

volatile bool isLeftHand = true;

static void setup_handedness(void) {
    isLeftHand = eeprom_read_byte(EECONFIG_HANDEDNESS);
    16f6:	87 e0       	ldi	r24, 0x07	; 7
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <eeprom_read_byte>
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	81 11       	cpse	r24, r1
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <split_keyboard_setup+0x10>
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <isLeftHand>
}

void split_keyboard_setup(void) {
   setup_handedness();

   if (has_usb()) {
    170a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <has_usb>
    170e:	88 23       	and	r24, r24
    1710:	19 f0       	breq	.+6      	; 0x1718 <split_keyboard_setup+0x22>

static void keyboard_master_setup(void) {
#ifdef USE_I2C
    i2c_master_init();
#else
    serial_master_init();
    1712:	0e 94 93 0a 	call	0x1526	; 0x1526 <serial_master_init>
    1716:	02 c0       	rjmp	.+4      	; 0x171c <split_keyboard_setup+0x26>

static void keyboard_slave_setup(void) {
#ifdef USE_I2C
    i2c_slave_init(SLAVE_I2C_ADDRESS);
#else
    serial_slave_init();
    1718:	0e 94 97 0a 	call	0x152e	; 0x152e <serial_slave_init>
   if (has_usb()) {
      keyboard_master_setup();
   } else {
      keyboard_slave_setup();
   }
   sei();
    171c:	78 94       	sei
    171e:	08 95       	ret

00001720 <keyboard_slave_loop>:
}

void keyboard_slave_loop(void) {
   matrix_init();
    1720:	0e 94 72 08 	call	0x10e4	; 0x10e4 <matrix_init>

   while (1) {
      matrix_slave_scan();
    1724:	0e 94 85 09 	call	0x130a	; 0x130a <matrix_slave_scan>
   }
    1728:	fd cf       	rjmp	.-6      	; 0x1724 <keyboard_slave_loop+0x4>

0000172a <matrix_setup>:
}

// this code runs before the usb and keyboard is initialized
void matrix_setup(void) {
    split_keyboard_setup();
    172a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <split_keyboard_setup>

    if (!has_usb()) {
    172e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <has_usb>
    1732:	81 11       	cpse	r24, r1
    1734:	02 c0       	rjmp	.+4      	; 0x173a <matrix_setup+0x10>
        keyboard_slave_loop();
    1736:	0e 94 90 0b 	call	0x1720	; 0x1720 <keyboard_slave_loop>
    173a:	08 95       	ret

0000173c <led_set>:
#include <avr/io.h>
#include "stdint.h"
#include "led.h"

void led_set(uint8_t usb_led)
{
    173c:	08 95       	ret

0000173e <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    173e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <keyboard_led_stats>
    1742:	08 95       	ret

00001744 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1744:	9f b7       	in	r25, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <console_flush>
    174c:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    174e:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <USB_DeviceState>
    1752:	94 30       	cpi	r25, 0x04	; 4
    1754:	09 f0       	breq	.+2      	; 0x1758 <sendchar+0x14>
    1756:	57 c0       	rjmp	.+174    	; 0x1806 <sendchar+0xc2>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1758:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    175c:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    175e:	30 91 ec 00 	lds	r19, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1762:	23 2f       	mov	r18, r19
    1764:	21 70       	andi	r18, 0x01	; 1
    1766:	30 fd       	sbrc	r19, 0
    1768:	20 e8       	ldi	r18, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    176a:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    176c:	24 e0       	ldi	r18, 0x04	; 4
    176e:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1772:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1776:	20 ff       	sbrs	r18, 0
    1778:	43 c0       	rjmp	.+134    	; 0x1800 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    177a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    177e:	27 ff       	sbrs	r18, 7
    1780:	3f c0       	rjmp	.+126    	; 0x1800 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1782:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <timeouted.4812>
    1786:	22 23       	and	r18, r18
    1788:	21 f0       	breq	.+8      	; 0x1792 <sendchar+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    178a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    178e:	25 ff       	sbrs	r18, 5
    1790:	37 c0       	rjmp	.+110    	; 0x1800 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1792:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <timeouted.4812>

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1796:	26 e0       	ldi	r18, 0x06	; 6
    1798:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    179c:	35 fd       	sbrc	r19, 5
    179e:	15 c0       	rjmp	.+42     	; 0x17ca <sendchar+0x86>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    17a0:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <USB_DeviceState>
    17a4:	34 30       	cpi	r19, 0x04	; 4
    17a6:	61 f5       	brne	.+88     	; 0x1800 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    17a8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    17ac:	35 fd       	sbrc	r19, 5
    17ae:	28 c0       	rjmp	.+80     	; 0x1800 <sendchar+0xbc>
    17b0:	21 50       	subi	r18, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    17b2:	21 f4       	brne	.+8      	; 0x17bc <sendchar+0x78>
            timeouted = true;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <timeouted.4812>
            goto ERROR_EXIT;
    17ba:	22 c0       	rjmp	.+68     	; 0x1800 <sendchar+0xbc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17bc:	ef e9       	ldi	r30, 0x9F	; 159
    17be:	ff e0       	ldi	r31, 0x0F	; 15
    17c0:	31 97       	sbiw	r30, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <sendchar+0x7c>
    17c4:	00 c0       	rjmp	.+0      	; 0x17c6 <sendchar+0x82>
    17c6:	00 00       	nop
    17c8:	e7 cf       	rjmp	.-50     	; 0x1798 <sendchar+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    17d2:	85 fd       	sbrc	r24, 5
    17d4:	0a c0       	rjmp	.+20     	; 0x17ea <sendchar+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (!(Endpoint_IsINReady()));
    17da:	80 ff       	sbrs	r24, 0
    17dc:	fc cf       	rjmp	.-8      	; 0x17d6 <sendchar+0x92>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17e2:	8e 77       	andi	r24, 0x7E	; 126
    17e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <sendchar+0xb2>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    17ea:	8f b7       	in	r24, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	21 e0       	ldi	r18, 0x01	; 1
    17f0:	20 93 a5 01 	sts	0x01A5, r18	; 0x8001a5 <console_flush>
    17f4:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17f6:	9f 70       	andi	r25, 0x0F	; 15
    17f8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	08 95       	ret
    1800:	9f 70       	andi	r25, 0x0F	; 15
    1802:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1806:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1808:	08 95       	ret

0000180a <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	00 d0       	rcall	.+0      	; 0x1810 <send_consumer+0x6>
    1810:	1f 92       	push	r1
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	9c 01       	movw	r18, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1818:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <USB_DeviceState>
    181c:	84 30       	cpi	r24, 0x04	; 4
    181e:	19 f5       	brne	.+70     	; 0x1866 <send_consumer+0x5c>
        return;

    report_extra_t r = {
    1820:	93 e0       	ldi	r25, 0x03	; 3
    1822:	99 83       	std	Y+1, r25	; 0x01
    1824:	3b 83       	std	Y+3, r19	; 0x03
    1826:	2a 83       	std	Y+2, r18	; 0x02
    1828:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    182c:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    182e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1832:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1834:	95 fd       	sbrc	r25, 5
    1836:	06 c0       	rjmp	.+12     	; 0x1844 <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1838:	95 ed       	ldi	r25, 0xD5	; 213
    183a:	9a 95       	dec	r25
    183c:	f1 f7       	brne	.-4      	; 0x183a <send_consumer+0x30>
    183e:	00 00       	nop
    1840:	81 11       	cpse	r24, r1
    1842:	f5 cf       	rjmp	.-22     	; 0x182e <send_consumer+0x24>
    1844:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1848:	85 ff       	sbrs	r24, 5
    184a:	0d c0       	rjmp	.+26     	; 0x1866 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	63 e0       	ldi	r22, 0x03	; 3
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	ce 01       	movw	r24, r28
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    185c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1860:	8e 77       	andi	r24, 0x7E	; 126
    1862:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    Endpoint_ClearIN();
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	00 d0       	rcall	.+0      	; 0x1878 <send_system+0x6>
    1878:	1f 92       	push	r1
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    187e:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <USB_DeviceState>
    1882:	24 30       	cpi	r18, 0x04	; 4
    1884:	21 f5       	brne	.+72     	; 0x18ce <send_system+0x5c>
        return;

    report_extra_t r = {
    1886:	22 e0       	ldi	r18, 0x02	; 2
    1888:	29 83       	std	Y+1, r18	; 0x01
    188a:	9b 83       	std	Y+3, r25	; 0x03
    188c:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    188e:	83 e0       	ldi	r24, 0x03	; 3
    1890:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1894:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1896:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    189a:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    189c:	95 fd       	sbrc	r25, 5
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <send_system+0x3a>
    18a0:	95 ed       	ldi	r25, 0xD5	; 213
    18a2:	9a 95       	dec	r25
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <send_system+0x30>
    18a6:	00 00       	nop
    18a8:	81 11       	cpse	r24, r1
    18aa:	f5 cf       	rjmp	.-22     	; 0x1896 <send_system+0x24>
    18ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    18b0:	85 ff       	sbrs	r24, 5
    18b2:	0d c0       	rjmp	.+26     	; 0x18ce <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	63 e0       	ldi	r22, 0x03	; 3
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	ce 01       	movw	r24, r28
    18be:	01 96       	adiw	r24, 0x01	; 1
    18c0:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18c8:	8e 77       	andi	r24, 0x7E	; 126
    18ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    Endpoint_ClearIN();
}
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	08 95       	ret

000018da <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    18da:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <USB_DeviceState>
    18de:	24 30       	cpi	r18, 0x04	; 4
    18e0:	f1 f4       	brne	.+60     	; 0x191e <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18e2:	22 e0       	ldi	r18, 0x02	; 2
    18e4:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    18e8:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18ea:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18ee:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    18f0:	35 fd       	sbrc	r19, 5
    18f2:	06 c0       	rjmp	.+12     	; 0x1900 <send_mouse+0x26>
    18f4:	35 ed       	ldi	r19, 0xD5	; 213
    18f6:	3a 95       	dec	r19
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <send_mouse+0x1c>
    18fa:	00 00       	nop
    18fc:	21 11       	cpse	r18, r1
    18fe:	f5 cf       	rjmp	.-22     	; 0x18ea <send_mouse+0x10>
    1900:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1904:	25 ff       	sbrs	r18, 5
    1906:	0b c0       	rjmp	.+22     	; 0x191e <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	65 e0       	ldi	r22, 0x05	; 5
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1914:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1918:	8e 77       	andi	r24, 0x7E	; 126
    191a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    191e:	08 95       	ret

00001920 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1924:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <USB_DeviceState>
    1928:	24 30       	cpi	r18, 0x04	; 4
    192a:	09 f0       	breq	.+2      	; 0x192e <send_keyboard+0xe>
    192c:	48 c0       	rjmp	.+144    	; 0x19be <send_keyboard+0x9e>
    192e:	ec 01       	movw	r28, r24
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    1930:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_protocol>
    1934:	88 23       	and	r24, r24
    1936:	e1 f0       	breq	.+56     	; 0x1970 <send_keyboard+0x50>
    1938:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <keyboard_nkro>
    193c:	88 23       	and	r24, r24
    193e:	c1 f0       	breq	.+48     	; 0x1970 <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1940:	85 e0       	ldi	r24, 0x05	; 5
    1942:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1946:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1948:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    194c:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    194e:	95 fd       	sbrc	r25, 5
    1950:	06 c0       	rjmp	.+12     	; 0x195e <send_keyboard+0x3e>
    1952:	95 e1       	ldi	r25, 0x15	; 21
    1954:	9a 95       	dec	r25
    1956:	f1 f7       	brne	.-4      	; 0x1954 <send_keyboard+0x34>
    1958:	00 00       	nop
    195a:	81 11       	cpse	r24, r1
    195c:	f5 cf       	rjmp	.-22     	; 0x1948 <send_keyboard+0x28>
    195e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    1962:	85 ff       	sbrs	r24, 5
    1964:	2c c0       	rjmp	.+88     	; 0x19be <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	60 e1       	ldi	r22, 0x10	; 16
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	17 c0       	rjmp	.+46     	; 0x199e <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1976:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1978:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    197c:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    197e:	95 fd       	sbrc	r25, 5
    1980:	06 c0       	rjmp	.+12     	; 0x198e <send_keyboard+0x6e>
    1982:	95 ed       	ldi	r25, 0xD5	; 213
    1984:	9a 95       	dec	r25
    1986:	f1 f7       	brne	.-4      	; 0x1984 <send_keyboard+0x64>
    1988:	00 00       	nop
    198a:	81 11       	cpse	r24, r1
    198c:	f5 cf       	rjmp	.-22     	; 0x1978 <send_keyboard+0x58>
    198e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    1992:	85 ff       	sbrs	r24, 5
    1994:	14 c0       	rjmp	.+40     	; 0x19be <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	68 e0       	ldi	r22, 0x08	; 8
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	ce 01       	movw	r24, r28
    19a0:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19a8:	8e 77       	andi	r24, 0x7E	; 126
    19aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    19ae:	80 e1       	ldi	r24, 0x10	; 16
    19b0:	fe 01       	movw	r30, r28
    19b2:	a6 ea       	ldi	r26, 0xA6	; 166
    19b4:	b1 e0       	ldi	r27, 0x01	; 1
    19b6:	01 90       	ld	r0, Z+
    19b8:	0d 92       	st	X+, r0
    19ba:	8a 95       	dec	r24
    19bc:	e1 f7       	brne	.-8      	; 0x19b6 <send_keyboard+0x96>
}
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	08 95       	ret

000019c4 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    19c4:	87 ea       	ldi	r24, 0xA7	; 167
    19c6:	93 e0       	ldi	r25, 0x03	; 3
    19c8:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    19cc:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <USB_IsInitialized>
    19d0:	81 11       	cpse	r24, r1
    19d2:	09 c0       	rjmp	.+18     	; 0x19e6 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    19d4:	0e 94 73 10 	call	0x20e6	; 0x20e6 <USB_Disable>
        USB_Init();
    19d8:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    19dc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    19e0:	84 60       	ori	r24, 0x04	; 4
    19e2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    19e6:	08 95       	ret

000019e8 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    19e8:	83 ea       	ldi	r24, 0xA3	; 163
    19ea:	93 e0       	ldi	r25, 0x03	; 3
    19ec:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    19f0:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <USB_IsInitialized>
    19f4:	08 95       	ret

000019f6 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    19f6:	8f e9       	ldi	r24, 0x9F	; 159
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	0c 94 67 07 	jmp	0xece	; 0xece <xputs>

000019fe <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    19fe:	8b e9       	ldi	r24, 0x9B	; 155
    1a00:	93 e0       	ldi	r25, 0x03	; 3
    1a02:	0e 94 67 07 	call	0xece	; 0xece <xputs>
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
    1a06:	0c 94 1e 2a 	jmp	0x543c	; 0x543c <sleep_led_enable>

00001a0a <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    1a0a:	87 e9       	ldi	r24, 0x97	; 151
    1a0c:	93 e0       	ldi	r25, 0x03	; 3
    1a0e:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    suspend_wakeup_init();
    1a12:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <suspend_wakeup_init>

#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
    1a16:	0e 94 24 2a 	call	0x5448	; 0x5448 <sleep_led_disable>
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
    1a1a:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <host_keyboard_leds>
    1a1e:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <led_set>

00001a22 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1a22:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <count.4742>
    1a26:	2f 5f       	subi	r18, 0xFF	; 255
    1a28:	82 2f       	mov	r24, r18
    1a2a:	62 e3       	ldi	r22, 0x32	; 50
    1a2c:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__udivmodqi4>
    1a30:	99 23       	and	r25, r25
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <EVENT_USB_Device_StartOfFrame+0x18>
    1a34:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <count.4742>
    1a38:	08 95       	ret
    count = 0;
    1a3a:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <count.4742>

    if (!console_flush) return;
    1a3e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <console_flush>
    1a42:	88 23       	and	r24, r24
    1a44:	71 f1       	breq	.+92     	; 0x1aa2 <EVENT_USB_Device_StartOfFrame+0x80>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1a46:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <USB_DeviceState>
    1a4a:	84 30       	cpi	r24, 0x04	; 4
    1a4c:	41 f5       	brne	.+80     	; 0x1a9e <EVENT_USB_Device_StartOfFrame+0x7c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1a4e:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1a52:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a54:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1a58:	92 2f       	mov	r25, r18
    1a5a:	91 70       	andi	r25, 0x01	; 1
    1a5c:	20 fd       	sbrc	r18, 0
    1a5e:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1a60:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a62:	94 e0       	ldi	r25, 0x04	; 4
    1a64:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1a68:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1a6c:	90 ff       	sbrs	r25, 0
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <EVENT_USB_Device_StartOfFrame+0x76>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1a70:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1a74:	97 ff       	sbrs	r25, 7
    1a76:	10 c0       	rjmp	.+32     	; 0x1a98 <EVENT_USB_Device_StartOfFrame+0x76>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a78:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1a7c:	95 ff       	sbrs	r25, 5
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <EVENT_USB_Device_StartOfFrame+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a80:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1a84:	f9 cf       	rjmp	.-14     	; 0x1a78 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a86:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1a8a:	90 ff       	sbrs	r25, 0
    1a8c:	05 c0       	rjmp	.+10     	; 0x1a98 <EVENT_USB_Device_StartOfFrame+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a8e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a92:	9e 77       	andi	r25, 0x7E	; 126
    1a94:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a98:	8f 70       	andi	r24, 0x0F	; 15
    1a9a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1a9e:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <console_flush>
    1aa2:	08 95       	ret

00001aa4 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1aa4:	42 e0       	ldi	r20, 0x02	; 2
    1aa6:	61 ec       	ldi	r22, 0xC1	; 193
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <Endpoint_ConfigureEndpoint_Prv>
    1aae:	42 e0       	ldi	r20, 0x02	; 2
    1ab0:	61 ec       	ldi	r22, 0xC1	; 193
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <Endpoint_ConfigureEndpoint_Prv>
    1ab8:	42 e0       	ldi	r20, 0x02	; 2
    1aba:	61 ec       	ldi	r22, 0xC1	; 193
    1abc:	83 e0       	ldi	r24, 0x03	; 3
    1abe:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <Endpoint_ConfigureEndpoint_Prv>
    1ac2:	42 e2       	ldi	r20, 0x22	; 34
    1ac4:	61 ec       	ldi	r22, 0xC1	; 193
    1ac6:	84 e0       	ldi	r24, 0x04	; 4
    1ac8:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <Endpoint_ConfigureEndpoint_Prv>
    1acc:	42 e1       	ldi	r20, 0x12	; 18
    1ace:	61 ec       	ldi	r22, 0xC1	; 193
    1ad0:	85 e0       	ldi	r24, 0x05	; 5
    1ad2:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <Endpoint_ConfigureEndpoint_Prv>

00001ad6 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1ad6:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <USB_ControlRequest+0x1>
    1ada:	83 30       	cpi	r24, 0x03	; 3
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <EVENT_USB_Device_ControlRequest+0xa>
    1ade:	55 c0       	rjmp	.+170    	; 0x1b8a <EVENT_USB_Device_ControlRequest+0xb4>
    1ae0:	30 f4       	brcc	.+12     	; 0x1aee <EVENT_USB_Device_ControlRequest+0x18>
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	71 f0       	breq	.+28     	; 0x1b02 <EVENT_USB_Device_ControlRequest+0x2c>
    1ae6:	82 30       	cpi	r24, 0x02	; 2
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <EVENT_USB_Device_ControlRequest+0x16>
    1aea:	8e c0       	rjmp	.+284    	; 0x1c08 <EVENT_USB_Device_ControlRequest+0x132>
    1aec:	08 95       	ret
    1aee:	8a 30       	cpi	r24, 0x0A	; 10
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <EVENT_USB_Device_ControlRequest+0x1e>
    1af2:	7a c0       	rjmp	.+244    	; 0x1be8 <EVENT_USB_Device_ControlRequest+0x112>
    1af4:	8b 30       	cpi	r24, 0x0B	; 11
    1af6:	09 f4       	brne	.+2      	; 0x1afa <EVENT_USB_Device_ControlRequest+0x24>
    1af8:	60 c0       	rjmp	.+192    	; 0x1bba <EVENT_USB_Device_ControlRequest+0xe4>
    1afa:	89 30       	cpi	r24, 0x09	; 9
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <EVENT_USB_Device_ControlRequest+0x2a>
    1afe:	9c c0       	rjmp	.+312    	; 0x1c38 <EVENT_USB_Device_ControlRequest+0x162>
    1b00:	20 c0       	rjmp	.+64     	; 0x1b42 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1b02:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_ControlRequest>
    1b06:	81 3a       	cpi	r24, 0xA1	; 161
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <EVENT_USB_Device_ControlRequest+0x36>
    1b0a:	96 c0       	rjmp	.+300    	; 0x1c38 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b10:	87 7f       	andi	r24, 0xF7	; 247
    1b12:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1b16:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <USB_ControlRequest+0x4>
    1b1a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <USB_ControlRequest+0x5>
    1b1e:	89 2b       	or	r24, r25
    1b20:	21 f4       	brne	.+8      	; 0x1b2a <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1b22:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1b24:	86 ea       	ldi	r24, 0xA6	; 166
    1b26:	91 e0       	ldi	r25, 0x01	; 1
    1b28:	03 c0       	rjmp	.+6      	; 0x1b30 <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b3a:	8b 77       	andi	r24, 0x7B	; 123
    1b3c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b40:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b42:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_ControlRequest>
    1b46:	81 32       	cpi	r24, 0x21	; 33
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <EVENT_USB_Device_ControlRequest+0x76>
    1b4a:	76 c0       	rjmp	.+236    	; 0x1c38 <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1b4c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <USB_ControlRequest+0x4>
    1b50:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <USB_ControlRequest+0x5>
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	19 f0       	breq	.+6      	; 0x1b5e <EVENT_USB_Device_ControlRequest+0x88>
    1b58:	04 97       	sbiw	r24, 0x04	; 4
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <EVENT_USB_Device_ControlRequest+0x88>
    1b5c:	6d c0       	rjmp	.+218    	; 0x1c38 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b62:	87 7f       	andi	r24, 0xF7	; 247
    1b64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1b6c:	82 fd       	sbrc	r24, 2
    1b6e:	05 c0       	rjmp	.+10     	; 0x1b7a <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b70:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <USB_DeviceState>
    1b74:	81 11       	cpse	r24, r1
    1b76:	f8 cf       	rjmp	.-16     	; 0x1b68 <EVENT_USB_Device_ControlRequest+0x92>
    1b78:	5f c0       	rjmp	.+190    	; 0x1c38 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1b7a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1b7e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <keyboard_led_stats>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b86:	8b 77       	andi	r24, 0x7B	; 123
    1b88:	53 c0       	rjmp	.+166    	; 0x1c30 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1b8a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_ControlRequest>
    1b8e:	81 3a       	cpi	r24, 0xA1	; 161
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <EVENT_USB_Device_ControlRequest+0xbe>
    1b92:	52 c0       	rjmp	.+164    	; 0x1c38 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1b94:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <USB_ControlRequest+0x4>
    1b98:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <USB_ControlRequest+0x5>
    1b9c:	89 2b       	or	r24, r25
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <EVENT_USB_Device_ControlRequest+0xcc>
    1ba0:	4b c0       	rjmp	.+150    	; 0x1c38 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ba2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ba6:	87 7f       	andi	r24, 0xF7	; 247
    1ba8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1bb0:	80 ff       	sbrs	r24, 0
    1bb2:	fc cf       	rjmp	.-8      	; 0x1bac <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    1bb4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_protocol>
    1bb8:	36 c0       	rjmp	.+108    	; 0x1c26 <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1bba:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_ControlRequest>
    1bbe:	81 32       	cpi	r24, 0x21	; 33
    1bc0:	d9 f5       	brne	.+118    	; 0x1c38 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1bc2:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <USB_ControlRequest+0x4>
    1bc6:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <USB_ControlRequest+0x5>
    1bca:	89 2b       	or	r24, r25
    1bcc:	a9 f5       	brne	.+106    	; 0x1c38 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1bce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bd2:	87 7f       	andi	r24, 0xF7	; 247
    1bd4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1bd8:	0e 94 22 10 	call	0x2044	; 0x2044 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1bdc:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <USB_ControlRequest+0x2>
    1be0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <keyboard_protocol>
                    clear_keyboard();
    1be4:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1be8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_ControlRequest>
    1bec:	81 32       	cpi	r24, 0x21	; 33
    1bee:	21 f5       	brne	.+72     	; 0x1c38 <EVENT_USB_Device_ControlRequest+0x162>
    1bf0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bf4:	87 7f       	andi	r24, 0xF7	; 247
    1bf6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1bfa:	0e 94 22 10 	call	0x2044	; 0x2044 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1bfe:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <USB_ControlRequest+0x3>
    1c02:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <keyboard_idle>
    1c06:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1c08:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_ControlRequest>
    1c0c:	81 3a       	cpi	r24, 0xA1	; 161
    1c0e:	a1 f4       	brne	.+40     	; 0x1c38 <EVENT_USB_Device_ControlRequest+0x162>
    1c10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c14:	87 7f       	andi	r24, 0xF7	; 247
    1c16:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1c1e:	80 ff       	sbrs	r24, 0
    1c20:	fc cf       	rjmp	.-8      	; 0x1c1a <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    1c22:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <keyboard_idle>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c26:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c2e:	8e 77       	andi	r24, 0x7E	; 126
    1c30:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1c34:	0c 94 22 10 	jmp	0x2044	; 0x2044 <Endpoint_ClearStatusStage>
    1c38:	08 95       	ret

00001c3a <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1c3a:	84 b7       	in	r24, 0x34	; 52
    1c3c:	87 7f       	andi	r24, 0xF7	; 247
    1c3e:	84 bf       	out	0x34, r24	; 52
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	a8 95       	wdr
    1c46:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1c4a:	88 61       	ori	r24, 0x18	; 24
    1c4c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1c50:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1c54:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	80 e8       	ldi	r24, 0x80	; 128
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1c62:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1c66:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
    1c68:	0e 94 e6 13 	call	0x27cc	; 0x27cc <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1c6c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <USB_Disable>

    USB_Init();
    1c70:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <USB_Init>
    1c74:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c78:	84 60       	ori	r24, 0x04	; 4
    1c7a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1c7e:	82 ea       	ldi	r24, 0xA2	; 162
    1c80:	9b e0       	ldi	r25, 0x0B	; 11
    1c82:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    1c86:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1c88:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <USB_DeviceState>
    1c8c:	84 30       	cpi	r24, 0x04	; 4
    1c8e:	e1 f7       	brne	.-8      	; 0x1c88 <main+0x4e>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1c90:	86 e8       	ldi	r24, 0x86	; 134
    1c92:	93 e0       	ldi	r25, 0x03	; 3
    1c94:	0e 94 67 07 	call	0xece	; 0xece <xputs>

    /* init modules */
    keyboard_init();
    1c98:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <keyboard_init>
    host_set_driver(&lufa_driver);
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	0e 94 55 13 	call	0x26aa	; 0x26aa <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
    1ca4:	0e 94 0c 2a 	call	0x5418	; 0x5418 <sleep_led_init>
#endif

    print("Keyboard start.\n");
    1ca8:	85 e7       	ldi	r24, 0x75	; 117
    1caa:	93 e0       	ldi	r25, 0x03	; 3
    1cac:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1cb0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <USB_DeviceState>
    1cb4:	85 30       	cpi	r24, 0x05	; 5
    1cb6:	89 f4       	brne	.+34     	; 0x1cda <main+0xa0>
            print("[s]");
    1cb8:	81 e7       	ldi	r24, 0x71	; 113
    1cba:	93 e0       	ldi	r25, 0x03	; 3
    1cbc:	0e 94 67 07 	call	0xece	; 0xece <xputs>
            suspend_power_down();
    1cc0:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1cc4:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <USB_Device_RemoteWakeupEnabled>
    1cc8:	88 23       	and	r24, r24
    1cca:	91 f3       	breq	.-28     	; 0x1cb0 <main+0x76>
    1ccc:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <suspend_wakeup_condition>
    1cd0:	88 23       	and	r24, r24
    1cd2:	71 f3       	breq	.-36     	; 0x1cb0 <main+0x76>
                    USB_Device_SendRemoteWakeup();
    1cd4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <USB_Device_SendRemoteWakeup>
    1cd8:	eb cf       	rjmp	.-42     	; 0x1cb0 <main+0x76>
            }
        }

        keyboard_task();
    1cda:	0e 94 16 14 	call	0x282c	; 0x282c <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1cde:	e8 cf       	rjmp	.-48     	; 0x1cb0 <main+0x76>

00001ce0 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1ce0:	29 2f       	mov	r18, r25
    1ce2:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1ce4:	23 30       	cpi	r18, 0x03	; 3
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	c9 f0       	breq	.+50     	; 0x1d1c <CALLBACK_USB_GetDescriptor+0x3c>
    1cea:	64 f4       	brge	.+24     	; 0x1d04 <CALLBACK_USB_GetDescriptor+0x24>
    1cec:	21 30       	cpi	r18, 0x01	; 1
    1cee:	31 05       	cpc	r19, r1
    1cf0:	81 f0       	breq	.+32     	; 0x1d12 <CALLBACK_USB_GetDescriptor+0x32>
    1cf2:	22 30       	cpi	r18, 0x02	; 2
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <CALLBACK_USB_GetDescriptor+0x1a>
    1cf8:	43 c0       	rjmp	.+134    	; 0x1d80 <CALLBACK_USB_GetDescriptor+0xa0>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1cfa:	8d e8       	ldi	r24, 0x8D	; 141
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1cfe:	2f ee       	ldi	r18, 0xEF	; 239
    1d00:	33 e0       	ldi	r19, 0x03	; 3
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1d02:	42 c0       	rjmp	.+132    	; 0x1d88 <CALLBACK_USB_GetDescriptor+0xa8>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1d04:	21 32       	cpi	r18, 0x21	; 33
    1d06:	31 05       	cpc	r19, r1
    1d08:	f1 f0       	breq	.+60     	; 0x1d46 <CALLBACK_USB_GetDescriptor+0x66>
    1d0a:	22 32       	cpi	r18, 0x22	; 34
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	41 f1       	breq	.+80     	; 0x1d60 <CALLBACK_USB_GetDescriptor+0x80>
    1d10:	37 c0       	rjmp	.+110    	; 0x1d80 <CALLBACK_USB_GetDescriptor+0xa0>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1d12:	82 e1       	ldi	r24, 0x12	; 18
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1d16:	2c e7       	ldi	r18, 0x7C	; 124
    1d18:	34 e0       	ldi	r19, 0x04	; 4
    1d1a:	36 c0       	rjmp	.+108    	; 0x1d88 <CALLBACK_USB_GetDescriptor+0xa8>
    1d1c:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	91 05       	cpc	r25, r1
    1d22:	41 f0       	breq	.+16     	; 0x1d34 <CALLBACK_USB_GetDescriptor+0x54>
    1d24:	82 30       	cpi	r24, 0x02	; 2
    1d26:	91 05       	cpc	r25, r1
    1d28:	41 f0       	breq	.+16     	; 0x1d3a <CALLBACK_USB_GetDescriptor+0x5a>
    1d2a:	89 2b       	or	r24, r25
    1d2c:	49 f5       	brne	.+82     	; 0x1d80 <CALLBACK_USB_GetDescriptor+0xa0>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1d2e:	eb ee       	ldi	r30, 0xEB	; 235
    1d30:	f3 e0       	ldi	r31, 0x03	; 3
    1d32:	05 c0       	rjmp	.+10     	; 0x1d3e <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1d34:	e5 ed       	ldi	r30, 0xD5	; 213
    1d36:	f3 e0       	ldi	r31, 0x03	; 3
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1d3a:	eb ea       	ldi	r30, 0xAB	; 171
    1d3c:	f3 e0       	ldi	r31, 0x03	; 3
    1d3e:	84 91       	lpm	r24, Z
    1d40:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1d42:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    1d44:	21 c0       	rjmp	.+66     	; 0x1d88 <CALLBACK_USB_GetDescriptor+0xa8>
    1d46:	65 30       	cpi	r22, 0x05	; 5
    1d48:	d8 f4       	brcc	.+54     	; 0x1d80 <CALLBACK_USB_GetDescriptor+0xa0>
    1d4a:	e6 2f       	mov	r30, r22
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	ed 5c       	subi	r30, 0xCD	; 205
    1d54:	fe 4f       	sbci	r31, 0xFE	; 254
    1d56:	20 81       	ld	r18, Z
    1d58:	31 81       	ldd	r19, Z+1	; 0x01
    1d5a:	89 e0       	ldi	r24, 0x09	; 9
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	14 c0       	rjmp	.+40     	; 0x1d88 <CALLBACK_USB_GetDescriptor+0xa8>
    1d60:	65 30       	cpi	r22, 0x05	; 5
    1d62:	70 f4       	brcc	.+28     	; 0x1d80 <CALLBACK_USB_GetDescriptor+0xa0>
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	fb 01       	movw	r30, r22
    1d68:	ee 0f       	add	r30, r30
    1d6a:	ff 1f       	adc	r31, r31
    1d6c:	e7 5d       	subi	r30, 0xD7	; 215
    1d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d70:	20 81       	ld	r18, Z
    1d72:	31 81       	ldd	r19, Z+1	; 0x01
    1d74:	fb 01       	movw	r30, r22
    1d76:	ec 5d       	subi	r30, 0xDC	; 220
    1d78:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7a:	80 81       	ld	r24, Z
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	04 c0       	rjmp	.+8      	; 0x1d88 <CALLBACK_USB_GetDescriptor+0xa8>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1d88:	fa 01       	movw	r30, r20
    1d8a:	31 83       	std	Z+1, r19	; 0x01
    1d8c:	20 83       	st	Z, r18
    return Size;
}
    1d8e:	08 95       	ret

00001d90 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d90:	80 e1       	ldi	r24, 0x10	; 16
    1d92:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d94:	82 e1       	ldi	r24, 0x12	; 18
    1d96:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1d98:	09 b4       	in	r0, 0x29	; 41
    1d9a:	00 fe       	sbrs	r0, 0
    1d9c:	fd cf       	rjmp	.-6      	; 0x1d98 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d9e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1da2:	8f 7d       	andi	r24, 0xDF	; 223
    1da4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1da8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1dac:	82 60       	ori	r24, 0x02	; 2
    1dae:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	while (UDCON & (1 << RMWKUP));
    1db2:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1db6:	81 fd       	sbrc	r24, 1
    1db8:	fc cf       	rjmp	.-8      	; 0x1db2 <USB_Device_SendRemoteWakeup+0x22>
}
    1dba:	08 95       	ret

00001dbc <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1dbc:	cf 92       	push	r12
    1dbe:	df 92       	push	r13
    1dc0:	ef 92       	push	r14
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	ec 01       	movw	r28, r24
    1dce:	8b 01       	movw	r16, r22
    1dd0:	6a 01       	movw	r12, r20
    1dd2:	0e 94 41 10 	call	0x2082	; 0x2082 <Endpoint_WaitUntilReady>
    1dd6:	81 11       	cpse	r24, r1
    1dd8:	33 c0       	rjmp	.+102    	; 0x1e40 <Endpoint_Write_Stream_LE+0x84>
    1dda:	c1 14       	cp	r12, r1
    1ddc:	d1 04       	cpc	r13, r1
    1dde:	39 f0       	breq	.+14     	; 0x1dee <Endpoint_Write_Stream_LE+0x32>
    1de0:	f6 01       	movw	r30, r12
    1de2:	80 81       	ld	r24, Z
    1de4:	91 81       	ldd	r25, Z+1	; 0x01
    1de6:	08 1b       	sub	r16, r24
    1de8:	19 0b       	sbc	r17, r25
    1dea:	c8 0f       	add	r28, r24
    1dec:	d9 1f       	adc	r29, r25
    1dee:	e1 2c       	mov	r14, r1
    1df0:	f1 2c       	mov	r15, r1
    1df2:	01 15       	cp	r16, r1
    1df4:	11 05       	cpc	r17, r1
    1df6:	19 f1       	breq	.+70     	; 0x1e3e <Endpoint_Write_Stream_LE+0x82>
    1df8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1dfc:	85 fd       	sbrc	r24, 5
    1dfe:	16 c0       	rjmp	.+44     	; 0x1e2c <Endpoint_Write_Stream_LE+0x70>
    1e00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e04:	8e 77       	andi	r24, 0x7E	; 126
    1e06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e0a:	c1 14       	cp	r12, r1
    1e0c:	d1 04       	cpc	r13, r1
    1e0e:	49 f0       	breq	.+18     	; 0x1e22 <Endpoint_Write_Stream_LE+0x66>
    1e10:	f6 01       	movw	r30, r12
    1e12:	80 81       	ld	r24, Z
    1e14:	91 81       	ldd	r25, Z+1	; 0x01
    1e16:	e8 0e       	add	r14, r24
    1e18:	f9 1e       	adc	r15, r25
    1e1a:	f1 82       	std	Z+1, r15	; 0x01
    1e1c:	e0 82       	st	Z, r14
    1e1e:	85 e0       	ldi	r24, 0x05	; 5
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <Endpoint_Write_Stream_LE+0x84>
    1e22:	0e 94 41 10 	call	0x2082	; 0x2082 <Endpoint_WaitUntilReady>
    1e26:	88 23       	and	r24, r24
    1e28:	21 f3       	breq	.-56     	; 0x1df2 <Endpoint_Write_Stream_LE+0x36>
    1e2a:	0a c0       	rjmp	.+20     	; 0x1e40 <Endpoint_Write_Stream_LE+0x84>
    1e2c:	89 91       	ld	r24, Y+
    1e2e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1e32:	01 50       	subi	r16, 0x01	; 1
    1e34:	11 09       	sbc	r17, r1
    1e36:	ff ef       	ldi	r31, 0xFF	; 255
    1e38:	ef 1a       	sub	r14, r31
    1e3a:	ff 0a       	sbc	r15, r31
    1e3c:	da cf       	rjmp	.-76     	; 0x1df2 <Endpoint_Write_Stream_LE+0x36>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	df 90       	pop	r13
    1e4e:	cf 90       	pop	r12
    1e50:	08 95       	ret

00001e52 <Endpoint_Write_Control_Stream_LE>:
    1e52:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <USB_ControlRequest+0x6>
    1e56:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <USB_ControlRequest+0x7>
    1e5a:	26 17       	cp	r18, r22
    1e5c:	37 07       	cpc	r19, r23
    1e5e:	48 f0       	brcs	.+18     	; 0x1e72 <Endpoint_Write_Control_Stream_LE+0x20>
    1e60:	61 15       	cp	r22, r1
    1e62:	71 05       	cpc	r23, r1
    1e64:	39 f4       	brne	.+14     	; 0x1e74 <Endpoint_Write_Control_Stream_LE+0x22>
    1e66:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e6a:	2e 77       	andi	r18, 0x7E	; 126
    1e6c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e70:	01 c0       	rjmp	.+2      	; 0x1e74 <Endpoint_Write_Control_Stream_LE+0x22>
    1e72:	b9 01       	movw	r22, r18
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	61 15       	cp	r22, r1
    1e78:	71 05       	cpc	r23, r1
    1e7a:	a9 f1       	breq	.+106    	; 0x1ee6 <Endpoint_Write_Control_Stream_LE+0x94>
    1e7c:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <USB_DeviceState>
    1e80:	22 23       	and	r18, r18
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <Endpoint_Write_Control_Stream_LE+0x34>
    1e84:	43 c0       	rjmp	.+134    	; 0x1f0c <Endpoint_Write_Control_Stream_LE+0xba>
    1e86:	25 30       	cpi	r18, 0x05	; 5
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <Endpoint_Write_Control_Stream_LE+0x3a>
    1e8a:	42 c0       	rjmp	.+132    	; 0x1f10 <Endpoint_Write_Control_Stream_LE+0xbe>
    1e8c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e90:	23 fd       	sbrc	r18, 3
    1e92:	40 c0       	rjmp	.+128    	; 0x1f14 <Endpoint_Write_Control_Stream_LE+0xc2>
    1e94:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e98:	22 fd       	sbrc	r18, 2
    1e9a:	32 c0       	rjmp	.+100    	; 0x1f00 <Endpoint_Write_Control_Stream_LE+0xae>
    1e9c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ea0:	20 ff       	sbrs	r18, 0
    1ea2:	e9 cf       	rjmp	.-46     	; 0x1e76 <Endpoint_Write_Control_Stream_LE+0x24>
    1ea4:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1ea8:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	34 2b       	or	r19, r20
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	cf 01       	movw	r24, r30
    1eb4:	61 15       	cp	r22, r1
    1eb6:	71 05       	cpc	r23, r1
    1eb8:	59 f0       	breq	.+22     	; 0x1ed0 <Endpoint_Write_Control_Stream_LE+0x7e>
    1eba:	28 30       	cpi	r18, 0x08	; 8
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	40 f4       	brcc	.+16     	; 0x1ed0 <Endpoint_Write_Control_Stream_LE+0x7e>
    1ec0:	81 91       	ld	r24, Z+
    1ec2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1ec6:	61 50       	subi	r22, 0x01	; 1
    1ec8:	71 09       	sbc	r23, r1
    1eca:	2f 5f       	subi	r18, 0xFF	; 255
    1ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ece:	f1 cf       	rjmp	.-30     	; 0x1eb2 <Endpoint_Write_Control_Stream_LE+0x60>
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	28 30       	cpi	r18, 0x08	; 8
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <Endpoint_Write_Control_Stream_LE+0x88>
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ede:	2e 77       	andi	r18, 0x7E	; 126
    1ee0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ee4:	c8 cf       	rjmp	.-112    	; 0x1e76 <Endpoint_Write_Control_Stream_LE+0x24>
    1ee6:	41 11       	cpse	r20, r1
    1ee8:	c9 cf       	rjmp	.-110    	; 0x1e7c <Endpoint_Write_Control_Stream_LE+0x2a>
    1eea:	0a c0       	rjmp	.+20     	; 0x1f00 <Endpoint_Write_Control_Stream_LE+0xae>
    1eec:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <USB_DeviceState>
    1ef0:	88 23       	and	r24, r24
    1ef2:	61 f0       	breq	.+24     	; 0x1f0c <Endpoint_Write_Control_Stream_LE+0xba>
    1ef4:	85 30       	cpi	r24, 0x05	; 5
    1ef6:	61 f0       	breq	.+24     	; 0x1f10 <Endpoint_Write_Control_Stream_LE+0xbe>
    1ef8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1efc:	83 fd       	sbrc	r24, 3
    1efe:	0a c0       	rjmp	.+20     	; 0x1f14 <Endpoint_Write_Control_Stream_LE+0xc2>
    1f00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f04:	82 ff       	sbrs	r24, 2
    1f06:	f2 cf       	rjmp	.-28     	; 0x1eec <Endpoint_Write_Control_Stream_LE+0x9a>
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	08 95       	ret
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	08 95       	ret
    1f10:	83 e0       	ldi	r24, 0x03	; 3
    1f12:	08 95       	ret
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	08 95       	ret

00001f18 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1f18:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <USB_ControlRequest+0x6>
    1f1c:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <USB_ControlRequest+0x7>
    1f20:	26 17       	cp	r18, r22
    1f22:	37 07       	cpc	r19, r23
    1f24:	48 f0       	brcs	.+18     	; 0x1f38 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1f26:	61 15       	cp	r22, r1
    1f28:	71 05       	cpc	r23, r1
    1f2a:	39 f4       	brne	.+14     	; 0x1f3a <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f2c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f30:	2e 77       	andi	r18, 0x7E	; 126
    1f32:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f36:	01 c0       	rjmp	.+2      	; 0x1f3a <Endpoint_Write_Control_PStream_LE+0x22>
    1f38:	b9 01       	movw	r22, r18
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1f3e:	61 15       	cp	r22, r1
    1f40:	71 05       	cpc	r23, r1
    1f42:	91 f1       	breq	.+100    	; 0x1fa8 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1f44:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1f48:	88 23       	and	r24, r24
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <Endpoint_Write_Control_PStream_LE+0x36>
    1f4c:	40 c0       	rjmp	.+128    	; 0x1fce <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1f4e:	85 30       	cpi	r24, 0x05	; 5
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <Endpoint_Write_Control_PStream_LE+0x3c>
    1f52:	3f c0       	rjmp	.+126    	; 0x1fd2 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1f58:	83 fd       	sbrc	r24, 3
    1f5a:	3d c0       	rjmp	.+122    	; 0x1fd6 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1f60:	82 fd       	sbrc	r24, 2
    1f62:	2f c0       	rjmp	.+94     	; 0x1fc2 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    1f68:	80 ff       	sbrs	r24, 0
    1f6a:	e9 cf       	rjmp	.-46     	; 0x1f3e <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1f6c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1f70:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1f78:	61 15       	cp	r22, r1
    1f7a:	71 05       	cpc	r23, r1
    1f7c:	59 f0       	breq	.+22     	; 0x1f94 <Endpoint_Write_Control_PStream_LE+0x7c>
    1f7e:	88 30       	cpi	r24, 0x08	; 8
    1f80:	91 05       	cpc	r25, r1
    1f82:	40 f4       	brcc	.+16     	; 0x1f94 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1f84:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f86:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1f8a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1f8c:	61 50       	subi	r22, 0x01	; 1
    1f8e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1f90:	01 96       	adiw	r24, 0x01	; 1
    1f92:	f2 cf       	rjmp	.-28     	; 0x1f78 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1f94:	21 e0       	ldi	r18, 0x01	; 1
    1f96:	08 97       	sbiw	r24, 0x08	; 8
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <Endpoint_Write_Control_PStream_LE+0x84>
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1fa0:	8e 77       	andi	r24, 0x7E	; 126
    1fa2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1fa6:	cb cf       	rjmp	.-106    	; 0x1f3e <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1fa8:	21 11       	cpse	r18, r1
    1faa:	cc cf       	rjmp	.-104    	; 0x1f44 <Endpoint_Write_Control_PStream_LE+0x2c>
    1fac:	0a c0       	rjmp	.+20     	; 0x1fc2 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1fae:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1fb2:	88 23       	and	r24, r24
    1fb4:	61 f0       	breq	.+24     	; 0x1fce <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1fb6:	85 30       	cpi	r24, 0x05	; 5
    1fb8:	61 f0       	breq	.+24     	; 0x1fd2 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1fbe:	83 fd       	sbrc	r24, 3
    1fc0:	0a c0       	rjmp	.+20     	; 0x1fd6 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1fc2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1fc6:	82 ff       	sbrs	r24, 2
    1fc8:	f2 cf       	rjmp	.-28     	; 0x1fae <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1fd8:	08 95       	ret

00001fda <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1fda:	98 2f       	mov	r25, r24
    1fdc:	97 30       	cpi	r25, 0x07	; 7
    1fde:	58 f5       	brcc	.+86     	; 0x2036 <Endpoint_ConfigureEndpoint_Prv+0x5c>
    1fe0:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1fe4:	98 17       	cp	r25, r24
    1fe6:	39 f0       	breq	.+14     	; 0x1ff6 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1fe8:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1fec:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1ff0:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1ff4:	03 c0       	rjmp	.+6      	; 0x1ffc <Endpoint_ConfigureEndpoint_Prv+0x22>
    1ff6:	24 2f       	mov	r18, r20
    1ff8:	76 2f       	mov	r23, r22
    1ffa:	50 e0       	ldi	r21, 0x00	; 0
    1ffc:	21 ff       	sbrs	r18, 1
    1ffe:	19 c0       	rjmp	.+50     	; 0x2032 <Endpoint_ConfigureEndpoint_Prv+0x58>
    2000:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2004:	3e 7f       	andi	r19, 0xFE	; 254
    2006:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    200a:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    200e:	3d 7f       	andi	r19, 0xFD	; 253
    2010:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2014:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2018:	31 60       	ori	r19, 0x01	; 1
    201a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    201e:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2022:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2026:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    202a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    202e:	27 ff       	sbrs	r18, 7
    2030:	07 c0       	rjmp	.+14     	; 0x2040 <Endpoint_ConfigureEndpoint_Prv+0x66>
    2032:	9f 5f       	subi	r25, 0xFF	; 255
    2034:	d3 cf       	rjmp	.-90     	; 0x1fdc <Endpoint_ConfigureEndpoint_Prv+0x2>
    2036:	8f 70       	andi	r24, 0x0F	; 15
    2038:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	08 95       	ret
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	08 95       	ret

00002044 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2044:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_ControlRequest>
    2048:	87 ff       	sbrs	r24, 7
    204a:	11 c0       	rjmp	.+34     	; 0x206e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    204c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    2050:	82 fd       	sbrc	r24, 2
    2052:	05 c0       	rjmp	.+10     	; 0x205e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2054:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <USB_DeviceState>
    2058:	81 11       	cpse	r24, r1
    205a:	f8 cf       	rjmp	.-16     	; 0x204c <Endpoint_ClearStatusStage+0x8>
    205c:	11 c0       	rjmp	.+34     	; 0x2080 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    205e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2062:	8b 77       	andi	r24, 0x7B	; 123
    2064:	0b c0       	rjmp	.+22     	; 0x207c <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2066:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <USB_DeviceState>
    206a:	88 23       	and	r24, r24
    206c:	49 f0       	breq	.+18     	; 0x2080 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    206e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2072:	80 ff       	sbrs	r24, 0
    2074:	f8 cf       	rjmp	.-16     	; 0x2066 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2076:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    207a:	8e 77       	andi	r24, 0x7E	; 126
    207c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2080:	08 95       	ret

00002082 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2082:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    2086:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    208a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    208c:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2090:	84 2f       	mov	r24, r20
    2092:	81 70       	andi	r24, 0x01	; 1
    2094:	40 ff       	sbrs	r20, 0
    2096:	22 c0       	rjmp	.+68     	; 0x20dc <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2098:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    209c:	80 fd       	sbrc	r24, 0
    209e:	1c c0       	rjmp	.+56     	; 0x20d8 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    20a0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    20a4:	88 23       	and	r24, r24
    20a6:	91 f0       	breq	.+36     	; 0x20cc <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    20a8:	85 30       	cpi	r24, 0x05	; 5
    20aa:	91 f0       	breq	.+36     	; 0x20d0 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    20ac:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    20b0:	85 fd       	sbrc	r24, 5
    20b2:	10 c0       	rjmp	.+32     	; 0x20d4 <Endpoint_WaitUntilReady+0x52>
    20b4:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    20b8:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    20bc:	42 17       	cp	r20, r18
    20be:	53 07       	cpc	r21, r19
    20c0:	29 f3       	breq	.-54     	; 0x208c <Endpoint_WaitUntilReady+0xa>
    20c2:	9a 01       	movw	r18, r20
    20c4:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    20c6:	11 f7       	brne	.-60     	; 0x208c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    20c8:	84 e0       	ldi	r24, 0x04	; 4
    20ca:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    20dc:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    20e0:	42 ff       	sbrs	r20, 2
    20e2:	de cf       	rjmp	.-68     	; 0x20a0 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    20e4:	08 95       	ret

000020e6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    20e6:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    20ea:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    20ee:	e0 ee       	ldi	r30, 0xE0	; 224
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	81 60       	ori	r24, 0x01	; 1
    20f6:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    20f8:	e8 ed       	ldi	r30, 0xD8	; 216
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	8f 77       	andi	r24, 0x7F	; 127
    2100:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2102:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    2104:	a7 ed       	ldi	r26, 0xD7	; 215
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	8c 91       	ld	r24, X
    210a:	8e 7f       	andi	r24, 0xFE	; 254
    210c:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    210e:	80 81       	ld	r24, Z
    2110:	8f 7e       	andi	r24, 0xEF	; 239
    2112:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    2114:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <USB_IsInitialized>
    2118:	08 95       	ret

0000211a <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2122:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2126:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    212a:	c8 ed       	ldi	r28, 0xD8	; 216
    212c:	d0 e0       	ldi	r29, 0x00	; 0
    212e:	88 81       	ld	r24, Y
    2130:	8f 77       	andi	r24, 0x7F	; 127
    2132:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    2134:	88 81       	ld	r24, Y
    2136:	80 68       	ori	r24, 0x80	; 128
    2138:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    213a:	88 81       	ld	r24, Y
    213c:	8f 7d       	andi	r24, 0xDF	; 223
    213e:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2140:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2142:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    2146:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    214a:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    214e:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2152:	00 ee       	ldi	r16, 0xE0	; 224
    2154:	10 e0       	ldi	r17, 0x00	; 0
    2156:	f8 01       	movw	r30, r16
    2158:	80 81       	ld	r24, Z
    215a:	8b 7f       	andi	r24, 0xFB	; 251
    215c:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    215e:	88 81       	ld	r24, Y
    2160:	81 60       	ori	r24, 0x01	; 1
    2162:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2164:	42 e0       	ldi	r20, 0x02	; 2
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    216e:	e1 ee       	ldi	r30, 0xE1	; 225
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	8e 7f       	andi	r24, 0xFE	; 254
    2176:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2178:	e2 ee       	ldi	r30, 0xE2	; 226
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	81 60       	ori	r24, 0x01	; 1
    2180:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2182:	80 81       	ld	r24, Z
    2184:	88 60       	ori	r24, 0x08	; 8
    2186:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2188:	f8 01       	movw	r30, r16
    218a:	80 81       	ld	r24, Z
    218c:	8e 7f       	andi	r24, 0xFE	; 254
    218e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2190:	88 81       	ld	r24, Y
    2192:	80 61       	ori	r24, 0x10	; 16
    2194:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    21a0:	e8 ed       	ldi	r30, 0xD8	; 216
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	8f 7e       	andi	r24, 0xEF	; 239
    21a8:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    21aa:	e7 ed       	ldi	r30, 0xD7	; 215
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	81 60       	ori	r24, 0x01	; 1
    21b2:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    21b4:	84 e0       	ldi	r24, 0x04	; 4
    21b6:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <USB_IsInitialized>

	USB_ResetInterface();
    21be:	0c 94 8d 10 	jmp	0x211a	; 0x211a <USB_ResetInterface>

000021c2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    21c2:	e8 ed       	ldi	r30, 0xD8	; 216
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	8e 7f       	andi	r24, 0xFE	; 254
    21ca:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    21cc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    21d0:	08 95       	ret

000021d2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    21d2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    21d6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    21da:	08 95       	ret

000021dc <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    21dc:	1f 92       	push	r1
    21de:	0f 92       	push	r0
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	0f 92       	push	r0
    21e4:	11 24       	eor	r1, r1
    21e6:	2f 93       	push	r18
    21e8:	3f 93       	push	r19
    21ea:	4f 93       	push	r20
    21ec:	5f 93       	push	r21
    21ee:	6f 93       	push	r22
    21f0:	7f 93       	push	r23
    21f2:	8f 93       	push	r24
    21f4:	9f 93       	push	r25
    21f6:	af 93       	push	r26
    21f8:	bf 93       	push	r27
    21fa:	ef 93       	push	r30
    21fc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    21fe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2202:	82 ff       	sbrs	r24, 2
    2204:	0b c0       	rjmp	.+22     	; 0x221c <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2206:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    220a:	82 ff       	sbrs	r24, 2
    220c:	07 c0       	rjmp	.+14     	; 0x221c <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    220e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2212:	8b 7f       	andi	r24, 0xFB	; 251
    2214:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2218:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    221c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2220:	80 ff       	sbrs	r24, 0
    2222:	1f c0       	rjmp	.+62     	; 0x2262 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2224:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2228:	80 ff       	sbrs	r24, 0
    222a:	1b c0       	rjmp	.+54     	; 0x2262 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    222c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    2230:	8e 7f       	andi	r24, 0xFE	; 254
    2232:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2236:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    223a:	80 ff       	sbrs	r24, 0
    223c:	0d c0       	rjmp	.+26     	; 0x2258 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    223e:	80 e1       	ldi	r24, 0x10	; 16
    2240:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2242:	82 e1       	ldi	r24, 0x12	; 18
    2244:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2246:	09 b4       	in	r0, 0x29	; 41
    2248:	00 fe       	sbrs	r0, 0
    224a:	fd cf       	rjmp	.-6      	; 0x2246 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    2252:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <EVENT_USB_Device_Connect>
    2256:	05 c0       	rjmp	.+10     	; 0x2262 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2258:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    225a:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    225e:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2262:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2266:	80 ff       	sbrs	r24, 0
    2268:	19 c0       	rjmp	.+50     	; 0x229c <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    226a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    226e:	80 ff       	sbrs	r24, 0
    2270:	15 c0       	rjmp	.+42     	; 0x229c <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2272:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2276:	8e 7f       	andi	r24, 0xFE	; 254
    2278:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    227c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2280:	80 61       	ori	r24, 0x10	; 16
    2282:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2286:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    228a:	80 62       	ori	r24, 0x20	; 32
    228c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2290:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2292:	85 e0       	ldi	r24, 0x05	; 5
    2294:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    2298:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    229c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    22a0:	84 ff       	sbrs	r24, 4
    22a2:	30 c0       	rjmp	.+96     	; 0x2304 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    22a4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    22a8:	84 ff       	sbrs	r24, 4
    22aa:	2c c0       	rjmp	.+88     	; 0x2304 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    22ac:	80 e1       	ldi	r24, 0x10	; 16
    22ae:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    22b0:	82 e1       	ldi	r24, 0x12	; 18
    22b2:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    22b4:	09 b4       	in	r0, 0x29	; 41
    22b6:	00 fe       	sbrs	r0, 0
    22b8:	fd cf       	rjmp	.-6      	; 0x22b4 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    22ba:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    22be:	8f 7d       	andi	r24, 0xDF	; 223
    22c0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    22c4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    22c8:	8f 7e       	andi	r24, 0xEF	; 239
    22ca:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    22ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    22d2:	8f 7e       	andi	r24, 0xEF	; 239
    22d4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    22d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    22dc:	81 60       	ori	r24, 0x01	; 1
    22de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    22e2:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <USB_Device_ConfigurationNumber>
    22e6:	88 23       	and	r24, r24
    22e8:	11 f0       	breq	.+4      	; 0x22ee <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    22ea:	84 e0       	ldi	r24, 0x04	; 4
    22ec:	07 c0       	rjmp	.+14     	; 0x22fc <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    22ee:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    22f2:	87 fd       	sbrc	r24, 7
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <__vector_10+0x11e>
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	01 c0       	rjmp	.+2      	; 0x22fc <__vector_10+0x120>
    22fa:	83 e0       	ldi	r24, 0x03	; 3
    22fc:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2300:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2304:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2308:	83 ff       	sbrs	r24, 3
    230a:	29 c0       	rjmp	.+82     	; 0x235e <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    230c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2310:	83 ff       	sbrs	r24, 3
    2312:	25 c0       	rjmp	.+74     	; 0x235e <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2314:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2318:	87 7f       	andi	r24, 0xF7	; 247
    231a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    231e:	82 e0       	ldi	r24, 0x02	; 2
    2320:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    2324:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2328:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    232c:	8e 7f       	andi	r24, 0xFE	; 254
    232e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2332:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2336:	8e 7f       	andi	r24, 0xFE	; 254
    2338:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    233c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2340:	80 61       	ori	r24, 0x10	; 16
    2342:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2346:	42 e0       	ldi	r20, 0x02	; 2
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2350:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2354:	88 60       	ori	r24, 0x08	; 8
    2356:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    235a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	7f 91       	pop	r23
    236c:	6f 91       	pop	r22
    236e:	5f 91       	pop	r21
    2370:	4f 91       	pop	r20
    2372:	3f 91       	pop	r19
    2374:	2f 91       	pop	r18
    2376:	0f 90       	pop	r0
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	0f 90       	pop	r0
    237c:	1f 90       	pop	r1
    237e:	18 95       	reti

00002380 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	2f 93       	push	r18
    238c:	3f 93       	push	r19
    238e:	4f 93       	push	r20
    2390:	5f 93       	push	r21
    2392:	6f 93       	push	r22
    2394:	7f 93       	push	r23
    2396:	8f 93       	push	r24
    2398:	9f 93       	push	r25
    239a:	af 93       	push	r26
    239c:	bf 93       	push	r27
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	ef 93       	push	r30
    23a4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    23a6:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    23aa:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    23ac:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    23b0:	d8 2f       	mov	r29, r24
    23b2:	d1 70       	andi	r29, 0x01	; 1
    23b4:	80 fd       	sbrc	r24, 0
    23b6:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23b8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    23bc:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    23c0:	87 7f       	andi	r24, 0xF7	; 247
    23c2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    23c6:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    23c8:	0e 94 04 12 	call	0x2408	; 0x2408 <USB_Device_ProcessControlRequest>
    23cc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    23d0:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    23d4:	88 60       	ori	r24, 0x08	; 8
    23d6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    23da:	cd 2b       	or	r28, r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23dc:	cf 70       	andi	r28, 0x0F	; 15
    23de:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    23e2:	ff 91       	pop	r31
    23e4:	ef 91       	pop	r30
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	bf 91       	pop	r27
    23ec:	af 91       	pop	r26
    23ee:	9f 91       	pop	r25
    23f0:	8f 91       	pop	r24
    23f2:	7f 91       	pop	r23
    23f4:	6f 91       	pop	r22
    23f6:	5f 91       	pop	r21
    23f8:	4f 91       	pop	r20
    23fa:	3f 91       	pop	r19
    23fc:	2f 91       	pop	r18
    23fe:	0f 90       	pop	r0
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	0f 90       	pop	r0
    2404:	1f 90       	pop	r1
    2406:	18 95       	reti

00002408 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2408:	1f 93       	push	r17
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	aa 97       	sbiw	r28, 0x2a	; 42
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	e4 e3       	ldi	r30, 0x34	; 52
    2420:	f2 e0       	ldi	r31, 0x02	; 2
    2422:	88 e0       	ldi	r24, 0x08	; 8
    2424:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2426:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    242a:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    242c:	8e 13       	cpse	r24, r30
    242e:	fb cf       	rjmp	.-10     	; 0x2426 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2430:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2434:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    2438:	83 ff       	sbrs	r24, 3
    243a:	1f c1       	rjmp	.+574    	; 0x267a <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    243c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    2440:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <USB_ControlRequest+0x1>
    2444:	49 2f       	mov	r20, r25
    2446:	50 e0       	ldi	r21, 0x00	; 0
    2448:	4a 30       	cpi	r20, 0x0A	; 10
    244a:	51 05       	cpc	r21, r1
    244c:	08 f0       	brcs	.+2      	; 0x2450 <USB_Device_ProcessControlRequest+0x48>
    244e:	15 c1       	rjmp	.+554    	; 0x267a <USB_Device_ProcessControlRequest+0x272>
    2450:	fa 01       	movw	r30, r20
    2452:	ea 5a       	subi	r30, 0xAA	; 170
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	0c 94 c1 2b 	jmp	0x5782	; 0x5782 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    245a:	80 38       	cpi	r24, 0x80	; 128
    245c:	81 f0       	breq	.+32     	; 0x247e <USB_Device_ProcessControlRequest+0x76>
    245e:	82 38       	cpi	r24, 0x82	; 130
    2460:	09 f0       	breq	.+2      	; 0x2464 <USB_Device_ProcessControlRequest+0x5c>
    2462:	0b c1       	rjmp	.+534    	; 0x267a <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2464:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <USB_ControlRequest+0x4>
    2468:	8f 70       	andi	r24, 0x0F	; 15
    246a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    246e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2472:	85 fb       	bst	r24, 5
    2474:	88 27       	eor	r24, r24
    2476:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2478:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    247c:	06 c0       	rjmp	.+12     	; 0x248a <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    247e:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2482:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <USB_Device_RemoteWakeupEnabled>
    2486:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2488:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    248a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    248e:	97 7f       	andi	r25, 0xF7	; 247
    2490:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2494:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    2498:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    249c:	c8 c0       	rjmp	.+400    	; 0x262e <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    249e:	28 2f       	mov	r18, r24
    24a0:	2d 7f       	andi	r18, 0xFD	; 253
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <USB_Device_ProcessControlRequest+0x9e>
    24a4:	ea c0       	rjmp	.+468    	; 0x267a <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    24a6:	88 23       	and	r24, r24
    24a8:	19 f0       	breq	.+6      	; 0x24b0 <USB_Device_ProcessControlRequest+0xa8>
    24aa:	82 30       	cpi	r24, 0x02	; 2
    24ac:	61 f0       	breq	.+24     	; 0x24c6 <USB_Device_ProcessControlRequest+0xbe>
    24ae:	e5 c0       	rjmp	.+458    	; 0x267a <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    24b0:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <USB_ControlRequest+0x2>
    24b4:	81 30       	cpi	r24, 0x01	; 1
    24b6:	09 f0       	breq	.+2      	; 0x24ba <USB_Device_ProcessControlRequest+0xb2>
    24b8:	e0 c0       	rjmp	.+448    	; 0x267a <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    24ba:	93 30       	cpi	r25, 0x03	; 3
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <USB_Device_ProcessControlRequest+0xb8>
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <USB_Device_RemoteWakeupEnabled>
    24c4:	2b c0       	rjmp	.+86     	; 0x251c <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    24c6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <USB_ControlRequest+0x2>
    24ca:	81 11       	cpse	r24, r1
    24cc:	27 c0       	rjmp	.+78     	; 0x251c <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    24ce:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <USB_ControlRequest+0x4>
    24d2:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <USB_Device_ProcessControlRequest+0xd0>
    24d6:	d1 c0       	rjmp	.+418    	; 0x267a <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    24d8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    24dc:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    24e0:	20 ff       	sbrs	r18, 0
    24e2:	1c c0       	rjmp	.+56     	; 0x251c <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    24e4:	93 30       	cpi	r25, 0x03	; 3
    24e6:	21 f4       	brne	.+8      	; 0x24f0 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    24e8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    24ec:	80 62       	ori	r24, 0x20	; 32
    24ee:	14 c0       	rjmp	.+40     	; 0x2518 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    24f0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    24f4:	90 61       	ori	r25, 0x10	; 16
    24f6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    24fa:	21 e0       	ldi	r18, 0x01	; 1
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	a9 01       	movw	r20, r18
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <USB_Device_ProcessControlRequest+0xfe>
    2502:	44 0f       	add	r20, r20
    2504:	55 1f       	adc	r21, r21
    2506:	8a 95       	dec	r24
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <USB_Device_ProcessControlRequest+0xfa>
    250a:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    250e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2512:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2516:	88 60       	ori	r24, 0x08	; 8
    2518:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    251c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2520:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2524:	87 7f       	andi	r24, 0xF7	; 247
    2526:	86 c0       	rjmp	.+268    	; 0x2634 <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2528:	81 11       	cpse	r24, r1
    252a:	a7 c0       	rjmp	.+334    	; 0x267a <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    252c:	10 91 36 02 	lds	r17, 0x0236	; 0x800236 <USB_ControlRequest+0x2>
    2530:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2532:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2536:	80 78       	andi	r24, 0x80	; 128
    2538:	81 2b       	or	r24, r17
    253a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    253e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2542:	87 7f       	andi	r24, 0xF7	; 247
    2544:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2548:	0e 94 22 10 	call	0x2044	; 0x2044 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    254c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    2550:	80 ff       	sbrs	r24, 0
    2552:	fc cf       	rjmp	.-8      	; 0x254c <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2554:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2558:	80 68       	ori	r24, 0x80	; 128
    255a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    255e:	11 11       	cpse	r17, r1
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <USB_Device_ProcessControlRequest+0x15e>
    2562:	82 e0       	ldi	r24, 0x02	; 2
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <USB_Device_ProcessControlRequest+0x160>
    2566:	83 e0       	ldi	r24, 0x03	; 3
    2568:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <USB_DeviceState>
    256c:	86 c0       	rjmp	.+268    	; 0x267a <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    256e:	80 58       	subi	r24, 0x80	; 128
    2570:	82 30       	cpi	r24, 0x02	; 2
    2572:	08 f0       	brcs	.+2      	; 0x2576 <USB_Device_ProcessControlRequest+0x16e>
    2574:	82 c0       	rjmp	.+260    	; 0x267a <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2576:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <USB_ControlRequest+0x2>
    257a:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <USB_ControlRequest+0x3>
    257e:	8c 3d       	cpi	r24, 0xDC	; 220
    2580:	53 e0       	ldi	r21, 0x03	; 3
    2582:	95 07       	cpc	r25, r21
    2584:	79 f5       	brne	.+94     	; 0x25e4 <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2586:	83 e0       	ldi	r24, 0x03	; 3
    2588:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    258a:	8a e2       	ldi	r24, 0x2A	; 42
    258c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    258e:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2590:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2592:	de 01       	movw	r26, r28
    2594:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2596:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2598:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    259a:	51 e2       	ldi	r21, 0x21	; 33
    259c:	e3 2f       	mov	r30, r19
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    25a4:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    25a6:	20 ff       	sbrs	r18, 0
    25a8:	03 c0       	rjmp	.+6      	; 0x25b0 <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    25aa:	e2 95       	swap	r30
    25ac:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    25ae:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    25b0:	ef 70       	andi	r30, 0x0F	; 15
    25b2:	8e 2f       	mov	r24, r30
    25b4:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    25b6:	ea 30       	cpi	r30, 0x0A	; 10
    25b8:	10 f0       	brcs	.+4      	; 0x25be <USB_Device_ProcessControlRequest+0x1b6>
    25ba:	c7 96       	adiw	r24, 0x37	; 55
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <USB_Device_ProcessControlRequest+0x1b8>
    25be:	c0 96       	adiw	r24, 0x30	; 48
    25c0:	8d 93       	st	X+, r24
    25c2:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    25c4:	2f 5f       	subi	r18, 0xFF	; 255
    25c6:	24 31       	cpi	r18, 0x14	; 20
    25c8:	49 f7       	brne	.-46     	; 0x259c <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    25ca:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    25cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    25d0:	87 7f       	andi	r24, 0xF7	; 247
    25d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    25d6:	6a e2       	ldi	r22, 0x2A	; 42
    25d8:	70 e0       	ldi	r23, 0x00	; 0
    25da:	ce 01       	movw	r24, r28
    25dc:	01 96       	adiw	r24, 0x01	; 1
    25de:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Endpoint_Write_Control_Stream_LE>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    25e4:	ae 01       	movw	r20, r28
    25e6:	4f 5f       	subi	r20, 0xFF	; 255
    25e8:	5f 4f       	sbci	r21, 0xFF	; 255
    25ea:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <USB_ControlRequest+0x4>
    25ee:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <CALLBACK_USB_GetDescriptor>
    25f2:	bc 01       	movw	r22, r24
    25f4:	89 2b       	or	r24, r25
    25f6:	09 f4       	brne	.+2      	; 0x25fa <USB_Device_ProcessControlRequest+0x1f2>
    25f8:	40 c0       	rjmp	.+128    	; 0x267a <USB_Device_ProcessControlRequest+0x272>
    25fa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    25fe:	97 7f       	andi	r25, 0xF7	; 247
    2600:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	9a 81       	ldd	r25, Y+2	; 0x02
    2608:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    260c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2610:	8b 77       	andi	r24, 0x7B	; 123
    2612:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2616:	31 c0       	rjmp	.+98     	; 0x267a <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2618:	80 38       	cpi	r24, 0x80	; 128
    261a:	79 f5       	brne	.+94     	; 0x267a <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    261c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2620:	87 7f       	andi	r24, 0xF7	; 247
    2622:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2626:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    262a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    262e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2632:	8e 77       	andi	r24, 0x7E	; 126
    2634:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2638:	0e 94 22 10 	call	0x2044	; 0x2044 <Endpoint_ClearStatusStage>
    263c:	1e c0       	rjmp	.+60     	; 0x267a <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    263e:	81 11       	cpse	r24, r1
    2640:	1c c0       	rjmp	.+56     	; 0x267a <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2642:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <USB_ControlRequest+0x2>
    2646:	92 30       	cpi	r25, 0x02	; 2
    2648:	c0 f4       	brcc	.+48     	; 0x267a <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    264a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    264e:	87 7f       	andi	r24, 0xF7	; 247
    2650:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2654:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    2658:	0e 94 22 10 	call	0x2044	; 0x2044 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    265c:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <USB_Device_ConfigurationNumber>
    2660:	81 11       	cpse	r24, r1
    2662:	06 c0       	rjmp	.+12     	; 0x2670 <USB_Device_ProcessControlRequest+0x268>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2664:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2668:	87 fd       	sbrc	r24, 7
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <USB_Device_ProcessControlRequest+0x268>
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	01 c0       	rjmp	.+2      	; 0x2672 <USB_Device_ProcessControlRequest+0x26a>
    2670:	84 e0       	ldi	r24, 0x04	; 4
    2672:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    2676:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    267a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    267e:	83 ff       	sbrs	r24, 3
    2680:	0a c0       	rjmp	.+20     	; 0x2696 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2682:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2686:	87 7f       	andi	r24, 0xF7	; 247
    2688:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    268c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2690:	80 62       	ori	r24, 0x20	; 32
    2692:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2696:	aa 96       	adiw	r28, 0x2a	; 42
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	1f 91       	pop	r17
    26a8:	08 95       	ret

000026aa <host_set_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    26aa:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <driver+0x1>
    26ae:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <driver>
    26b2:	08 95       	ret

000026b4 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    26b4:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <driver>
    26b8:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <driver+0x1>
    26bc:	30 97       	sbiw	r30, 0x00	; 0
    26be:	21 f0       	breq	.+8      	; 0x26c8 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    26c0:	01 90       	ld	r0, Z+
    26c2:	f0 81       	ld	r31, Z
    26c4:	e0 2d       	mov	r30, r0
    26c6:	09 94       	ijmp
}
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	08 95       	ret

000026cc <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    26cc:	ef 92       	push	r14
    26ce:	ff 92       	push	r15
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    if (!driver) return;
    26d8:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <driver>
    26dc:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <driver+0x1>
    26e0:	30 97       	sbiw	r30, 0x00	; 0
    26e2:	b1 f1       	breq	.+108    	; 0x2750 <host_keyboard_send+0x84>
    26e4:	8c 01       	movw	r16, r24
    (*driver->send_keyboard)(report);
    26e6:	02 80       	ldd	r0, Z+2	; 0x02
    26e8:	f3 81       	ldd	r31, Z+3	; 0x03
    26ea:	e0 2d       	mov	r30, r0
    26ec:	09 95       	icall

    if (debug_keyboard) {
    26ee:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    26f2:	82 ff       	sbrs	r24, 2
    26f4:	2d c0       	rjmp	.+90     	; 0x2750 <host_keyboard_send+0x84>
        dprint("keyboard_report: ");
    26f6:	80 ff       	sbrs	r24, 0
    26f8:	04 c0       	rjmp	.+8      	; 0x2702 <host_keyboard_send+0x36>
    26fa:	81 eb       	ldi	r24, 0xB1	; 177
    26fc:	95 e0       	ldi	r25, 0x05	; 5
    26fe:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    2702:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2704:	10 e1       	ldi	r17, 0x10	; 16
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2706:	8b ea       	ldi	r24, 0xAB	; 171
    2708:	e8 2e       	mov	r14, r24
    270a:	85 e0       	ldi	r24, 0x05	; 5
    270c:	f8 2e       	mov	r15, r24
    270e:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    2712:	80 ff       	sbrs	r24, 0
    2714:	0b c0       	rjmp	.+22     	; 0x272c <host_keyboard_send+0x60>
    2716:	88 81       	ld	r24, Y
    2718:	1f 92       	push	r1
    271a:	8f 93       	push	r24
    271c:	ff 92       	push	r15
    271e:	ef 92       	push	r14
    2720:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	11 50       	subi	r17, 0x01	; 1
    272e:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2730:	11 11       	cpse	r17, r1
    2732:	ed cf       	rjmp	.-38     	; 0x270e <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2734:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    2738:	80 ff       	sbrs	r24, 0
    273a:	0a c0       	rjmp	.+20     	; 0x2750 <host_keyboard_send+0x84>
    273c:	89 ea       	ldi	r24, 0xA9	; 169
    273e:	95 e0       	ldi	r25, 0x05	; 5
    }
}
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	1f 91       	pop	r17
    2746:	0f 91       	pop	r16
    2748:	ff 90       	pop	r15
    274a:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    274c:	0c 94 67 07 	jmp	0xece	; 0xece <xputs>
    }
}
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	1f 91       	pop	r17
    2756:	0f 91       	pop	r16
    2758:	ff 90       	pop	r15
    275a:	ef 90       	pop	r14
    275c:	08 95       	ret

0000275e <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    275e:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <driver>
    2762:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <driver+0x1>
    2766:	30 97       	sbiw	r30, 0x00	; 0
    2768:	21 f0       	breq	.+8      	; 0x2772 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    276a:	04 80       	ldd	r0, Z+4	; 0x04
    276c:	f5 81       	ldd	r31, Z+5	; 0x05
    276e:	e0 2d       	mov	r30, r0
    2770:	09 94       	ijmp
    2772:	08 95       	ret

00002774 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    2774:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <last_system_report>
    2778:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <last_system_report+0x1>
    277c:	82 17       	cp	r24, r18
    277e:	93 07       	cpc	r25, r19
    2780:	71 f0       	breq	.+28     	; 0x279e <host_system_send+0x2a>
    last_system_report = report;
    2782:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <last_system_report+0x1>
    2786:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <last_system_report>

    if (!driver) return;
    278a:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <driver>
    278e:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <driver+0x1>
    2792:	30 97       	sbiw	r30, 0x00	; 0
    2794:	21 f0       	breq	.+8      	; 0x279e <host_system_send+0x2a>
    (*driver->send_system)(report);
    2796:	06 80       	ldd	r0, Z+6	; 0x06
    2798:	f7 81       	ldd	r31, Z+7	; 0x07
    279a:	e0 2d       	mov	r30, r0
    279c:	09 94       	ijmp
    279e:	08 95       	ret

000027a0 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    27a0:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <last_consumer_report>
    27a4:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <last_consumer_report+0x1>
    27a8:	82 17       	cp	r24, r18
    27aa:	93 07       	cpc	r25, r19
    27ac:	71 f0       	breq	.+28     	; 0x27ca <host_consumer_send+0x2a>
    last_consumer_report = report;
    27ae:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <last_consumer_report+0x1>
    27b2:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <last_consumer_report>

    if (!driver) return;
    27b6:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <driver>
    27ba:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <driver+0x1>
    27be:	30 97       	sbiw	r30, 0x00	; 0
    27c0:	21 f0       	breq	.+8      	; 0x27ca <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    27c2:	00 84       	ldd	r0, Z+8	; 0x08
    27c4:	f1 85       	ldd	r31, Z+9	; 0x09
    27c6:	e0 2d       	mov	r30, r0
    27c8:	09 94       	ijmp
    27ca:	08 95       	ret

000027cc <keyboard_setup>:


__attribute__ ((weak)) void matrix_setup(void) {}
void keyboard_setup(void)
{
    matrix_setup();
    27cc:	0c 94 95 0b 	jmp	0x172a	; 0x172a <matrix_setup>

000027d0 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    27d0:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <timer_init>
    matrix_init();
    27d4:	0e 94 72 08 	call	0x10e4	; 0x10e4 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    27d8:	0c 94 9d 20 	jmp	0x413a	; 0x413a <bootmagic>

000027dc <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    27dc:	cf 93       	push	r28
    27de:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    27e0:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    27e4:	82 ff       	sbrs	r24, 2
    27e6:	1e c0       	rjmp	.+60     	; 0x2824 <keyboard_set_leds+0x48>
    27e8:	80 ff       	sbrs	r24, 0
    27ea:	04 c0       	rjmp	.+8      	; 0x27f4 <keyboard_set_leds+0x18>
    27ec:	8a ec       	ldi	r24, 0xCA	; 202
    27ee:	95 e0       	ldi	r25, 0x05	; 5
    27f0:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    27f4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    27f8:	80 ff       	sbrs	r24, 0
    27fa:	0c c0       	rjmp	.+24     	; 0x2814 <keyboard_set_leds+0x38>
    27fc:	1f 92       	push	r1
    27fe:	cf 93       	push	r28
    2800:	85 ec       	ldi	r24, 0xC5	; 197
    2802:	95 e0       	ldi	r25, 0x05	; 5
    2804:	9f 93       	push	r25
    2806:	8f 93       	push	r24
    2808:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    2818:	80 ff       	sbrs	r24, 0
    281a:	04 c0       	rjmp	.+8      	; 0x2824 <keyboard_set_leds+0x48>
    281c:	83 ec       	ldi	r24, 0xC3	; 195
    281e:	95 e0       	ldi	r25, 0x05	; 5
    2820:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    led_set(leds);
    2824:	8c 2f       	mov	r24, r28
}
    2826:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    2828:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <led_set>

0000282c <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    282c:	cf 92       	push	r12
    282e:	df 92       	push	r13
    2830:	ef 92       	push	r14
    2832:	ff 92       	push	r15
    2834:	0f 93       	push	r16
    2836:	1f 93       	push	r17
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	2b 97       	sbiw	r28, 0x0b	; 11
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    284c:	0e 94 5f 09 	call	0x12be	; 0x12be <matrix_scan>
    2850:	8f eb       	ldi	r24, 0xBF	; 191
    2852:	c8 2e       	mov	r12, r24
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	d8 2e       	mov	r13, r24
    2858:	00 e0       	ldi	r16, 0x00	; 0
    285a:	10 e0       	ldi	r17, 0x00	; 0
    285c:	e0 2e       	mov	r14, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    285e:	80 2f       	mov	r24, r16
    2860:	0e 94 9e 09 	call	0x133c	; 0x133c <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    2864:	f6 01       	movw	r30, r12
    2866:	41 91       	ld	r20, Z+
    2868:	6f 01       	movw	r12, r30
    286a:	f4 2e       	mov	r15, r20
    286c:	f8 26       	eor	r15, r24
        if (matrix_change) {
    286e:	b1 f4       	brne	.+44     	; 0x289c <keyboard_task+0x70>
    2870:	0f 5f       	subi	r16, 0xFF	; 255
    2872:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2874:	08 30       	cpi	r16, 0x08	; 8
    2876:	11 05       	cpc	r17, r1
    2878:	89 f7       	brne	.-30     	; 0x285c <keyboard_task+0x30>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    287a:	8f ef       	ldi	r24, 0xFF	; 255
    287c:	89 83       	std	Y+1, r24	; 0x01
    287e:	8a 83       	std	Y+2, r24	; 0x02
    2880:	1b 82       	std	Y+3, r1	; 0x03
    2882:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <timer_read>
    2886:	81 60       	ori	r24, 0x01	; 1
    2888:	78 2f       	mov	r23, r24
    288a:	9d 83       	std	Y+5, r25	; 0x05
    288c:	8c 83       	std	Y+4, r24	; 0x04
    288e:	49 81       	ldd	r20, Y+1	; 0x01
    2890:	5a 81       	ldd	r21, Y+2	; 0x02
    2892:	6b 81       	ldd	r22, Y+3	; 0x03
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	0e 94 b9 14 	call	0x2972	; 0x2972 <action_exec>
    289a:	40 c0       	rjmp	.+128    	; 0x291c <keyboard_task+0xf0>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    289c:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <debug_config>
    28a0:	91 ff       	sbrs	r25, 1
    28a2:	04 c0       	rjmp	.+8      	; 0x28ac <keyboard_task+0x80>
    28a4:	8b 87       	std	Y+11, r24	; 0x0b
    28a6:	0e 94 a4 09 	call	0x1348	; 0x1348 <matrix_print>
    28aa:	8b 85       	ldd	r24, Y+11	; 0x0b
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    28b0:	4f 2d       	mov	r20, r15
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	92 2f       	mov	r25, r18
    28b6:	ba 01       	movw	r22, r20
    28b8:	02 2e       	mov	r0, r18
    28ba:	02 c0       	rjmp	.+4      	; 0x28c0 <keyboard_task+0x94>
    28bc:	75 95       	asr	r23
    28be:	67 95       	ror	r22
    28c0:	0a 94       	dec	r0
    28c2:	e2 f7       	brpl	.-8      	; 0x28bc <keyboard_task+0x90>
    28c4:	60 ff       	sbrs	r22, 0
    28c6:	24 c0       	rjmp	.+72     	; 0x2910 <keyboard_task+0xe4>
                    action_exec((keyevent_t){
    28c8:	2e 83       	std	Y+6, r18	; 0x06
    28ca:	ef 82       	std	Y+7, r14	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    28cc:	21 e0       	ldi	r18, 0x01	; 1
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	69 01       	movw	r12, r18
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <keyboard_task+0xac>
    28d4:	cc 0c       	add	r12, r12
    28d6:	dd 1c       	adc	r13, r13
    28d8:	9a 95       	dec	r25
    28da:	e2 f7       	brpl	.-8      	; 0x28d4 <keyboard_task+0xa8>
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	8c 21       	and	r24, r12
    28e0:	9d 21       	and	r25, r13
    28e2:	89 2b       	or	r24, r25
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <keyboard_task+0xbc>
    28e6:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    28e8:	28 87       	std	Y+8, r18	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    28ea:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <timer_read>
    28ee:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    28f0:	78 2f       	mov	r23, r24
    28f2:	9a 87       	std	Y+10, r25	; 0x0a
    28f4:	89 87       	std	Y+9, r24	; 0x09
    28f6:	4e 81       	ldd	r20, Y+6	; 0x06
    28f8:	5f 81       	ldd	r21, Y+7	; 0x07
    28fa:	68 85       	ldd	r22, Y+8	; 0x08
    28fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    28fe:	0e 94 b9 14 	call	0x2972	; 0x2972 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2902:	f8 01       	movw	r30, r16
    2904:	e1 54       	subi	r30, 0x41	; 65
    2906:	fe 4f       	sbci	r31, 0xFE	; 254
    2908:	80 81       	ld	r24, Z
    290a:	c8 26       	eor	r12, r24
    290c:	c0 82       	st	Z, r12
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    290e:	06 c0       	rjmp	.+12     	; 0x291c <keyboard_task+0xf0>
    2910:	2f 5f       	subi	r18, 0xFF	; 255
    2912:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2914:	26 30       	cpi	r18, 0x06	; 6
    2916:	31 05       	cpc	r19, r1
    2918:	69 f6       	brne	.-102    	; 0x28b4 <keyboard_task+0x88>
    291a:	aa cf       	rjmp	.-172    	; 0x2870 <keyboard_task+0x44>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    291c:	0e 94 25 24 	call	0x484a	; 0x484a <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2920:	10 91 be 01 	lds	r17, 0x01BE	; 0x8001be <led_status.4787>
    2924:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <host_keyboard_leds>
    2928:	18 17       	cp	r17, r24
    292a:	a1 f0       	breq	.+40     	; 0x2954 <keyboard_task+0x128>
        led_status = host_keyboard_leds();
    292c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <host_keyboard_leds>
    2930:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <led_status.4787>
        keyboard_set_leds(led_status);
    }
}
    2934:	2b 96       	adiw	r28, 0x0b	; 11
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	df 91       	pop	r29
    2942:	cf 91       	pop	r28
    2944:	1f 91       	pop	r17
    2946:	0f 91       	pop	r16
    2948:	ff 90       	pop	r15
    294a:	ef 90       	pop	r14
    294c:	df 90       	pop	r13
    294e:	cf 90       	pop	r12
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2950:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <keyboard_set_leds>
    }
}
    2954:	2b 96       	adiw	r28, 0x0b	; 11
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	de bf       	out	0x3e, r29	; 62
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	cd bf       	out	0x3d, r28	; 61
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	1f 91       	pop	r17
    2966:	0f 91       	pop	r16
    2968:	ff 90       	pop	r15
    296a:	ef 90       	pop	r14
    296c:	df 90       	pop	r13
    296e:	cf 90       	pop	r12
    2970:	08 95       	ret

00002972 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2972:	cf 93       	push	r28
    2974:	df 93       	push	r29
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	2b 97       	sbiw	r28, 0x0b	; 11
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	4f 83       	std	Y+7, r20	; 0x07
    2988:	58 87       	std	Y+8, r21	; 0x08
    298a:	69 87       	std	Y+9, r22	; 0x09
    298c:	7a 87       	std	Y+10, r23	; 0x0a
    298e:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2990:	de 01       	movw	r26, r28
    2992:	11 96       	adiw	r26, 0x01	; 1
    2994:	86 e0       	ldi	r24, 0x06	; 6
    2996:	fd 01       	movw	r30, r26
    2998:	11 92       	st	Z+, r1
    299a:	8a 95       	dec	r24
    299c:	e9 f7       	brne	.-6      	; 0x2998 <action_exec+0x26>
    299e:	85 e0       	ldi	r24, 0x05	; 5
    29a0:	fe 01       	movw	r30, r28
    29a2:	37 96       	adiw	r30, 0x07	; 7
    29a4:	01 90       	ld	r0, Z+
    29a6:	0d 92       	st	X+, r0
    29a8:	8a 95       	dec	r24
    29aa:	e1 f7       	brne	.-8      	; 0x29a4 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    29ac:	49 81       	ldd	r20, Y+1	; 0x01
    29ae:	5a 81       	ldd	r21, Y+2	; 0x02
    29b0:	6b 81       	ldd	r22, Y+3	; 0x03
    29b2:	7c 81       	ldd	r23, Y+4	; 0x04
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <action_tapping_process>
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif

}
    29bc:	2b 96       	adiw	r28, 0x0b	; 11
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	08 95       	ret

000029ce <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    29ce:	cf 93       	push	r28
    if (code == KC_NO) {
    29d0:	88 23       	and	r24, r24
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <register_code+0x8>
    29d4:	cd c0       	rjmp	.+410    	; 0x2b70 <register_code+0x1a2>
    29d6:	c8 2f       	mov	r28, r24
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    29d8:	82 38       	cpi	r24, 0x82	; 130
    29da:	59 f4       	brne	.+22     	; 0x29f2 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    29dc:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <host_keyboard_leds>
    29e0:	81 fd       	sbrc	r24, 1
    29e2:	c6 c0       	rjmp	.+396    	; 0x2b70 <register_code+0x1a2>
#endif
        add_key(KC_CAPSLOCK);
    29e4:	89 e3       	ldi	r24, 0x39	; 57
    29e6:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <add_key>
        send_keyboard_report();
    29ea:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    29ee:	89 e3       	ldi	r24, 0x39	; 57
    29f0:	0c c0       	rjmp	.+24     	; 0x2a0a <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    29f2:	83 38       	cpi	r24, 0x83	; 131
    29f4:	79 f4       	brne	.+30     	; 0x2a14 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    29f6:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <host_keyboard_leds>
    29fa:	80 fd       	sbrc	r24, 0
    29fc:	b9 c0       	rjmp	.+370    	; 0x2b70 <register_code+0x1a2>
#endif
        add_key(KC_NUMLOCK);
    29fe:	83 e5       	ldi	r24, 0x53	; 83
    2a00:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <add_key>
        send_keyboard_report();
    2a04:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2a08:	83 e5       	ldi	r24, 0x53	; 83
    2a0a:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2a0e:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    2a10:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2a14:	84 38       	cpi	r24, 0x84	; 132
    2a16:	59 f4       	brne	.+22     	; 0x2a2e <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2a18:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <host_keyboard_leds>
    2a1c:	82 fd       	sbrc	r24, 2
    2a1e:	a8 c0       	rjmp	.+336    	; 0x2b70 <register_code+0x1a2>
#endif
        add_key(KC_SCROLLLOCK);
    2a20:	87 e4       	ldi	r24, 0x47	; 71
    2a22:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <add_key>
        send_keyboard_report();
    2a26:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2a2a:	87 e4       	ldi	r24, 0x47	; 71
    2a2c:	ee cf       	rjmp	.-36     	; 0x2a0a <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2a2e:	8c ef       	ldi	r24, 0xFC	; 252
    2a30:	8c 0f       	add	r24, r28
    2a32:	81 3a       	cpi	r24, 0xA1	; 161
    2a34:	48 f4       	brcc	.+18     	; 0x2a48 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2a36:	8c 2f       	mov	r24, r28
    2a38:	0e 94 b7 28 	call	0x516e	; 0x516e <command_proc>
    2a3c:	81 11       	cpse	r24, r1
    2a3e:	98 c0       	rjmp	.+304    	; 0x2b70 <register_code+0x1a2>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2a40:	8c 2f       	mov	r24, r28
    2a42:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <add_key>
    2a46:	e3 cf       	rjmp	.-58     	; 0x2a0e <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2a48:	80 e2       	ldi	r24, 0x20	; 32
    2a4a:	8c 0f       	add	r24, r28
    2a4c:	88 30       	cpi	r24, 0x08	; 8
    2a4e:	48 f4       	brcc	.+18     	; 0x2a62 <register_code+0x94>
        add_mods(MOD_BIT(code));
    2a50:	c7 70       	andi	r28, 0x07	; 7
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	01 c0       	rjmp	.+2      	; 0x2a58 <register_code+0x8a>
    2a56:	88 0f       	add	r24, r24
    2a58:	ca 95       	dec	r28
    2a5a:	ea f7       	brpl	.-6      	; 0x2a56 <register_code+0x88>
    2a5c:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <add_mods>
    2a60:	d6 cf       	rjmp	.-84     	; 0x2a0e <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2a62:	8b e5       	ldi	r24, 0x5B	; 91
    2a64:	8c 0f       	add	r24, r28
    2a66:	83 30       	cpi	r24, 0x03	; 3
    2a68:	78 f4       	brcc	.+30     	; 0x2a88 <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    2a6a:	c5 3a       	cpi	r28, 0xA5	; 165
    2a6c:	29 f0       	breq	.+10     	; 0x2a78 <register_code+0xaa>
    2a6e:	c6 3a       	cpi	r28, 0xA6	; 166
    2a70:	31 f0       	breq	.+12     	; 0x2a7e <register_code+0xb0>
    2a72:	83 e8       	ldi	r24, 0x83	; 131
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	05 c0       	rjmp	.+10     	; 0x2a82 <register_code+0xb4>
    2a78:	81 e8       	ldi	r24, 0x81	; 129
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <register_code+0xb4>
    2a7e:	82 e8       	ldi	r24, 0x82	; 130
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2a82:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2a84:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2a88:	88 e5       	ldi	r24, 0x58	; 88
    2a8a:	8c 0f       	add	r24, r28
    2a8c:	85 31       	cpi	r24, 0x15	; 21
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <register_code+0xc4>
    2a90:	6f c0       	rjmp	.+222    	; 0x2b70 <register_code+0x1a2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2a92:	c8 3a       	cpi	r28, 0xA8	; 168
    2a94:	61 f1       	breq	.+88     	; 0x2aee <register_code+0x120>
    2a96:	c9 3a       	cpi	r28, 0xA9	; 169
    2a98:	69 f1       	breq	.+90     	; 0x2af4 <register_code+0x126>
    2a9a:	ca 3a       	cpi	r28, 0xAA	; 170
    2a9c:	71 f1       	breq	.+92     	; 0x2afa <register_code+0x12c>
    2a9e:	cb 3a       	cpi	r28, 0xAB	; 171
    2aa0:	79 f1       	breq	.+94     	; 0x2b00 <register_code+0x132>
    2aa2:	cc 3a       	cpi	r28, 0xAC	; 172
    2aa4:	81 f1       	breq	.+96     	; 0x2b06 <register_code+0x138>
    2aa6:	cd 3a       	cpi	r28, 0xAD	; 173
    2aa8:	89 f1       	breq	.+98     	; 0x2b0c <register_code+0x13e>
    2aaa:	ce 3a       	cpi	r28, 0xAE	; 174
    2aac:	91 f1       	breq	.+100    	; 0x2b12 <register_code+0x144>
    2aae:	cf 3a       	cpi	r28, 0xAF	; 175
    2ab0:	99 f1       	breq	.+102    	; 0x2b18 <register_code+0x14a>
    2ab2:	c1 3b       	cpi	r28, 0xB1	; 177
    2ab4:	a1 f1       	breq	.+104    	; 0x2b1e <register_code+0x150>
    2ab6:	c0 3b       	cpi	r28, 0xB0	; 176
    2ab8:	a9 f1       	breq	.+106    	; 0x2b24 <register_code+0x156>
    2aba:	c2 3b       	cpi	r28, 0xB2	; 178
    2abc:	b1 f1       	breq	.+108    	; 0x2b2a <register_code+0x15c>
    2abe:	c3 3b       	cpi	r28, 0xB3	; 179
    2ac0:	b9 f1       	breq	.+110    	; 0x2b30 <register_code+0x162>
    2ac2:	c4 3b       	cpi	r28, 0xB4	; 180
    2ac4:	c1 f1       	breq	.+112    	; 0x2b36 <register_code+0x168>
    2ac6:	c5 3b       	cpi	r28, 0xB5	; 181
    2ac8:	c9 f1       	breq	.+114    	; 0x2b3c <register_code+0x16e>
    2aca:	c6 3b       	cpi	r28, 0xB6	; 182
    2acc:	d1 f1       	breq	.+116    	; 0x2b42 <register_code+0x174>
    2ace:	c7 3b       	cpi	r28, 0xB7	; 183
    2ad0:	d9 f1       	breq	.+118    	; 0x2b48 <register_code+0x17a>
    2ad2:	c8 3b       	cpi	r28, 0xB8	; 184
    2ad4:	e1 f1       	breq	.+120    	; 0x2b4e <register_code+0x180>
    2ad6:	c9 3b       	cpi	r28, 0xB9	; 185
    2ad8:	e9 f1       	breq	.+122    	; 0x2b54 <register_code+0x186>
    2ada:	ca 3b       	cpi	r28, 0xBA	; 186
    2adc:	f1 f1       	breq	.+124    	; 0x2b5a <register_code+0x18c>
    2ade:	cb 3b       	cpi	r28, 0xBB	; 187
    2ae0:	f9 f1       	breq	.+126    	; 0x2b60 <register_code+0x192>
    2ae2:	cc 3b       	cpi	r28, 0xBC	; 188
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <register_code+0x11a>
    2ae6:	3f c0       	rjmp	.+126    	; 0x2b66 <register_code+0x198>
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	3e c0       	rjmp	.+124    	; 0x2b6a <register_code+0x19c>
    2aee:	82 ee       	ldi	r24, 0xE2	; 226
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	3b c0       	rjmp	.+118    	; 0x2b6a <register_code+0x19c>
    2af4:	89 ee       	ldi	r24, 0xE9	; 233
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	38 c0       	rjmp	.+112    	; 0x2b6a <register_code+0x19c>
    2afa:	8a ee       	ldi	r24, 0xEA	; 234
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	35 c0       	rjmp	.+106    	; 0x2b6a <register_code+0x19c>
    2b00:	85 eb       	ldi	r24, 0xB5	; 181
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	32 c0       	rjmp	.+100    	; 0x2b6a <register_code+0x19c>
    2b06:	86 eb       	ldi	r24, 0xB6	; 182
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	2f c0       	rjmp	.+94     	; 0x2b6a <register_code+0x19c>
    2b0c:	83 eb       	ldi	r24, 0xB3	; 179
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	2c c0       	rjmp	.+88     	; 0x2b6a <register_code+0x19c>
    2b12:	84 eb       	ldi	r24, 0xB4	; 180
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	29 c0       	rjmp	.+82     	; 0x2b6a <register_code+0x19c>
    2b18:	87 eb       	ldi	r24, 0xB7	; 183
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	26 c0       	rjmp	.+76     	; 0x2b6a <register_code+0x19c>
    2b1e:	8c ec       	ldi	r24, 0xCC	; 204
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	23 c0       	rjmp	.+70     	; 0x2b6a <register_code+0x19c>
    2b24:	8d ec       	ldi	r24, 0xCD	; 205
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	20 c0       	rjmp	.+64     	; 0x2b6a <register_code+0x19c>
    2b2a:	83 e8       	ldi	r24, 0x83	; 131
    2b2c:	91 e0       	ldi	r25, 0x01	; 1
    2b2e:	1d c0       	rjmp	.+58     	; 0x2b6a <register_code+0x19c>
    2b30:	8a e8       	ldi	r24, 0x8A	; 138
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	1a c0       	rjmp	.+52     	; 0x2b6a <register_code+0x19c>
    2b36:	82 e9       	ldi	r24, 0x92	; 146
    2b38:	91 e0       	ldi	r25, 0x01	; 1
    2b3a:	17 c0       	rjmp	.+46     	; 0x2b6a <register_code+0x19c>
    2b3c:	84 e9       	ldi	r24, 0x94	; 148
    2b3e:	91 e0       	ldi	r25, 0x01	; 1
    2b40:	14 c0       	rjmp	.+40     	; 0x2b6a <register_code+0x19c>
    2b42:	81 e2       	ldi	r24, 0x21	; 33
    2b44:	92 e0       	ldi	r25, 0x02	; 2
    2b46:	11 c0       	rjmp	.+34     	; 0x2b6a <register_code+0x19c>
    2b48:	83 e2       	ldi	r24, 0x23	; 35
    2b4a:	92 e0       	ldi	r25, 0x02	; 2
    2b4c:	0e c0       	rjmp	.+28     	; 0x2b6a <register_code+0x19c>
    2b4e:	84 e2       	ldi	r24, 0x24	; 36
    2b50:	92 e0       	ldi	r25, 0x02	; 2
    2b52:	0b c0       	rjmp	.+22     	; 0x2b6a <register_code+0x19c>
    2b54:	85 e2       	ldi	r24, 0x25	; 37
    2b56:	92 e0       	ldi	r25, 0x02	; 2
    2b58:	08 c0       	rjmp	.+16     	; 0x2b6a <register_code+0x19c>
    2b5a:	86 e2       	ldi	r24, 0x26	; 38
    2b5c:	92 e0       	ldi	r25, 0x02	; 2
    2b5e:	05 c0       	rjmp	.+10     	; 0x2b6a <register_code+0x19c>
    2b60:	87 e2       	ldi	r24, 0x27	; 39
    2b62:	92 e0       	ldi	r25, 0x02	; 2
    2b64:	02 c0       	rjmp	.+4      	; 0x2b6a <register_code+0x19c>
    2b66:	8a e2       	ldi	r24, 0x2A	; 42
    2b68:	92 e0       	ldi	r25, 0x02	; 2
    }
}
    2b6a:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2b6c:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <host_consumer_send>
    }
}
    2b70:	cf 91       	pop	r28
    2b72:	08 95       	ret

00002b74 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2b74:	88 23       	and	r24, r24
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <unregister_code+0x6>
    2b78:	4b c0       	rjmp	.+150    	; 0x2c10 <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2b7a:	82 38       	cpi	r24, 0x82	; 130
    2b7c:	59 f4       	brne	.+22     	; 0x2b94 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2b7e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <host_keyboard_leds>
    2b82:	81 ff       	sbrs	r24, 1
    2b84:	45 c0       	rjmp	.+138    	; 0x2c10 <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2b86:	89 e3       	ldi	r24, 0x39	; 57
    2b88:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <add_key>
        send_keyboard_report();
    2b8c:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2b90:	89 e3       	ldi	r24, 0x39	; 57
    2b92:	0c c0       	rjmp	.+24     	; 0x2bac <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2b94:	83 38       	cpi	r24, 0x83	; 131
    2b96:	71 f4       	brne	.+28     	; 0x2bb4 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2b98:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <host_keyboard_leds>
    2b9c:	80 ff       	sbrs	r24, 0
    2b9e:	38 c0       	rjmp	.+112    	; 0x2c10 <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    2ba0:	83 e5       	ldi	r24, 0x53	; 83
    2ba2:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <add_key>
        send_keyboard_report();
    2ba6:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2baa:	83 e5       	ldi	r24, 0x53	; 83
    2bac:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <del_key>
        send_keyboard_report();
    2bb0:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2bb4:	84 38       	cpi	r24, 0x84	; 132
    2bb6:	59 f4       	brne	.+22     	; 0x2bce <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2bb8:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <host_keyboard_leds>
    2bbc:	82 ff       	sbrs	r24, 2
    2bbe:	28 c0       	rjmp	.+80     	; 0x2c10 <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    2bc0:	87 e4       	ldi	r24, 0x47	; 71
    2bc2:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <add_key>
        send_keyboard_report();
    2bc6:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2bca:	87 e4       	ldi	r24, 0x47	; 71
    2bcc:	ef cf       	rjmp	.-34     	; 0x2bac <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2bce:	9c ef       	ldi	r25, 0xFC	; 252
    2bd0:	98 0f       	add	r25, r24
    2bd2:	91 3a       	cpi	r25, 0xA1	; 161
    2bd4:	58 f3       	brcs	.-42     	; 0x2bac <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2bd6:	90 e2       	ldi	r25, 0x20	; 32
    2bd8:	98 0f       	add	r25, r24
    2bda:	98 30       	cpi	r25, 0x08	; 8
    2bdc:	50 f4       	brcc	.+20     	; 0x2bf2 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    2bde:	87 70       	andi	r24, 0x07	; 7
    2be0:	91 e0       	ldi	r25, 0x01	; 1
    2be2:	01 c0       	rjmp	.+2      	; 0x2be6 <unregister_code+0x72>
    2be4:	99 0f       	add	r25, r25
    2be6:	8a 95       	dec	r24
    2be8:	ea f7       	brpl	.-6      	; 0x2be4 <unregister_code+0x70>
    2bea:	89 2f       	mov	r24, r25
    2bec:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <del_mods>
    2bf0:	df cf       	rjmp	.-66     	; 0x2bb0 <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2bf2:	9b e5       	ldi	r25, 0x5B	; 91
    2bf4:	98 0f       	add	r25, r24
    2bf6:	93 30       	cpi	r25, 0x03	; 3
    2bf8:	20 f4       	brcc	.+8      	; 0x2c02 <unregister_code+0x8e>
        host_system_send(0);
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2c02:	88 5a       	subi	r24, 0xA8	; 168
    2c04:	85 31       	cpi	r24, 0x15	; 21
    2c06:	20 f4       	brcc	.+8      	; 0x2c10 <unregister_code+0x9c>
        host_consumer_send(0);
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <host_consumer_send>
    2c10:	08 95       	ret

00002c12 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2c12:	88 23       	and	r24, r24
    2c14:	21 f0       	breq	.+8      	; 0x2c1e <register_mods+0xc>
        add_mods(mods);
    2c16:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <add_mods>
        send_keyboard_report();
    2c1a:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <send_keyboard_report>
    2c1e:	08 95       	ret

00002c20 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2c20:	88 23       	and	r24, r24
    2c22:	21 f0       	breq	.+8      	; 0x2c2c <unregister_mods+0xc>
        del_mods(mods);
    2c24:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <del_mods>
        send_keyboard_report();
    2c28:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <send_keyboard_report>
    2c2c:	08 95       	ret

00002c2e <process_action>:
#endif

}

void process_action(keyrecord_t *record)
{
    2c2e:	4f 92       	push	r4
    2c30:	5f 92       	push	r5
    2c32:	6f 92       	push	r6
    2c34:	7f 92       	push	r7
    2c36:	8f 92       	push	r8
    2c38:	9f 92       	push	r9
    2c3a:	af 92       	push	r10
    2c3c:	bf 92       	push	r11
    2c3e:	cf 92       	push	r12
    2c40:	df 92       	push	r13
    2c42:	ef 92       	push	r14
    2c44:	ff 92       	push	r15
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	00 d0       	rcall	.+0      	; 0x2c50 <process_action+0x22>
    2c50:	00 d0       	rcall	.+0      	; 0x2c52 <process_action+0x24>
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <process_action+0x26>
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    bool do_release_oneshot = false;
    keyevent_t event = record->event;
    2c58:	25 e0       	ldi	r18, 0x05	; 5
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	de 01       	movw	r26, r28
    2c5e:	11 96       	adiw	r26, 0x01	; 1
    2c60:	01 90       	ld	r0, Z+
    2c62:	0d 92       	st	X+, r0
    2c64:	2a 95       	dec	r18
    2c66:	e1 f7       	brne	.-8      	; 0x2c60 <process_action+0x32>
    2c68:	fc 01       	movw	r30, r24
    2c6a:	40 81       	ld	r20, Z
    2c6c:	31 81       	ldd	r19, Z+1	; 0x01
    2c6e:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2c70:	25 81       	ldd	r18, Z+5	; 0x05
    2c72:	22 95       	swap	r18
    2c74:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2c76:	63 81       	ldd	r22, Z+3	; 0x03
    2c78:	74 81       	ldd	r23, Z+4	; 0x04
    2c7a:	67 2b       	or	r22, r23
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <process_action+0x52>
    2c7e:	52 c2       	rjmp	.+1188   	; 0x3124 <process_action+0x4f6>
    2c80:	3f 3f       	cpi	r19, 0xFF	; 255
    2c82:	19 f4       	brne	.+6      	; 0x2c8a <process_action+0x5c>
#endif

    if (IS_NOEVENT(event)) { return; }
    2c84:	4f 3f       	cpi	r20, 0xFF	; 255
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <process_action+0x5c>
    2c88:	4d c2       	rjmp	.+1178   	; 0x3124 <process_action+0x4f6>
    2c8a:	6c 01       	movw	r12, r24
        dprintf("Oneshot layer: timeout\n");
        clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
    }
#endif

    action_t action = layer_switch_get_action(event.key);
    2c8c:	49 83       	std	Y+1, r20	; 0x01
    2c8e:	3a 83       	std	Y+2, r19	; 0x02
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	9a 81       	ldd	r25, Y+2	; 0x02
    2c94:	2e 83       	std	Y+6, r18	; 0x06
    2c96:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <layer_switch_get_action>
    2c9a:	8c 01       	movw	r16, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2c9c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2ca0:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <default_layer_debug>
#endif
    dprintln();


#ifndef NO_ACTION_ONESHOT
    if (is_oneshot_layer_active() && event.pressed) {
    2ca4:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <is_oneshot_layer_active>
    2ca8:	2e 81       	ldd	r18, Y+6	; 0x06
    2caa:	88 23       	and	r24, r24
    2cac:	61 f0       	breq	.+24     	; 0x2cc6 <process_action+0x98>
    2cae:	ff 20       	and	r15, r15
    2cb0:	51 f0       	breq	.+20     	; 0x2cc6 <process_action+0x98>
        clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
    2cb2:	82 e0       	ldi	r24, 0x02	; 2
    2cb4:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <clear_oneshot_layer_state>
        do_release_oneshot = !is_oneshot_layer_active();
    2cb8:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <is_oneshot_layer_active>
    2cbc:	91 e0       	ldi	r25, 0x01	; 1
    2cbe:	e8 2e       	mov	r14, r24
    2cc0:	e9 26       	eor	r14, r25
    2cc2:	2e 81       	ldd	r18, Y+6	; 0x06
    2cc4:	01 c0       	rjmp	.+2      	; 0x2cc8 <process_action+0x9a>

}

void process_action(keyrecord_t *record)
{
    bool do_release_oneshot = false;
    2cc6:	e1 2c       	mov	r14, r1
        clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
        do_release_oneshot = !is_oneshot_layer_active();
    }
#endif

    switch (action.kind.id) {
    2cc8:	e1 2f       	mov	r30, r17
    2cca:	e2 95       	swap	r30
    2ccc:	ef 70       	andi	r30, 0x0F	; 15
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	e0 5a       	subi	r30, 0xA0	; 160
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	0c 94 c1 2b 	jmp	0x5782	; 0x5782 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2cd8:	81 2f       	mov	r24, r17
    2cda:	80 7f       	andi	r24, 0xF0	; 240
    2cdc:	1f 70       	andi	r17, 0x0F	; 15
    2cde:	88 23       	and	r24, r24
    2ce0:	11 f0       	breq	.+4      	; 0x2ce6 <process_action+0xb8>
    2ce2:	12 95       	swap	r17
    2ce4:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2ce6:	ff 20       	and	r15, r15
    2ce8:	49 f0       	breq	.+18     	; 0x2cfc <process_action+0xce>
                    if (mods) {
    2cea:	11 23       	and	r17, r17
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <process_action+0xc2>
    2cee:	d7 c1       	rjmp	.+942    	; 0x309e <process_action+0x470>
                        add_weak_mods(mods);
    2cf0:	81 2f       	mov	r24, r17
    2cf2:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <add_weak_mods>
                        send_keyboard_report();
    2cf6:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <send_keyboard_report>
    2cfa:	d1 c1       	rjmp	.+930    	; 0x309e <process_action+0x470>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2cfc:	80 2f       	mov	r24, r16
    2cfe:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <unregister_code>
                    if (mods) {
    2d02:	11 23       	and	r17, r17
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <process_action+0xda>
    2d06:	e5 c1       	rjmp	.+970    	; 0x30d2 <process_action+0x4a4>
                        del_weak_mods(mods);
    2d08:	81 2f       	mov	r24, r17
    2d0a:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <del_weak_mods>
                        send_keyboard_report();
    2d0e:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <send_keyboard_report>
    2d12:	df c1       	rjmp	.+958    	; 0x30d2 <process_action+0x4a4>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2d14:	81 2f       	mov	r24, r17
    2d16:	80 7f       	andi	r24, 0xF0	; 240
    2d18:	1f 70       	andi	r17, 0x0F	; 15
    2d1a:	80 32       	cpi	r24, 0x20	; 32
    2d1c:	11 f0       	breq	.+4      	; 0x2d22 <process_action+0xf4>
    2d1e:	12 95       	swap	r17
    2d20:	10 7f       	andi	r17, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2d22:	00 23       	and	r16, r16
    2d24:	19 f0       	breq	.+6      	; 0x2d2c <process_action+0xfe>
    2d26:	01 30       	cpi	r16, 0x01	; 1
    2d28:	29 f1       	breq	.+74     	; 0x2d74 <process_action+0x146>
    2d2a:	2d c0       	rjmp	.+90     	; 0x2d86 <process_action+0x158>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2d2c:	ff 20       	and	r15, r15
    2d2e:	81 f0       	breq	.+32     	; 0x2d50 <process_action+0x122>
                            if (tap_count == 0) {
    2d30:	22 23       	and	r18, r18
    2d32:	99 f1       	breq	.+102    	; 0x2d9a <process_action+0x16c>
                                dprint("MODS_TAP: Oneshot: 0\n");
                                register_mods(mods);
                            } else if (tap_count == 1) {
    2d34:	21 30       	cpi	r18, 0x01	; 1
    2d36:	21 f4       	brne	.+8      	; 0x2d40 <process_action+0x112>
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2d38:	81 2f       	mov	r24, r17
    2d3a:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <set_oneshot_mods>
    2d3e:	c9 c1       	rjmp	.+914    	; 0x30d2 <process_action+0x4a4>
                    #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
                            } else if (tap_count == ONESHOT_TAP_TOGGLE) {
    2d40:	22 30       	cpi	r18, 0x02	; 2
    2d42:	59 f5       	brne	.+86     	; 0x2d9a <process_action+0x16c>
                                dprint("MODS_TAP: Toggling oneshot");
                                clear_oneshot_mods();
    2d44:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <clear_oneshot_mods>
                                set_oneshot_locked_mods(mods);
    2d48:	81 2f       	mov	r24, r17
    2d4a:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <set_oneshot_locked_mods>
    2d4e:	25 c0       	rjmp	.+74     	; 0x2d9a <process_action+0x16c>
                    #endif
                            } else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2d50:	22 23       	and	r18, r18
    2d52:	69 f0       	breq	.+26     	; 0x2d6e <process_action+0x140>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            } else if (tap_count == 1) {
    2d54:	21 30       	cpi	r18, 0x01	; 1
    2d56:	41 f4       	brne	.+16     	; 0x2d68 <process_action+0x13a>
                                // Retain Oneshot mods
                    #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
                                if (mods & get_mods()) {
    2d58:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <get_mods>
    2d5c:	81 23       	and	r24, r17
    2d5e:	09 f4       	brne	.+2      	; 0x2d62 <process_action+0x134>
    2d60:	b8 c1       	rjmp	.+880    	; 0x30d2 <process_action+0x4a4>
                                    clear_oneshot_locked_mods();
    2d62:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <clear_oneshot_locked_mods>
    2d66:	03 c0       	rjmp	.+6      	; 0x2d6e <process_action+0x140>
                                    clear_oneshot_mods();
                                    unregister_mods(mods);
                                }
                            } else if (tap_count == ONESHOT_TAP_TOGGLE) {
    2d68:	22 30       	cpi	r18, 0x02	; 2
    2d6a:	09 f4       	brne	.+2      	; 0x2d6e <process_action+0x140>
    2d6c:	b2 c1       	rjmp	.+868    	; 0x30d2 <process_action+0x4a4>
                                // Toggle Oneshot Layer
                    #endif
                            } else {
                                clear_oneshot_mods();
    2d6e:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <clear_oneshot_mods>
    2d72:	19 c0       	rjmp	.+50     	; 0x2da6 <process_action+0x178>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2d74:	ff 20       	and	r15, r15
    2d76:	21 f0       	breq	.+8      	; 0x2d80 <process_action+0x152>
                            if (tap_count <= TAPPING_TOGGLE) {
    2d78:	22 30       	cpi	r18, 0x02	; 2
    2d7a:	08 f0       	brcs	.+2      	; 0x2d7e <process_action+0x150>
    2d7c:	aa c1       	rjmp	.+852    	; 0x30d2 <process_action+0x4a4>
    2d7e:	0d c0       	rjmp	.+26     	; 0x2d9a <process_action+0x16c>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2d80:	21 11       	cpse	r18, r1
    2d82:	a7 c1       	rjmp	.+846    	; 0x30d2 <process_action+0x4a4>
    2d84:	10 c0       	rjmp	.+32     	; 0x2da6 <process_action+0x178>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2d86:	ff 20       	and	r15, r15
    2d88:	61 f0       	breq	.+24     	; 0x2da2 <process_action+0x174>
                            if (tap_count > 0) {
    2d8a:	22 23       	and	r18, r18
    2d8c:	31 f0       	breq	.+12     	; 0x2d9a <process_action+0x16c>
                                if (record->tap.interrupted) {
    2d8e:	f6 01       	movw	r30, r12
    2d90:	85 81       	ldd	r24, Z+5	; 0x05
    2d92:	80 ff       	sbrs	r24, 0
    2d94:	84 c1       	rjmp	.+776    	; 0x309e <process_action+0x470>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2d96:	8f 70       	andi	r24, 0x0F	; 15
    2d98:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    2d9a:	81 2f       	mov	r24, r17
    2d9c:	0e 94 09 16 	call	0x2c12	; 0x2c12 <register_mods>
    2da0:	98 c1       	rjmp	.+816    	; 0x30d2 <process_action+0x4a4>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2da2:	21 11       	cpse	r18, r1
    2da4:	83 c1       	rjmp	.+774    	; 0x30ac <process_action+0x47e>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    2da6:	81 2f       	mov	r24, r17
    2da8:	f3 c0       	rjmp	.+486    	; 0x2f90 <process_action+0x362>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2daa:	81 2f       	mov	r24, r17
    2dac:	86 95       	lsr	r24
    2dae:	86 95       	lsr	r24
    2db0:	83 70       	andi	r24, 0x03	; 3
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	00 97       	sbiw	r24, 0x00	; 0
    2db6:	19 f0       	breq	.+6      	; 0x2dbe <process_action+0x190>
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	59 f0       	breq	.+22     	; 0x2dd2 <process_action+0x1a4>
    2dbc:	8a c1       	rjmp	.+788    	; 0x30d2 <process_action+0x4a4>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2dbe:	ff 20       	and	r15, r15
    2dc0:	19 f0       	breq	.+6      	; 0x2dc8 <process_action+0x19a>
                        host_system_send(action.usage.code);
    2dc2:	c8 01       	movw	r24, r16
    2dc4:	93 70       	andi	r25, 0x03	; 3
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <process_action+0x19e>
                    } else {
                        host_system_send(0);
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	0e 94 ba 13 	call	0x2774	; 0x2774 <host_system_send>
    2dd0:	80 c1       	rjmp	.+768    	; 0x30d2 <process_action+0x4a4>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2dd2:	ff 20       	and	r15, r15
    2dd4:	19 f0       	breq	.+6      	; 0x2ddc <process_action+0x1ae>
                        host_consumer_send(action.usage.code);
    2dd6:	c8 01       	movw	r24, r16
    2dd8:	93 70       	andi	r25, 0x03	; 3
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <process_action+0x1b2>
                    } else {
                        host_consumer_send(0);
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <host_consumer_send>
    2de4:	76 c1       	rjmp	.+748    	; 0x30d2 <process_action+0x4a4>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2de6:	80 2f       	mov	r24, r16
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2de8:	ff 20       	and	r15, r15
    2dea:	19 f0       	breq	.+6      	; 0x2df2 <process_action+0x1c4>
                mousekey_on(action.key.code);
    2dec:	0e 94 ab 22 	call	0x4556	; 0x4556 <mousekey_on>
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <process_action+0x1c8>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2df2:	0e 94 13 23 	call	0x4626	; 0x4626 <mousekey_off>
                mousekey_send();
    2df6:	0e 94 98 23 	call	0x4730	; 0x4730 <mousekey_send>
    2dfa:	6b c1       	rjmp	.+726    	; 0x30d2 <process_action+0x4a4>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2dfc:	81 2f       	mov	r24, r17
    2dfe:	83 70       	andi	r24, 0x03	; 3
    2e00:	09 f0       	breq	.+2      	; 0x2e04 <process_action+0x1d6>
    2e02:	53 c0       	rjmp	.+166    	; 0x2eaa <process_action+0x27c>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2e04:	f1 10       	cpse	r15, r1
    2e06:	65 c1       	rjmp	.+714    	; 0x30d2 <process_action+0x4a4>
                    uint8_t shift = action.layer_bitop.part*4;
    2e08:	80 2f       	mov	r24, r16
    2e0a:	82 95       	swap	r24
    2e0c:	86 95       	lsr	r24
    2e0e:	87 70       	andi	r24, 0x07	; 7
    2e10:	88 0f       	add	r24, r24
    2e12:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2e14:	90 2f       	mov	r25, r16
    2e16:	9f 70       	andi	r25, 0x0F	; 15
    2e18:	49 2e       	mov	r4, r25
    2e1a:	51 2c       	mov	r5, r1
    2e1c:	61 2c       	mov	r6, r1
    2e1e:	71 2c       	mov	r7, r1
    2e20:	08 2e       	mov	r0, r24
    2e22:	04 c0       	rjmp	.+8      	; 0x2e2c <process_action+0x1fe>
    2e24:	44 0c       	add	r4, r4
    2e26:	55 1c       	adc	r5, r5
    2e28:	66 1c       	adc	r6, r6
    2e2a:	77 1c       	adc	r7, r7
    2e2c:	0a 94       	dec	r0
    2e2e:	d2 f7       	brpl	.-12     	; 0x2e24 <process_action+0x1f6>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2e30:	04 ff       	sbrs	r16, 4
    2e32:	15 c0       	rjmp	.+42     	; 0x2e5e <process_action+0x230>
    2e34:	2f e0       	ldi	r18, 0x0F	; 15
    2e36:	82 2e       	mov	r8, r18
    2e38:	91 2c       	mov	r9, r1
    2e3a:	a1 2c       	mov	r10, r1
    2e3c:	b1 2c       	mov	r11, r1
    2e3e:	a5 01       	movw	r20, r10
    2e40:	94 01       	movw	r18, r8
    2e42:	04 c0       	rjmp	.+8      	; 0x2e4c <process_action+0x21e>
    2e44:	22 0f       	add	r18, r18
    2e46:	33 1f       	adc	r19, r19
    2e48:	44 1f       	adc	r20, r20
    2e4a:	55 1f       	adc	r21, r21
    2e4c:	8a 95       	dec	r24
    2e4e:	d2 f7       	brpl	.-12     	; 0x2e44 <process_action+0x216>
    2e50:	ca 01       	movw	r24, r20
    2e52:	b9 01       	movw	r22, r18
    2e54:	60 95       	com	r22
    2e56:	70 95       	com	r23
    2e58:	80 95       	com	r24
    2e5a:	90 95       	com	r25
    2e5c:	03 c0       	rjmp	.+6      	; 0x2e64 <process_action+0x236>
    2e5e:	60 e0       	ldi	r22, 0x00	; 0
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2e64:	16 95       	lsr	r17
    2e66:	16 95       	lsr	r17
    2e68:	13 70       	andi	r17, 0x03	; 3
    2e6a:	41 2f       	mov	r20, r17
    2e6c:	50 e0       	ldi	r21, 0x00	; 0
    2e6e:	42 30       	cpi	r20, 0x02	; 2
    2e70:	51 05       	cpc	r21, r1
    2e72:	69 f0       	breq	.+26     	; 0x2e8e <process_action+0x260>
    2e74:	43 30       	cpi	r20, 0x03	; 3
    2e76:	51 05       	cpc	r21, r1
    2e78:	89 f0       	breq	.+34     	; 0x2e9c <process_action+0x26e>
    2e7a:	64 29       	or	r22, r4
    2e7c:	75 29       	or	r23, r5
    2e7e:	86 29       	or	r24, r6
    2e80:	97 29       	or	r25, r7
    2e82:	41 30       	cpi	r20, 0x01	; 1
    2e84:	51 05       	cpc	r21, r1
    2e86:	71 f0       	breq	.+28     	; 0x2ea4 <process_action+0x276>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2e88:	0e 94 a1 1c 	call	0x3942	; 0x3942 <default_layer_and>
    2e8c:	22 c1       	rjmp	.+580    	; 0x30d2 <process_action+0x4a4>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2e8e:	64 29       	or	r22, r4
    2e90:	75 29       	or	r23, r5
    2e92:	86 29       	or	r24, r6
    2e94:	97 29       	or	r25, r7
    2e96:	0e 94 bd 1c 	call	0x397a	; 0x397a <default_layer_xor>
    2e9a:	1b c1       	rjmp	.+566    	; 0x30d2 <process_action+0x4a4>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2e9c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <default_layer_and>
    2ea0:	c3 01       	movw	r24, r6
    2ea2:	b2 01       	movw	r22, r4
    2ea4:	0e 94 85 1c 	call	0x390a	; 0x390a <default_layer_or>
    2ea8:	14 c1       	rjmp	.+552    	; 0x30d2 <process_action+0x4a4>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2eaa:	ff 20       	and	r15, r15
    2eac:	19 f0       	breq	.+6      	; 0x2eb4 <process_action+0x286>
    2eae:	81 2f       	mov	r24, r17
    2eb0:	81 70       	andi	r24, 0x01	; 1
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <process_action+0x288>
    2eb4:	86 95       	lsr	r24
    2eb6:	88 23       	and	r24, r24
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <process_action+0x28e>
    2eba:	0b c1       	rjmp	.+534    	; 0x30d2 <process_action+0x4a4>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2ebc:	80 2f       	mov	r24, r16
    2ebe:	82 95       	swap	r24
    2ec0:	86 95       	lsr	r24
    2ec2:	87 70       	andi	r24, 0x07	; 7
    2ec4:	88 0f       	add	r24, r24
    2ec6:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2ec8:	90 2f       	mov	r25, r16
    2eca:	9f 70       	andi	r25, 0x0F	; 15
    2ecc:	49 2e       	mov	r4, r25
    2ece:	51 2c       	mov	r5, r1
    2ed0:	61 2c       	mov	r6, r1
    2ed2:	71 2c       	mov	r7, r1
    2ed4:	08 2e       	mov	r0, r24
    2ed6:	04 c0       	rjmp	.+8      	; 0x2ee0 <process_action+0x2b2>
    2ed8:	44 0c       	add	r4, r4
    2eda:	55 1c       	adc	r5, r5
    2edc:	66 1c       	adc	r6, r6
    2ede:	77 1c       	adc	r7, r7
    2ee0:	0a 94       	dec	r0
    2ee2:	d2 f7       	brpl	.-12     	; 0x2ed8 <process_action+0x2aa>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2ee4:	04 ff       	sbrs	r16, 4
    2ee6:	15 c0       	rjmp	.+42     	; 0x2f12 <process_action+0x2e4>
    2ee8:	9f e0       	ldi	r25, 0x0F	; 15
    2eea:	89 2e       	mov	r8, r25
    2eec:	91 2c       	mov	r9, r1
    2eee:	a1 2c       	mov	r10, r1
    2ef0:	b1 2c       	mov	r11, r1
    2ef2:	a5 01       	movw	r20, r10
    2ef4:	94 01       	movw	r18, r8
    2ef6:	04 c0       	rjmp	.+8      	; 0x2f00 <process_action+0x2d2>
    2ef8:	22 0f       	add	r18, r18
    2efa:	33 1f       	adc	r19, r19
    2efc:	44 1f       	adc	r20, r20
    2efe:	55 1f       	adc	r21, r21
    2f00:	8a 95       	dec	r24
    2f02:	d2 f7       	brpl	.-12     	; 0x2ef8 <process_action+0x2ca>
    2f04:	ca 01       	movw	r24, r20
    2f06:	b9 01       	movw	r22, r18
    2f08:	60 95       	com	r22
    2f0a:	70 95       	com	r23
    2f0c:	80 95       	com	r24
    2f0e:	90 95       	com	r25
    2f10:	03 c0       	rjmp	.+6      	; 0x2f18 <process_action+0x2ea>
    2f12:	60 e0       	ldi	r22, 0x00	; 0
    2f14:	70 e0       	ldi	r23, 0x00	; 0
    2f16:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2f18:	16 95       	lsr	r17
    2f1a:	16 95       	lsr	r17
    2f1c:	13 70       	andi	r17, 0x03	; 3
    2f1e:	41 2f       	mov	r20, r17
    2f20:	50 e0       	ldi	r21, 0x00	; 0
    2f22:	42 30       	cpi	r20, 0x02	; 2
    2f24:	51 05       	cpc	r21, r1
    2f26:	69 f0       	breq	.+26     	; 0x2f42 <process_action+0x314>
    2f28:	43 30       	cpi	r20, 0x03	; 3
    2f2a:	51 05       	cpc	r21, r1
    2f2c:	89 f0       	breq	.+34     	; 0x2f50 <process_action+0x322>
    2f2e:	64 29       	or	r22, r4
    2f30:	75 29       	or	r23, r5
    2f32:	86 29       	or	r24, r6
    2f34:	97 29       	or	r25, r7
    2f36:	41 30       	cpi	r20, 0x01	; 1
    2f38:	51 05       	cpc	r21, r1
    2f3a:	71 f0       	breq	.+28     	; 0x2f58 <process_action+0x32a>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2f3c:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <layer_and>
    2f40:	c8 c0       	rjmp	.+400    	; 0x30d2 <process_action+0x4a4>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2f42:	64 29       	or	r22, r4
    2f44:	75 29       	or	r23, r5
    2f46:	86 29       	or	r24, r6
    2f48:	97 29       	or	r25, r7
    2f4a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <layer_xor>
    2f4e:	c1 c0       	rjmp	.+386    	; 0x30d2 <process_action+0x4a4>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2f50:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <layer_and>
    2f54:	c3 01       	movw	r24, r6
    2f56:	b2 01       	movw	r22, r4
    2f58:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <layer_or>
    2f5c:	ba c0       	rjmp	.+372    	; 0x30d2 <process_action+0x4a4>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2f5e:	80 2f       	mov	r24, r16
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	fc 01       	movw	r30, r24
    2f64:	e0 5e       	subi	r30, 0xE0	; 224
    2f66:	f1 09       	sbc	r31, r1
    2f68:	e5 31       	cpi	r30, 0x15	; 21
    2f6a:	f1 05       	cpc	r31, r1
    2f6c:	08 f0       	brcs	.+2      	; 0x2f70 <process_action+0x342>
    2f6e:	92 c0       	rjmp	.+292    	; 0x3094 <process_action+0x466>
    2f70:	e0 59       	subi	r30, 0x90	; 144
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	0c 94 c1 2b 	jmp	0x5782	; 0x5782 <__tablejump2__>
    2f78:	0f 70       	andi	r16, 0x0F	; 15
    2f7a:	81 2f       	mov	r24, r17
    2f7c:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2f7e:	ff 20       	and	r15, r15
    2f80:	21 f0       	breq	.+8      	; 0x2f8a <process_action+0x35c>
                        layer_on(action.layer_tap.val);
    2f82:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2f86:	80 2f       	mov	r24, r16
    2f88:	09 cf       	rjmp	.-494    	; 0x2d9c <process_action+0x16e>
                    } else {
                        layer_off(action.layer_tap.val);
    2f8a:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2f8e:	80 2f       	mov	r24, r16
    2f90:	0e 94 10 16 	call	0x2c20	; 0x2c20 <unregister_mods>
    2f94:	9e c0       	rjmp	.+316    	; 0x30d2 <process_action+0x4a4>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2f96:	ff 20       	and	r15, r15
    2f98:	39 f0       	breq	.+14     	; 0x2fa8 <process_action+0x37a>
                        if (tap_count < TAPPING_TOGGLE) {
    2f9a:	21 11       	cpse	r18, r1
    2f9c:	9a c0       	rjmp	.+308    	; 0x30d2 <process_action+0x4a4>
                            layer_invert(action.layer_tap.val);
    2f9e:	81 2f       	mov	r24, r17
    2fa0:	8f 71       	andi	r24, 0x1F	; 31
    2fa2:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <layer_invert>
    2fa6:	95 c0       	rjmp	.+298    	; 0x30d2 <process_action+0x4a4>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2fa8:	22 30       	cpi	r18, 0x02	; 2
    2faa:	08 f0       	brcs	.+2      	; 0x2fae <process_action+0x380>
    2fac:	92 c0       	rjmp	.+292    	; 0x30d2 <process_action+0x4a4>
    2fae:	f7 cf       	rjmp	.-18     	; 0x2f9e <process_action+0x370>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2fb0:	ff 20       	and	r15, r15
    2fb2:	39 f0       	breq	.+14     	; 0x2fc2 <process_action+0x394>
    2fb4:	81 2f       	mov	r24, r17
    2fb6:	8f 71       	andi	r24, 0x1F	; 31
    2fb8:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <layer_on>
    2fbc:	8a c0       	rjmp	.+276    	; 0x30d2 <process_action+0x4a4>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2fbe:	ff 20       	and	r15, r15
    2fc0:	c9 f3       	breq	.-14     	; 0x2fb4 <process_action+0x386>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2fc2:	81 2f       	mov	r24, r17
    2fc4:	8f 71       	andi	r24, 0x1F	; 31
    2fc6:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <layer_off>
    2fca:	83 c0       	rjmp	.+262    	; 0x30d2 <process_action+0x4a4>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2fcc:	ff 20       	and	r15, r15
    2fce:	29 f0       	breq	.+10     	; 0x2fda <process_action+0x3ac>
    2fd0:	81 2f       	mov	r24, r17
    2fd2:	8f 71       	andi	r24, 0x1F	; 31
    2fd4:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <layer_move>
    2fd8:	7c c0       	rjmp	.+248    	; 0x30d2 <process_action+0x4a4>
                                    layer_clear();
    2fda:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <layer_clear>
    2fde:	79 c0       	rjmp	.+242    	; 0x30d2 <process_action+0x4a4>
                case OP_ONESHOT:
                    // Oneshot modifier
                #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
                    do_release_oneshot = false;
                    if (event.pressed) {
                        del_mods(get_oneshot_locked_mods());
    2fe0:	2e 83       	std	Y+6, r18	; 0x06
            #ifndef NO_ACTION_ONESHOT
                case OP_ONESHOT:
                    // Oneshot modifier
                #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
                    do_release_oneshot = false;
                    if (event.pressed) {
    2fe2:	ff 20       	and	r15, r15
    2fe4:	c1 f0       	breq	.+48     	; 0x3016 <process_action+0x3e8>
                        del_mods(get_oneshot_locked_mods());
    2fe6:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <get_oneshot_locked_mods>
    2fea:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <del_mods>
                        if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
    2fee:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <get_oneshot_layer_state>
    2ff2:	2e 81       	ldd	r18, Y+6	; 0x06
    2ff4:	84 30       	cpi	r24, 0x04	; 4
    2ff6:	29 f4       	brne	.+10     	; 0x3002 <process_action+0x3d4>
                            reset_oneshot_layer();
    2ff8:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <reset_oneshot_layer>
                            layer_off(action.layer_tap.val);
    2ffc:	81 2f       	mov	r24, r17
    2ffe:	8f 71       	andi	r24, 0x1F	; 31
    3000:	79 c0       	rjmp	.+242    	; 0x30f4 <process_action+0x4c6>
                            break;
                        } else if (tap_count < ONESHOT_TAP_TOGGLE) {
    3002:	22 30       	cpi	r18, 0x02	; 2
    3004:	08 f0       	brcs	.+2      	; 0x3008 <process_action+0x3da>
    3006:	8e c0       	rjmp	.+284    	; 0x3124 <process_action+0x4f6>
                            layer_on(action.layer_tap.val);
    3008:	1f 71       	andi	r17, 0x1F	; 31
    300a:	81 2f       	mov	r24, r17
    300c:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <layer_on>
                            set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
    3010:	63 e0       	ldi	r22, 0x03	; 3
    3012:	81 2f       	mov	r24, r17
    3014:	0e c0       	rjmp	.+28     	; 0x3032 <process_action+0x404>
                        }
                    } else {
                        add_mods(get_oneshot_locked_mods());
    3016:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <get_oneshot_locked_mods>
    301a:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <add_mods>
                        if (tap_count >= ONESHOT_TAP_TOGGLE) {
    301e:	2e 81       	ldd	r18, Y+6	; 0x06
    3020:	22 30       	cpi	r18, 0x02	; 2
    3022:	f8 f0       	brcs	.+62     	; 0x3062 <process_action+0x434>
                            reset_oneshot_layer();
    3024:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <reset_oneshot_layer>
                            clear_oneshot_locked_mods();
    3028:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <clear_oneshot_locked_mods>
                            set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
    302c:	64 e0       	ldi	r22, 0x04	; 4
    302e:	81 2f       	mov	r24, r17
    3030:	8f 71       	andi	r24, 0x1F	; 31
        layer_on(get_oneshot_layer());
        process_action(record);
        layer_off(get_oneshot_layer());
    }
#endif
}
    3032:	26 96       	adiw	r28, 0x06	; 6
    3034:	0f b6       	in	r0, 0x3f	; 63
    3036:	f8 94       	cli
    3038:	de bf       	out	0x3e, r29	; 62
    303a:	0f be       	out	0x3f, r0	; 63
    303c:	cd bf       	out	0x3d, r28	; 61
    303e:	df 91       	pop	r29
    3040:	cf 91       	pop	r28
    3042:	1f 91       	pop	r17
    3044:	0f 91       	pop	r16
    3046:	ff 90       	pop	r15
    3048:	ef 90       	pop	r14
    304a:	df 90       	pop	r13
    304c:	cf 90       	pop	r12
    304e:	bf 90       	pop	r11
    3050:	af 90       	pop	r10
    3052:	9f 90       	pop	r9
    3054:	8f 90       	pop	r8
    3056:	7f 90       	pop	r7
    3058:	6f 90       	pop	r6
    305a:	5f 90       	pop	r5
    305c:	4f 90       	pop	r4
                    } else {
                        add_mods(get_oneshot_locked_mods());
                        if (tap_count >= ONESHOT_TAP_TOGGLE) {
                            reset_oneshot_layer();
                            clear_oneshot_locked_mods();
                            set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
    305e:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <set_oneshot_layer>
                        } else {
                            clear_oneshot_layer_state(ONESHOT_PRESSED);
    3062:	81 e0       	ldi	r24, 0x01	; 1
        layer_on(get_oneshot_layer());
        process_action(record);
        layer_off(get_oneshot_layer());
    }
#endif
}
    3064:	26 96       	adiw	r28, 0x06	; 6
    3066:	0f b6       	in	r0, 0x3f	; 63
    3068:	f8 94       	cli
    306a:	de bf       	out	0x3e, r29	; 62
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	cd bf       	out	0x3d, r28	; 61
    3070:	df 91       	pop	r29
    3072:	cf 91       	pop	r28
    3074:	1f 91       	pop	r17
    3076:	0f 91       	pop	r16
    3078:	ff 90       	pop	r15
    307a:	ef 90       	pop	r14
    307c:	df 90       	pop	r13
    307e:	cf 90       	pop	r12
    3080:	bf 90       	pop	r11
    3082:	af 90       	pop	r10
    3084:	9f 90       	pop	r9
    3086:	8f 90       	pop	r8
    3088:	7f 90       	pop	r7
    308a:	6f 90       	pop	r6
    308c:	5f 90       	pop	r5
    308e:	4f 90       	pop	r4
                        if (tap_count >= ONESHOT_TAP_TOGGLE) {
                            reset_oneshot_layer();
                            clear_oneshot_locked_mods();
                            set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
                        } else {
                            clear_oneshot_layer_state(ONESHOT_PRESSED);
    3090:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <clear_oneshot_layer_state>
                #endif
                    break;
            #endif
                default:
                    /* tap key */
                    if (event.pressed) {
    3094:	ff 20       	and	r15, r15
    3096:	39 f0       	breq	.+14     	; 0x30a6 <process_action+0x478>
                        if (tap_count > 0) {
    3098:	22 23       	and	r18, r18
    309a:	09 f4       	brne	.+2      	; 0x309e <process_action+0x470>
    309c:	8b cf       	rjmp	.-234    	; 0x2fb4 <process_action+0x386>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    309e:	80 2f       	mov	r24, r16
    30a0:	0e 94 e7 14 	call	0x29ce	; 0x29ce <register_code>
    30a4:	16 c0       	rjmp	.+44     	; 0x30d2 <process_action+0x4a4>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    30a6:	22 23       	and	r18, r18
    30a8:	09 f4       	brne	.+2      	; 0x30ac <process_action+0x47e>
    30aa:	8b cf       	rjmp	.-234    	; 0x2fc2 <process_action+0x394>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    30ac:	80 2f       	mov	r24, r16
    30ae:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <unregister_code>
    30b2:	0f c0       	rjmp	.+30     	; 0x30d2 <process_action+0x4a4>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    30b4:	41 2f       	mov	r20, r17
    30b6:	4f 70       	andi	r20, 0x0F	; 15
    30b8:	60 2f       	mov	r22, r16
    30ba:	c6 01       	movw	r24, r12
    30bc:	0e 94 48 20 	call	0x4090	; 0x4090 <action_get_macro>
    30c0:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <action_macro_play>
            break;
    30c4:	06 c0       	rjmp	.+12     	; 0x30d2 <process_action+0x4a4>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    30c6:	41 2f       	mov	r20, r17
    30c8:	4f 70       	andi	r20, 0x0F	; 15
    30ca:	60 2f       	mov	r22, r16
    30cc:	c6 01       	movw	r24, r12
    30ce:	0e 94 1f 08 	call	0x103e	; 0x103e <action_function>

#ifndef NO_ACTION_ONESHOT
    /* Because we switch layers after a oneshot event, we need to release the
     * key before we leave the layer or no key up event will be generated.
     */
    if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
    30d2:	ee 20       	and	r14, r14
    30d4:	39 f1       	breq	.+78     	; 0x3124 <process_action+0x4f6>
    30d6:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <get_oneshot_layer_state>
    30da:	80 fd       	sbrc	r24, 0
    30dc:	23 c0       	rjmp	.+70     	; 0x3124 <process_action+0x4f6>
        record->event.pressed = false;
    30de:	f6 01       	movw	r30, r12
    30e0:	12 82       	std	Z+2, r1	; 0x02
        layer_on(get_oneshot_layer());
    30e2:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <get_oneshot_layer>
    30e6:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <layer_on>
        process_action(record);
    30ea:	c6 01       	movw	r24, r12
    30ec:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <process_action>
        layer_off(get_oneshot_layer());
    30f0:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <get_oneshot_layer>
    }
#endif
}
    30f4:	26 96       	adiw	r28, 0x06	; 6
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	df 91       	pop	r29
    3102:	cf 91       	pop	r28
    3104:	1f 91       	pop	r17
    3106:	0f 91       	pop	r16
    3108:	ff 90       	pop	r15
    310a:	ef 90       	pop	r14
    310c:	df 90       	pop	r13
    310e:	cf 90       	pop	r12
    3110:	bf 90       	pop	r11
    3112:	af 90       	pop	r10
    3114:	9f 90       	pop	r9
    3116:	8f 90       	pop	r8
    3118:	7f 90       	pop	r7
    311a:	6f 90       	pop	r6
    311c:	5f 90       	pop	r5
    311e:	4f 90       	pop	r4
     */
    if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
        record->event.pressed = false;
        layer_on(get_oneshot_layer());
        process_action(record);
        layer_off(get_oneshot_layer());
    3120:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <layer_off>
    }
#endif
}
    3124:	26 96       	adiw	r28, 0x06	; 6
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	ff 90       	pop	r15
    313a:	ef 90       	pop	r14
    313c:	df 90       	pop	r13
    313e:	cf 90       	pop	r12
    3140:	bf 90       	pop	r11
    3142:	af 90       	pop	r10
    3144:	9f 90       	pop	r9
    3146:	8f 90       	pop	r8
    3148:	7f 90       	pop	r7
    314a:	6f 90       	pop	r6
    314c:	5f 90       	pop	r5
    314e:	4f 90       	pop	r4
    3150:	08 95       	ret

00003152 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    3152:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <clear_weak_mods>
    clear_keys();
    3156:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <clear_keys>
    send_keyboard_report();
    315a:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    315e:	0e 94 ca 24 	call	0x4994	; 0x4994 <mousekey_clear>
    mousekey_send();
    3162:	0e 94 98 23 	call	0x4730	; 0x4730 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	0e 94 ba 13 	call	0x2774	; 0x2774 <host_system_send>
    host_consumer_send(0);
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <host_consumer_send>

00003176 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    3176:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <clear_mods>
    clear_keyboard_but_mods();
    317a:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

0000317e <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    317e:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <layer_switch_get_action>

    switch (action.kind.id) {
    3182:	29 2f       	mov	r18, r25
    3184:	22 95       	swap	r18
    3186:	2f 70       	andi	r18, 0x0F	; 15
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	2c 30       	cpi	r18, 0x0C	; 12
    318c:	31 05       	cpc	r19, r1
    318e:	4c f4       	brge	.+18     	; 0x31a2 <is_tap_key+0x24>
    3190:	2a 30       	cpi	r18, 0x0A	; 10
    3192:	31 05       	cpc	r19, r1
    3194:	6c f4       	brge	.+26     	; 0x31b0 <is_tap_key+0x32>
    3196:	22 50       	subi	r18, 0x02	; 2
    3198:	31 09       	sbc	r19, r1
    319a:	22 30       	cpi	r18, 0x02	; 2
    319c:	31 05       	cpc	r19, r1
    319e:	a8 f4       	brcc	.+42     	; 0x31ca <is_tap_key+0x4c>
    31a0:	07 c0       	rjmp	.+14     	; 0x31b0 <is_tap_key+0x32>
    31a2:	2c 30       	cpi	r18, 0x0C	; 12
    31a4:	31 05       	cpc	r19, r1
    31a6:	69 f0       	breq	.+26     	; 0x31c2 <is_tap_key+0x44>
    31a8:	2f 30       	cpi	r18, 0x0F	; 15
    31aa:	31 05       	cpc	r19, r1
    31ac:	51 f0       	breq	.+20     	; 0x31c2 <is_tap_key+0x44>
    31ae:	0d c0       	rjmp	.+26     	; 0x31ca <is_tap_key+0x4c>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    31b0:	80 3f       	cpi	r24, 0xF0	; 240
    31b2:	69 f0       	breq	.+26     	; 0x31ce <is_tap_key+0x50>
    31b4:	18 f4       	brcc	.+6      	; 0x31bc <is_tap_key+0x3e>
    31b6:	80 3e       	cpi	r24, 0xE0	; 224
    31b8:	40 f4       	brcc	.+16     	; 0x31ca <is_tap_key+0x4c>
    31ba:	09 c0       	rjmp	.+18     	; 0x31ce <is_tap_key+0x50>
    31bc:	84 3f       	cpi	r24, 0xF4	; 244
    31be:	29 f4       	brne	.+10     	; 0x31ca <is_tap_key+0x4c>
    31c0:	06 c0       	rjmp	.+12     	; 0x31ce <is_tap_key+0x50>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    31c2:	93 fb       	bst	r25, 3
    31c4:	88 27       	eor	r24, r24
    31c6:	80 f9       	bld	r24, 0
    31c8:	08 95       	ret
            return false;
    }
    return false;
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	08 95       	ret
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                case OP_ONESHOT:
                    return true;
    31ce:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    31d0:	08 95       	ret

000031d2 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    31d2:	cf 93       	push	r28
    31d4:	df 93       	push	r29
    31d6:	00 d0       	rcall	.+0      	; 0x31d8 <debug_event+0x6>
    31d8:	00 d0       	rcall	.+0      	; 0x31da <debug_event+0x8>
    31da:	1f 92       	push	r1
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	0f 90       	pop	r0
    31ea:	df 91       	pop	r29
    31ec:	cf 91       	pop	r28
    31ee:	08 95       	ret

000031f0 <debug_record>:

void debug_record(keyrecord_t record)
{
    31f0:	cf 93       	push	r28
    31f2:	df 93       	push	r29
    31f4:	00 d0       	rcall	.+0      	; 0x31f6 <debug_record+0x6>
    31f6:	00 d0       	rcall	.+0      	; 0x31f8 <debug_record+0x8>
    31f8:	00 d0       	rcall	.+0      	; 0x31fa <debug_record+0xa>
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    31fe:	26 96       	adiw	r28, 0x06	; 6
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	08 95       	ret

00003210 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    3210:	1f 93       	push	r17
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3216:	c0 91 c7 01 	lds	r28, 0x01C7	; 0x8001c7 <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    321a:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    321c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <waiting_buffer_head>
    3220:	c8 17       	cp	r28, r24
    3222:	99 f0       	breq	.+38     	; 0x324a <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    3224:	d0 e0       	ldi	r29, 0x00	; 0
    3226:	1c 9f       	mul	r17, r28
    3228:	f0 01       	movw	r30, r0
    322a:	1d 9f       	mul	r17, r29
    322c:	f0 0d       	add	r31, r0
    322e:	11 24       	eor	r1, r1
    3230:	e7 53       	subi	r30, 0x37	; 55
    3232:	fe 4f       	sbci	r31, 0xFE	; 254
    3234:	40 81       	ld	r20, Z
    3236:	51 81       	ldd	r21, Z+1	; 0x01
    3238:	62 81       	ldd	r22, Z+2	; 0x02
    323a:	73 81       	ldd	r23, Z+3	; 0x03
    323c:	84 81       	ldd	r24, Z+4	; 0x04
    323e:	95 81       	ldd	r25, Z+5	; 0x05
    3240:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3244:	21 96       	adiw	r28, 0x01	; 1
    3246:	c7 70       	andi	r28, 0x07	; 7
    3248:	e9 cf       	rjmp	.-46     	; 0x321c <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	1f 91       	pop	r17
    3250:	08 95       	ret

00003252 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    3252:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <tapping_key>
    3256:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <tapping_key+0x1>
    325a:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <tapping_key+0x2>
    325e:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <tapping_key+0x3>
    3262:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <tapping_key+0x4>
    3266:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <tapping_key+0x5>
    326a:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <debug_record>

0000326e <waiting_buffer_scan_tap>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    326e:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <tapping_key+0x5>
    3272:	82 95       	swap	r24
    3274:	8f 70       	andi	r24, 0x0F	; 15
    3276:	09 f0       	breq	.+2      	; 0x327a <waiting_buffer_scan_tap+0xc>
    3278:	54 c0       	rjmp	.+168    	; 0x3322 <waiting_buffer_scan_tap+0xb4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    327a:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <tapping_key+0x2>
    327e:	88 23       	and	r24, r24
    3280:	09 f4       	brne	.+2      	; 0x3284 <waiting_buffer_scan_tap+0x16>
    3282:	4f c0       	rjmp	.+158    	; 0x3322 <waiting_buffer_scan_tap+0xb4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3284:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <waiting_buffer_tail>
    3288:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <waiting_buffer_head>
    328c:	60 91 f9 01 	lds	r22, 0x01F9	; 0x8001f9 <tapping_key>
    3290:	70 91 fa 01 	lds	r23, 0x01FA	; 0x8001fa <tapping_key+0x1>
    3294:	40 91 fc 01 	lds	r20, 0x01FC	; 0x8001fc <tapping_key+0x3>
    3298:	50 91 fd 01 	lds	r21, 0x01FD	; 0x8001fd <tapping_key+0x4>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    329c:	b6 e0       	ldi	r27, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    329e:	8a 17       	cp	r24, r26
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <waiting_buffer_scan_tap+0x36>
    32a2:	3f c0       	rjmp	.+126    	; 0x3322 <waiting_buffer_scan_tap+0xb4>
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	41 15       	cp	r20, r1
    32a8:	51 05       	cpc	r21, r1
    32aa:	c1 f1       	breq	.+112    	; 0x331c <waiting_buffer_scan_tap+0xae>
    32ac:	7f 3f       	cpi	r23, 0xFF	; 255
    32ae:	11 f4       	brne	.+4      	; 0x32b4 <waiting_buffer_scan_tap+0x46>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    32b0:	6f 3f       	cpi	r22, 0xFF	; 255
    32b2:	a1 f1       	breq	.+104    	; 0x331c <waiting_buffer_scan_tap+0xae>
    32b4:	b8 9f       	mul	r27, r24
    32b6:	f0 01       	movw	r30, r0
    32b8:	b9 9f       	mul	r27, r25
    32ba:	f0 0d       	add	r31, r0
    32bc:	11 24       	eor	r1, r1
    32be:	e7 53       	subi	r30, 0x37	; 55
    32c0:	fe 4f       	sbci	r31, 0xFE	; 254
    32c2:	21 81       	ldd	r18, Z+1	; 0x01
    32c4:	72 13       	cpse	r23, r18
    32c6:	2a c0       	rjmp	.+84     	; 0x331c <waiting_buffer_scan_tap+0xae>
    32c8:	20 81       	ld	r18, Z
    32ca:	62 13       	cpse	r22, r18
    32cc:	27 c0       	rjmp	.+78     	; 0x331c <waiting_buffer_scan_tap+0xae>
    32ce:	22 81       	ldd	r18, Z+2	; 0x02
    32d0:	21 11       	cpse	r18, r1
    32d2:	24 c0       	rjmp	.+72     	; 0x331c <waiting_buffer_scan_tap+0xae>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    32d4:	23 81       	ldd	r18, Z+3	; 0x03
    32d6:	34 81       	ldd	r19, Z+4	; 0x04
    32d8:	24 17       	cp	r18, r20
    32da:	35 07       	cpc	r19, r21
    32dc:	10 f4       	brcc	.+4      	; 0x32e2 <waiting_buffer_scan_tap+0x74>
    32de:	21 50       	subi	r18, 0x01	; 1
    32e0:	31 09       	sbc	r19, r1
    32e2:	24 1b       	sub	r18, r20
    32e4:	35 0b       	sbc	r19, r21
    32e6:	28 3c       	cpi	r18, 0xC8	; 200
    32e8:	31 05       	cpc	r19, r1
    32ea:	c0 f4       	brcc	.+48     	; 0x331c <waiting_buffer_scan_tap+0xae>
            tapping_key.tap.count = 1;
    32ec:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <tapping_key+0x5>
    32f0:	2f 70       	andi	r18, 0x0F	; 15
    32f2:	20 61       	ori	r18, 0x10	; 16
    32f4:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    32f8:	26 e0       	ldi	r18, 0x06	; 6
    32fa:	28 9f       	mul	r18, r24
    32fc:	f0 01       	movw	r30, r0
    32fe:	29 9f       	mul	r18, r25
    3300:	f0 0d       	add	r31, r0
    3302:	11 24       	eor	r1, r1
    3304:	e2 53       	subi	r30, 0x32	; 50
    3306:	fe 4f       	sbci	r31, 0xFE	; 254
    3308:	80 81       	ld	r24, Z
    330a:	8f 70       	andi	r24, 0x0F	; 15
    330c:	80 61       	ori	r24, 0x10	; 16
    330e:	80 83       	st	Z, r24
            process_action(&tapping_key);
    3310:	89 ef       	ldi	r24, 0xF9	; 249
    3312:	91 e0       	ldi	r25, 0x01	; 1
    3314:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    3318:	0c 94 08 19 	jmp	0x3210	; 0x3210 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    331c:	01 96       	adiw	r24, 0x01	; 1
    331e:	87 70       	andi	r24, 0x07	; 7
    3320:	be cf       	rjmp	.-132    	; 0x329e <waiting_buffer_scan_tap+0x30>
    3322:	08 95       	ret

00003324 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    3324:	cf 92       	push	r12
    3326:	df 92       	push	r13
    3328:	ef 92       	push	r14
    332a:	ff 92       	push	r15
    332c:	0f 93       	push	r16
    332e:	1f 93       	push	r17
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	62 97       	sbiw	r28, 0x12	; 18
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    3346:	85 e0       	ldi	r24, 0x05	; 5
    3348:	f8 01       	movw	r30, r16
    334a:	de 01       	movw	r26, r28
    334c:	1d 96       	adiw	r26, 0x0d	; 13
    334e:	01 90       	ld	r0, Z+
    3350:	0d 92       	st	X+, r0
    3352:	8a 95       	dec	r24
    3354:	e1 f7       	brne	.-8      	; 0x334e <process_tapping+0x2a>
    3356:	d8 01       	movw	r26, r16
    3358:	4c 91       	ld	r20, X
    335a:	11 96       	adiw	r26, 0x01	; 1
    335c:	5c 91       	ld	r21, X
    335e:	11 97       	sbiw	r26, 0x01	; 1
    3360:	12 96       	adiw	r26, 0x02	; 2
    3362:	6c 91       	ld	r22, X
    3364:	12 97       	sbiw	r26, 0x02	; 2
    3366:	13 96       	adiw	r26, 0x03	; 3
    3368:	cd 90       	ld	r12, X+
    336a:	dc 90       	ld	r13, X
    336c:	14 97       	sbiw	r26, 0x04	; 4
    336e:	30 91 f9 01 	lds	r19, 0x01F9	; 0x8001f9 <tapping_key>
    3372:	70 91 fa 01 	lds	r23, 0x01FA	; 0x8001fa <tapping_key+0x1>
    3376:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <tapping_key+0x3>
    337a:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <tapping_key+0x4>
    337e:	00 97       	sbiw	r24, 0x00	; 0
    3380:	09 f4       	brne	.+2      	; 0x3384 <process_tapping+0x60>
    3382:	6b c1       	rjmp	.+726    	; 0x365a <process_tapping+0x336>
    3384:	7f 3f       	cpi	r23, 0xFF	; 255
    3386:	19 f4       	brne	.+6      	; 0x338e <process_tapping+0x6a>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    3388:	3f 3f       	cpi	r19, 0xFF	; 255
    338a:	09 f4       	brne	.+2      	; 0x338e <process_tapping+0x6a>
    338c:	66 c1       	rjmp	.+716    	; 0x365a <process_tapping+0x336>
    338e:	e0 90 fb 01 	lds	r14, 0x01FB	; 0x8001fb <tapping_key+0x2>
    3392:	ee 20       	and	r14, r14
    3394:	09 f4       	brne	.+2      	; 0x3398 <process_tapping+0x74>
    3396:	c0 c0       	rjmp	.+384    	; 0x3518 <process_tapping+0x1f4>
    3398:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <tapping_key+0x5>
        if (WITHIN_TAPPING_TERM(event)) {
    339c:	c8 16       	cp	r12, r24
    339e:	d9 06       	cpc	r13, r25
    33a0:	28 f0       	brcs	.+10     	; 0x33ac <process_tapping+0x88>
    33a2:	f6 01       	movw	r30, r12
    33a4:	e8 1b       	sub	r30, r24
    33a6:	f9 0b       	sbc	r31, r25
    33a8:	cf 01       	movw	r24, r30
    33aa:	04 c0       	rjmp	.+8      	; 0x33b4 <process_tapping+0x90>
    33ac:	80 95       	com	r24
    33ae:	90 95       	com	r25
    33b0:	8c 0d       	add	r24, r12
    33b2:	9d 1d       	adc	r25, r13
    33b4:	ff 24       	eor	r15, r15
    33b6:	f3 94       	inc	r15
    33b8:	88 3c       	cpi	r24, 0xC8	; 200
    33ba:	91 05       	cpc	r25, r1
    33bc:	78 f0       	brcs	.+30     	; 0x33dc <process_tapping+0xb8>
    33be:	f1 2c       	mov	r15, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    33c0:	20 7f       	andi	r18, 0xF0	; 240
    33c2:	09 f0       	breq	.+2      	; 0x33c6 <process_tapping+0xa2>
    33c4:	c6 c0       	rjmp	.+396    	; 0x3552 <process_tapping+0x22e>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    33c6:	7c 2d       	mov	r23, r12
    33c8:	d9 8a       	std	Y+17, r13	; 0x11
    33ca:	c8 8a       	std	Y+16, r12	; 0x10
    33cc:	89 89       	ldd	r24, Y+17	; 0x11
    33ce:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <debug_event>
                process_action(&tapping_key);
    33d2:	89 ef       	ldi	r24, 0xF9	; 249
    33d4:	91 e0       	ldi	r25, 0x01	; 1
    33d6:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <process_action>
    33da:	b1 c0       	rjmp	.+354    	; 0x353e <process_tapping+0x21a>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    33dc:	82 2f       	mov	r24, r18
    33de:	80 7f       	andi	r24, 0xF0	; 240
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <process_tapping+0xc0>
    33e2:	46 c0       	rjmp	.+140    	; 0x3470 <process_tapping+0x14c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    33e4:	75 13       	cpse	r23, r21
    33e6:	14 c0       	rjmp	.+40     	; 0x3410 <process_tapping+0xec>
    33e8:	34 13       	cpse	r19, r20
    33ea:	12 c0       	rjmp	.+36     	; 0x3410 <process_tapping+0xec>
    33ec:	61 11       	cpse	r22, r1
    33ee:	10 c0       	rjmp	.+32     	; 0x3410 <process_tapping+0xec>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    33f0:	2f 70       	andi	r18, 0x0F	; 15
    33f2:	20 61       	ori	r18, 0x10	; 16
    33f4:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <tapping_key+0x5>
                    debug_tapping_key();
    33f8:	0e 94 29 19 	call	0x3252	; 0x3252 <debug_tapping_key>
                    process_action(&tapping_key);
    33fc:	89 ef       	ldi	r24, 0xF9	; 249
    33fe:	91 e0       	ldi	r25, 0x01	; 1
    3400:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    3404:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <tapping_key+0x5>
    3408:	d8 01       	movw	r26, r16
    340a:	15 96       	adiw	r26, 0x05	; 5
    340c:	8c 93       	st	X, r24
    340e:	2e c0       	rjmp	.+92     	; 0x346c <process_tapping+0x148>
    3410:	cd 28       	or	r12, r13
    3412:	19 f1       	breq	.+70     	; 0x345a <process_tapping+0x136>
    3414:	5f 3f       	cpi	r21, 0xFF	; 255
    3416:	11 f4       	brne	.+4      	; 0x341c <process_tapping+0xf8>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    3418:	4f 3f       	cpi	r20, 0xFF	; 255
    341a:	f9 f0       	breq	.+62     	; 0x345a <process_tapping+0x136>
    341c:	f6 2e       	mov	r15, r22
    341e:	61 11       	cpse	r22, r1
    3420:	1c c0       	rjmp	.+56     	; 0x345a <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3422:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <waiting_buffer_tail>
    3426:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    342a:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    342c:	82 17       	cp	r24, r18
    342e:	09 f4       	brne	.+2      	; 0x3432 <process_tapping+0x10e>
    3430:	5a c0       	rjmp	.+180    	; 0x34e6 <process_tapping+0x1c2>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	38 9f       	mul	r19, r24
    3436:	f0 01       	movw	r30, r0
    3438:	39 9f       	mul	r19, r25
    343a:	f0 0d       	add	r31, r0
    343c:	11 24       	eor	r1, r1
    343e:	e7 53       	subi	r30, 0x37	; 55
    3440:	fe 4f       	sbci	r31, 0xFE	; 254
    3442:	71 81       	ldd	r23, Z+1	; 0x01
    3444:	57 13       	cpse	r21, r23
    3446:	06 c0       	rjmp	.+12     	; 0x3454 <process_tapping+0x130>
    3448:	70 81       	ld	r23, Z
    344a:	47 13       	cpse	r20, r23
    344c:	03 c0       	rjmp	.+6      	; 0x3454 <process_tapping+0x130>
    344e:	72 81       	ldd	r23, Z+2	; 0x02
    3450:	71 11       	cpse	r23, r1
    3452:	03 c0       	rjmp	.+6      	; 0x345a <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3454:	01 96       	adiw	r24, 0x01	; 1
    3456:	87 70       	andi	r24, 0x07	; 7
    3458:	e9 cf       	rjmp	.-46     	; 0x342c <process_tapping+0x108>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    345a:	f6 2e       	mov	r15, r22
    345c:	66 23       	and	r22, r22
    345e:	09 f4       	brne	.+2      	; 0x3462 <process_tapping+0x13e>
    3460:	18 c1       	rjmp	.+560    	; 0x3692 <process_tapping+0x36e>
                        tapping_key.tap.interrupted = true;
    3462:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <tapping_key+0x5>
    3466:	81 60       	ori	r24, 0x01	; 1
    3468:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <tapping_key+0x5>
                    }
                    // enqueue 
                    return false;
    346c:	f1 2c       	mov	r15, r1
    346e:	11 c1       	rjmp	.+546    	; 0x3692 <process_tapping+0x36e>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3470:	75 13       	cpse	r23, r21
    3472:	08 c0       	rjmp	.+16     	; 0x3484 <process_tapping+0x160>
    3474:	34 13       	cpse	r19, r20
    3476:	06 c0       	rjmp	.+12     	; 0x3484 <process_tapping+0x160>
    3478:	61 11       	cpse	r22, r1
    347a:	04 c0       	rjmp	.+8      	; 0x3484 <process_tapping+0x160>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    347c:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <tapping_key+0x5>
    3480:	d8 01       	movw	r26, r16
    3482:	c3 c0       	rjmp	.+390    	; 0x360a <process_tapping+0x2e6>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3484:	4d 87       	std	Y+13, r20	; 0x0d
    3486:	5e 87       	std	Y+14, r21	; 0x0e
    3488:	8d 85       	ldd	r24, Y+13	; 0x0d
    348a:	9e 85       	ldd	r25, Y+14	; 0x0e
    348c:	6a 8b       	std	Y+18, r22	; 0x12
    348e:	0e 94 bf 18 	call	0x317e	; 0x317e <is_tap_key>
    3492:	6a 89       	ldd	r22, Y+18	; 0x12
    3494:	88 23       	and	r24, r24
    3496:	e1 f1       	breq	.+120    	; 0x3510 <process_tapping+0x1ec>
    3498:	66 23       	and	r22, r22
    349a:	d1 f1       	breq	.+116    	; 0x3510 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    349c:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <tapping_key+0x5>
    34a0:	82 2f       	mov	r24, r18
    34a2:	82 95       	swap	r24
    34a4:	8f 70       	andi	r24, 0x0F	; 15
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	02 97       	sbiw	r24, 0x02	; 2
    34aa:	74 f0       	brlt	.+28     	; 0x34c8 <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    34ac:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <tapping_key>
    34b0:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <tapping_key+0x1>
    34b4:	98 87       	std	Y+8, r25	; 0x08
    34b6:	8f 83       	std	Y+7, r24	; 0x07
    34b8:	19 86       	std	Y+9, r1	; 0x09
    34ba:	db 86       	std	Y+11, r13	; 0x0b
    34bc:	ca 86       	std	Y+10, r12	; 0x0a
    34be:	2c 87       	std	Y+12, r18	; 0x0c
    34c0:	ce 01       	movw	r24, r28
    34c2:	07 96       	adiw	r24, 0x07	; 7
    34c4:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    34c8:	86 e0       	ldi	r24, 0x06	; 6
    34ca:	f8 01       	movw	r30, r16
    34cc:	a9 ef       	ldi	r26, 0xF9	; 249
    34ce:	b1 e0       	ldi	r27, 0x01	; 1
    34d0:	01 90       	ld	r0, Z+
    34d2:	0d 92       	st	X+, r0
    34d4:	8a 95       	dec	r24
    34d6:	e1 f7       	brne	.-8      	; 0x34d0 <process_tapping+0x1ac>
                    waiting_buffer_scan_tap();
    34d8:	0e 94 37 19 	call	0x326e	; 0x326e <waiting_buffer_scan_tap>
                    debug_tapping_key();
    34dc:	0e 94 29 19 	call	0x3252	; 0x3252 <debug_tapping_key>
                    return true;
    34e0:	ff 24       	eor	r15, r15
    34e2:	f3 94       	inc	r15
    34e4:	d6 c0       	rjmp	.+428    	; 0x3692 <process_tapping+0x36e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    34e6:	4d 87       	std	Y+13, r20	; 0x0d
    34e8:	5e 87       	std	Y+14, r21	; 0x0e
    34ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ee:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <layer_switch_get_action>
                    switch (action.kind.id) {
    34f2:	29 2f       	mov	r18, r25
    34f4:	22 95       	swap	r18
    34f6:	2f 70       	andi	r18, 0x0F	; 15
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	22 30       	cpi	r18, 0x02	; 2
    34fc:	31 05       	cpc	r19, r1
    34fe:	0c f0       	brlt	.+2      	; 0x3502 <process_tapping+0x1de>
    3500:	bc c0       	rjmp	.+376    	; 0x367a <process_tapping+0x356>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3502:	9f 70       	andi	r25, 0x0F	; 15
    3504:	09 f0       	breq	.+2      	; 0x3508 <process_tapping+0x1e4>
    3506:	b6 c0       	rjmp	.+364    	; 0x3674 <process_tapping+0x350>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
                            if (IS_MOD(action.key.code)) return false;
    3508:	80 5e       	subi	r24, 0xE0	; 224
    350a:	88 30       	cpi	r24, 0x08	; 8
    350c:	08 f4       	brcc	.+2      	; 0x3510 <process_tapping+0x1ec>
    350e:	c1 c0       	rjmp	.+386    	; 0x3692 <process_tapping+0x36e>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    3510:	c8 01       	movw	r24, r16
    3512:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <process_action>
    3516:	e4 cf       	rjmp	.-56     	; 0x34e0 <process_tapping+0x1bc>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3518:	c8 16       	cp	r12, r24
    351a:	d9 06       	cpc	r13, r25
    351c:	08 f4       	brcc	.+2      	; 0x3520 <process_tapping+0x1fc>
    351e:	53 c0       	rjmp	.+166    	; 0x35c6 <process_tapping+0x2a2>
    3520:	f6 01       	movw	r30, r12
    3522:	e8 1b       	sub	r30, r24
    3524:	f9 0b       	sbc	r31, r25
    3526:	cf 01       	movw	r24, r30
    3528:	88 3c       	cpi	r24, 0xC8	; 200
    352a:	91 05       	cpc	r25, r1
    352c:	08 f4       	brcc	.+2      	; 0x3530 <process_tapping+0x20c>
    352e:	50 c0       	rjmp	.+160    	; 0x35d0 <process_tapping+0x2ac>
    3530:	f1 2c       	mov	r15, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    3532:	7c 2d       	mov	r23, r12
    3534:	d9 8a       	std	Y+17, r13	; 0x11
    3536:	c8 8a       	std	Y+16, r12	; 0x10
    3538:	89 89       	ldd	r24, Y+17	; 0x11
    353a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    353e:	e9 ef       	ldi	r30, 0xF9	; 249
    3540:	f1 e0       	ldi	r31, 0x01	; 1
    3542:	86 e0       	ldi	r24, 0x06	; 6
    3544:	df 01       	movw	r26, r30
    3546:	1d 92       	st	X+, r1
    3548:	8a 95       	dec	r24
    354a:	e9 f7       	brne	.-6      	; 0x3546 <process_tapping+0x222>
                debug_tapping_key();
    354c:	0e 94 29 19 	call	0x3252	; 0x3252 <debug_tapping_key>
                return false;
    3550:	a0 c0       	rjmp	.+320    	; 0x3692 <process_tapping+0x36e>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3552:	75 13       	cpse	r23, r21
    3554:	14 c0       	rjmp	.+40     	; 0x357e <process_tapping+0x25a>
    3556:	34 13       	cpse	r19, r20
    3558:	12 c0       	rjmp	.+36     	; 0x357e <process_tapping+0x25a>
    355a:	61 11       	cpse	r22, r1
    355c:	10 c0       	rjmp	.+32     	; 0x357e <process_tapping+0x25a>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    355e:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <tapping_key+0x5>
    3562:	f8 01       	movw	r30, r16
    3564:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    3566:	c8 01       	movw	r24, r16
    3568:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <process_action>
                    tapping_key = (keyrecord_t){};
    356c:	86 e0       	ldi	r24, 0x06	; 6
    356e:	e9 ef       	ldi	r30, 0xF9	; 249
    3570:	f1 e0       	ldi	r31, 0x01	; 1
    3572:	df 01       	movw	r26, r30
    3574:	1d 92       	st	X+, r1
    3576:	8a 95       	dec	r24
    3578:	e9 f7       	brne	.-6      	; 0x3574 <process_tapping+0x250>
                    return true;
    357a:	fe 2c       	mov	r15, r14
    357c:	8a c0       	rjmp	.+276    	; 0x3692 <process_tapping+0x36e>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    357e:	4d 87       	std	Y+13, r20	; 0x0d
    3580:	5e 87       	std	Y+14, r21	; 0x0e
    3582:	8d 85       	ldd	r24, Y+13	; 0x0d
    3584:	9e 85       	ldd	r25, Y+14	; 0x0e
    3586:	6a 8b       	std	Y+18, r22	; 0x12
    3588:	0e 94 bf 18 	call	0x317e	; 0x317e <is_tap_key>
    358c:	6a 89       	ldd	r22, Y+18	; 0x12
    358e:	88 23       	and	r24, r24
    3590:	09 f4       	brne	.+2      	; 0x3594 <process_tapping+0x270>
    3592:	be cf       	rjmp	.-132    	; 0x3510 <process_tapping+0x1ec>
    3594:	66 23       	and	r22, r22
    3596:	09 f4       	brne	.+2      	; 0x359a <process_tapping+0x276>
    3598:	bb cf       	rjmp	.-138    	; 0x3510 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    359a:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <tapping_key+0x5>
    359e:	82 2f       	mov	r24, r18
    35a0:	82 95       	swap	r24
    35a2:	8f 70       	andi	r24, 0x0F	; 15
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	02 97       	sbiw	r24, 0x02	; 2
    35a8:	0c f4       	brge	.+2      	; 0x35ac <process_tapping+0x288>
    35aa:	8e cf       	rjmp	.-228    	; 0x34c8 <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    35ac:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <tapping_key>
    35b0:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <tapping_key+0x1>
    35b4:	9a 83       	std	Y+2, r25	; 0x02
    35b6:	89 83       	std	Y+1, r24	; 0x01
    35b8:	1b 82       	std	Y+3, r1	; 0x03
    35ba:	dd 82       	std	Y+5, r13	; 0x05
    35bc:	cc 82       	std	Y+4, r12	; 0x04
    35be:	2e 83       	std	Y+6, r18	; 0x06
    35c0:	ce 01       	movw	r24, r28
    35c2:	01 96       	adiw	r24, 0x01	; 1
    35c4:	7f cf       	rjmp	.-258    	; 0x34c4 <process_tapping+0x1a0>
    35c6:	80 95       	com	r24
    35c8:	90 95       	com	r25
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    35ca:	8c 0d       	add	r24, r12
    35cc:	9d 1d       	adc	r25, r13
    35ce:	ac cf       	rjmp	.-168    	; 0x3528 <process_tapping+0x204>
            if (event.pressed) {
    35d0:	f6 2e       	mov	r15, r22
    35d2:	66 23       	and	r22, r22
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <process_tapping+0x2b4>
    35d6:	9c cf       	rjmp	.-200    	; 0x3510 <process_tapping+0x1ec>
                if (IS_TAPPING_KEY(event.key)) {
    35d8:	75 13       	cpse	r23, r21
    35da:	2e c0       	rjmp	.+92     	; 0x3638 <process_tapping+0x314>
    35dc:	34 13       	cpse	r19, r20
    35de:	2c c0       	rjmp	.+88     	; 0x3638 <process_tapping+0x314>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    35e0:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <tapping_key+0x5>
    35e4:	20 fd       	sbrc	r18, 0
    35e6:	1f c0       	rjmp	.+62     	; 0x3626 <process_tapping+0x302>
    35e8:	82 2f       	mov	r24, r18
    35ea:	82 95       	swap	r24
    35ec:	8f 70       	andi	r24, 0x0F	; 15
    35ee:	d9 f0       	breq	.+54     	; 0x3626 <process_tapping+0x302>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    35f0:	d8 01       	movw	r26, r16
    35f2:	15 96       	adiw	r26, 0x05	; 5
    35f4:	2c 93       	st	X, r18
    35f6:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    35f8:	8f 30       	cpi	r24, 0x0F	; 15
    35fa:	49 f0       	breq	.+18     	; 0x360e <process_tapping+0x2ea>
    35fc:	8f 5f       	subi	r24, 0xFF	; 255
    35fe:	98 2f       	mov	r25, r24
    3600:	92 95       	swap	r25
    3602:	90 7f       	andi	r25, 0xF0	; 240
    3604:	82 2f       	mov	r24, r18
    3606:	8f 70       	andi	r24, 0x0F	; 15
    3608:	89 2b       	or	r24, r25
    360a:	15 96       	adiw	r26, 0x05	; 5
    360c:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    360e:	c8 01       	movw	r24, r16
    3610:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <process_action>
                        tapping_key = *keyp;
    3614:	86 e0       	ldi	r24, 0x06	; 6
    3616:	f8 01       	movw	r30, r16
    3618:	a9 ef       	ldi	r26, 0xF9	; 249
    361a:	b1 e0       	ldi	r27, 0x01	; 1
    361c:	01 90       	ld	r0, Z+
    361e:	0d 92       	st	X+, r0
    3620:	8a 95       	dec	r24
    3622:	e1 f7       	brne	.-8      	; 0x361c <process_tapping+0x2f8>
    3624:	93 cf       	rjmp	.-218    	; 0x354c <process_tapping+0x228>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    3626:	86 e0       	ldi	r24, 0x06	; 6
    3628:	f8 01       	movw	r30, r16
    362a:	a9 ef       	ldi	r26, 0xF9	; 249
    362c:	b1 e0       	ldi	r27, 0x01	; 1
    362e:	01 90       	ld	r0, Z+
    3630:	0d 92       	st	X+, r0
    3632:	8a 95       	dec	r24
    3634:	e1 f7       	brne	.-8      	; 0x362e <process_tapping+0x30a>
                        return true;
    3636:	2d c0       	rjmp	.+90     	; 0x3692 <process_tapping+0x36e>
                    }
                } else if (is_tap_key(event.key)) {
    3638:	4d 87       	std	Y+13, r20	; 0x0d
    363a:	5e 87       	std	Y+14, r21	; 0x0e
    363c:	8d 85       	ldd	r24, Y+13	; 0x0d
    363e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3640:	0e 94 bf 18 	call	0x317e	; 0x317e <is_tap_key>
    3644:	81 11       	cpse	r24, r1
    3646:	40 cf       	rjmp	.-384    	; 0x34c8 <process_tapping+0x1a4>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3648:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <tapping_key+0x5>
    364c:	81 60       	ori	r24, 0x01	; 1
    364e:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <tapping_key+0x5>
                    process_action(keyp);
    3652:	c8 01       	movw	r24, r16
    3654:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <process_action>
                    return true;
    3658:	1c c0       	rjmp	.+56     	; 0x3692 <process_tapping+0x36e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    365a:	66 23       	and	r22, r22
    365c:	09 f4       	brne	.+2      	; 0x3660 <process_tapping+0x33c>
    365e:	58 cf       	rjmp	.-336    	; 0x3510 <process_tapping+0x1ec>
    3660:	4d 87       	std	Y+13, r20	; 0x0d
    3662:	5e 87       	std	Y+14, r21	; 0x0e
    3664:	8d 85       	ldd	r24, Y+13	; 0x0d
    3666:	9e 85       	ldd	r25, Y+14	; 0x0e
    3668:	0e 94 bf 18 	call	0x317e	; 0x317e <is_tap_key>
    366c:	88 23       	and	r24, r24
    366e:	09 f4       	brne	.+2      	; 0x3672 <process_tapping+0x34e>
    3670:	4f cf       	rjmp	.-354    	; 0x3510 <process_tapping+0x1ec>
    3672:	2a cf       	rjmp	.-428    	; 0x34c8 <process_tapping+0x1a4>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3674:	81 11       	cpse	r24, r1
    3676:	48 cf       	rjmp	.-368    	; 0x3508 <process_tapping+0x1e4>
    3678:	0c c0       	rjmp	.+24     	; 0x3692 <process_tapping+0x36e>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    367a:	24 30       	cpi	r18, 0x04	; 4
    367c:	31 05       	cpc	r19, r1
    367e:	0c f0       	brlt	.+2      	; 0x3682 <process_tapping+0x35e>
    3680:	47 cf       	rjmp	.-370    	; 0x3510 <process_tapping+0x1ec>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3682:	9f 70       	andi	r25, 0x0F	; 15
    3684:	09 f4       	brne	.+2      	; 0x3688 <process_tapping+0x364>
    3686:	40 cf       	rjmp	.-384    	; 0x3508 <process_tapping+0x1e4>
    3688:	f8 01       	movw	r30, r16
    368a:	95 81       	ldd	r25, Z+5	; 0x05
    368c:	90 7f       	andi	r25, 0xF0	; 240
    368e:	09 f0       	breq	.+2      	; 0x3692 <process_tapping+0x36e>
    3690:	3b cf       	rjmp	.-394    	; 0x3508 <process_tapping+0x1e4>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    3692:	8f 2d       	mov	r24, r15
    3694:	62 96       	adiw	r28, 0x12	; 18
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	de bf       	out	0x3e, r29	; 62
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	cd bf       	out	0x3d, r28	; 61
    36a0:	df 91       	pop	r29
    36a2:	cf 91       	pop	r28
    36a4:	1f 91       	pop	r17
    36a6:	0f 91       	pop	r16
    36a8:	ff 90       	pop	r15
    36aa:	ef 90       	pop	r14
    36ac:	df 90       	pop	r13
    36ae:	cf 90       	pop	r12
    36b0:	08 95       	ret

000036b2 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    36b2:	1f 93       	push	r17
    36b4:	cf 93       	push	r28
    36b6:	df 93       	push	r29
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
    36bc:	2c 97       	sbiw	r28, 0x0c	; 12
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	f8 94       	cli
    36c2:	de bf       	out	0x3e, r29	; 62
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	cd bf       	out	0x3d, r28	; 61
    36c8:	4f 83       	std	Y+7, r20	; 0x07
    36ca:	58 87       	std	Y+8, r21	; 0x08
    36cc:	69 87       	std	Y+9, r22	; 0x09
    36ce:	7a 87       	std	Y+10, r23	; 0x0a
    36d0:	8b 87       	std	Y+11, r24	; 0x0b
    36d2:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    36d4:	ce 01       	movw	r24, r28
    36d6:	07 96       	adiw	r24, 0x07	; 7
    36d8:	0e 94 92 19 	call	0x3324	; 0x3324 <process_tapping>
    36dc:	88 23       	and	r24, r24
    36de:	69 f0       	breq	.+26     	; 0x36fa <action_tapping_process+0x48>
    36e0:	8f 81       	ldd	r24, Y+7	; 0x07
    36e2:	98 85       	ldd	r25, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    36e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    36e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    36e8:	23 2b       	or	r18, r19
    36ea:	f1 f1       	breq	.+124    	; 0x3768 <action_tapping_process+0xb6>
    36ec:	9f 3f       	cpi	r25, 0xFF	; 255
    36ee:	09 f0       	breq	.+2      	; 0x36f2 <action_tapping_process+0x40>
    36f0:	63 c0       	rjmp	.+198    	; 0x37b8 <action_tapping_process+0x106>
    36f2:	8f 3f       	cpi	r24, 0xFF	; 255
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <action_tapping_process+0x46>
    36f6:	60 c0       	rjmp	.+192    	; 0x37b8 <action_tapping_process+0x106>
    36f8:	37 c0       	rjmp	.+110    	; 0x3768 <action_tapping_process+0xb6>
    36fa:	86 e0       	ldi	r24, 0x06	; 6
    36fc:	fe 01       	movw	r30, r28
    36fe:	37 96       	adiw	r30, 0x07	; 7
    3700:	de 01       	movw	r26, r28
    3702:	11 96       	adiw	r26, 0x01	; 1
    3704:	01 90       	ld	r0, Z+
    3706:	0d 92       	st	X+, r0
    3708:	8a 95       	dec	r24
    370a:	e1 f7       	brne	.-8      	; 0x3704 <action_tapping_process+0x52>
    370c:	6f 81       	ldd	r22, Y+7	; 0x07
    370e:	78 85       	ldd	r23, Y+8	; 0x08
    3710:	ea 85       	ldd	r30, Y+10	; 0x0a
    3712:	fb 85       	ldd	r31, Y+11	; 0x0b
    3714:	30 97       	sbiw	r30, 0x00	; 0
    3716:	41 f1       	breq	.+80     	; 0x3768 <action_tapping_process+0xb6>
    3718:	7f 3f       	cpi	r23, 0xFF	; 255
    371a:	11 f4       	brne	.+4      	; 0x3720 <action_tapping_process+0x6e>
    371c:	6f 3f       	cpi	r22, 0xFF	; 255
    371e:	21 f1       	breq	.+72     	; 0x3768 <action_tapping_process+0xb6>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3720:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <waiting_buffer_head>
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	c9 01       	movw	r24, r18
    3728:	01 96       	adiw	r24, 0x01	; 1
    372a:	87 70       	andi	r24, 0x07	; 7
    372c:	99 27       	eor	r25, r25
    372e:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <waiting_buffer_tail>
    3732:	50 e0       	ldi	r21, 0x00	; 0
    3734:	84 17       	cp	r24, r20
    3736:	95 07       	cpc	r25, r21
    3738:	09 f4       	brne	.+2      	; 0x373c <action_tapping_process+0x8a>
    373a:	47 c0       	rjmp	.+142    	; 0x37ca <action_tapping_process+0x118>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    373c:	69 83       	std	Y+1, r22	; 0x01
    373e:	7a 83       	std	Y+2, r23	; 0x02
    3740:	fd 83       	std	Y+5, r31	; 0x05
    3742:	ec 83       	std	Y+4, r30	; 0x04
    3744:	96 e0       	ldi	r25, 0x06	; 6
    3746:	92 9f       	mul	r25, r18
    3748:	d0 01       	movw	r26, r0
    374a:	93 9f       	mul	r25, r19
    374c:	b0 0d       	add	r27, r0
    374e:	11 24       	eor	r1, r1
    3750:	a7 53       	subi	r26, 0x37	; 55
    3752:	be 4f       	sbci	r27, 0xFE	; 254
    3754:	fe 01       	movw	r30, r28
    3756:	31 96       	adiw	r30, 0x01	; 1
    3758:	01 90       	ld	r0, Z+
    375a:	0d 92       	st	X+, r0
    375c:	9a 95       	dec	r25
    375e:	e1 f7       	brne	.-8      	; 0x3758 <action_tapping_process+0xa6>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3760:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <waiting_buffer_head>

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3764:	0e 94 08 19 	call	0x3210	; 0x3210 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3768:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    376a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <waiting_buffer_tail>
    376e:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <waiting_buffer_head>
    3772:	89 17       	cp	r24, r25
    3774:	c1 f1       	breq	.+112    	; 0x37e6 <action_tapping_process+0x134>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3776:	18 9f       	mul	r17, r24
    3778:	c0 01       	movw	r24, r0
    377a:	11 24       	eor	r1, r1
    377c:	87 53       	subi	r24, 0x37	; 55
    377e:	9e 4f       	sbci	r25, 0xFE	; 254
    3780:	0e 94 92 19 	call	0x3324	; 0x3324 <process_tapping>
    3784:	88 23       	and	r24, r24
    3786:	79 f1       	breq	.+94     	; 0x37e6 <action_tapping_process+0x134>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3788:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <waiting_buffer_tail>
    378c:	1e 9f       	mul	r17, r30
    378e:	f0 01       	movw	r30, r0
    3790:	11 24       	eor	r1, r1
    3792:	e7 53       	subi	r30, 0x37	; 55
    3794:	fe 4f       	sbci	r31, 0xFE	; 254
    3796:	40 81       	ld	r20, Z
    3798:	51 81       	ldd	r21, Z+1	; 0x01
    379a:	62 81       	ldd	r22, Z+2	; 0x02
    379c:	73 81       	ldd	r23, Z+3	; 0x03
    379e:	84 81       	ldd	r24, Z+4	; 0x04
    37a0:	95 81       	ldd	r25, Z+5	; 0x05
    37a2:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    37a6:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <waiting_buffer_tail>
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	01 96       	adiw	r24, 0x01	; 1
    37ae:	87 70       	andi	r24, 0x07	; 7
    37b0:	99 27       	eor	r25, r25
    37b2:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <waiting_buffer_tail>
    37b6:	d9 cf       	rjmp	.-78     	; 0x376a <action_tapping_process+0xb8>

void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
        if (!IS_NOEVENT(record.event)) {
            debug("processed: "); debug_record(record); debug("\n");
    37b8:	4f 81       	ldd	r20, Y+7	; 0x07
    37ba:	58 85       	ldd	r21, Y+8	; 0x08
    37bc:	69 85       	ldd	r22, Y+9	; 0x09
    37be:	7a 85       	ldd	r23, Y+10	; 0x0a
    37c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    37c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    37c4:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <debug_record>
    37c8:	cf cf       	rjmp	.-98     	; 0x3768 <action_tapping_process+0xb6>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    37ca:	0e 94 bb 18 	call	0x3176	; 0x3176 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    37ce:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    37d2:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <waiting_buffer_tail>
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    37d6:	e9 ef       	ldi	r30, 0xF9	; 249
    37d8:	f1 e0       	ldi	r31, 0x01	; 1
    37da:	86 e0       	ldi	r24, 0x06	; 6
    37dc:	df 01       	movw	r26, r30
    37de:	1d 92       	st	X+, r1
    37e0:	8a 95       	dec	r24
    37e2:	e9 f7       	brne	.-6      	; 0x37de <action_tapping_process+0x12c>
    37e4:	c1 cf       	rjmp	.-126    	; 0x3768 <action_tapping_process+0xb6>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    37e6:	2c 96       	adiw	r28, 0x0c	; 12
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	f8 94       	cli
    37ec:	de bf       	out	0x3e, r29	; 62
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	cd bf       	out	0x3d, r28	; 61
    37f2:	df 91       	pop	r29
    37f4:	cf 91       	pop	r28
    37f6:	1f 91       	pop	r17
    37f8:	08 95       	ret

000037fa <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    37fa:	ef 92       	push	r14
    37fc:	ff 92       	push	r15
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    3808:	89 2b       	or	r24, r25
    380a:	09 f4       	brne	.+2      	; 0x380e <action_macro_play+0x14>
    380c:	6c c0       	rjmp	.+216    	; 0x38e6 <action_macro_play+0xec>
    380e:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3810:	ee 24       	eor	r14, r14
    3812:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3814:	e8 01       	movw	r28, r16
    3816:	21 96       	adiw	r28, 0x01	; 1
    3818:	f8 01       	movw	r30, r16
    381a:	84 91       	lpm	r24, Z
    381c:	84 37       	cpi	r24, 0x74	; 116
    381e:	40 f4       	brcc	.+16     	; 0x3830 <action_macro_play+0x36>
    3820:	84 30       	cpi	r24, 0x04	; 4
    3822:	08 f0       	brcs	.+2      	; 0x3826 <action_macro_play+0x2c>
    3824:	51 c0       	rjmp	.+162    	; 0x38c8 <action_macro_play+0xce>
    3826:	81 30       	cpi	r24, 0x01	; 1
    3828:	81 f0       	breq	.+32     	; 0x384a <action_macro_play+0x50>
    382a:	82 30       	cpi	r24, 0x02	; 2
    382c:	19 f1       	breq	.+70     	; 0x3874 <action_macro_play+0x7a>
    382e:	5b c0       	rjmp	.+182    	; 0x38e6 <action_macro_play+0xec>
    3830:	85 37       	cpi	r24, 0x75	; 117
    3832:	09 f4       	brne	.+2      	; 0x3836 <action_macro_play+0x3c>
    3834:	44 c0       	rjmp	.+136    	; 0x38be <action_macro_play+0xc4>
    3836:	a8 f1       	brcs	.+106    	; 0x38a2 <action_macro_play+0xa8>
    3838:	9c e7       	ldi	r25, 0x7C	; 124
    383a:	98 0f       	add	r25, r24
    383c:	90 37       	cpi	r25, 0x70	; 112
    383e:	08 f0       	brcs	.+2      	; 0x3842 <action_macro_play+0x48>
    3840:	52 c0       	rjmp	.+164    	; 0x38e6 <action_macro_play+0xec>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3842:	8f 77       	andi	r24, 0x7F	; 127
    3844:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <unregister_code>
    3848:	41 c0       	rjmp	.+130    	; 0x38cc <action_macro_play+0xd2>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    384a:	0e 5f       	subi	r16, 0xFE	; 254
    384c:	1f 4f       	sbci	r17, 0xFF	; 255
    384e:	fe 01       	movw	r30, r28
    3850:	c4 91       	lpm	r28, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3852:	80 e2       	ldi	r24, 0x20	; 32
    3854:	8c 0f       	add	r24, r28
    3856:	88 30       	cpi	r24, 0x08	; 8
    3858:	48 f4       	brcc	.+18     	; 0x386c <action_macro_play+0x72>
                    add_weak_mods(MOD_BIT(macro));
    385a:	c7 70       	andi	r28, 0x07	; 7
    385c:	8e 2d       	mov	r24, r14
    385e:	01 c0       	rjmp	.+2      	; 0x3862 <action_macro_play+0x68>
    3860:	88 0f       	add	r24, r24
    3862:	ca 95       	dec	r28
    3864:	ea f7       	brpl	.-6      	; 0x3860 <action_macro_play+0x66>
    3866:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <add_weak_mods>
    386a:	14 c0       	rjmp	.+40     	; 0x3894 <action_macro_play+0x9a>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    386c:	8c 2f       	mov	r24, r28
    386e:	0e 94 e7 14 	call	0x29ce	; 0x29ce <register_code>
    3872:	2d c0       	rjmp	.+90     	; 0x38ce <action_macro_play+0xd4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3874:	0e 5f       	subi	r16, 0xFE	; 254
    3876:	1f 4f       	sbci	r17, 0xFF	; 255
    3878:	fe 01       	movw	r30, r28
    387a:	c4 91       	lpm	r28, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    387c:	80 e2       	ldi	r24, 0x20	; 32
    387e:	8c 0f       	add	r24, r28
    3880:	88 30       	cpi	r24, 0x08	; 8
    3882:	58 f4       	brcc	.+22     	; 0x389a <action_macro_play+0xa0>
                    del_weak_mods(MOD_BIT(macro));
    3884:	c7 70       	andi	r28, 0x07	; 7
    3886:	8e 2d       	mov	r24, r14
    3888:	01 c0       	rjmp	.+2      	; 0x388c <action_macro_play+0x92>
    388a:	88 0f       	add	r24, r24
    388c:	ca 95       	dec	r28
    388e:	ea f7       	brpl	.-6      	; 0x388a <action_macro_play+0x90>
    3890:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <del_weak_mods>
                    send_keyboard_report();
    3894:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <send_keyboard_report>
    3898:	1a c0       	rjmp	.+52     	; 0x38ce <action_macro_play+0xd4>
                } else {
                    unregister_code(macro);
    389a:	8c 2f       	mov	r24, r28
    389c:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <unregister_code>
    38a0:	16 c0       	rjmp	.+44     	; 0x38ce <action_macro_play+0xd4>
                }
                break;
            case WAIT:
                MACRO_READ();
    38a2:	0e 5f       	subi	r16, 0xFE	; 254
    38a4:	1f 4f       	sbci	r17, 0xFF	; 255
    38a6:	fe 01       	movw	r30, r28
    38a8:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    38aa:	cc 23       	and	r28, r28
    38ac:	81 f0       	breq	.+32     	; 0x38ce <action_macro_play+0xd4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    38ae:	8f e9       	ldi	r24, 0x9F	; 159
    38b0:	9f e0       	ldi	r25, 0x0F	; 15
    38b2:	01 97       	sbiw	r24, 0x01	; 1
    38b4:	f1 f7       	brne	.-4      	; 0x38b2 <action_macro_play+0xb8>
    38b6:	00 c0       	rjmp	.+0      	; 0x38b8 <action_macro_play+0xbe>
    38b8:	00 00       	nop
    38ba:	c1 50       	subi	r28, 0x01	; 1
    38bc:	f6 cf       	rjmp	.-20     	; 0x38aa <action_macro_play+0xb0>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    38be:	0e 5f       	subi	r16, 0xFE	; 254
    38c0:	1f 4f       	sbci	r17, 0xFF	; 255
    38c2:	fe 01       	movw	r30, r28
    38c4:	f4 90       	lpm	r15, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    38c6:	03 c0       	rjmp	.+6      	; 0x38ce <action_macro_play+0xd4>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    38c8:	0e 94 e7 14 	call	0x29ce	; 0x29ce <register_code>
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    38cc:	8e 01       	movw	r16, r28
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    38ce:	8f 2d       	mov	r24, r15
    38d0:	88 23       	and	r24, r24
    38d2:	09 f4       	brne	.+2      	; 0x38d6 <action_macro_play+0xdc>
    38d4:	9f cf       	rjmp	.-194    	; 0x3814 <action_macro_play+0x1a>
    38d6:	ef e9       	ldi	r30, 0x9F	; 159
    38d8:	ff e0       	ldi	r31, 0x0F	; 15
    38da:	31 97       	sbiw	r30, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <action_macro_play+0xe0>
    38de:	00 c0       	rjmp	.+0      	; 0x38e0 <action_macro_play+0xe6>
    38e0:	00 00       	nop
    38e2:	81 50       	subi	r24, 0x01	; 1
    38e4:	f5 cf       	rjmp	.-22     	; 0x38d0 <action_macro_play+0xd6>
    }
}
    38e6:	df 91       	pop	r29
    38e8:	cf 91       	pop	r28
    38ea:	1f 91       	pop	r17
    38ec:	0f 91       	pop	r16
    38ee:	ff 90       	pop	r15
    38f0:	ef 90       	pop	r14
    38f2:	08 95       	ret

000038f4 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    38f4:	08 95       	ret

000038f6 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    38f6:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <default_layer_state>
    38fa:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <default_layer_state+0x1>
    38fe:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <default_layer_state+0x2>
    3902:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <default_layer_state+0x3>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3906:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

0000390a <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    390e:	00 91 03 02 	lds	r16, 0x0203	; 0x800203 <default_layer_state>
    3912:	10 91 04 02 	lds	r17, 0x0204	; 0x800204 <default_layer_state+0x1>
    3916:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <default_layer_state+0x2>
    391a:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <default_layer_state+0x3>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	80 2b       	or	r24, r16
    3924:	91 2b       	or	r25, r17
    3926:	a2 2b       	or	r26, r18
    3928:	b3 2b       	or	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    392a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <default_layer_state>
    392e:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <default_layer_state+0x1>
    3932:	a0 93 05 02 	sts	0x0205, r26	; 0x800205 <default_layer_state+0x2>
    3936:	b0 93 06 02 	sts	0x0206, r27	; 0x800206 <default_layer_state+0x3>

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    393a:	1f 91       	pop	r17
    393c:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    393e:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

00003942 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    3942:	0f 93       	push	r16
    3944:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3946:	00 91 03 02 	lds	r16, 0x0203	; 0x800203 <default_layer_state>
    394a:	10 91 04 02 	lds	r17, 0x0204	; 0x800204 <default_layer_state+0x1>
    394e:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <default_layer_state+0x2>
    3952:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <default_layer_state+0x3>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	80 23       	and	r24, r16
    395c:	91 23       	and	r25, r17
    395e:	a2 23       	and	r26, r18
    3960:	b3 23       	and	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3962:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <default_layer_state>
    3966:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <default_layer_state+0x1>
    396a:	a0 93 05 02 	sts	0x0205, r26	; 0x800205 <default_layer_state+0x2>
    396e:	b0 93 06 02 	sts	0x0206, r27	; 0x800206 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    3972:	1f 91       	pop	r17
    3974:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3976:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

0000397a <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    397a:	0f 93       	push	r16
    397c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    397e:	00 91 03 02 	lds	r16, 0x0203	; 0x800203 <default_layer_state>
    3982:	10 91 04 02 	lds	r17, 0x0204	; 0x800204 <default_layer_state+0x1>
    3986:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <default_layer_state+0x2>
    398a:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <default_layer_state+0x3>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	80 27       	eor	r24, r16
    3994:	91 27       	eor	r25, r17
    3996:	a2 27       	eor	r26, r18
    3998:	b3 27       	eor	r27, r19

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    399a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <default_layer_state>
    399e:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <default_layer_state+0x1>
    39a2:	a0 93 05 02 	sts	0x0205, r26	; 0x800205 <default_layer_state+0x2>
    39a6:	b0 93 06 02 	sts	0x0206, r27	; 0x800206 <default_layer_state+0x3>
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    39aa:	1f 91       	pop	r17
    39ac:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    39ae:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

000039b2 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    39b2:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <layer_state>
    39b6:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <layer_state+0x1>
    39ba:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <layer_state+0x2>
    39be:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <layer_state+0x3>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    39c2:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

000039c6 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    39c6:	41 e0       	ldi	r20, 0x01	; 1
    39c8:	50 e0       	ldi	r21, 0x00	; 0
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	70 e0       	ldi	r23, 0x00	; 0
    39ce:	04 c0       	rjmp	.+8      	; 0x39d8 <layer_move+0x12>
    39d0:	44 0f       	add	r20, r20
    39d2:	55 1f       	adc	r21, r21
    39d4:	66 1f       	adc	r22, r22
    39d6:	77 1f       	adc	r23, r23
    39d8:	8a 95       	dec	r24
    39da:	d2 f7       	brpl	.-12     	; 0x39d0 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    39dc:	40 93 ff 01 	sts	0x01FF, r20	; 0x8001ff <layer_state>
    39e0:	50 93 00 02 	sts	0x0200, r21	; 0x800200 <layer_state+0x1>
    39e4:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <layer_state+0x2>
    39e8:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <layer_state+0x3>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    39ec:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

000039f0 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    39f0:	41 e0       	ldi	r20, 0x01	; 1
    39f2:	50 e0       	ldi	r21, 0x00	; 0
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	04 c0       	rjmp	.+8      	; 0x3a02 <layer_on+0x12>
    39fa:	44 0f       	add	r20, r20
    39fc:	55 1f       	adc	r21, r21
    39fe:	66 1f       	adc	r22, r22
    3a00:	77 1f       	adc	r23, r23
    3a02:	8a 95       	dec	r24
    3a04:	d2 f7       	brpl	.-12     	; 0x39fa <layer_on+0xa>
    3a06:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <layer_state>
    3a0a:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <layer_state+0x1>
    3a0e:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <layer_state+0x2>
    3a12:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <layer_state+0x3>
    3a16:	48 2b       	or	r20, r24
    3a18:	59 2b       	or	r21, r25
    3a1a:	6a 2b       	or	r22, r26
    3a1c:	7b 2b       	or	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3a1e:	40 93 ff 01 	sts	0x01FF, r20	; 0x8001ff <layer_state>
    3a22:	50 93 00 02 	sts	0x0200, r21	; 0x800200 <layer_state+0x1>
    3a26:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <layer_state+0x2>
    3a2a:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <layer_state+0x3>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3a2e:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

00003a32 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3a32:	41 e0       	ldi	r20, 0x01	; 1
    3a34:	50 e0       	ldi	r21, 0x00	; 0
    3a36:	60 e0       	ldi	r22, 0x00	; 0
    3a38:	70 e0       	ldi	r23, 0x00	; 0
    3a3a:	04 c0       	rjmp	.+8      	; 0x3a44 <layer_off+0x12>
    3a3c:	44 0f       	add	r20, r20
    3a3e:	55 1f       	adc	r21, r21
    3a40:	66 1f       	adc	r22, r22
    3a42:	77 1f       	adc	r23, r23
    3a44:	8a 95       	dec	r24
    3a46:	d2 f7       	brpl	.-12     	; 0x3a3c <layer_off+0xa>
    3a48:	40 95       	com	r20
    3a4a:	50 95       	com	r21
    3a4c:	60 95       	com	r22
    3a4e:	70 95       	com	r23
    3a50:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <layer_state>
    3a54:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <layer_state+0x1>
    3a58:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <layer_state+0x2>
    3a5c:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <layer_state+0x3>
    3a60:	48 23       	and	r20, r24
    3a62:	59 23       	and	r21, r25
    3a64:	6a 23       	and	r22, r26
    3a66:	7b 23       	and	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3a68:	40 93 ff 01 	sts	0x01FF, r20	; 0x8001ff <layer_state>
    3a6c:	50 93 00 02 	sts	0x0200, r21	; 0x800200 <layer_state+0x1>
    3a70:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <layer_state+0x2>
    3a74:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <layer_state+0x3>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3a78:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

00003a7c <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3a7c:	41 e0       	ldi	r20, 0x01	; 1
    3a7e:	50 e0       	ldi	r21, 0x00	; 0
    3a80:	60 e0       	ldi	r22, 0x00	; 0
    3a82:	70 e0       	ldi	r23, 0x00	; 0
    3a84:	04 c0       	rjmp	.+8      	; 0x3a8e <layer_invert+0x12>
    3a86:	44 0f       	add	r20, r20
    3a88:	55 1f       	adc	r21, r21
    3a8a:	66 1f       	adc	r22, r22
    3a8c:	77 1f       	adc	r23, r23
    3a8e:	8a 95       	dec	r24
    3a90:	d2 f7       	brpl	.-12     	; 0x3a86 <layer_invert+0xa>
    3a92:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <layer_state>
    3a96:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <layer_state+0x1>
    3a9a:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <layer_state+0x2>
    3a9e:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <layer_state+0x3>
    3aa2:	48 27       	eor	r20, r24
    3aa4:	59 27       	eor	r21, r25
    3aa6:	6a 27       	eor	r22, r26
    3aa8:	7b 27       	eor	r23, r27

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3aaa:	40 93 ff 01 	sts	0x01FF, r20	; 0x8001ff <layer_state>
    3aae:	50 93 00 02 	sts	0x0200, r21	; 0x800200 <layer_state+0x1>
    3ab2:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <layer_state+0x2>
    3ab6:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <layer_state+0x3>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3aba:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

00003abe <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    3abe:	0f 93       	push	r16
    3ac0:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3ac2:	00 91 ff 01 	lds	r16, 0x01FF	; 0x8001ff <layer_state>
    3ac6:	10 91 00 02 	lds	r17, 0x0200	; 0x800200 <layer_state+0x1>
    3aca:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <layer_state+0x2>
    3ace:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <layer_state+0x3>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	80 2b       	or	r24, r16
    3ad8:	91 2b       	or	r25, r17
    3ada:	a2 2b       	or	r26, r18
    3adc:	b3 2b       	or	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3ade:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <layer_state>
    3ae2:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <layer_state+0x1>
    3ae6:	a0 93 01 02 	sts	0x0201, r26	; 0x800201 <layer_state+0x2>
    3aea:	b0 93 02 02 	sts	0x0202, r27	; 0x800202 <layer_state+0x3>
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    3aee:	1f 91       	pop	r17
    3af0:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3af2:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

00003af6 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    3af6:	0f 93       	push	r16
    3af8:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3afa:	00 91 ff 01 	lds	r16, 0x01FF	; 0x8001ff <layer_state>
    3afe:	10 91 00 02 	lds	r17, 0x0200	; 0x800200 <layer_state+0x1>
    3b02:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <layer_state+0x2>
    3b06:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <layer_state+0x3>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	80 23       	and	r24, r16
    3b10:	91 23       	and	r25, r17
    3b12:	a2 23       	and	r26, r18
    3b14:	b3 23       	and	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3b16:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <layer_state>
    3b1a:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <layer_state+0x1>
    3b1e:	a0 93 01 02 	sts	0x0201, r26	; 0x800201 <layer_state+0x2>
    3b22:	b0 93 02 02 	sts	0x0202, r27	; 0x800202 <layer_state+0x3>
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    3b26:	1f 91       	pop	r17
    3b28:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3b2a:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

00003b2e <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3b2e:	0f 93       	push	r16
    3b30:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3b32:	00 91 ff 01 	lds	r16, 0x01FF	; 0x8001ff <layer_state>
    3b36:	10 91 00 02 	lds	r17, 0x0200	; 0x800200 <layer_state+0x1>
    3b3a:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <layer_state+0x2>
    3b3e:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <layer_state+0x3>
    3b42:	dc 01       	movw	r26, r24
    3b44:	cb 01       	movw	r24, r22
    3b46:	80 27       	eor	r24, r16
    3b48:	91 27       	eor	r25, r17
    3b4a:	a2 27       	eor	r26, r18
    3b4c:	b3 27       	eor	r27, r19

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3b4e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <layer_state>
    3b52:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <layer_state+0x1>
    3b56:	a0 93 01 02 	sts	0x0201, r26	; 0x800201 <layer_state+0x2>
    3b5a:	b0 93 02 02 	sts	0x0202, r27	; 0x800202 <layer_state+0x3>
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    3b5e:	1f 91       	pop	r17
    3b60:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3b62:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <clear_keyboard_but_mods>

00003b66 <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    3b66:	08 95       	ret

00003b68 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3b68:	cf 92       	push	r12
    3b6a:	df 92       	push	r13
    3b6c:	ef 92       	push	r14
    3b6e:	ff 92       	push	r15
    3b70:	0f 93       	push	r16
    3b72:	1f 93       	push	r17
    3b74:	cf 93       	push	r28
    3b76:	df 93       	push	r29
    3b78:	8c 01       	movw	r16, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3b7a:	c0 90 03 02 	lds	r12, 0x0203	; 0x800203 <default_layer_state>
    3b7e:	d0 90 04 02 	lds	r13, 0x0204	; 0x800204 <default_layer_state+0x1>
    3b82:	e0 90 05 02 	lds	r14, 0x0205	; 0x800205 <default_layer_state+0x2>
    3b86:	f0 90 06 02 	lds	r15, 0x0206	; 0x800206 <default_layer_state+0x3>
    3b8a:	40 91 ff 01 	lds	r20, 0x01FF	; 0x8001ff <layer_state>
    3b8e:	50 91 00 02 	lds	r21, 0x0200	; 0x800200 <layer_state+0x1>
    3b92:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <layer_state+0x2>
    3b96:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <layer_state+0x3>
    3b9a:	c4 2a       	or	r12, r20
    3b9c:	d5 2a       	or	r13, r21
    3b9e:	e6 2a       	or	r14, r22
    3ba0:	f7 2a       	or	r15, r23
    3ba2:	cf e1       	ldi	r28, 0x1F	; 31
    3ba4:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3ba6:	d7 01       	movw	r26, r14
    3ba8:	c6 01       	movw	r24, r12
    3baa:	0c 2e       	mov	r0, r28
    3bac:	04 c0       	rjmp	.+8      	; 0x3bb6 <layer_switch_get_action+0x4e>
    3bae:	b6 95       	lsr	r27
    3bb0:	a7 95       	ror	r26
    3bb2:	97 95       	ror	r25
    3bb4:	87 95       	ror	r24
    3bb6:	0a 94       	dec	r0
    3bb8:	d2 f7       	brpl	.-12     	; 0x3bae <layer_switch_get_action+0x46>
    3bba:	80 ff       	sbrs	r24, 0
    3bbc:	07 c0       	rjmp	.+14     	; 0x3bcc <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3bbe:	b8 01       	movw	r22, r16
    3bc0:	8c 2f       	mov	r24, r28
    3bc2:	0e 94 36 20 	call	0x406c	; 0x406c <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3bc6:	81 30       	cpi	r24, 0x01	; 1
    3bc8:	91 05       	cpc	r25, r1
    3bca:	31 f4       	brne	.+12     	; 0x3bd8 <layer_switch_get_action+0x70>
    3bcc:	21 97       	sbiw	r28, 0x01	; 1
    3bce:	58 f7       	brcc	.-42     	; 0x3ba6 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3bd0:	b8 01       	movw	r22, r16
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	0e 94 36 20 	call	0x406c	; 0x406c <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3bd8:	df 91       	pop	r29
    3bda:	cf 91       	pop	r28
    3bdc:	1f 91       	pop	r17
    3bde:	0f 91       	pop	r16
    3be0:	ff 90       	pop	r15
    3be2:	ef 90       	pop	r14
    3be4:	df 90       	pop	r13
    3be6:	cf 90       	pop	r12
    3be8:	08 95       	ret

00003bea <get_oneshot_locked_mods>:
#endif
}
uint8_t get_oneshot_mods(void)
{
    return oneshot_mods;
}
    3bea:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <oneshot_locked_mods>
    3bee:	08 95       	ret

00003bf0 <set_oneshot_locked_mods>:
    3bf0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <oneshot_locked_mods>
    3bf4:	08 95       	ret

00003bf6 <clear_oneshot_locked_mods>:
    3bf6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <oneshot_locked_mods>
    3bfa:	08 95       	ret

00003bfc <get_oneshot_layer>:
    3bfc:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <oneshot_layer_data>
    3c00:	85 95       	asr	r24
    3c02:	85 95       	asr	r24
    3c04:	85 95       	asr	r24
    3c06:	08 95       	ret

00003c08 <get_oneshot_layer_state>:
    3c08:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <oneshot_layer_data>
    3c0c:	87 70       	andi	r24, 0x07	; 7
    3c0e:	08 95       	ret

00003c10 <set_oneshot_layer>:
    3c10:	98 e0       	ldi	r25, 0x08	; 8
    3c12:	89 9f       	mul	r24, r25
    3c14:	90 01       	movw	r18, r0
    3c16:	11 24       	eor	r1, r1
    3c18:	26 2b       	or	r18, r22
    3c1a:	20 93 07 02 	sts	0x0207, r18	; 0x800207 <oneshot_layer_data>
    3c1e:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <layer_on>

00003c22 <reset_oneshot_layer>:
    3c22:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <oneshot_layer_data>
    3c26:	08 95       	ret

00003c28 <clear_oneshot_layer_state>:
    3c28:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <oneshot_layer_data>
    3c2c:	80 95       	com	r24
    3c2e:	82 23       	and	r24, r18
    3c30:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <oneshot_layer_data>
    3c34:	98 2f       	mov	r25, r24
    3c36:	97 70       	andi	r25, 0x07	; 7
    3c38:	69 f4       	brne	.+26     	; 0x3c54 <clear_oneshot_layer_state+0x2c>
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	48 2f       	mov	r20, r24
    3c3e:	08 2e       	mov	r0, r24
    3c40:	00 0c       	add	r0, r0
    3c42:	55 0b       	sbc	r21, r21
    3c44:	24 17       	cp	r18, r20
    3c46:	35 07       	cpc	r19, r21
    3c48:	29 f0       	breq	.+10     	; 0x3c54 <clear_oneshot_layer_state+0x2c>
    3c4a:	85 95       	asr	r24
    3c4c:	85 95       	asr	r24
    3c4e:	85 95       	asr	r24
    3c50:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <layer_off>
    3c54:	08 95       	ret

00003c56 <is_oneshot_layer_active>:
    3c56:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <oneshot_layer_data>
    3c5a:	97 70       	andi	r25, 0x07	; 7
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	09 f4       	brne	.+2      	; 0x3c62 <is_oneshot_layer_active+0xc>
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	08 95       	ret

00003c64 <add_key>:
    3c64:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_protocol>
    3c68:	99 23       	and	r25, r25
    3c6a:	21 f0       	breq	.+8      	; 0x3c74 <add_key+0x10>
    3c6c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <keyboard_nkro>
    3c70:	91 11       	cpse	r25, r1
    3c72:	09 c0       	rjmp	.+18     	; 0x3c86 <add_key+0x22>
    3c74:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <keyboard_report>
    3c78:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <keyboard_report+0x1>
    3c7c:	f9 01       	movw	r30, r18
    3c7e:	32 96       	adiw	r30, 0x02	; 2
    3c80:	9f ef       	ldi	r25, 0xFF	; 255
    3c82:	40 e0       	ldi	r20, 0x00	; 0
    3c84:	30 c0       	rjmp	.+96     	; 0x3ce6 <add_key+0x82>
    3c86:	98 2f       	mov	r25, r24
    3c88:	96 95       	lsr	r25
    3c8a:	96 95       	lsr	r25
    3c8c:	96 95       	lsr	r25
    3c8e:	9f 30       	cpi	r25, 0x0F	; 15
    3c90:	a0 f4       	brcc	.+40     	; 0x3cba <add_key+0x56>
    3c92:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <keyboard_report>
    3c96:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <keyboard_report+0x1>
    3c9a:	e9 0f       	add	r30, r25
    3c9c:	f1 1d       	adc	r31, r1
    3c9e:	87 70       	andi	r24, 0x07	; 7
    3ca0:	21 e0       	ldi	r18, 0x01	; 1
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	a9 01       	movw	r20, r18
    3ca6:	02 c0       	rjmp	.+4      	; 0x3cac <add_key+0x48>
    3ca8:	44 0f       	add	r20, r20
    3caa:	55 1f       	adc	r21, r21
    3cac:	8a 95       	dec	r24
    3cae:	e2 f7       	brpl	.-8      	; 0x3ca8 <add_key+0x44>
    3cb0:	ca 01       	movw	r24, r20
    3cb2:	91 81       	ldd	r25, Z+1	; 0x01
    3cb4:	89 2b       	or	r24, r25
    3cb6:	81 83       	std	Z+1, r24	; 0x01
    3cb8:	08 95       	ret
    3cba:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <debug_config>
    3cbe:	90 ff       	sbrs	r25, 0
    3cc0:	23 c0       	rjmp	.+70     	; 0x3d08 <add_key+0xa4>
    3cc2:	1f 92       	push	r1
    3cc4:	8f 93       	push	r24
    3cc6:	8b ef       	ldi	r24, 0xFB	; 251
    3cc8:	95 e0       	ldi	r25, 0x05	; 5
    3cca:	9f 93       	push	r25
    3ccc:	8f 93       	push	r24
    3cce:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	0f 90       	pop	r0
    3cda:	08 95       	ret
    3cdc:	9f 3f       	cpi	r25, 0xFF	; 255
    3cde:	39 f0       	breq	.+14     	; 0x3cee <add_key+0x8a>
    3ce0:	4f 5f       	subi	r20, 0xFF	; 255
    3ce2:	4e 30       	cpi	r20, 0x0E	; 14
    3ce4:	41 f0       	breq	.+16     	; 0x3cf6 <add_key+0x92>
    3ce6:	51 91       	ld	r21, Z+
    3ce8:	58 13       	cpse	r21, r24
    3cea:	f8 cf       	rjmp	.-16     	; 0x3cdc <add_key+0x78>
    3cec:	0d c0       	rjmp	.+26     	; 0x3d08 <add_key+0xa4>
    3cee:	51 11       	cpse	r21, r1
    3cf0:	f7 cf       	rjmp	.-18     	; 0x3ce0 <add_key+0x7c>
    3cf2:	94 2f       	mov	r25, r20
    3cf4:	f5 cf       	rjmp	.-22     	; 0x3ce0 <add_key+0x7c>
    3cf6:	9f 3f       	cpi	r25, 0xFF	; 255
    3cf8:	39 f0       	breq	.+14     	; 0x3d08 <add_key+0xa4>
    3cfa:	f9 01       	movw	r30, r18
    3cfc:	e9 0f       	add	r30, r25
    3cfe:	f1 1d       	adc	r31, r1
    3d00:	97 fd       	sbrc	r25, 7
    3d02:	fa 95       	dec	r31
    3d04:	82 83       	std	Z+2, r24	; 0x02
    3d06:	08 95       	ret
    3d08:	08 95       	ret

00003d0a <del_key>:
    3d0a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_protocol>
    3d0e:	99 23       	and	r25, r25
    3d10:	21 f0       	breq	.+8      	; 0x3d1a <del_key+0x10>
    3d12:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <keyboard_nkro>
    3d16:	91 11       	cpse	r25, r1
    3d18:	09 c0       	rjmp	.+18     	; 0x3d2c <del_key+0x22>
    3d1a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <keyboard_report>
    3d1e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <keyboard_report+0x1>
    3d22:	f9 01       	movw	r30, r18
    3d24:	32 96       	adiw	r30, 0x02	; 2
    3d26:	20 5f       	subi	r18, 0xF0	; 240
    3d28:	3f 4f       	sbci	r19, 0xFF	; 255
    3d2a:	30 c0       	rjmp	.+96     	; 0x3d8c <del_key+0x82>
    3d2c:	98 2f       	mov	r25, r24
    3d2e:	96 95       	lsr	r25
    3d30:	96 95       	lsr	r25
    3d32:	96 95       	lsr	r25
    3d34:	9f 30       	cpi	r25, 0x0F	; 15
    3d36:	a8 f4       	brcc	.+42     	; 0x3d62 <del_key+0x58>
    3d38:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <keyboard_report>
    3d3c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <keyboard_report+0x1>
    3d40:	e9 0f       	add	r30, r25
    3d42:	f1 1d       	adc	r31, r1
    3d44:	87 70       	andi	r24, 0x07	; 7
    3d46:	21 e0       	ldi	r18, 0x01	; 1
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	a9 01       	movw	r20, r18
    3d4c:	02 c0       	rjmp	.+4      	; 0x3d52 <del_key+0x48>
    3d4e:	44 0f       	add	r20, r20
    3d50:	55 1f       	adc	r21, r21
    3d52:	8a 95       	dec	r24
    3d54:	e2 f7       	brpl	.-8      	; 0x3d4e <del_key+0x44>
    3d56:	ca 01       	movw	r24, r20
    3d58:	80 95       	com	r24
    3d5a:	91 81       	ldd	r25, Z+1	; 0x01
    3d5c:	89 23       	and	r24, r25
    3d5e:	81 83       	std	Z+1, r24	; 0x01
    3d60:	08 95       	ret
    3d62:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <debug_config>
    3d66:	90 ff       	sbrs	r25, 0
    3d68:	16 c0       	rjmp	.+44     	; 0x3d96 <del_key+0x8c>
    3d6a:	1f 92       	push	r1
    3d6c:	8f 93       	push	r24
    3d6e:	8d ed       	ldi	r24, 0xDD	; 221
    3d70:	95 e0       	ldi	r25, 0x05	; 5
    3d72:	9f 93       	push	r25
    3d74:	8f 93       	push	r24
    3d76:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	08 95       	ret
    3d84:	31 96       	adiw	r30, 0x01	; 1
    3d86:	e2 17       	cp	r30, r18
    3d88:	f3 07       	cpc	r31, r19
    3d8a:	29 f0       	breq	.+10     	; 0x3d96 <del_key+0x8c>
    3d8c:	90 81       	ld	r25, Z
    3d8e:	98 13       	cpse	r25, r24
    3d90:	f9 cf       	rjmp	.-14     	; 0x3d84 <del_key+0x7a>
    3d92:	10 82       	st	Z, r1
    3d94:	f7 cf       	rjmp	.-18     	; 0x3d84 <del_key+0x7a>
    3d96:	08 95       	ret

00003d98 <clear_keys>:
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <keyboard_report>
    3da0:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <keyboard_report+0x1>
    3da4:	e8 0f       	add	r30, r24
    3da6:	f9 1f       	adc	r31, r25
    3da8:	10 82       	st	Z, r1
    3daa:	01 96       	adiw	r24, 0x01	; 1
    3dac:	80 31       	cpi	r24, 0x10	; 16
    3dae:	91 05       	cpc	r25, r1
    3db0:	a9 f7       	brne	.-22     	; 0x3d9c <clear_keys+0x4>
    3db2:	08 95       	ret

00003db4 <get_mods>:
    3db4:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <real_mods>
    3db8:	08 95       	ret

00003dba <add_mods>:
    3dba:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <real_mods>
    3dbe:	89 2b       	or	r24, r25
    3dc0:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <real_mods>
    3dc4:	08 95       	ret

00003dc6 <del_mods>:
    3dc6:	80 95       	com	r24
    3dc8:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <real_mods>
    3dcc:	89 23       	and	r24, r25
    3dce:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <real_mods>
    3dd2:	08 95       	ret

00003dd4 <clear_mods>:
    3dd4:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <real_mods>
    3dd8:	08 95       	ret

00003dda <add_weak_mods>:
    3dda:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <weak_mods>
    3dde:	89 2b       	or	r24, r25
    3de0:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <weak_mods>
    3de4:	08 95       	ret

00003de6 <del_weak_mods>:
    3de6:	80 95       	com	r24
    3de8:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <weak_mods>
    3dec:	89 23       	and	r24, r25
    3dee:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <weak_mods>
    3df2:	08 95       	ret

00003df4 <clear_weak_mods>:
    3df4:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <weak_mods>
    3df8:	08 95       	ret

00003dfa <set_oneshot_mods>:
    3dfa:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <oneshot_mods>
    3dfe:	08 95       	ret

00003e00 <clear_oneshot_mods>:
    3e00:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <oneshot_mods>
    3e04:	08 95       	ret

00003e06 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3e06:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <keyboard_report>
    3e0a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <keyboard_report+0x1>
    3e0e:	fc 01       	movw	r30, r24
    3e10:	31 96       	adiw	r30, 0x01	; 1
    3e12:	9c 01       	movw	r18, r24
    3e14:	20 5f       	subi	r18, 0xF0	; 240
    3e16:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3e1a:	91 91       	ld	r25, Z+
    3e1c:	91 11       	cpse	r25, r1
            cnt++;
    3e1e:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3e20:	e2 17       	cp	r30, r18
    3e22:	f3 07       	cpc	r31, r19
    3e24:	d1 f7       	brne	.-12     	; 0x3e1a <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3e26:	08 95       	ret

00003e28 <send_keyboard_report>:
    return get_oneshot_layer_state();
}
#endif

void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3e28:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <keyboard_report>
    3e2c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <keyboard_report+0x1>
    3e30:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <real_mods>
    3e34:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3e36:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <keyboard_report>
    3e3a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <keyboard_report+0x1>
    3e3e:	90 81       	ld	r25, Z
    3e40:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <weak_mods>
    3e44:	89 2b       	or	r24, r25
    3e46:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3e48:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <oneshot_mods>
    3e4c:	88 23       	and	r24, r24
    3e4e:	61 f0       	breq	.+24     	; 0x3e68 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3e50:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <keyboard_report>
    3e54:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <keyboard_report+0x1>
    3e58:	90 81       	ld	r25, Z
    3e5a:	89 2b       	or	r24, r25
    3e5c:	80 83       	st	Z, r24
        if (has_anykey()) {
    3e5e:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <has_anykey>
    3e62:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3e64:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <oneshot_mods>
            clear_oneshot_mods();
        }
    }

#endif
    host_keyboard_send(keyboard_report);
    3e68:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <keyboard_report>
    3e6c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <keyboard_report+0x1>
    3e70:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <host_keyboard_send>

00003e74 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3e74:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__data_end+0x1>
    3e78:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
    3e7c:	08 95       	ret

00003e7e <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3e7e:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3e80:	98 2f       	mov	r25, r24
    3e82:	9c 7c       	andi	r25, 0xCC	; 204
    3e84:	39 2f       	mov	r19, r25
    3e86:	36 95       	lsr	r19
    3e88:	36 95       	lsr	r19
    3e8a:	28 2f       	mov	r18, r24
    3e8c:	23 73       	andi	r18, 0x33	; 51
    3e8e:	44 e0       	ldi	r20, 0x04	; 4
    3e90:	24 9f       	mul	r18, r20
    3e92:	c0 01       	movw	r24, r0
    3e94:	11 24       	eor	r1, r1
    3e96:	93 2f       	mov	r25, r19
    3e98:	98 2b       	or	r25, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3e9a:	29 2f       	mov	r18, r25
    3e9c:	2a 7a       	andi	r18, 0xAA	; 170
    3e9e:	26 95       	lsr	r18
    3ea0:	89 2f       	mov	r24, r25
    3ea2:	85 75       	andi	r24, 0x55	; 85
    3ea4:	88 0f       	add	r24, r24
    return bits;
}
    3ea6:	82 2b       	or	r24, r18
    3ea8:	08 95       	ret

00003eaa <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3eaa:	1f 93       	push	r17
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	1f 92       	push	r1
    3eb2:	cd b7       	in	r28, 0x3d	; 61
    3eb4:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3eb6:	99 83       	std	Y+1, r25	; 0x01
    3eb8:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <bitrev>
    3ebc:	18 2f       	mov	r17, r24
    3ebe:	99 81       	ldd	r25, Y+1	; 0x01
    3ec0:	89 2f       	mov	r24, r25
    3ec2:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <bitrev>
    3ec6:	21 2f       	mov	r18, r17
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	32 2f       	mov	r19, r18
    3ecc:	22 27       	eor	r18, r18
    return bits;
}
    3ece:	a9 01       	movw	r20, r18
    3ed0:	48 2b       	or	r20, r24
    3ed2:	ca 01       	movw	r24, r20
    3ed4:	0f 90       	pop	r0
    3ed6:	df 91       	pop	r29
    3ed8:	cf 91       	pop	r28
    3eda:	1f 91       	pop	r17
    3edc:	08 95       	ret

00003ede <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3ede:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <USB_DeviceState>
    3ee2:	84 30       	cpi	r24, 0x04	; 4
    3ee4:	21 f1       	breq	.+72     	; 0x3f2e <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3ee6:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3eea:	20 e4       	ldi	r18, 0x40	; 64
    3eec:	88 e1       	ldi	r24, 0x18	; 24
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	0f b6       	in	r0, 0x3f	; 63
    3ef2:	f8 94       	cli
    3ef4:	a8 95       	wdr
    3ef6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3efa:	0f be       	out	0x3f, r0	; 63
    3efc:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3f00:	83 b7       	in	r24, 0x33	; 51
    3f02:	81 7f       	andi	r24, 0xF1	; 241
    3f04:	84 60       	ori	r24, 0x04	; 4
    3f06:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3f08:	83 b7       	in	r24, 0x33	; 51
    3f0a:	81 60       	ori	r24, 0x01	; 1
    3f0c:	83 bf       	out	0x33, r24	; 51
    sei();
    3f0e:	78 94       	sei
    sleep_cpu();
    3f10:	88 95       	sleep
    sleep_disable();
    3f12:	83 b7       	in	r24, 0x33	; 51
    3f14:	8e 7f       	andi	r24, 0xFE	; 254
    3f16:	83 bf       	out	0x33, r24	; 51
    3f18:	0f b6       	in	r0, 0x3f	; 63
    3f1a:	f8 94       	cli
    3f1c:	a8 95       	wdr
    3f1e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3f22:	88 61       	ori	r24, 0x18	; 24
    3f24:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3f28:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	08 95       	ret

00003f30 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3f30:	08 95       	ret

00003f32 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3f32:	08 95       	ret

00003f34 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3f34:	cf 93       	push	r28
    matrix_power_up();
    3f36:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <matrix_power_up>
    matrix_scan();
    3f3a:	0e 94 5f 09 	call	0x12be	; 0x12be <matrix_scan>
    matrix_power_down();
    3f3e:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f42:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3f44:	8c 2f       	mov	r24, r28
    3f46:	0e 94 9e 09 	call	0x133c	; 0x133c <matrix_get_row>
    3f4a:	81 11       	cpse	r24, r1
    3f4c:	04 c0       	rjmp	.+8      	; 0x3f56 <suspend_wakeup_condition+0x22>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f4e:	cf 5f       	subi	r28, 0xFF	; 255
    3f50:	c8 30       	cpi	r28, 0x08	; 8
    3f52:	c1 f7       	brne	.-16     	; 0x3f44 <suspend_wakeup_condition+0x10>
    3f54:	01 c0       	rjmp	.+2      	; 0x3f58 <suspend_wakeup_condition+0x24>
        if (matrix_get_row(r)) return true;
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3f58:	cf 91       	pop	r28
    3f5a:	08 95       	ret

00003f5c <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3f5c:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <clear_keyboard>

00003f60 <timer_init>:
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
}
    3f60:	82 e0       	ldi	r24, 0x02	; 2
    3f62:	84 bd       	out	0x24, r24	; 36
    3f64:	93 e0       	ldi	r25, 0x03	; 3
    3f66:	95 bd       	out	0x25, r25	; 37
    3f68:	9a ef       	ldi	r25, 0xFA	; 250
    3f6a:	97 bd       	out	0x27, r25	; 39
    3f6c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    3f70:	08 95       	ret

00003f72 <timer_read>:
    3f72:	2f b7       	in	r18, 0x3f	; 63
    3f74:	f8 94       	cli
    3f76:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <timer_count>
    3f7a:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <timer_count+0x1>
    3f7e:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <timer_count+0x2>
    3f82:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <timer_count+0x3>
    3f86:	2f bf       	out	0x3f, r18	; 63
    3f88:	08 95       	ret

00003f8a <timer_elapsed>:
    3f8a:	cf 92       	push	r12
    3f8c:	df 92       	push	r13
    3f8e:	ef 92       	push	r14
    3f90:	ff 92       	push	r15
    3f92:	0f 93       	push	r16
    3f94:	1f 93       	push	r17
    3f96:	2f b7       	in	r18, 0x3f	; 63
    3f98:	f8 94       	cli
    3f9a:	40 91 1e 02 	lds	r20, 0x021E	; 0x80021e <timer_count>
    3f9e:	50 91 1f 02 	lds	r21, 0x021F	; 0x80021f <timer_count+0x1>
    3fa2:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <timer_count+0x2>
    3fa6:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <timer_count+0x3>
    3faa:	2f bf       	out	0x3f, r18	; 63
    3fac:	6a 01       	movw	r12, r20
    3fae:	7b 01       	movw	r14, r22
    3fb0:	ee 24       	eor	r14, r14
    3fb2:	ff 24       	eor	r15, r15
    3fb4:	8c 01       	movw	r16, r24
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	c0 16       	cp	r12, r16
    3fbc:	d1 06       	cpc	r13, r17
    3fbe:	e2 06       	cpc	r14, r18
    3fc0:	f3 06       	cpc	r15, r19
    3fc2:	10 f4       	brcc	.+4      	; 0x3fc8 <timer_elapsed+0x3e>
    3fc4:	41 50       	subi	r20, 0x01	; 1
    3fc6:	51 09       	sbc	r21, r1
    3fc8:	9a 01       	movw	r18, r20
    3fca:	28 1b       	sub	r18, r24
    3fcc:	39 0b       	sbc	r19, r25
    3fce:	c9 01       	movw	r24, r18
    3fd0:	1f 91       	pop	r17
    3fd2:	0f 91       	pop	r16
    3fd4:	ff 90       	pop	r15
    3fd6:	ef 90       	pop	r14
    3fd8:	df 90       	pop	r13
    3fda:	cf 90       	pop	r12
    3fdc:	08 95       	ret

00003fde <__vector_21>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3fde:	1f 92       	push	r1
    3fe0:	0f 92       	push	r0
    3fe2:	0f b6       	in	r0, 0x3f	; 63
    3fe4:	0f 92       	push	r0
    3fe6:	11 24       	eor	r1, r1
    3fe8:	8f 93       	push	r24
    3fea:	9f 93       	push	r25
    3fec:	af 93       	push	r26
    3fee:	bf 93       	push	r27
    timer_count++;
    3ff0:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <timer_count>
    3ff4:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <timer_count+0x1>
    3ff8:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <timer_count+0x2>
    3ffc:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <timer_count+0x3>
    4000:	01 96       	adiw	r24, 0x01	; 1
    4002:	a1 1d       	adc	r26, r1
    4004:	b1 1d       	adc	r27, r1
    4006:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <timer_count>
    400a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <timer_count+0x1>
    400e:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <timer_count+0x2>
    4012:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <timer_count+0x3>
}
    4016:	bf 91       	pop	r27
    4018:	af 91       	pop	r26
    401a:	9f 91       	pop	r25
    401c:	8f 91       	pop	r24
    401e:	0f 90       	pop	r0
    4020:	0f be       	out	0x3f, r0	; 63
    4022:	0f 90       	pop	r0
    4024:	1f 90       	pop	r1
    4026:	18 95       	reti

00004028 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    4028:	0e 94 73 10 	call	0x20e6	; 0x20e6 <USB_Disable>
    cli();
    402c:	f8 94       	cli
    402e:	2f ef       	ldi	r18, 0xFF	; 255
    4030:	87 ea       	ldi	r24, 0xA7	; 167
    4032:	91 e6       	ldi	r25, 0x61	; 97
    4034:	21 50       	subi	r18, 0x01	; 1
    4036:	80 40       	sbci	r24, 0x00	; 0
    4038:	90 40       	sbci	r25, 0x00	; 0
    403a:	e1 f7       	brne	.-8      	; 0x4034 <bootloader_jump+0xc>
    403c:	00 c0       	rjmp	.+0      	; 0x403e <bootloader_jump+0x16>
    403e:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    4040:	87 e0       	ldi	r24, 0x07	; 7
    4042:	90 eb       	ldi	r25, 0xB0	; 176
    4044:	dc 01       	movw	r26, r24
    4046:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <__bss_end>
    404a:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <__bss_end+0x1>
    404e:	a0 93 3f 02 	sts	0x023F, r26	; 0x80023f <__bss_end+0x2>
    4052:	b0 93 40 02 	sts	0x0240, r27	; 0x800240 <__bss_end+0x3>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    4056:	9c e0       	ldi	r25, 0x0C	; 12
    4058:	88 e1       	ldi	r24, 0x18	; 24
    405a:	0f b6       	in	r0, 0x3f	; 63
    405c:	f8 94       	cli
    405e:	a8 95       	wdr
    4060:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4064:	0f be       	out	0x3f, r0	; 63
    4066:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    wdt_enable(WDTO_250MS);
    for (;;);
    406a:	ff cf       	rjmp	.-2      	; 0x406a <bootloader_jump+0x42>

0000406c <action_for_key>:

/* Converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    return (action_t)pgm_read_word(&actionmaps[(layer)][(key.row)][(key.col)]);
    406c:	96 e0       	ldi	r25, 0x06	; 6
    406e:	79 9f       	mul	r23, r25
    4070:	f0 01       	movw	r30, r0
    4072:	11 24       	eor	r1, r1
    4074:	90 e3       	ldi	r25, 0x30	; 48
    4076:	89 9f       	mul	r24, r25
    4078:	e0 0d       	add	r30, r0
    407a:	f1 1d       	adc	r31, r1
    407c:	11 24       	eor	r1, r1
    407e:	e6 0f       	add	r30, r22
    4080:	f1 1d       	adc	r31, r1
    4082:	ee 0f       	add	r30, r30
    4084:	ff 1f       	adc	r31, r31
    4086:	e6 5f       	subi	r30, 0xF6	; 246
    4088:	fe 4f       	sbci	r31, 0xFE	; 254
}
    408a:	85 91       	lpm	r24, Z+
    408c:	94 91       	lpm	r25, Z
    408e:	08 95       	ret

00004090 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    4090:	80 e0       	ldi	r24, 0x00	; 0
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	08 95       	ret

00004096 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    4096:	cf 92       	push	r12
    4098:	df 92       	push	r13
    409a:	ef 92       	push	r14
    409c:	ff 92       	push	r15
    409e:	0f 93       	push	r16
    40a0:	1f 93       	push	r17
    40a2:	cf 93       	push	r28
    40a4:	6c 01       	movw	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    40a6:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    40a8:	8c 2f       	mov	r24, r28
    40aa:	0e 94 9e 09 	call	0x133c	; 0x133c <matrix_get_row>
    40ae:	00 e0       	ldi	r16, 0x00	; 0
    40b0:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    40b2:	e8 2e       	mov	r14, r24
    40b4:	f1 2c       	mov	r15, r1
    40b6:	c7 01       	movw	r24, r14
    40b8:	00 2e       	mov	r0, r16
    40ba:	02 c0       	rjmp	.+4      	; 0x40c0 <scan_key+0x2a>
    40bc:	95 95       	asr	r25
    40be:	87 95       	ror	r24
    40c0:	0a 94       	dec	r0
    40c2:	e2 f7       	brpl	.-8      	; 0x40bc <scan_key+0x26>
    40c4:	80 ff       	sbrs	r24, 0
    40c6:	16 c0       	rjmp	.+44     	; 0x40f4 <scan_key+0x5e>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    40c8:	60 2f       	mov	r22, r16
    40ca:	7c 2f       	mov	r23, r28
    40cc:	80 e0       	ldi	r24, 0x00	; 0
    40ce:	0e 94 36 20 	call	0x406c	; 0x406c <action_for_key>
    40d2:	9c 01       	movw	r18, r24
                if (action.code == code ||
    40d4:	8c 15       	cp	r24, r12
    40d6:	9d 05       	cpc	r25, r13
    40d8:	59 f0       	breq	.+22     	; 0x40f0 <scan_key+0x5a>
    40da:	83 2f       	mov	r24, r19
    40dc:	80 7e       	andi	r24, 0xE0	; 224
    40de:	93 2f       	mov	r25, r19
    40e0:	90 7c       	andi	r25, 0xC0	; 192
    40e2:	11 f0       	breq	.+4      	; 0x40e8 <scan_key+0x52>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    40e4:	80 3a       	cpi	r24, 0xA0	; 160
    40e6:	31 f4       	brne	.+12     	; 0x40f4 <scan_key+0x5e>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    40e8:	30 e0       	ldi	r19, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    40ea:	2c 15       	cp	r18, r12
    40ec:	3d 05       	cpc	r19, r13
    40ee:	11 f4       	brne	.+4      	; 0x40f4 <scan_key+0x5e>
                     action.key.code == code)) {
                    return true;
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	09 c0       	rjmp	.+18     	; 0x4106 <scan_key+0x70>
    40f4:	0f 5f       	subi	r16, 0xFF	; 255
    40f6:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    40f8:	06 30       	cpi	r16, 0x06	; 6
    40fa:	11 05       	cpc	r17, r1
    40fc:	e1 f6       	brne	.-72     	; 0x40b6 <scan_key+0x20>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    40fe:	cf 5f       	subi	r28, 0xFF	; 255
    4100:	c8 30       	cpi	r28, 0x08	; 8
    4102:	91 f6       	brne	.-92     	; 0x40a8 <scan_key+0x12>
                    return true;
                }
            }
        }
    }
    return false;
    4104:	80 e0       	ldi	r24, 0x00	; 0
}
    4106:	cf 91       	pop	r28
    4108:	1f 91       	pop	r17
    410a:	0f 91       	pop	r16
    410c:	ff 90       	pop	r15
    410e:	ef 90       	pop	r14
    4110:	df 90       	pop	r13
    4112:	cf 90       	pop	r12
    4114:	08 95       	ret

00004116 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    4116:	cf 93       	push	r28
    4118:	df 93       	push	r29
    411a:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    411c:	8c e2       	ldi	r24, 0x2C	; 44
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	0e 94 4b 20 	call	0x4096	; 0x4096 <scan_key>
    4124:	88 23       	and	r24, r24
    4126:	29 f0       	breq	.+10     	; 0x4132 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    4128:	ce 01       	movw	r24, r28
}
    412a:	df 91       	pop	r29
    412c:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    412e:	0c 94 4b 20 	jmp	0x4096	; 0x4096 <scan_key>
}
    4132:	80 e0       	ldi	r24, 0x00	; 0
    4134:	df 91       	pop	r29
    4136:	cf 91       	pop	r28
    4138:	08 95       	ret

0000413a <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    413a:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    413c:	0e 94 03 22 	call	0x4406	; 0x4406 <eeconfig_is_enabled>
    4140:	81 11       	cpse	r24, r1
    4142:	02 c0       	rjmp	.+4      	; 0x4148 <bootmagic+0xe>
        eeconfig_init();
    4144:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    4148:	80 e2       	ldi	r24, 0x20	; 32
    414a:	96 e0       	ldi	r25, 0x06	; 6
    414c:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    4150:	c5 e6       	ldi	r28, 0x65	; 101
    4152:	c1 50       	subi	r28, 0x01	; 1
    4154:	49 f0       	breq	.+18     	; 0x4168 <bootmagic+0x2e>
    4156:	0e 94 5f 09 	call	0x12be	; 0x12be <matrix_scan>
    415a:	8f e3       	ldi	r24, 0x3F	; 63
    415c:	9c e9       	ldi	r25, 0x9C	; 156
    415e:	01 97       	sbiw	r24, 0x01	; 1
    4160:	f1 f7       	brne	.-4      	; 0x415e <bootmagic+0x24>
    4162:	00 c0       	rjmp	.+0      	; 0x4164 <bootmagic+0x2a>
    4164:	00 00       	nop
    4166:	f5 cf       	rjmp	.-22     	; 0x4152 <bootmagic+0x18>
    print("done.\n");
    4168:	89 e1       	ldi	r24, 0x19	; 25
    416a:	96 e0       	ldi	r25, 0x06	; 6
    416c:	0e 94 67 07 	call	0xece	; 0xece <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    4170:	89 e2       	ldi	r24, 0x29	; 41
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    4178:	81 11       	cpse	r24, r1
    417a:	29 c1       	rjmp	.+594    	; 0x43ce <bootmagic+0x294>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    417c:	8a e2       	ldi	r24, 0x2A	; 42
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    4184:	81 11       	cpse	r24, r1
        eeconfig_init();
    4186:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    418a:	85 e0       	ldi	r24, 0x05	; 5
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    4192:	81 11       	cpse	r24, r1
        bootloader_jump();
    4194:	0e 94 14 20 	call	0x4028	; 0x4028 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    4198:	0e 94 0e 22 	call	0x441c	; 0x441c <eeconfig_read_debug>
    419c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <debug_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    41a0:	87 e0       	ldi	r24, 0x07	; 7
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    41a8:	88 23       	and	r24, r24
    41aa:	c1 f1       	breq	.+112    	; 0x421c <bootmagic+0xe2>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    41ac:	8b e1       	ldi	r24, 0x1B	; 27
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    41b4:	88 23       	and	r24, r24
    41b6:	51 f0       	breq	.+20     	; 0x41cc <bootmagic+0x92>
            debug_config.matrix = !debug_config.matrix;
    41b8:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    41bc:	81 fb       	bst	r24, 1
    41be:	22 27       	eor	r18, r18
    41c0:	20 f9       	bld	r18, 0
    41c2:	91 e0       	ldi	r25, 0x01	; 1
    41c4:	92 27       	eor	r25, r18
    41c6:	90 fb       	bst	r25, 0
    41c8:	81 f9       	bld	r24, 1
    41ca:	0f c0       	rjmp	.+30     	; 0x41ea <bootmagic+0xb0>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    41cc:	8e e0       	ldi	r24, 0x0E	; 14
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    41d4:	88 23       	and	r24, r24
    41d6:	61 f0       	breq	.+24     	; 0x41f0 <bootmagic+0xb6>
            debug_config.keyboard = !debug_config.keyboard;
    41d8:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    41dc:	82 fb       	bst	r24, 2
    41de:	22 27       	eor	r18, r18
    41e0:	20 f9       	bld	r18, 0
    41e2:	91 e0       	ldi	r25, 0x01	; 1
    41e4:	92 27       	eor	r25, r18
    41e6:	90 fb       	bst	r25, 0
    41e8:	82 f9       	bld	r24, 2
    41ea:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <debug_config>
    41ee:	16 c0       	rjmp	.+44     	; 0x421c <bootmagic+0xe2>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    41f0:	80 e1       	ldi	r24, 0x10	; 16
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    41f8:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <debug_config>
    41fc:	88 23       	and	r24, r24
    41fe:	41 f0       	breq	.+16     	; 0x4210 <bootmagic+0xd6>
            debug_config.mouse = !debug_config.mouse;
    4200:	93 fb       	bst	r25, 3
    4202:	22 27       	eor	r18, r18
    4204:	20 f9       	bld	r18, 0
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	82 27       	eor	r24, r18
    420a:	80 fb       	bst	r24, 0
    420c:	93 f9       	bld	r25, 3
    420e:	04 c0       	rjmp	.+8      	; 0x4218 <bootmagic+0xde>
        } else {
            debug_config.enable = !debug_config.enable;
    4210:	89 2f       	mov	r24, r25
    4212:	80 95       	com	r24
    4214:	80 fb       	bst	r24, 0
    4216:	90 f9       	bld	r25, 0
    4218:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <debug_config>
        }
    }
    eeconfig_write_debug(debug_config.raw);
    421c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    4220:	0e 94 12 22 	call	0x4424	; 0x4424 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4224:	0e 94 20 22 	call	0x4440	; 0x4440 <eeconfig_read_keymap>
    4228:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    422c:	80 ee       	ldi	r24, 0xE0	; 224
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    4234:	88 23       	and	r24, r24
    4236:	41 f0       	breq	.+16     	; 0x4248 <bootmagic+0x10e>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4238:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <keymap_config>
    423c:	98 2f       	mov	r25, r24
    423e:	90 95       	com	r25
    4240:	90 fb       	bst	r25, 0
    4242:	80 f9       	bld	r24, 0
    4244:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4248:	89 e3       	ldi	r24, 0x39	; 57
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    4250:	88 23       	and	r24, r24
    4252:	59 f0       	breq	.+22     	; 0x426a <bootmagic+0x130>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4254:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <keymap_config>
    4258:	81 fb       	bst	r24, 1
    425a:	22 27       	eor	r18, r18
    425c:	20 f9       	bld	r18, 0
    425e:	91 e0       	ldi	r25, 0x01	; 1
    4260:	92 27       	eor	r25, r18
    4262:	90 fb       	bst	r25, 0
    4264:	81 f9       	bld	r24, 1
    4266:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    426a:	82 ee       	ldi	r24, 0xE2	; 226
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    4272:	88 23       	and	r24, r24
    4274:	59 f0       	breq	.+22     	; 0x428c <bootmagic+0x152>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4276:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <keymap_config>
    427a:	82 fb       	bst	r24, 2
    427c:	22 27       	eor	r18, r18
    427e:	20 f9       	bld	r18, 0
    4280:	91 e0       	ldi	r25, 0x01	; 1
    4282:	92 27       	eor	r25, r18
    4284:	90 fb       	bst	r25, 0
    4286:	82 f9       	bld	r24, 2
    4288:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    428c:	86 ee       	ldi	r24, 0xE6	; 230
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    4294:	88 23       	and	r24, r24
    4296:	59 f0       	breq	.+22     	; 0x42ae <bootmagic+0x174>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4298:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <keymap_config>
    429c:	83 fb       	bst	r24, 3
    429e:	22 27       	eor	r18, r18
    42a0:	20 f9       	bld	r18, 0
    42a2:	91 e0       	ldi	r25, 0x01	; 1
    42a4:	92 27       	eor	r25, r18
    42a6:	90 fb       	bst	r25, 0
    42a8:	83 f9       	bld	r24, 3
    42aa:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    42ae:	83 ee       	ldi	r24, 0xE3	; 227
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    42b6:	88 23       	and	r24, r24
    42b8:	59 f0       	breq	.+22     	; 0x42d0 <bootmagic+0x196>
        keymap_config.no_gui = !keymap_config.no_gui;
    42ba:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <keymap_config>
    42be:	84 fb       	bst	r24, 4
    42c0:	22 27       	eor	r18, r18
    42c2:	20 f9       	bld	r18, 0
    42c4:	91 e0       	ldi	r25, 0x01	; 1
    42c6:	92 27       	eor	r25, r18
    42c8:	90 fb       	bst	r25, 0
    42ca:	84 f9       	bld	r24, 4
    42cc:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    42d0:	85 e3       	ldi	r24, 0x35	; 53
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    42d8:	88 23       	and	r24, r24
    42da:	59 f0       	breq	.+22     	; 0x42f2 <bootmagic+0x1b8>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    42dc:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <keymap_config>
    42e0:	85 fb       	bst	r24, 5
    42e2:	22 27       	eor	r18, r18
    42e4:	20 f9       	bld	r18, 0
    42e6:	91 e0       	ldi	r25, 0x01	; 1
    42e8:	92 27       	eor	r25, r18
    42ea:	90 fb       	bst	r25, 0
    42ec:	85 f9       	bld	r24, 5
    42ee:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    42f2:	81 e3       	ldi	r24, 0x31	; 49
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    42fa:	88 23       	and	r24, r24
    42fc:	59 f0       	breq	.+22     	; 0x4314 <bootmagic+0x1da>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    42fe:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <keymap_config>
    4302:	86 fb       	bst	r24, 6
    4304:	22 27       	eor	r18, r18
    4306:	20 f9       	bld	r18, 0
    4308:	91 e0       	ldi	r25, 0x01	; 1
    430a:	92 27       	eor	r25, r18
    430c:	90 fb       	bst	r25, 0
    430e:	86 f9       	bld	r24, 6
    4310:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <keymap_config>
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4314:	89 e1       	ldi	r24, 0x19	; 25
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    431c:	88 23       	and	r24, r24
    431e:	59 f0       	breq	.+22     	; 0x4336 <bootmagic+0x1fc>
        keymap_config.nkro = !keymap_config.nkro;
    4320:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <keymap_config>
    4324:	87 fb       	bst	r24, 7
    4326:	22 27       	eor	r18, r18
    4328:	20 f9       	bld	r18, 0
    432a:	91 e0       	ldi	r25, 0x01	; 1
    432c:	92 27       	eor	r25, r18
    432e:	90 fb       	bst	r25, 0
    4330:	87 f9       	bld	r24, 7
    4332:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <keymap_config>
    }
    eeconfig_write_keymap(keymap_config.raw);
    4336:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <keymap_config>
    433a:	0e 94 24 22 	call	0x4448	; 0x4448 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    433e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <keymap_config>
    4342:	87 fb       	bst	r24, 7
    4344:	88 27       	eor	r24, r24
    4346:	80 f9       	bld	r24, 0
    4348:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <keyboard_nkro>
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    434c:	8d e1       	ldi	r24, 0x1D	; 29
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    4354:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4356:	8b e1       	ldi	r24, 0x1B	; 27
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    435e:	81 11       	cpse	r24, r1
    4360:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4362:	86 e0       	ldi	r24, 0x06	; 6
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    436a:	81 11       	cpse	r24, r1
    436c:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    436e:	80 e2       	ldi	r24, 0x20	; 32
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    4376:	81 11       	cpse	r24, r1
    4378:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    437a:	81 e2       	ldi	r24, 0x21	; 33
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    4382:	81 11       	cpse	r24, r1
    4384:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4386:	82 e2       	ldi	r24, 0x22	; 34
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    438e:	81 11       	cpse	r24, r1
    4390:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4392:	83 e2       	ldi	r24, 0x23	; 35
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    439a:	81 11       	cpse	r24, r1
    439c:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    439e:	84 e2       	ldi	r24, 0x24	; 36
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	0e 94 8b 20 	call	0x4116	; 0x4116 <bootmagic_scan_key>
    43a6:	88 23       	and	r24, r24
    43a8:	11 f0       	breq	.+4      	; 0x43ae <bootmagic+0x274>
    43aa:	c0 68       	ori	r28, 0x80	; 128
    43ac:	02 c0       	rjmp	.+4      	; 0x43b2 <bootmagic+0x278>
    if (default_layer) {
    43ae:	cc 23       	and	r28, r28
    43b0:	29 f0       	breq	.+10     	; 0x43bc <bootmagic+0x282>
        eeconfig_write_default_layer(default_layer);
    43b2:	8c 2f       	mov	r24, r28
    43b4:	0e 94 1b 22 	call	0x4436	; 0x4436 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    43b8:	6c 2f       	mov	r22, r28
    43ba:	03 c0       	rjmp	.+6      	; 0x43c2 <bootmagic+0x288>
    } else {
        default_layer = eeconfig_read_default_layer();
    43bc:	0e 94 17 22 	call	0x442e	; 0x442e <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    43c0:	68 2f       	mov	r22, r24
    43c2:	70 e0       	ldi	r23, 0x00	; 0
    43c4:	80 e0       	ldi	r24, 0x00	; 0
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    43c8:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    43ca:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <default_layer_set>
    }
}
    43ce:	cf 91       	pop	r28
    43d0:	08 95       	ret

000043d2 <eeconfig_init>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    43d2:	6d ee       	ldi	r22, 0xED	; 237
    43d4:	7e ef       	ldi	r23, 0xFE	; 254
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <eeprom_write_word>
    43de:	60 e0       	ldi	r22, 0x00	; 0
    43e0:	82 e0       	ldi	r24, 0x02	; 2
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <eeprom_write_byte>
    43e8:	60 e0       	ldi	r22, 0x00	; 0
    43ea:	83 e0       	ldi	r24, 0x03	; 3
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <eeprom_write_byte>
    43f2:	60 e0       	ldi	r22, 0x00	; 0
    43f4:	84 e0       	ldi	r24, 0x04	; 4
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <eeprom_write_byte>
    43fc:	60 e0       	ldi	r22, 0x00	; 0
    43fe:	85 e0       	ldi	r24, 0x05	; 5
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	0c 94 e9 2b 	jmp	0x57d2	; 0x57d2 <eeprom_write_byte>

00004406 <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <eeprom_read_word>
    440e:	21 e0       	ldi	r18, 0x01	; 1
    4410:	8d 3e       	cpi	r24, 0xED	; 237
    4412:	9e 4f       	sbci	r25, 0xFE	; 254
    4414:	09 f0       	breq	.+2      	; 0x4418 <eeconfig_is_enabled+0x12>
    4416:	20 e0       	ldi	r18, 0x00	; 0
}
    4418:	82 2f       	mov	r24, r18
    441a:	08 95       	ret

0000441c <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    441c:	82 e0       	ldi	r24, 0x02	; 2
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <eeprom_read_byte>

00004424 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4424:	68 2f       	mov	r22, r24
    4426:	82 e0       	ldi	r24, 0x02	; 2
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	0c 94 e9 2b 	jmp	0x57d2	; 0x57d2 <eeprom_write_byte>

0000442e <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    442e:	83 e0       	ldi	r24, 0x03	; 3
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <eeprom_read_byte>

00004436 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4436:	68 2f       	mov	r22, r24
    4438:	83 e0       	ldi	r24, 0x03	; 3
    443a:	90 e0       	ldi	r25, 0x00	; 0
    443c:	0c 94 e9 2b 	jmp	0x57d2	; 0x57d2 <eeprom_write_byte>

00004440 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4440:	84 e0       	ldi	r24, 0x04	; 4
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <eeprom_read_byte>

00004448 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4448:	68 2f       	mov	r22, r24
    444a:	84 e0       	ldi	r24, 0x04	; 4
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	0c 94 e9 2b 	jmp	0x57d2	; 0x57d2 <eeprom_write_byte>

00004452 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4452:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <mousekey_accel>
    4456:	80 ff       	sbrs	r24, 0
    4458:	0b c0       	rjmp	.+22     	; 0x4470 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    445a:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <mk_max_speed>
    445e:	85 e0       	ldi	r24, 0x05	; 5
    4460:	68 9f       	mul	r22, r24
    4462:	b0 01       	movw	r22, r0
    4464:	11 24       	eor	r1, r1
    4466:	75 95       	asr	r23
    4468:	67 95       	ror	r22
    446a:	75 95       	asr	r23
    446c:	67 95       	ror	r22
    446e:	2b c0       	rjmp	.+86     	; 0x44c6 <move_unit+0x74>
    } else if (mousekey_accel & (1<<1)) {
    4470:	81 ff       	sbrs	r24, 1
    4472:	09 c0       	rjmp	.+18     	; 0x4486 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4474:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <mk_max_speed>
    4478:	85 e0       	ldi	r24, 0x05	; 5
    447a:	68 9f       	mul	r22, r24
    447c:	b0 01       	movw	r22, r0
    447e:	11 24       	eor	r1, r1
    4480:	75 95       	asr	r23
    4482:	67 95       	ror	r22
    4484:	20 c0       	rjmp	.+64     	; 0x44c6 <move_unit+0x74>
    } else if (mousekey_accel & (1<<2)) {
    4486:	82 ff       	sbrs	r24, 2
    4488:	07 c0       	rjmp	.+14     	; 0x4498 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    448a:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <mk_max_speed>
    448e:	85 e0       	ldi	r24, 0x05	; 5
    4490:	68 9f       	mul	r22, r24
    4492:	b0 01       	movw	r22, r0
    4494:	11 24       	eor	r1, r1
    4496:	17 c0       	rjmp	.+46     	; 0x44c6 <move_unit+0x74>
    } else if (mousekey_repeat == 0) {
    4498:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <mousekey_repeat>
    449c:	99 23       	and	r25, r25
    449e:	d1 f0       	breq	.+52     	; 0x44d4 <move_unit+0x82>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    44a0:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_time_to_max>
    44a4:	96 17       	cp	r25, r22
    44a6:	88 f7       	brcc	.-30     	; 0x448a <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    44a8:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <mk_max_speed>
    44ac:	85 e0       	ldi	r24, 0x05	; 5
    44ae:	28 9f       	mul	r18, r24
    44b0:	90 01       	movw	r18, r0
    44b2:	11 24       	eor	r1, r1
    44b4:	92 9f       	mul	r25, r18
    44b6:	a0 01       	movw	r20, r0
    44b8:	93 9f       	mul	r25, r19
    44ba:	50 0d       	add	r21, r0
    44bc:	11 24       	eor	r1, r1
    44be:	70 e0       	ldi	r23, 0x00	; 0
    44c0:	ca 01       	movw	r24, r20
    44c2:	0e 94 ad 2b 	call	0x575a	; 0x575a <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    44c6:	60 38       	cpi	r22, 0x80	; 128
    44c8:	71 05       	cpc	r23, r1
    44ca:	40 f4       	brcc	.+16     	; 0x44dc <move_unit+0x8a>
    44cc:	61 15       	cp	r22, r1
    44ce:	71 05       	cpc	r23, r1
    44d0:	39 f0       	breq	.+14     	; 0x44e0 <move_unit+0x8e>
    44d2:	02 c0       	rjmp	.+4      	; 0x44d8 <move_unit+0x86>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    44d4:	65 e0       	ldi	r22, 0x05	; 5
    44d6:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    44d8:	86 2f       	mov	r24, r22
    44da:	08 95       	ret
    44dc:	8f e7       	ldi	r24, 0x7F	; 127
    44de:	08 95       	ret
    44e0:	81 e0       	ldi	r24, 0x01	; 1
}
    44e2:	08 95       	ret

000044e4 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    44e4:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <mousekey_accel>
    44e8:	80 ff       	sbrs	r24, 0
    44ea:	08 c0       	rjmp	.+16     	; 0x44fc <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    44ec:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <mk_wheel_max_speed>
    44f0:	70 e0       	ldi	r23, 0x00	; 0
    44f2:	75 95       	asr	r23
    44f4:	67 95       	ror	r22
    44f6:	75 95       	asr	r23
    44f8:	67 95       	ror	r22
    44fa:	21 c0       	rjmp	.+66     	; 0x453e <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    44fc:	81 ff       	sbrs	r24, 1
    44fe:	06 c0       	rjmp	.+12     	; 0x450c <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4500:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <mk_wheel_max_speed>
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	75 95       	asr	r23
    4508:	67 95       	ror	r22
    450a:	19 c0       	rjmp	.+50     	; 0x453e <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    450c:	82 ff       	sbrs	r24, 2
    450e:	04 c0       	rjmp	.+8      	; 0x4518 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4510:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <mk_wheel_max_speed>
    4514:	70 e0       	ldi	r23, 0x00	; 0
    4516:	10 c0       	rjmp	.+32     	; 0x4538 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4518:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <mousekey_repeat>
    451c:	99 23       	and	r25, r25
    451e:	c1 f0       	breq	.+48     	; 0x4550 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4520:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_time_to_max>
    4524:	96 17       	cp	r25, r22
    4526:	a0 f7       	brcc	.-24     	; 0x4510 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4528:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_wheel_max_speed>
    452c:	89 9f       	mul	r24, r25
    452e:	c0 01       	movw	r24, r0
    4530:	11 24       	eor	r1, r1
    4532:	70 e0       	ldi	r23, 0x00	; 0
    4534:	0e 94 ad 2b 	call	0x575a	; 0x575a <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4538:	60 38       	cpi	r22, 0x80	; 128
    453a:	71 05       	cpc	r23, r1
    453c:	28 f4       	brcc	.+10     	; 0x4548 <wheel_unit+0x64>
    453e:	61 15       	cp	r22, r1
    4540:	71 05       	cpc	r23, r1
    4542:	21 f0       	breq	.+8      	; 0x454c <wheel_unit+0x68>
    4544:	86 2f       	mov	r24, r22
    4546:	08 95       	ret
    4548:	8f e7       	ldi	r24, 0x7F	; 127
    454a:	08 95       	ret
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4550:	61 e0       	ldi	r22, 0x01	; 1
    4552:	70 e0       	ldi	r23, 0x00	; 0
    4554:	f4 cf       	rjmp	.-24     	; 0x453e <wheel_unit+0x5a>

00004556 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4556:	80 3f       	cpi	r24, 0xF0	; 240
    4558:	21 f4       	brne	.+8      	; 0x4562 <mousekey_on+0xc>
    455a:	0e 94 29 22 	call	0x4452	; 0x4452 <move_unit>
    455e:	81 95       	neg	r24
    4560:	04 c0       	rjmp	.+8      	; 0x456a <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4562:	81 3f       	cpi	r24, 0xF1	; 241
    4564:	29 f4       	brne	.+10     	; 0x4570 <mousekey_on+0x1a>
    4566:	0e 94 29 22 	call	0x4452	; 0x4452 <move_unit>
    456a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <mouse_report+0x2>
    456e:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4570:	82 3f       	cpi	r24, 0xF2	; 242
    4572:	21 f4       	brne	.+8      	; 0x457c <mousekey_on+0x26>
    4574:	0e 94 29 22 	call	0x4452	; 0x4452 <move_unit>
    4578:	81 95       	neg	r24
    457a:	04 c0       	rjmp	.+8      	; 0x4584 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    457c:	83 3f       	cpi	r24, 0xF3	; 243
    457e:	29 f4       	brne	.+10     	; 0x458a <mousekey_on+0x34>
    4580:	0e 94 29 22 	call	0x4452	; 0x4452 <move_unit>
    4584:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <mouse_report+0x1>
    4588:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    458a:	89 3f       	cpi	r24, 0xF9	; 249
    458c:	19 f4       	brne	.+6      	; 0x4594 <mousekey_on+0x3e>
    458e:	0e 94 72 22 	call	0x44e4	; 0x44e4 <wheel_unit>
    4592:	05 c0       	rjmp	.+10     	; 0x459e <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4594:	8a 3f       	cpi	r24, 0xFA	; 250
    4596:	31 f4       	brne	.+12     	; 0x45a4 <mousekey_on+0x4e>
    4598:	0e 94 72 22 	call	0x44e4	; 0x44e4 <wheel_unit>
    459c:	81 95       	neg	r24
    459e:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <mouse_report+0x3>
    45a2:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    45a4:	8b 3f       	cpi	r24, 0xFB	; 251
    45a6:	21 f4       	brne	.+8      	; 0x45b0 <mousekey_on+0x5a>
    45a8:	0e 94 72 22 	call	0x44e4	; 0x44e4 <wheel_unit>
    45ac:	81 95       	neg	r24
    45ae:	04 c0       	rjmp	.+8      	; 0x45b8 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    45b0:	8c 3f       	cpi	r24, 0xFC	; 252
    45b2:	29 f4       	brne	.+10     	; 0x45be <mousekey_on+0x68>
    45b4:	0e 94 72 22 	call	0x44e4	; 0x44e4 <wheel_unit>
    45b8:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <mouse_report+0x4>
    45bc:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    45be:	84 3f       	cpi	r24, 0xF4	; 244
    45c0:	21 f4       	brne	.+8      	; 0x45ca <mousekey_on+0x74>
    45c2:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <mouse_report>
    45c6:	81 60       	ori	r24, 0x01	; 1
    45c8:	17 c0       	rjmp	.+46     	; 0x45f8 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    45ca:	85 3f       	cpi	r24, 0xF5	; 245
    45cc:	21 f4       	brne	.+8      	; 0x45d6 <mousekey_on+0x80>
    45ce:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <mouse_report>
    45d2:	82 60       	ori	r24, 0x02	; 2
    45d4:	11 c0       	rjmp	.+34     	; 0x45f8 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    45d6:	86 3f       	cpi	r24, 0xF6	; 246
    45d8:	21 f4       	brne	.+8      	; 0x45e2 <mousekey_on+0x8c>
    45da:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <mouse_report>
    45de:	84 60       	ori	r24, 0x04	; 4
    45e0:	0b c0       	rjmp	.+22     	; 0x45f8 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    45e2:	87 3f       	cpi	r24, 0xF7	; 247
    45e4:	21 f4       	brne	.+8      	; 0x45ee <mousekey_on+0x98>
    45e6:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <mouse_report>
    45ea:	88 60       	ori	r24, 0x08	; 8
    45ec:	05 c0       	rjmp	.+10     	; 0x45f8 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    45ee:	88 3f       	cpi	r24, 0xF8	; 248
    45f0:	31 f4       	brne	.+12     	; 0x45fe <mousekey_on+0xa8>
    45f2:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <mouse_report>
    45f6:	80 61       	ori	r24, 0x10	; 16
    45f8:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <mouse_report>
    45fc:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    45fe:	8d 3f       	cpi	r24, 0xFD	; 253
    4600:	21 f4       	brne	.+8      	; 0x460a <mousekey_on+0xb4>
    4602:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <mousekey_accel>
    4606:	81 60       	ori	r24, 0x01	; 1
    4608:	0b c0       	rjmp	.+22     	; 0x4620 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    460a:	8e 3f       	cpi	r24, 0xFE	; 254
    460c:	21 f4       	brne	.+8      	; 0x4616 <mousekey_on+0xc0>
    460e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <mousekey_accel>
    4612:	82 60       	ori	r24, 0x02	; 2
    4614:	05 c0       	rjmp	.+10     	; 0x4620 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4616:	8f 3f       	cpi	r24, 0xFF	; 255
    4618:	29 f4       	brne	.+10     	; 0x4624 <mousekey_on+0xce>
    461a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <mousekey_accel>
    461e:	84 60       	ori	r24, 0x04	; 4
    4620:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <mousekey_accel>
    4624:	08 95       	ret

00004626 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4626:	80 3f       	cpi	r24, 0xF0	; 240
    4628:	39 f4       	brne	.+14     	; 0x4638 <mousekey_off+0x12>
    462a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <mouse_report+0x2>
    462e:	87 ff       	sbrs	r24, 7
    4630:	6c c0       	rjmp	.+216    	; 0x470a <mousekey_off+0xe4>
    4632:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <mouse_report+0x2>
    4636:	69 c0       	rjmp	.+210    	; 0x470a <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4638:	81 3f       	cpi	r24, 0xF1	; 241
    463a:	29 f4       	brne	.+10     	; 0x4646 <mousekey_off+0x20>
    463c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <mouse_report+0x2>
    4640:	18 16       	cp	r1, r24
    4642:	bc f3       	brlt	.-18     	; 0x4632 <mousekey_off+0xc>
    4644:	62 c0       	rjmp	.+196    	; 0x470a <mousekey_off+0xe4>
    4646:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <mouse_report+0x1>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    464a:	82 3f       	cpi	r24, 0xF2	; 242
    464c:	29 f4       	brne	.+10     	; 0x4658 <mousekey_off+0x32>
    464e:	97 ff       	sbrs	r25, 7
    4650:	5c c0       	rjmp	.+184    	; 0x470a <mousekey_off+0xe4>
    4652:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <mouse_report+0x1>
    4656:	59 c0       	rjmp	.+178    	; 0x470a <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4658:	83 3f       	cpi	r24, 0xF3	; 243
    465a:	19 f4       	brne	.+6      	; 0x4662 <mousekey_off+0x3c>
    465c:	19 16       	cp	r1, r25
    465e:	cc f3       	brlt	.-14     	; 0x4652 <mousekey_off+0x2c>
    4660:	54 c0       	rjmp	.+168    	; 0x470a <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4662:	89 3f       	cpi	r24, 0xF9	; 249
    4664:	41 f4       	brne	.+16     	; 0x4676 <mousekey_off+0x50>
    4666:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <mouse_report+0x3>
    466a:	18 16       	cp	r1, r24
    466c:	0c f0       	brlt	.+2      	; 0x4670 <mousekey_off+0x4a>
    466e:	4d c0       	rjmp	.+154    	; 0x470a <mousekey_off+0xe4>
    4670:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <mouse_report+0x3>
    4674:	4a c0       	rjmp	.+148    	; 0x470a <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4676:	8a 3f       	cpi	r24, 0xFA	; 250
    4678:	29 f4       	brne	.+10     	; 0x4684 <mousekey_off+0x5e>
    467a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <mouse_report+0x3>
    467e:	87 ff       	sbrs	r24, 7
    4680:	44 c0       	rjmp	.+136    	; 0x470a <mousekey_off+0xe4>
    4682:	f6 cf       	rjmp	.-20     	; 0x4670 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4684:	8b 3f       	cpi	r24, 0xFB	; 251
    4686:	39 f4       	brne	.+14     	; 0x4696 <mousekey_off+0x70>
    4688:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <mouse_report+0x4>
    468c:	87 ff       	sbrs	r24, 7
    468e:	3d c0       	rjmp	.+122    	; 0x470a <mousekey_off+0xe4>
    4690:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <mouse_report+0x4>
    4694:	3a c0       	rjmp	.+116    	; 0x470a <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4696:	8c 3f       	cpi	r24, 0xFC	; 252
    4698:	29 f4       	brne	.+10     	; 0x46a4 <mousekey_off+0x7e>
    469a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <mouse_report+0x4>
    469e:	18 16       	cp	r1, r24
    46a0:	bc f3       	brlt	.-18     	; 0x4690 <mousekey_off+0x6a>
    46a2:	33 c0       	rjmp	.+102    	; 0x470a <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    46a4:	84 3f       	cpi	r24, 0xF4	; 244
    46a6:	21 f4       	brne	.+8      	; 0x46b0 <mousekey_off+0x8a>
    46a8:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <mouse_report>
    46ac:	8e 7f       	andi	r24, 0xFE	; 254
    46ae:	17 c0       	rjmp	.+46     	; 0x46de <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    46b0:	85 3f       	cpi	r24, 0xF5	; 245
    46b2:	21 f4       	brne	.+8      	; 0x46bc <mousekey_off+0x96>
    46b4:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <mouse_report>
    46b8:	8d 7f       	andi	r24, 0xFD	; 253
    46ba:	11 c0       	rjmp	.+34     	; 0x46de <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    46bc:	86 3f       	cpi	r24, 0xF6	; 246
    46be:	21 f4       	brne	.+8      	; 0x46c8 <mousekey_off+0xa2>
    46c0:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <mouse_report>
    46c4:	8b 7f       	andi	r24, 0xFB	; 251
    46c6:	0b c0       	rjmp	.+22     	; 0x46de <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    46c8:	87 3f       	cpi	r24, 0xF7	; 247
    46ca:	21 f4       	brne	.+8      	; 0x46d4 <mousekey_off+0xae>
    46cc:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <mouse_report>
    46d0:	87 7f       	andi	r24, 0xF7	; 247
    46d2:	05 c0       	rjmp	.+10     	; 0x46de <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    46d4:	88 3f       	cpi	r24, 0xF8	; 248
    46d6:	31 f4       	brne	.+12     	; 0x46e4 <mousekey_off+0xbe>
    46d8:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <mouse_report>
    46dc:	8f 7e       	andi	r24, 0xEF	; 239
    46de:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <mouse_report>
    46e2:	13 c0       	rjmp	.+38     	; 0x470a <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    46e4:	8d 3f       	cpi	r24, 0xFD	; 253
    46e6:	21 f4       	brne	.+8      	; 0x46f0 <mousekey_off+0xca>
    46e8:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <mousekey_accel>
    46ec:	8e 7f       	andi	r24, 0xFE	; 254
    46ee:	0b c0       	rjmp	.+22     	; 0x4706 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    46f0:	8e 3f       	cpi	r24, 0xFE	; 254
    46f2:	21 f4       	brne	.+8      	; 0x46fc <mousekey_off+0xd6>
    46f4:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <mousekey_accel>
    46f8:	8d 7f       	andi	r24, 0xFD	; 253
    46fa:	05 c0       	rjmp	.+10     	; 0x4706 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    46fc:	8f 3f       	cpi	r24, 0xFF	; 255
    46fe:	29 f4       	brne	.+10     	; 0x470a <mousekey_off+0xe4>
    4700:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <mousekey_accel>
    4704:	8b 7f       	andi	r24, 0xFB	; 251
    4706:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <mousekey_accel>

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    470a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <mouse_report+0x1>
    470e:	81 11       	cpse	r24, r1
    4710:	0e c0       	rjmp	.+28     	; 0x472e <mousekey_off+0x108>
    4712:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <mouse_report+0x2>
    4716:	81 11       	cpse	r24, r1
    4718:	0a c0       	rjmp	.+20     	; 0x472e <mousekey_off+0x108>
    471a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <mouse_report+0x3>
    471e:	81 11       	cpse	r24, r1
    4720:	06 c0       	rjmp	.+12     	; 0x472e <mousekey_off+0x108>
    4722:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <mouse_report+0x4>
    4726:	81 11       	cpse	r24, r1
    4728:	02 c0       	rjmp	.+4      	; 0x472e <mousekey_off+0x108>
        mousekey_repeat = 0;
    472a:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <mousekey_repeat>
    472e:	08 95       	ret

00004730 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4730:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    4734:	83 ff       	sbrs	r24, 3
    4736:	7e c0       	rjmp	.+252    	; 0x4834 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4738:	8c e5       	ldi	r24, 0x5C	; 92
    473a:	96 e0       	ldi	r25, 0x06	; 6
    473c:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    phex(mouse_report.buttons); print("|");
    4740:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <mouse_report>
    4744:	1f 92       	push	r1
    4746:	8f 93       	push	r24
    4748:	87 e5       	ldi	r24, 0x57	; 87
    474a:	96 e0       	ldi	r25, 0x06	; 6
    474c:	9f 93       	push	r25
    474e:	8f 93       	push	r24
    4750:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4754:	85 e5       	ldi	r24, 0x55	; 85
    4756:	96 e0       	ldi	r25, 0x06	; 6
    4758:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print_decs(mouse_report.x); print(" ");
    475c:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <mouse_report+0x1>
    4760:	28 2f       	mov	r18, r24
    4762:	08 2e       	mov	r0, r24
    4764:	00 0c       	add	r0, r0
    4766:	33 0b       	sbc	r19, r19
    4768:	3f 93       	push	r19
    476a:	8f 93       	push	r24
    476c:	82 e5       	ldi	r24, 0x52	; 82
    476e:	96 e0       	ldi	r25, 0x06	; 6
    4770:	9f 93       	push	r25
    4772:	8f 93       	push	r24
    4774:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4778:	80 e5       	ldi	r24, 0x50	; 80
    477a:	96 e0       	ldi	r25, 0x06	; 6
    477c:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print_decs(mouse_report.y); print(" ");
    4780:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <mouse_report+0x2>
    4784:	28 2f       	mov	r18, r24
    4786:	08 2e       	mov	r0, r24
    4788:	00 0c       	add	r0, r0
    478a:	33 0b       	sbc	r19, r19
    478c:	3f 93       	push	r19
    478e:	8f 93       	push	r24
    4790:	8d e4       	ldi	r24, 0x4D	; 77
    4792:	96 e0       	ldi	r25, 0x06	; 6
    4794:	9f 93       	push	r25
    4796:	8f 93       	push	r24
    4798:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    479c:	8b e4       	ldi	r24, 0x4B	; 75
    479e:	96 e0       	ldi	r25, 0x06	; 6
    47a0:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print_decs(mouse_report.v); print(" ");
    47a4:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <mouse_report+0x3>
    47a8:	28 2f       	mov	r18, r24
    47aa:	08 2e       	mov	r0, r24
    47ac:	00 0c       	add	r0, r0
    47ae:	33 0b       	sbc	r19, r19
    47b0:	3f 93       	push	r19
    47b2:	8f 93       	push	r24
    47b4:	88 e4       	ldi	r24, 0x48	; 72
    47b6:	96 e0       	ldi	r25, 0x06	; 6
    47b8:	9f 93       	push	r25
    47ba:	8f 93       	push	r24
    47bc:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    47c0:	86 e4       	ldi	r24, 0x46	; 70
    47c2:	96 e0       	ldi	r25, 0x06	; 6
    47c4:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print_decs(mouse_report.h); print("](");
    47c8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <mouse_report+0x4>
    47cc:	28 2f       	mov	r18, r24
    47ce:	08 2e       	mov	r0, r24
    47d0:	00 0c       	add	r0, r0
    47d2:	33 0b       	sbc	r19, r19
    47d4:	3f 93       	push	r19
    47d6:	8f 93       	push	r24
    47d8:	83 e4       	ldi	r24, 0x43	; 67
    47da:	96 e0       	ldi	r25, 0x06	; 6
    47dc:	9f 93       	push	r25
    47de:	8f 93       	push	r24
    47e0:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    47e4:	80 e4       	ldi	r24, 0x40	; 64
    47e6:	96 e0       	ldi	r25, 0x06	; 6
    47e8:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print_dec(mousekey_repeat); print("/");
    47ec:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <mousekey_repeat>
    47f0:	1f 92       	push	r1
    47f2:	8f 93       	push	r24
    47f4:	8d e3       	ldi	r24, 0x3D	; 61
    47f6:	96 e0       	ldi	r25, 0x06	; 6
    47f8:	9f 93       	push	r25
    47fa:	8f 93       	push	r24
    47fc:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4800:	8b e3       	ldi	r24, 0x3B	; 59
    4802:	96 e0       	ldi	r25, 0x06	; 6
    4804:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print_dec(mousekey_accel); print(")\n");
    4808:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <mousekey_accel>
    480c:	1f 92       	push	r1
    480e:	8f 93       	push	r24
    4810:	88 e3       	ldi	r24, 0x38	; 56
    4812:	96 e0       	ldi	r25, 0x06	; 6
    4814:	9f 93       	push	r25
    4816:	8f 93       	push	r24
    4818:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    481c:	85 e3       	ldi	r24, 0x35	; 53
    481e:	96 e0       	ldi	r25, 0x06	; 6
    4820:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4824:	8d b7       	in	r24, 0x3d	; 61
    4826:	9e b7       	in	r25, 0x3e	; 62
    4828:	4c 96       	adiw	r24, 0x1c	; 28
    482a:	0f b6       	in	r0, 0x3f	; 63
    482c:	f8 94       	cli
    482e:	9e bf       	out	0x3e, r25	; 62
    4830:	0f be       	out	0x3f, r0	; 63
    4832:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4834:	86 e2       	ldi	r24, 0x26	; 38
    4836:	92 e0       	ldi	r25, 0x02	; 2
    4838:	0e 94 af 13 	call	0x275e	; 0x275e <host_mouse_send>
    last_timer = timer_read();
    483c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <timer_read>
    4840:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <last_timer+0x1>
    4844:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <last_timer>
    4848:	08 95       	ret

0000484a <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    484a:	1f 93       	push	r17
    484c:	cf 93       	push	r28
    484e:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4850:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <last_timer>
    4854:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <last_timer+0x1>
    4858:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <timer_elapsed>
    485c:	ac 01       	movw	r20, r24
    485e:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <mousekey_repeat>
    4862:	99 23       	and	r25, r25
    4864:	21 f0       	breq	.+8      	; 0x486e <mousekey_task+0x24>
    4866:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <mk_interval>
    486a:	30 e0       	ldi	r19, 0x00	; 0
    486c:	06 c0       	rjmp	.+12     	; 0x487a <mousekey_task+0x30>
    486e:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <mk_delay>
    4872:	8a e0       	ldi	r24, 0x0A	; 10
    4874:	28 9f       	mul	r18, r24
    4876:	90 01       	movw	r18, r0
    4878:	11 24       	eor	r1, r1
    487a:	42 17       	cp	r20, r18
    487c:	53 07       	cpc	r21, r19
    487e:	08 f4       	brcc	.+2      	; 0x4882 <mousekey_task+0x38>
    4880:	85 c0       	rjmp	.+266    	; 0x498c <mousekey_task+0x142>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4882:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <mouse_report+0x1>
    4886:	c0 91 28 02 	lds	r28, 0x0228	; 0x800228 <mouse_report+0x2>
    488a:	d0 91 29 02 	lds	r29, 0x0229	; 0x800229 <mouse_report+0x3>
    488e:	10 91 2a 02 	lds	r17, 0x022A	; 0x80022a <mouse_report+0x4>
    4892:	81 11       	cpse	r24, r1
    4894:	07 c0       	rjmp	.+14     	; 0x48a4 <mousekey_task+0x5a>
    4896:	c1 11       	cpse	r28, r1
    4898:	75 c0       	rjmp	.+234    	; 0x4984 <mousekey_task+0x13a>
    489a:	d1 11       	cpse	r29, r1
    489c:	73 c0       	rjmp	.+230    	; 0x4984 <mousekey_task+0x13a>
    489e:	11 11       	cpse	r17, r1
    48a0:	71 c0       	rjmp	.+226    	; 0x4984 <mousekey_task+0x13a>
    48a2:	74 c0       	rjmp	.+232    	; 0x498c <mousekey_task+0x142>
        return;

    if (mousekey_repeat != UINT8_MAX)
    48a4:	9f 3f       	cpi	r25, 0xFF	; 255
    48a6:	19 f0       	breq	.+6      	; 0x48ae <mousekey_task+0x64>
        mousekey_repeat++;
    48a8:	9f 5f       	subi	r25, 0xFF	; 255
    48aa:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <mousekey_repeat>


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    48ae:	18 16       	cp	r1, r24
    48b0:	24 f4       	brge	.+8      	; 0x48ba <mousekey_task+0x70>
    48b2:	0e 94 29 22 	call	0x4452	; 0x4452 <move_unit>
    48b6:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    48ba:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <mouse_report+0x1>
    48be:	87 ff       	sbrs	r24, 7
    48c0:	05 c0       	rjmp	.+10     	; 0x48cc <mousekey_task+0x82>
    48c2:	0e 94 29 22 	call	0x4452	; 0x4452 <move_unit>
    48c6:	81 95       	neg	r24
    48c8:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    48cc:	1c 16       	cp	r1, r28
    48ce:	24 f4       	brge	.+8      	; 0x48d8 <mousekey_task+0x8e>
    48d0:	0e 94 29 22 	call	0x4452	; 0x4452 <move_unit>
    48d4:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    48d8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <mouse_report+0x2>
    48dc:	87 ff       	sbrs	r24, 7
    48de:	05 c0       	rjmp	.+10     	; 0x48ea <mousekey_task+0xa0>
    48e0:	0e 94 29 22 	call	0x4452	; 0x4452 <move_unit>
    48e4:	81 95       	neg	r24
    48e6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <mouse_report+0x2>

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    48ea:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <mouse_report+0x1>
    48ee:	66 23       	and	r22, r22
    48f0:	31 f1       	breq	.+76     	; 0x493e <mousekey_task+0xf4>
    48f2:	c0 91 28 02 	lds	r28, 0x0228	; 0x800228 <mouse_report+0x2>
    48f6:	cc 23       	and	r28, r28
    48f8:	11 f1       	breq	.+68     	; 0x493e <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    48fa:	06 2e       	mov	r0, r22
    48fc:	00 0c       	add	r0, r0
    48fe:	77 0b       	sbc	r23, r23
    4900:	88 0b       	sbc	r24, r24
    4902:	99 0b       	sbc	r25, r25
    4904:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__floatsisf>
    4908:	23 e3       	ldi	r18, 0x33	; 51
    490a:	33 e3       	ldi	r19, 0x33	; 51
    490c:	43 e3       	ldi	r20, 0x33	; 51
    490e:	5f e3       	ldi	r21, 0x3F	; 63
    4910:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__mulsf3>
    4914:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <__fixsfsi>
    4918:	60 93 27 02 	sts	0x0227, r22	; 0x800227 <mouse_report+0x1>
        mouse_report.y *= 0.7;
    491c:	6c 2f       	mov	r22, r28
    491e:	cc 0f       	add	r28, r28
    4920:	77 0b       	sbc	r23, r23
    4922:	88 0b       	sbc	r24, r24
    4924:	99 0b       	sbc	r25, r25
    4926:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__floatsisf>
    492a:	23 e3       	ldi	r18, 0x33	; 51
    492c:	33 e3       	ldi	r19, 0x33	; 51
    492e:	43 e3       	ldi	r20, 0x33	; 51
    4930:	5f e3       	ldi	r21, 0x3F	; 63
    4932:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__mulsf3>
    4936:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <__fixsfsi>
    493a:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <mouse_report+0x2>
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    493e:	1d 16       	cp	r1, r29
    4940:	24 f4       	brge	.+8      	; 0x494a <mousekey_task+0x100>
    4942:	0e 94 72 22 	call	0x44e4	; 0x44e4 <wheel_unit>
    4946:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    494a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <mouse_report+0x3>
    494e:	87 ff       	sbrs	r24, 7
    4950:	05 c0       	rjmp	.+10     	; 0x495c <mousekey_task+0x112>
    4952:	0e 94 72 22 	call	0x44e4	; 0x44e4 <wheel_unit>
    4956:	81 95       	neg	r24
    4958:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    495c:	11 16       	cp	r1, r17
    495e:	24 f4       	brge	.+8      	; 0x4968 <mousekey_task+0x11e>
    4960:	0e 94 72 22 	call	0x44e4	; 0x44e4 <wheel_unit>
    4964:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4968:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <mouse_report+0x4>
    496c:	87 ff       	sbrs	r24, 7
    496e:	05 c0       	rjmp	.+10     	; 0x497a <mousekey_task+0x130>
    4970:	0e 94 72 22 	call	0x44e4	; 0x44e4 <wheel_unit>
    4974:	81 95       	neg	r24
    4976:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <mouse_report+0x4>

    mousekey_send();
}
    497a:	df 91       	pop	r29
    497c:	cf 91       	pop	r28
    497e:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    4980:	0c 94 98 23 	jmp	0x4730	; 0x4730 <mousekey_send>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
    4984:	9f 3f       	cpi	r25, 0xFF	; 255
    4986:	09 f0       	breq	.+2      	; 0x498a <mousekey_task+0x140>
    4988:	8f cf       	rjmp	.-226    	; 0x48a8 <mousekey_task+0x5e>
    498a:	97 cf       	rjmp	.-210    	; 0x48ba <mousekey_task+0x70>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
}
    498c:	df 91       	pop	r29
    498e:	cf 91       	pop	r28
    4990:	1f 91       	pop	r17
    4992:	08 95       	ret

00004994 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4994:	e6 e2       	ldi	r30, 0x26	; 38
    4996:	f2 e0       	ldi	r31, 0x02	; 2
    4998:	85 e0       	ldi	r24, 0x05	; 5
    499a:	df 01       	movw	r26, r30
    499c:	1d 92       	st	X+, r1
    499e:	8a 95       	dec	r24
    49a0:	e9 f7       	brne	.-6      	; 0x499c <mousekey_clear+0x8>
    mousekey_repeat = 0;
    49a2:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <mousekey_repeat>
    mousekey_accel = 0;
    49a6:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <mousekey_accel>
    49aa:	08 95       	ret

000049ac <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    49ac:	8f e7       	ldi	r24, 0x7F	; 127
    49ae:	98 e0       	ldi	r25, 0x08	; 8
    49b0:	0e 94 67 07 	call	0xece	; 0xece <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    49b4:	1f 92       	push	r1
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	8f 93       	push	r24
    49ba:	1f 92       	push	r1
    49bc:	85 e0       	ldi	r24, 0x05	; 5
    49be:	8f 93       	push	r24
    49c0:	81 e3       	ldi	r24, 0x31	; 49
    49c2:	98 e0       	ldi	r25, 0x08	; 8
    49c4:	9f 93       	push	r25
    49c6:	8f 93       	push	r24
    49c8:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    49cc:	0f 90       	pop	r0
    49ce:	0f 90       	pop	r0
    49d0:	0f 90       	pop	r0
    49d2:	0f 90       	pop	r0
    49d4:	0f 90       	pop	r0
    49d6:	0f 90       	pop	r0
    49d8:	08 95       	ret

000049da <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    49da:	83 30       	cpi	r24, 0x03	; 3
    49dc:	e9 f1       	breq	.+122    	; 0x4a58 <mousekey_param_inc+0x7e>
    49de:	28 f4       	brcc	.+10     	; 0x49ea <mousekey_param_inc+0x10>
    49e0:	81 30       	cpi	r24, 0x01	; 1
    49e2:	61 f0       	breq	.+24     	; 0x49fc <mousekey_param_inc+0x22>
    49e4:	82 30       	cpi	r24, 0x02	; 2
    49e6:	09 f1       	breq	.+66     	; 0x4a2a <mousekey_param_inc+0x50>
    49e8:	08 95       	ret
    49ea:	85 30       	cpi	r24, 0x05	; 5
    49ec:	09 f4       	brne	.+2      	; 0x49f0 <mousekey_param_inc+0x16>
    49ee:	62 c0       	rjmp	.+196    	; 0x4ab4 <mousekey_param_inc+0xda>
    49f0:	08 f4       	brcc	.+2      	; 0x49f4 <mousekey_param_inc+0x1a>
    49f2:	49 c0       	rjmp	.+146    	; 0x4a86 <mousekey_param_inc+0xac>
    49f4:	86 30       	cpi	r24, 0x06	; 6
    49f6:	09 f4       	brne	.+2      	; 0x49fa <mousekey_param_inc+0x20>
    49f8:	74 c0       	rjmp	.+232    	; 0x4ae2 <mousekey_param_inc+0x108>
    49fa:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    49fc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_delay>
    4a00:	26 2f       	mov	r18, r22
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	28 0f       	add	r18, r24
    4a06:	31 1d       	adc	r19, r1
    4a08:	2f 3f       	cpi	r18, 0xFF	; 255
    4a0a:	31 05       	cpc	r19, r1
    4a0c:	24 f4       	brge	.+8      	; 0x4a16 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    4a0e:	68 0f       	add	r22, r24
    4a10:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <mk_delay>
    4a14:	03 c0       	rjmp	.+6      	; 0x4a1c <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4a16:	8f ef       	ldi	r24, 0xFF	; 255
    4a18:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4a1c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_delay>
    4a20:	1f 92       	push	r1
    4a22:	8f 93       	push	r24
    4a24:	8a e6       	ldi	r24, 0x6A	; 106
    4a26:	97 e0       	ldi	r25, 0x07	; 7
    4a28:	72 c0       	rjmp	.+228    	; 0x4b0e <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4a2a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_interval>
    4a2e:	26 2f       	mov	r18, r22
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	28 0f       	add	r18, r24
    4a34:	31 1d       	adc	r19, r1
    4a36:	2f 3f       	cpi	r18, 0xFF	; 255
    4a38:	31 05       	cpc	r19, r1
    4a3a:	24 f4       	brge	.+8      	; 0x4a44 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    4a3c:	68 0f       	add	r22, r24
    4a3e:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <mk_interval>
    4a42:	03 c0       	rjmp	.+6      	; 0x4a4a <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    4a44:	8f ef       	ldi	r24, 0xFF	; 255
    4a46:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4a4a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_interval>
    4a4e:	1f 92       	push	r1
    4a50:	8f 93       	push	r24
    4a52:	88 e5       	ldi	r24, 0x58	; 88
    4a54:	97 e0       	ldi	r25, 0x07	; 7
    4a56:	5b c0       	rjmp	.+182    	; 0x4b0e <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4a58:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_max_speed>
    4a5c:	26 2f       	mov	r18, r22
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	28 0f       	add	r18, r24
    4a62:	31 1d       	adc	r19, r1
    4a64:	2f 3f       	cpi	r18, 0xFF	; 255
    4a66:	31 05       	cpc	r19, r1
    4a68:	24 f4       	brge	.+8      	; 0x4a72 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    4a6a:	68 0f       	add	r22, r24
    4a6c:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <mk_max_speed>
    4a70:	03 c0       	rjmp	.+6      	; 0x4a78 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    4a72:	8f ef       	ldi	r24, 0xFF	; 255
    4a74:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4a78:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_max_speed>
    4a7c:	1f 92       	push	r1
    4a7e:	8f 93       	push	r24
    4a80:	85 e4       	ldi	r24, 0x45	; 69
    4a82:	97 e0       	ldi	r25, 0x07	; 7
    4a84:	44 c0       	rjmp	.+136    	; 0x4b0e <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4a86:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_time_to_max>
    4a8a:	26 2f       	mov	r18, r22
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	28 0f       	add	r18, r24
    4a90:	31 1d       	adc	r19, r1
    4a92:	2f 3f       	cpi	r18, 0xFF	; 255
    4a94:	31 05       	cpc	r19, r1
    4a96:	24 f4       	brge	.+8      	; 0x4aa0 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    4a98:	68 0f       	add	r22, r24
    4a9a:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <mk_time_to_max>
    4a9e:	03 c0       	rjmp	.+6      	; 0x4aa6 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    4aa0:	8f ef       	ldi	r24, 0xFF	; 255
    4aa2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4aa6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_time_to_max>
    4aaa:	1f 92       	push	r1
    4aac:	8f 93       	push	r24
    4aae:	80 e3       	ldi	r24, 0x30	; 48
    4ab0:	97 e0       	ldi	r25, 0x07	; 7
    4ab2:	2d c0       	rjmp	.+90     	; 0x4b0e <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4ab4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_wheel_max_speed>
    4ab8:	26 2f       	mov	r18, r22
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	28 0f       	add	r18, r24
    4abe:	31 1d       	adc	r19, r1
    4ac0:	2f 3f       	cpi	r18, 0xFF	; 255
    4ac2:	31 05       	cpc	r19, r1
    4ac4:	24 f4       	brge	.+8      	; 0x4ace <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4ac6:	68 0f       	add	r22, r24
    4ac8:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <mk_wheel_max_speed>
    4acc:	03 c0       	rjmp	.+6      	; 0x4ad4 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4ace:	8f ef       	ldi	r24, 0xFF	; 255
    4ad0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4ad4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_wheel_max_speed>
    4ad8:	1f 92       	push	r1
    4ada:	8f 93       	push	r24
    4adc:	87 e1       	ldi	r24, 0x17	; 23
    4ade:	97 e0       	ldi	r25, 0x07	; 7
    4ae0:	16 c0       	rjmp	.+44     	; 0x4b0e <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4ae2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_time_to_max>
    4ae6:	26 2f       	mov	r18, r22
    4ae8:	30 e0       	ldi	r19, 0x00	; 0
    4aea:	28 0f       	add	r18, r24
    4aec:	31 1d       	adc	r19, r1
    4aee:	2f 3f       	cpi	r18, 0xFF	; 255
    4af0:	31 05       	cpc	r19, r1
    4af2:	24 f4       	brge	.+8      	; 0x4afc <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4af4:	68 0f       	add	r22, r24
    4af6:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <mk_wheel_time_to_max>
    4afa:	03 c0       	rjmp	.+6      	; 0x4b02 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4afc:	8f ef       	ldi	r24, 0xFF	; 255
    4afe:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4b02:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_time_to_max>
    4b06:	1f 92       	push	r1
    4b08:	8f 93       	push	r24
    4b0a:	8c ef       	ldi	r24, 0xFC	; 252
    4b0c:	96 e0       	ldi	r25, 0x06	; 6
    4b0e:	9f 93       	push	r25
    4b10:	8f 93       	push	r24
    4b12:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
            break;
    4b16:	0f 90       	pop	r0
    4b18:	0f 90       	pop	r0
    4b1a:	0f 90       	pop	r0
    4b1c:	0f 90       	pop	r0
    4b1e:	08 95       	ret

00004b20 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4b20:	83 30       	cpi	r24, 0x03	; 3
    4b22:	81 f1       	breq	.+96     	; 0x4b84 <mousekey_param_dec+0x64>
    4b24:	28 f4       	brcc	.+10     	; 0x4b30 <mousekey_param_dec+0x10>
    4b26:	81 30       	cpi	r24, 0x01	; 1
    4b28:	59 f0       	breq	.+22     	; 0x4b40 <mousekey_param_dec+0x20>
    4b2a:	82 30       	cpi	r24, 0x02	; 2
    4b2c:	d1 f0       	breq	.+52     	; 0x4b62 <mousekey_param_dec+0x42>
    4b2e:	08 95       	ret
    4b30:	85 30       	cpi	r24, 0x05	; 5
    4b32:	09 f4       	brne	.+2      	; 0x4b36 <mousekey_param_dec+0x16>
    4b34:	49 c0       	rjmp	.+146    	; 0x4bc8 <mousekey_param_dec+0xa8>
    4b36:	b8 f1       	brcs	.+110    	; 0x4ba6 <mousekey_param_dec+0x86>
    4b38:	86 30       	cpi	r24, 0x06	; 6
    4b3a:	09 f4       	brne	.+2      	; 0x4b3e <mousekey_param_dec+0x1e>
    4b3c:	56 c0       	rjmp	.+172    	; 0x4bea <mousekey_param_dec+0xca>
    4b3e:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4b40:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_delay>
    4b44:	68 17       	cp	r22, r24
    4b46:	20 f4       	brcc	.+8      	; 0x4b50 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4b48:	86 1b       	sub	r24, r22
    4b4a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_delay>
    4b4e:	02 c0       	rjmp	.+4      	; 0x4b54 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4b50:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4b54:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_delay>
    4b58:	1f 92       	push	r1
    4b5a:	8f 93       	push	r24
    4b5c:	8d ee       	ldi	r24, 0xED	; 237
    4b5e:	96 e0       	ldi	r25, 0x06	; 6
    4b60:	54 c0       	rjmp	.+168    	; 0x4c0a <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4b62:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_interval>
    4b66:	68 17       	cp	r22, r24
    4b68:	20 f4       	brcc	.+8      	; 0x4b72 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4b6a:	86 1b       	sub	r24, r22
    4b6c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_interval>
    4b70:	02 c0       	rjmp	.+4      	; 0x4b76 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4b72:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4b76:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_interval>
    4b7a:	1f 92       	push	r1
    4b7c:	8f 93       	push	r24
    4b7e:	8b ed       	ldi	r24, 0xDB	; 219
    4b80:	96 e0       	ldi	r25, 0x06	; 6
    4b82:	43 c0       	rjmp	.+134    	; 0x4c0a <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4b84:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_max_speed>
    4b88:	68 17       	cp	r22, r24
    4b8a:	20 f4       	brcc	.+8      	; 0x4b94 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4b8c:	86 1b       	sub	r24, r22
    4b8e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_max_speed>
    4b92:	02 c0       	rjmp	.+4      	; 0x4b98 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4b94:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4b98:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_max_speed>
    4b9c:	1f 92       	push	r1
    4b9e:	8f 93       	push	r24
    4ba0:	88 ec       	ldi	r24, 0xC8	; 200
    4ba2:	96 e0       	ldi	r25, 0x06	; 6
    4ba4:	32 c0       	rjmp	.+100    	; 0x4c0a <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4ba6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_time_to_max>
    4baa:	68 17       	cp	r22, r24
    4bac:	20 f4       	brcc	.+8      	; 0x4bb6 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4bae:	86 1b       	sub	r24, r22
    4bb0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_time_to_max>
    4bb4:	02 c0       	rjmp	.+4      	; 0x4bba <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4bb6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4bba:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_time_to_max>
    4bbe:	1f 92       	push	r1
    4bc0:	8f 93       	push	r24
    4bc2:	83 eb       	ldi	r24, 0xB3	; 179
    4bc4:	96 e0       	ldi	r25, 0x06	; 6
    4bc6:	21 c0       	rjmp	.+66     	; 0x4c0a <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4bc8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_wheel_max_speed>
    4bcc:	68 17       	cp	r22, r24
    4bce:	20 f4       	brcc	.+8      	; 0x4bd8 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4bd0:	86 1b       	sub	r24, r22
    4bd2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_wheel_max_speed>
    4bd6:	02 c0       	rjmp	.+4      	; 0x4bdc <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4bd8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4bdc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_wheel_max_speed>
    4be0:	1f 92       	push	r1
    4be2:	8f 93       	push	r24
    4be4:	8a e9       	ldi	r24, 0x9A	; 154
    4be6:	96 e0       	ldi	r25, 0x06	; 6
    4be8:	10 c0       	rjmp	.+32     	; 0x4c0a <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4bea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_time_to_max>
    4bee:	68 17       	cp	r22, r24
    4bf0:	20 f4       	brcc	.+8      	; 0x4bfa <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4bf2:	86 1b       	sub	r24, r22
    4bf4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_time_to_max>
    4bf8:	02 c0       	rjmp	.+4      	; 0x4bfe <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4bfa:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4bfe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_time_to_max>
    4c02:	1f 92       	push	r1
    4c04:	8f 93       	push	r24
    4c06:	8f e7       	ldi	r24, 0x7F	; 127
    4c08:	96 e0       	ldi	r25, 0x06	; 6
    4c0a:	9f 93       	push	r25
    4c0c:	8f 93       	push	r24
    4c0e:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
            break;
    4c12:	0f 90       	pop	r0
    4c14:	0f 90       	pop	r0
    4c16:	0f 90       	pop	r0
    4c18:	0f 90       	pop	r0
    4c1a:	08 95       	ret

00004c1c <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4c1c:	cf 93       	push	r28
    4c1e:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4c20:	1f 92       	push	r1
    4c22:	8f 93       	push	r24
    4c24:	84 e8       	ldi	r24, 0x84	; 132
    4c26:	99 e0       	ldi	r25, 0x09	; 9
    4c28:	9f 93       	push	r25
    4c2a:	8f 93       	push	r24
    4c2c:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    default_layer_set(1UL<<layer);
    4c30:	81 e0       	ldi	r24, 0x01	; 1
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	a0 e0       	ldi	r26, 0x00	; 0
    4c36:	b0 e0       	ldi	r27, 0x00	; 0
    4c38:	bc 01       	movw	r22, r24
    4c3a:	cd 01       	movw	r24, r26
    4c3c:	04 c0       	rjmp	.+8      	; 0x4c46 <switch_default_layer+0x2a>
    4c3e:	66 0f       	add	r22, r22
    4c40:	77 1f       	adc	r23, r23
    4c42:	88 1f       	adc	r24, r24
    4c44:	99 1f       	adc	r25, r25
    4c46:	ca 95       	dec	r28
    4c48:	d2 f7       	brpl	.-12     	; 0x4c3e <switch_default_layer+0x22>
    4c4a:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <default_layer_set>
    clear_keyboard();
    4c4e:	0f 90       	pop	r0
    4c50:	0f 90       	pop	r0
    4c52:	0f 90       	pop	r0
    4c54:	0f 90       	pop	r0
}
    4c56:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4c58:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <clear_keyboard>

00004c5c <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4c5c:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    4c5e:	8d 31       	cpi	r24, 0x1D	; 29
    4c60:	09 f4       	brne	.+2      	; 0x4c64 <command_common+0x8>
    4c62:	65 c0       	rjmp	.+202    	; 0x4d2e <command_common+0xd2>
    4c64:	b0 f5       	brcc	.+108    	; 0x4cd2 <command_common+0x76>
    4c66:	8e 30       	cpi	r24, 0x0E	; 14
    4c68:	09 f4       	brne	.+2      	; 0x4c6c <command_common+0x10>
    4c6a:	cc c1       	rjmp	.+920    	; 0x5004 <command_common+0x3a8>
    4c6c:	00 f5       	brcc	.+64     	; 0x4cae <command_common+0x52>
    4c6e:	87 30       	cpi	r24, 0x07	; 7
    4c70:	09 f4       	brne	.+2      	; 0x4c74 <command_common+0x18>
    4c72:	9b c1       	rjmp	.+822    	; 0x4faa <command_common+0x34e>
    4c74:	a8 f4       	brcc	.+42     	; 0x4ca0 <command_common+0x44>
    4c76:	86 30       	cpi	r24, 0x06	; 6
    4c78:	09 f0       	breq	.+2      	; 0x4c7c <command_common+0x20>
    4c7a:	6d c2       	rjmp	.+1242   	; 0x5156 <command_common+0x4fa>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4c7c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4c80:	81 7f       	andi	r24, 0xF1	; 241
    4c82:	8e 7f       	andi	r24, 0xFE	; 254
    4c84:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <debug_config>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4c88:	89 e8       	ldi	r24, 0x89	; 137
    4c8a:	99 e0       	ldi	r25, 0x09	; 9
    4c8c:	0e 94 67 07 	call	0xece	; 0xece <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4c90:	85 ec       	ldi	r24, 0xC5	; 197
    4c92:	9d e0       	ldi	r25, 0x0D	; 13
    4c94:	0e 94 67 07 	call	0xece	; 0xece <xputs>
            command_state = CONSOLE;
    4c98:	81 e0       	ldi	r24, 0x01	; 1
    4c9a:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <command_state>
    4c9e:	80 c1       	rjmp	.+768    	; 0x4fa0 <command_common+0x344>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    4ca0:	88 30       	cpi	r24, 0x08	; 8
    4ca2:	09 f4       	brne	.+2      	; 0x4ca6 <command_common+0x4a>
    4ca4:	4f c0       	rjmp	.+158    	; 0x4d44 <command_common+0xe8>
    4ca6:	8b 30       	cpi	r24, 0x0B	; 11
    4ca8:	09 f4       	brne	.+2      	; 0x4cac <command_common+0x50>
    4caa:	7c c1       	rjmp	.+760    	; 0x4fa4 <command_common+0x348>
    4cac:	54 c2       	rjmp	.+1192   	; 0x5156 <command_common+0x4fa>
    4cae:	86 31       	cpi	r24, 0x16	; 22
    4cb0:	09 f4       	brne	.+2      	; 0x4cb4 <command_common+0x58>
    4cb2:	f0 c1       	rjmp	.+992    	; 0x5094 <command_common+0x438>
    4cb4:	38 f4       	brcc	.+14     	; 0x4cc4 <command_common+0x68>
    4cb6:	80 31       	cpi	r24, 0x10	; 16
    4cb8:	09 f4       	brne	.+2      	; 0x4cbc <command_common+0x60>
    4cba:	b8 c1       	rjmp	.+880    	; 0x502c <command_common+0x3d0>
    4cbc:	81 31       	cpi	r24, 0x11	; 17
    4cbe:	09 f4       	brne	.+2      	; 0x4cc2 <command_common+0x66>
    4cc0:	30 c2       	rjmp	.+1120   	; 0x5122 <command_common+0x4c6>
    4cc2:	49 c2       	rjmp	.+1170   	; 0x5156 <command_common+0x4fa>
    4cc4:	89 31       	cpi	r24, 0x19	; 25
    4cc6:	09 f4       	brne	.+2      	; 0x4cca <command_common+0x6e>
    4cc8:	ce c1       	rjmp	.+924    	; 0x5066 <command_common+0x40a>
    4cca:	8b 31       	cpi	r24, 0x1B	; 27
    4ccc:	09 f4       	brne	.+2      	; 0x4cd0 <command_common+0x74>
    4cce:	86 c1       	rjmp	.+780    	; 0x4fdc <command_common+0x380>
    4cd0:	42 c2       	rjmp	.+1156   	; 0x5156 <command_common+0x4fa>
    4cd2:	85 33       	cpi	r24, 0x35	; 53
    4cd4:	09 f4       	brne	.+2      	; 0x4cd8 <command_common+0x7c>
    4cd6:	37 c2       	rjmp	.+1134   	; 0x5146 <command_common+0x4ea>
    4cd8:	48 f4       	brcc	.+18     	; 0x4cec <command_common+0x90>
    4cda:	87 32       	cpi	r24, 0x27	; 39
    4cdc:	09 f4       	brne	.+2      	; 0x4ce0 <command_common+0x84>
    4cde:	33 c2       	rjmp	.+1126   	; 0x5146 <command_common+0x4ea>
    4ce0:	08 f4       	brcc	.+2      	; 0x4ce4 <command_common+0x88>
    4ce2:	33 c2       	rjmp	.+1126   	; 0x514a <command_common+0x4ee>
    4ce4:	89 32       	cpi	r24, 0x29	; 41
    4ce6:	09 f4       	brne	.+2      	; 0x4cea <command_common+0x8e>
    4ce8:	2e c2       	rjmp	.+1116   	; 0x5146 <command_common+0x4ea>
    4cea:	35 c2       	rjmp	.+1130   	; 0x5156 <command_common+0x4fa>
    4cec:	83 34       	cpi	r24, 0x43	; 67
    4cee:	38 f4       	brcc	.+14     	; 0x4cfe <command_common+0xa2>
    4cf0:	8a 33       	cpi	r24, 0x3A	; 58
    4cf2:	08 f0       	brcs	.+2      	; 0x4cf6 <command_common+0x9a>
    4cf4:	2c c2       	rjmp	.+1112   	; 0x514e <command_common+0x4f2>
    4cf6:	88 33       	cpi	r24, 0x38	; 56
    4cf8:	09 f4       	brne	.+2      	; 0x4cfc <command_common+0xa0>
    4cfa:	54 c1       	rjmp	.+680    	; 0x4fa4 <command_common+0x348>
    4cfc:	2c c2       	rjmp	.+1112   	; 0x5156 <command_common+0x4fa>
    4cfe:	83 34       	cpi	r24, 0x43	; 67
    4d00:	09 f4       	brne	.+2      	; 0x4d04 <command_common+0xa8>
    4d02:	21 c2       	rjmp	.+1090   	; 0x5146 <command_common+0x4ea>
    4d04:	88 34       	cpi	r24, 0x48	; 72
    4d06:	09 f0       	breq	.+2      	; 0x4d0a <command_common+0xae>
    4d08:	26 c2       	rjmp	.+1100   	; 0x5156 <command_common+0x4fa>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4d0a:	0e 94 bb 18 	call	0x3176	; 0x3176 <clear_keyboard>
            print("\n\nbootloader... ");
    4d0e:	84 eb       	ldi	r24, 0xB4	; 180
    4d10:	9d e0       	ldi	r25, 0x0D	; 13
    4d12:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4d16:	9f ef       	ldi	r25, 0xFF	; 255
    4d18:	23 ed       	ldi	r18, 0xD3	; 211
    4d1a:	80 e3       	ldi	r24, 0x30	; 48
    4d1c:	91 50       	subi	r25, 0x01	; 1
    4d1e:	20 40       	sbci	r18, 0x00	; 0
    4d20:	80 40       	sbci	r24, 0x00	; 0
    4d22:	e1 f7       	brne	.-8      	; 0x4d1c <command_common+0xc0>
    4d24:	00 c0       	rjmp	.+0      	; 0x4d26 <command_common+0xca>
    4d26:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    4d28:	0e 94 14 20 	call	0x4028	; 0x4028 <bootloader_jump>
    4d2c:	39 c1       	rjmp	.+626    	; 0x4fa0 <command_common+0x344>
    static host_driver_t *host_driver = 0;
    switch (code) {
#ifdef SLEEP_LED_ENABLE
        case KC_Z:
            // test breathing sleep LED
            print("Sleep LED test\n");
    4d2e:	84 ed       	ldi	r24, 0xD4	; 212
    4d30:	9d e0       	ldi	r25, 0x0D	; 13
    4d32:	0e 94 67 07 	call	0xece	; 0xece <xputs>
            sleep_led_toggle();
    4d36:	0e 94 2a 2a 	call	0x5454	; 0x5454 <sleep_led_toggle>
            led_set(host_keyboard_leds());
    4d3a:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <host_keyboard_leds>
    4d3e:	0e 94 9e 0b 	call	0x173c	; 0x173c <led_set>
    4d42:	2e c1       	rjmp	.+604    	; 0x4fa0 <command_common+0x344>
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4d44:	89 ec       	ldi	r24, 0xC9	; 201
    4d46:	9d e0       	ldi	r25, 0x0D	; 13
    4d48:	0e 94 67 07 	call	0xece	; 0xece <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4d4c:	8a e9       	ldi	r24, 0x9A	; 154
    4d4e:	9b e0       	ldi	r25, 0x0B	; 11
    4d50:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4d54:	0e 94 17 22 	call	0x442e	; 0x442e <eeconfig_read_default_layer>
    4d58:	1f 92       	push	r1
    4d5a:	8f 93       	push	r24
    4d5c:	87 e9       	ldi	r24, 0x97	; 151
    4d5e:	9b e0       	ldi	r25, 0x0B	; 11
    4d60:	9f 93       	push	r25
    4d62:	8f 93       	push	r24
    4d64:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4d68:	85 e9       	ldi	r24, 0x95	; 149
    4d6a:	9b e0       	ldi	r25, 0x0B	; 11
    4d6c:	0e 94 67 07 	call	0xece	; 0xece <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4d70:	0e 94 0e 22 	call	0x441c	; 0x441c <eeconfig_read_debug>
    4d74:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4d76:	82 e8       	ldi	r24, 0x82	; 130
    4d78:	9b e0       	ldi	r25, 0x0B	; 11
    4d7a:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4d7e:	1f 92       	push	r1
    4d80:	cf 93       	push	r28
    4d82:	8d e7       	ldi	r24, 0x7D	; 125
    4d84:	9b e0       	ldi	r25, 0x0B	; 11
    4d86:	9f 93       	push	r25
    4d88:	8f 93       	push	r24
    4d8a:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4d8e:	8b e7       	ldi	r24, 0x7B	; 123
    4d90:	9b e0       	ldi	r25, 0x0B	; 11
    4d92:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4d96:	81 e7       	ldi	r24, 0x71	; 113
    4d98:	9b e0       	ldi	r25, 0x0B	; 11
    4d9a:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4d9e:	8c 2f       	mov	r24, r28
    4da0:	81 70       	andi	r24, 0x01	; 1
    4da2:	1f 92       	push	r1
    4da4:	8f 93       	push	r24
    4da6:	8e e6       	ldi	r24, 0x6E	; 110
    4da8:	9b e0       	ldi	r25, 0x0B	; 11
    4daa:	9f 93       	push	r25
    4dac:	8f 93       	push	r24
    4dae:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4db2:	8c e6       	ldi	r24, 0x6C	; 108
    4db4:	9b e0       	ldi	r25, 0x0B	; 11
    4db6:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4dba:	82 e6       	ldi	r24, 0x62	; 98
    4dbc:	9b e0       	ldi	r25, 0x0B	; 11
    4dbe:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4dc2:	c1 fb       	bst	r28, 1
    4dc4:	88 27       	eor	r24, r24
    4dc6:	80 f9       	bld	r24, 0
    4dc8:	1f 92       	push	r1
    4dca:	8f 93       	push	r24
    4dcc:	8f e5       	ldi	r24, 0x5F	; 95
    4dce:	9b e0       	ldi	r25, 0x0B	; 11
    4dd0:	9f 93       	push	r25
    4dd2:	8f 93       	push	r24
    4dd4:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4dd8:	8d e5       	ldi	r24, 0x5D	; 93
    4dda:	9b e0       	ldi	r25, 0x0B	; 11
    4ddc:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4de0:	81 e5       	ldi	r24, 0x51	; 81
    4de2:	9b e0       	ldi	r25, 0x0B	; 11
    4de4:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4de8:	c2 fb       	bst	r28, 2
    4dea:	88 27       	eor	r24, r24
    4dec:	80 f9       	bld	r24, 0
    4dee:	1f 92       	push	r1
    4df0:	8f 93       	push	r24
    4df2:	8e e4       	ldi	r24, 0x4E	; 78
    4df4:	9b e0       	ldi	r25, 0x0B	; 11
    4df6:	9f 93       	push	r25
    4df8:	8f 93       	push	r24
    4dfa:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4dfe:	8c e4       	ldi	r24, 0x4C	; 76
    4e00:	9b e0       	ldi	r25, 0x0B	; 11
    4e02:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4e06:	83 e4       	ldi	r24, 0x43	; 67
    4e08:	9b e0       	ldi	r25, 0x0B	; 11
    4e0a:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4e0e:	c3 fb       	bst	r28, 3
    4e10:	cc 27       	eor	r28, r28
    4e12:	c0 f9       	bld	r28, 0
    4e14:	1f 92       	push	r1
    4e16:	cf 93       	push	r28
    4e18:	80 e4       	ldi	r24, 0x40	; 64
    4e1a:	9b e0       	ldi	r25, 0x0B	; 11
    4e1c:	9f 93       	push	r25
    4e1e:	8f 93       	push	r24
    4e20:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4e24:	8e e3       	ldi	r24, 0x3E	; 62
    4e26:	9b e0       	ldi	r25, 0x0B	; 11
    4e28:	0e 94 67 07 	call	0xece	; 0xece <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4e2c:	0e 94 20 22 	call	0x4440	; 0x4440 <eeconfig_read_keymap>
    4e30:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4e32:	8a e2       	ldi	r24, 0x2A	; 42
    4e34:	9b e0       	ldi	r25, 0x0B	; 11
    4e36:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4e3a:	1f 92       	push	r1
    4e3c:	cf 93       	push	r28
    4e3e:	85 e2       	ldi	r24, 0x25	; 37
    4e40:	9b e0       	ldi	r25, 0x0B	; 11
    4e42:	9f 93       	push	r25
    4e44:	8f 93       	push	r24
    4e46:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4e4a:	83 e2       	ldi	r24, 0x23	; 35
    4e4c:	9b e0       	ldi	r25, 0x0B	; 11
    4e4e:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4e52:	8a e0       	ldi	r24, 0x0A	; 10
    4e54:	9b e0       	ldi	r25, 0x0B	; 11
    4e56:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4e5a:	8c 2f       	mov	r24, r28
    4e5c:	81 70       	andi	r24, 0x01	; 1
    4e5e:	1f 92       	push	r1
    4e60:	8f 93       	push	r24
    4e62:	87 e0       	ldi	r24, 0x07	; 7
    4e64:	9b e0       	ldi	r25, 0x0B	; 11
    4e66:	9f 93       	push	r25
    4e68:	8f 93       	push	r24
    4e6a:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4e6e:	8d b7       	in	r24, 0x3d	; 61
    4e70:	9e b7       	in	r25, 0x3e	; 62
    4e72:	80 96       	adiw	r24, 0x20	; 32
    4e74:	0f b6       	in	r0, 0x3f	; 63
    4e76:	f8 94       	cli
    4e78:	9e bf       	out	0x3e, r25	; 62
    4e7a:	0f be       	out	0x3f, r0	; 63
    4e7c:	8d bf       	out	0x3d, r24	; 61
    4e7e:	85 e0       	ldi	r24, 0x05	; 5
    4e80:	9b e0       	ldi	r25, 0x0B	; 11
    4e82:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4e86:	8e ee       	ldi	r24, 0xEE	; 238
    4e88:	9a e0       	ldi	r25, 0x0A	; 10
    4e8a:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4e8e:	c1 fb       	bst	r28, 1
    4e90:	88 27       	eor	r24, r24
    4e92:	80 f9       	bld	r24, 0
    4e94:	1f 92       	push	r1
    4e96:	8f 93       	push	r24
    4e98:	8b ee       	ldi	r24, 0xEB	; 235
    4e9a:	9a e0       	ldi	r25, 0x0A	; 10
    4e9c:	9f 93       	push	r25
    4e9e:	8f 93       	push	r24
    4ea0:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4ea4:	89 ee       	ldi	r24, 0xE9	; 233
    4ea6:	9a e0       	ldi	r25, 0x0A	; 10
    4ea8:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4eac:	87 ed       	ldi	r24, 0xD7	; 215
    4eae:	9a e0       	ldi	r25, 0x0A	; 10
    4eb0:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4eb4:	c2 fb       	bst	r28, 2
    4eb6:	88 27       	eor	r24, r24
    4eb8:	80 f9       	bld	r24, 0
    4eba:	1f 92       	push	r1
    4ebc:	8f 93       	push	r24
    4ebe:	84 ed       	ldi	r24, 0xD4	; 212
    4ec0:	9a e0       	ldi	r25, 0x0A	; 10
    4ec2:	9f 93       	push	r25
    4ec4:	8f 93       	push	r24
    4ec6:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4eca:	82 ed       	ldi	r24, 0xD2	; 210
    4ecc:	9a e0       	ldi	r25, 0x0A	; 10
    4ece:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4ed2:	80 ec       	ldi	r24, 0xC0	; 192
    4ed4:	9a e0       	ldi	r25, 0x0A	; 10
    4ed6:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4eda:	c3 fb       	bst	r28, 3
    4edc:	88 27       	eor	r24, r24
    4ede:	80 f9       	bld	r24, 0
    4ee0:	1f 92       	push	r1
    4ee2:	8f 93       	push	r24
    4ee4:	8d eb       	ldi	r24, 0xBD	; 189
    4ee6:	9a e0       	ldi	r25, 0x0A	; 10
    4ee8:	9f 93       	push	r25
    4eea:	8f 93       	push	r24
    4eec:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4ef0:	8b eb       	ldi	r24, 0xBB	; 187
    4ef2:	9a e0       	ldi	r25, 0x0A	; 10
    4ef4:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4ef8:	81 eb       	ldi	r24, 0xB1	; 177
    4efa:	9a e0       	ldi	r25, 0x0A	; 10
    4efc:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4f00:	c4 fb       	bst	r28, 4
    4f02:	88 27       	eor	r24, r24
    4f04:	80 f9       	bld	r24, 0
    4f06:	1f 92       	push	r1
    4f08:	8f 93       	push	r24
    4f0a:	8e ea       	ldi	r24, 0xAE	; 174
    4f0c:	9a e0       	ldi	r25, 0x0A	; 10
    4f0e:	9f 93       	push	r25
    4f10:	8f 93       	push	r24
    4f12:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4f16:	8c ea       	ldi	r24, 0xAC	; 172
    4f18:	9a e0       	ldi	r25, 0x0A	; 10
    4f1a:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4f1e:	8a e9       	ldi	r24, 0x9A	; 154
    4f20:	9a e0       	ldi	r25, 0x0A	; 10
    4f22:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4f26:	c5 fb       	bst	r28, 5
    4f28:	88 27       	eor	r24, r24
    4f2a:	80 f9       	bld	r24, 0
    4f2c:	1f 92       	push	r1
    4f2e:	8f 93       	push	r24
    4f30:	87 e9       	ldi	r24, 0x97	; 151
    4f32:	9a e0       	ldi	r25, 0x0A	; 10
    4f34:	9f 93       	push	r25
    4f36:	8f 93       	push	r24
    4f38:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4f3c:	85 e9       	ldi	r24, 0x95	; 149
    4f3e:	9a e0       	ldi	r25, 0x0A	; 10
    4f40:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4f44:	89 e7       	ldi	r24, 0x79	; 121
    4f46:	9a e0       	ldi	r25, 0x0A	; 10
    4f48:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4f4c:	c6 fb       	bst	r28, 6
    4f4e:	88 27       	eor	r24, r24
    4f50:	80 f9       	bld	r24, 0
    4f52:	1f 92       	push	r1
    4f54:	8f 93       	push	r24
    4f56:	86 e7       	ldi	r24, 0x76	; 118
    4f58:	9a e0       	ldi	r25, 0x0A	; 10
    4f5a:	9f 93       	push	r25
    4f5c:	8f 93       	push	r24
    4f5e:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4f62:	84 e7       	ldi	r24, 0x74	; 116
    4f64:	9a e0       	ldi	r25, 0x0A	; 10
    4f66:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4f6a:	8c e6       	ldi	r24, 0x6C	; 108
    4f6c:	9a e0       	ldi	r25, 0x0A	; 10
    4f6e:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4f72:	c7 fb       	bst	r28, 7
    4f74:	cc 27       	eor	r28, r28
    4f76:	c0 f9       	bld	r28, 0
    4f78:	1f 92       	push	r1
    4f7a:	cf 93       	push	r28
    4f7c:	89 e6       	ldi	r24, 0x69	; 105
    4f7e:	9a e0       	ldi	r25, 0x0A	; 10
    4f80:	9f 93       	push	r25
    4f82:	8f 93       	push	r24
    4f84:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    4f88:	87 e6       	ldi	r24, 0x67	; 103
    4f8a:	9a e0       	ldi	r25, 0x0A	; 10
    4f8c:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    4f90:	8d b7       	in	r24, 0x3d	; 61
    4f92:	9e b7       	in	r25, 0x3e	; 62
    4f94:	4c 96       	adiw	r24, 0x1c	; 28
    4f96:	0f b6       	in	r0, 0x3f	; 63
    4f98:	f8 94       	cli
    4f9a:	9e bf       	out	0x3e, r25	; 62
    4f9c:	0f be       	out	0x3f, r0	; 63
    4f9e:	8d bf       	out	0x3d, r24	; 61
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4fa0:	c1 e0       	ldi	r28, 0x01	; 1
    4fa2:	de c0       	rjmp	.+444    	; 0x5160 <command_common+0x504>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4fa4:	80 eb       	ldi	r24, 0xB0	; 176
    4fa6:	99 e0       	ldi	r25, 0x09	; 9
    4fa8:	5b c0       	rjmp	.+182    	; 0x5060 <command_common+0x404>
            print("\n\nbootloader... ");
            _delay_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4faa:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    4fae:	c8 2f       	mov	r28, r24
    4fb0:	c1 70       	andi	r28, 0x01	; 1
    4fb2:	80 ff       	sbrs	r24, 0
    4fb4:	09 c0       	rjmp	.+18     	; 0x4fc8 <command_common+0x36c>
                print("\ndebug: off\n");
    4fb6:	87 ea       	ldi	r24, 0xA7	; 167
    4fb8:	9d e0       	ldi	r25, 0x0D	; 13
    4fba:	0e 94 67 07 	call	0xece	; 0xece <xputs>
                debug_matrix   = false;
    4fbe:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4fc2:	81 7f       	andi	r24, 0xF1	; 241
    4fc4:	8e 7f       	andi	r24, 0xFE	; 254
    4fc6:	47 c0       	rjmp	.+142    	; 0x5056 <command_common+0x3fa>
            } else {
                print("\ndebug: on\n");
    4fc8:	8b e9       	ldi	r24, 0x9B	; 155
    4fca:	9d e0       	ldi	r25, 0x0D	; 13
    4fcc:	0e 94 67 07 	call	0xece	; 0xece <xputs>
                debug_enable   = true;
    4fd0:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    4fd4:	81 60       	ori	r24, 0x01	; 1
    4fd6:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <debug_config>
    4fda:	e2 cf       	rjmp	.-60     	; 0x4fa0 <command_common+0x344>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4fdc:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <debug_config>
    4fe0:	91 fb       	bst	r25, 1
    4fe2:	cc 27       	eor	r28, r28
    4fe4:	c0 f9       	bld	r28, 0
    4fe6:	81 e0       	ldi	r24, 0x01	; 1
    4fe8:	c8 27       	eor	r28, r24
    4fea:	89 2f       	mov	r24, r25
    4fec:	c0 fb       	bst	r28, 0
    4fee:	81 f9       	bld	r24, 1
    4ff0:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <debug_config>
            if (debug_matrix) {
    4ff4:	cc 23       	and	r28, r28
    4ff6:	19 f0       	breq	.+6      	; 0x4ffe <command_common+0x3a2>
                print("\nmatrix: on\n");
    4ff8:	8e e8       	ldi	r24, 0x8E	; 142
    4ffa:	9d e0       	ldi	r25, 0x0D	; 13
    4ffc:	27 c0       	rjmp	.+78     	; 0x504c <command_common+0x3f0>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4ffe:	80 e8       	ldi	r24, 0x80	; 128
    5000:	9d e0       	ldi	r25, 0x0D	; 13
    5002:	2e c0       	rjmp	.+92     	; 0x5060 <command_common+0x404>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    5004:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <debug_config>
    5008:	92 fb       	bst	r25, 2
    500a:	cc 27       	eor	r28, r28
    500c:	c0 f9       	bld	r28, 0
    500e:	81 e0       	ldi	r24, 0x01	; 1
    5010:	c8 27       	eor	r28, r24
    5012:	89 2f       	mov	r24, r25
    5014:	c0 fb       	bst	r28, 0
    5016:	82 f9       	bld	r24, 2
    5018:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <debug_config>
            if (debug_keyboard) {
    501c:	cc 23       	and	r28, r28
    501e:	19 f0       	breq	.+6      	; 0x5026 <command_common+0x3ca>
                print("\nkeyboard: on\n");
    5020:	81 e7       	ldi	r24, 0x71	; 113
    5022:	9d e0       	ldi	r25, 0x0D	; 13
    5024:	13 c0       	rjmp	.+38     	; 0x504c <command_common+0x3f0>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    5026:	81 e6       	ldi	r24, 0x61	; 97
    5028:	9d e0       	ldi	r25, 0x0D	; 13
    502a:	1a c0       	rjmp	.+52     	; 0x5060 <command_common+0x404>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    502c:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <debug_config>
    5030:	93 fb       	bst	r25, 3
    5032:	cc 27       	eor	r28, r28
    5034:	c0 f9       	bld	r28, 0
    5036:	81 e0       	ldi	r24, 0x01	; 1
    5038:	c8 27       	eor	r28, r24
    503a:	89 2f       	mov	r24, r25
    503c:	c0 fb       	bst	r28, 0
    503e:	83 f9       	bld	r24, 3
    5040:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <debug_config>
            if (debug_mouse) {
    5044:	cc 23       	and	r28, r28
    5046:	51 f0       	breq	.+20     	; 0x505c <command_common+0x400>
                print("\nmouse: on\n");
    5048:	85 e5       	ldi	r24, 0x55	; 85
    504a:	9d e0       	ldi	r25, 0x0D	; 13
    504c:	0e 94 67 07 	call	0xece	; 0xece <xputs>
                debug_enable = true;
    5050:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <debug_config>
    5054:	81 60       	ori	r24, 0x01	; 1
    5056:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <debug_config>
    505a:	82 c0       	rjmp	.+260    	; 0x5160 <command_common+0x504>
            } else {
                print("\nmouse: off\n");
    505c:	88 e4       	ldi	r24, 0x48	; 72
    505e:	9d e0       	ldi	r25, 0x0D	; 13
    5060:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    5064:	9d cf       	rjmp	.-198    	; 0x4fa0 <command_common+0x344>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    5066:	89 e3       	ldi	r24, 0x39	; 57
    5068:	9d e0       	ldi	r25, 0x0D	; 13
    506a:	0e 94 67 07 	call	0xece	; 0xece <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    506e:	86 e1       	ldi	r24, 0x16	; 22
    5070:	9d e0       	ldi	r25, 0x0D	; 13
    5072:	0e 94 67 07 	call	0xece	; 0xece <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    5076:	81 ed       	ldi	r24, 0xD1	; 209
    5078:	9c e0       	ldi	r25, 0x0C	; 12
    507a:	0e 94 67 07 	call	0xece	; 0xece <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    507e:	8a ea       	ldi	r24, 0xAA	; 170
    5080:	9c e0       	ldi	r25, 0x0C	; 12
    5082:	0e 94 67 07 	call	0xece	; 0xece <xputs>
            /* build options */
            print("OPTIONS:"
    5086:	85 e6       	ldi	r24, 0x65	; 101
    5088:	9c e0       	ldi	r25, 0x0C	; 12
    508a:	0e 94 67 07 	call	0xece	; 0xece <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    508e:	8a e3       	ldi	r24, 0x3A	; 58
    5090:	9c e0       	ldi	r25, 0x0C	; 12
    5092:	e6 cf       	rjmp	.-52     	; 0x5060 <command_common+0x404>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_S:
            print("\n\t- Status -\n");
    5094:	8c e2       	ldi	r24, 0x2C	; 44
    5096:	9c e0       	ldi	r25, 0x0C	; 12
    5098:	0e 94 67 07 	call	0xece	; 0xece <xputs>
            print_val_hex8(host_keyboard_leds());
    509c:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <host_keyboard_leds>
    50a0:	1f 92       	push	r1
    50a2:	8f 93       	push	r24
    50a4:	82 e1       	ldi	r24, 0x12	; 18
    50a6:	9c e0       	ldi	r25, 0x0C	; 12
    50a8:	9f 93       	push	r25
    50aa:	8f 93       	push	r24
    50ac:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
            print_val_hex8(keyboard_protocol);
    50b0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_protocol>
    50b4:	1f 92       	push	r1
    50b6:	8f 93       	push	r24
    50b8:	8b ef       	ldi	r24, 0xFB	; 251
    50ba:	9b e0       	ldi	r25, 0x0B	; 11
    50bc:	9f 93       	push	r25
    50be:	8f 93       	push	r24
    50c0:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
            print_val_hex8(keyboard_idle);
    50c4:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <keyboard_idle>
    50c8:	1f 92       	push	r1
    50ca:	8f 93       	push	r24
    50cc:	88 ee       	ldi	r24, 0xE8	; 232
    50ce:	9b e0       	ldi	r25, 0x0B	; 11
    50d0:	9f 93       	push	r25
    50d2:	8f 93       	push	r24
    50d4:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    50d8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <keyboard_nkro>
    50dc:	1f 92       	push	r1
    50de:	8f 93       	push	r24
    50e0:	85 ed       	ldi	r24, 0xD5	; 213
    50e2:	9b e0       	ldi	r25, 0x0B	; 11
    50e4:	9f 93       	push	r25
    50e6:	8f 93       	push	r24
    50e8:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
#endif
            print_val_hex32(timer_count);
    50ec:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <timer_count>
    50f0:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <timer_count+0x1>
    50f4:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <timer_count+0x2>
    50f8:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <timer_count+0x3>
    50fc:	bf 93       	push	r27
    50fe:	af 93       	push	r26
    5100:	9f 93       	push	r25
    5102:	8f 93       	push	r24
    5104:	81 ec       	ldi	r24, 0xC1	; 193
    5106:	9b e0       	ldi	r25, 0x0B	; 11
    5108:	9f 93       	push	r25
    510a:	8f 93       	push	r24
    510c:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    5110:	8d b7       	in	r24, 0x3d	; 61
    5112:	9e b7       	in	r25, 0x3e	; 62
    5114:	46 96       	adiw	r24, 0x16	; 22
    5116:	0f b6       	in	r0, 0x3f	; 63
    5118:	f8 94       	cli
    511a:	9e bf       	out	0x3e, r25	; 62
    511c:	0f be       	out	0x3f, r0	; 63
    511e:	8d bf       	out	0x3d, r24	; 61
    5120:	3f cf       	rjmp	.-386    	; 0x4fa0 <command_common+0x344>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    5122:	0e 94 bb 18 	call	0x3176	; 0x3176 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    5126:	c0 91 0d 01 	lds	r28, 0x010D	; 0x80010d <keyboard_nkro>
    512a:	81 e0       	ldi	r24, 0x01	; 1
    512c:	c8 27       	eor	r28, r24
    512e:	c0 93 0d 01 	sts	0x010D, r28	; 0x80010d <keyboard_nkro>
            if (keyboard_nkro)
    5132:	cc 23       	and	r28, r28
    5134:	29 f0       	breq	.+10     	; 0x5140 <command_common+0x4e4>
                print("NKRO: on\n");
    5136:	87 eb       	ldi	r24, 0xB7	; 183
    5138:	9b e0       	ldi	r25, 0x0B	; 11
    513a:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    513e:	10 c0       	rjmp	.+32     	; 0x5160 <command_common+0x504>
            else
                print("NKRO: off\n");
    5140:	8c ea       	ldi	r24, 0xAC	; 172
    5142:	9b e0       	ldi	r25, 0x0B	; 11
    5144:	8d cf       	rjmp	.-230    	; 0x5060 <command_common+0x404>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    5146:	80 e0       	ldi	r24, 0x00	; 0
    5148:	03 c0       	rjmp	.+6      	; 0x5150 <command_common+0x4f4>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    514a:	8d 51       	subi	r24, 0x1D	; 29
    514c:	01 c0       	rjmp	.+2      	; 0x5150 <command_common+0x4f4>
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    514e:	89 53       	subi	r24, 0x39	; 57
    5150:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <switch_default_layer>
    5154:	25 cf       	rjmp	.-438    	; 0x4fa0 <command_common+0x344>
            break;
        default:
            print("?");
    5156:	8a ea       	ldi	r24, 0xAA	; 170
    5158:	9b e0       	ldi	r25, 0x0B	; 11
    515a:	0e 94 67 07 	call	0xece	; 0xece <xputs>
            return false;
    515e:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    5160:	8c 2f       	mov	r24, r28
    5162:	cf 91       	pop	r28
    5164:	08 95       	ret

00005166 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    5166:	80 e0       	ldi	r24, 0x00	; 0
    5168:	08 95       	ret

0000516a <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	08 95       	ret

0000516e <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    516e:	cf 93       	push	r28
    5170:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5172:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <command_state>
    5176:	81 30       	cpi	r24, 0x01	; 1
    5178:	71 f0       	breq	.+28     	; 0x5196 <command_proc+0x28>
    517a:	20 f0       	brcs	.+8      	; 0x5184 <command_proc+0x16>
    517c:	82 30       	cpi	r24, 0x02	; 2
    517e:	09 f4       	brne	.+2      	; 0x5182 <command_proc+0x14>
    5180:	4b c0       	rjmp	.+150    	; 0x5218 <command_proc+0xaa>
    5182:	42 c1       	rjmp	.+644    	; 0x5408 <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    5184:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <keyboard_report>
    5188:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <keyboard_report+0x1>
    518c:	80 81       	ld	r24, Z
    518e:	8d 30       	cpi	r24, 0x0D	; 13
    5190:	09 f0       	breq	.+2      	; 0x5194 <command_proc+0x26>
    5192:	3c c1       	rjmp	.+632    	; 0x540c <command_proc+0x29e>
    5194:	07 c0       	rjmp	.+14     	; 0x51a4 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    5196:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <keyboard_report>
    519a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <keyboard_report+0x1>
    519e:	80 81       	ld	r24, Z
    51a0:	8d 30       	cpi	r24, 0x0D	; 13
    51a2:	61 f4       	brne	.+24     	; 0x51bc <command_proc+0x4e>
                return (command_extra(code) || command_common(code));
    51a4:	8c 2f       	mov	r24, r28
    51a6:	0e 94 b3 28 	call	0x5166	; 0x5166 <command_extra>
    51aa:	81 11       	cpse	r24, r1
    51ac:	04 c0       	rjmp	.+8      	; 0x51b6 <command_proc+0x48>
    51ae:	8c 2f       	mov	r24, r28
    51b0:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <command_common>
    51b4:	2f c0       	rjmp	.+94     	; 0x5214 <command_proc+0xa6>
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	2c c0       	rjmp	.+88     	; 0x5214 <command_proc+0xa6>
            else
                return (command_console_extra(code) || command_console(code));
    51bc:	8c 2f       	mov	r24, r28
    51be:	0e 94 b5 28 	call	0x516a	; 0x516a <command_console_extra>
    51c2:	81 11       	cpse	r24, r1
    51c4:	26 c0       	rjmp	.+76     	; 0x5212 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    51c6:	c4 31       	cpi	r28, 0x14	; 20
    51c8:	e1 f0       	breq	.+56     	; 0x5202 <command_proc+0x94>
    51ca:	70 f4       	brcc	.+28     	; 0x51e8 <command_proc+0x7a>
    51cc:	cb 30       	cpi	r28, 0x0B	; 11
    51ce:	81 f0       	breq	.+32     	; 0x51f0 <command_proc+0x82>
    51d0:	c0 31       	cpi	r28, 0x10	; 16
    51d2:	d1 f4       	brne	.+52     	; 0x5208 <command_proc+0x9a>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    51d4:	0e 94 d6 24 	call	0x49ac	; 0x49ac <mousekey_console_help>
            print("M> ");
    51d8:	8c e7       	ldi	r24, 0x7C	; 124
    51da:	99 e0       	ldi	r25, 0x09	; 9
    51dc:	0e 94 67 07 	call	0xece	; 0xece <xputs>
            command_state = MOUSEKEY;
    51e0:	82 e0       	ldi	r24, 0x02	; 2
    51e2:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <command_state>
    51e6:	15 c0       	rjmp	.+42     	; 0x5212 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    51e8:	c9 32       	cpi	r28, 0x29	; 41
    51ea:	59 f0       	breq	.+22     	; 0x5202 <command_proc+0x94>
    51ec:	c8 33       	cpi	r28, 0x38	; 56
    51ee:	61 f4       	brne	.+24     	; 0x5208 <command_proc+0x9a>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    51f0:	89 e8       	ldi	r24, 0x89	; 137
    51f2:	99 e0       	ldi	r25, 0x09	; 9
    51f4:	0e 94 67 07 	call	0xece	; 0xece <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    51f8:	80 e8       	ldi	r24, 0x80	; 128
    51fa:	99 e0       	ldi	r25, 0x09	; 9
    51fc:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    5200:	08 c0       	rjmp	.+16     	; 0x5212 <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    5202:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <command_state>
    5206:	04 c1       	rjmp	.+520    	; 0x5410 <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    5208:	8a e7       	ldi	r24, 0x7A	; 122
    520a:	99 e0       	ldi	r25, 0x09	; 9
    520c:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    5210:	ff c0       	rjmp	.+510    	; 0x5410 <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	81 70       	andi	r24, 0x01	; 1
    5216:	fe c0       	rjmp	.+508    	; 0x5414 <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5218:	c4 32       	cpi	r28, 0x24	; 36
    521a:	28 f5       	brcc	.+74     	; 0x5266 <command_proc+0xf8>
    521c:	ce 31       	cpi	r28, 0x1E	; 30
    521e:	08 f0       	brcs	.+2      	; 0x5222 <command_proc+0xb4>
    5220:	c1 c0       	rjmp	.+386    	; 0x53a4 <command_proc+0x236>
    5222:	cb 30       	cpi	r28, 0x0B	; 11
    5224:	a1 f1       	breq	.+104    	; 0x528e <command_proc+0x120>
    5226:	d0 f4       	brcc	.+52     	; 0x525c <command_proc+0xee>
    5228:	c7 30       	cpi	r28, 0x07	; 7
    522a:	09 f0       	breq	.+2      	; 0x522e <command_proc+0xc0>
    522c:	d3 c0       	rjmp	.+422    	; 0x53d4 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    522e:	8e e1       	ldi	r24, 0x1E	; 30
    5230:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    5234:	82 e3       	ldi	r24, 0x32	; 50
    5236:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    523a:	85 e0       	ldi	r24, 0x05	; 5
    523c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5240:	8a e0       	ldi	r24, 0x0A	; 10
    5242:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5246:	88 e0       	ldi	r24, 0x08	; 8
    5248:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    524c:	88 e2       	ldi	r24, 0x28	; 40
    524e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_time_to_max>
            print("set default\n");
    5252:	80 e2       	ldi	r24, 0x20	; 32
    5254:	98 e0       	ldi	r25, 0x08	; 8
    5256:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    525a:	bf c0       	rjmp	.+382    	; 0x53da <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    525c:	c3 31       	cpi	r28, 0x13	; 19
    525e:	49 f1       	breq	.+82     	; 0x52b2 <command_proc+0x144>
    5260:	c4 31       	cpi	r28, 0x14	; 20
    5262:	c1 f0       	breq	.+48     	; 0x5294 <command_proc+0x126>
    5264:	b7 c0       	rjmp	.+366    	; 0x53d4 <command_proc+0x266>
    5266:	cb 34       	cpi	r28, 0x4B	; 75
    5268:	09 f4       	brne	.+2      	; 0x526c <command_proc+0xfe>
    526a:	a9 c0       	rjmp	.+338    	; 0x53be <command_proc+0x250>
    526c:	28 f4       	brcc	.+10     	; 0x5278 <command_proc+0x10a>
    526e:	c9 32       	cpi	r28, 0x29	; 41
    5270:	89 f0       	breq	.+34     	; 0x5294 <command_proc+0x126>
    5272:	c8 33       	cpi	r28, 0x38	; 56
    5274:	61 f0       	breq	.+24     	; 0x528e <command_proc+0x120>
    5276:	ae c0       	rjmp	.+348    	; 0x53d4 <command_proc+0x266>
    5278:	c1 35       	cpi	r28, 0x51	; 81
    527a:	09 f4       	brne	.+2      	; 0x527e <command_proc+0x110>
    527c:	9e c0       	rjmp	.+316    	; 0x53ba <command_proc+0x24c>
    527e:	c2 35       	cpi	r28, 0x52	; 82
    5280:	09 f4       	brne	.+2      	; 0x5284 <command_proc+0x116>
    5282:	99 c0       	rjmp	.+306    	; 0x53b6 <command_proc+0x248>
    5284:	ce 34       	cpi	r28, 0x4E	; 78
    5286:	09 f0       	breq	.+2      	; 0x528a <command_proc+0x11c>
    5288:	a5 c0       	rjmp	.+330    	; 0x53d4 <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    528a:	6a e0       	ldi	r22, 0x0A	; 10
    528c:	9e c0       	rjmp	.+316    	; 0x53ca <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    528e:	0e 94 d6 24 	call	0x49ac	; 0x49ac <mousekey_console_help>
    5292:	a3 c0       	rjmp	.+326    	; 0x53da <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    5294:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <mousekey_param>
    5298:	88 23       	and	r24, r24
    529a:	19 f0       	breq	.+6      	; 0x52a2 <command_proc+0x134>
                mousekey_param = 0;
    529c:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <mousekey_param>
    52a0:	9c c0       	rjmp	.+312    	; 0x53da <command_proc+0x26c>
            } else {
                print("C> ");
    52a2:	8d e2       	ldi	r24, 0x2D	; 45
    52a4:	98 e0       	ldi	r25, 0x08	; 8
    52a6:	0e 94 67 07 	call	0xece	; 0xece <xputs>
                command_state = CONSOLE;
    52aa:	81 e0       	ldi	r24, 0x01	; 1
    52ac:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <command_state>
    52b0:	b1 c0       	rjmp	.+354    	; 0x5414 <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    52b2:	87 e0       	ldi	r24, 0x07	; 7
    52b4:	98 e0       	ldi	r25, 0x08	; 8
    52b6:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    52ba:	85 ef       	ldi	r24, 0xF5	; 245
    52bc:	97 e0       	ldi	r25, 0x07	; 7
    52be:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    52c2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_delay>
    52c6:	1f 92       	push	r1
    52c8:	8f 93       	push	r24
    52ca:	82 ef       	ldi	r24, 0xF2	; 242
    52cc:	97 e0       	ldi	r25, 0x07	; 7
    52ce:	9f 93       	push	r25
    52d0:	8f 93       	push	r24
    52d2:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    52d6:	80 ef       	ldi	r24, 0xF0	; 240
    52d8:	97 e0       	ldi	r25, 0x07	; 7
    52da:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    52de:	8e ed       	ldi	r24, 0xDE	; 222
    52e0:	97 e0       	ldi	r25, 0x07	; 7
    52e2:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    52e6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_interval>
    52ea:	1f 92       	push	r1
    52ec:	8f 93       	push	r24
    52ee:	8b ed       	ldi	r24, 0xDB	; 219
    52f0:	97 e0       	ldi	r25, 0x07	; 7
    52f2:	9f 93       	push	r25
    52f4:	8f 93       	push	r24
    52f6:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    52fa:	89 ed       	ldi	r24, 0xD9	; 217
    52fc:	97 e0       	ldi	r25, 0x07	; 7
    52fe:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    5302:	8a ec       	ldi	r24, 0xCA	; 202
    5304:	97 e0       	ldi	r25, 0x07	; 7
    5306:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    530a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_max_speed>
    530e:	1f 92       	push	r1
    5310:	8f 93       	push	r24
    5312:	87 ec       	ldi	r24, 0xC7	; 199
    5314:	97 e0       	ldi	r25, 0x07	; 7
    5316:	9f 93       	push	r25
    5318:	8f 93       	push	r24
    531a:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    531e:	85 ec       	ldi	r24, 0xC5	; 197
    5320:	97 e0       	ldi	r25, 0x07	; 7
    5322:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    5326:	84 eb       	ldi	r24, 0xB4	; 180
    5328:	97 e0       	ldi	r25, 0x07	; 7
    532a:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    532e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_time_to_max>
    5332:	1f 92       	push	r1
    5334:	8f 93       	push	r24
    5336:	81 eb       	ldi	r24, 0xB1	; 177
    5338:	97 e0       	ldi	r25, 0x07	; 7
    533a:	9f 93       	push	r25
    533c:	8f 93       	push	r24
    533e:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    5342:	8f ea       	ldi	r24, 0xAF	; 175
    5344:	97 e0       	ldi	r25, 0x07	; 7
    5346:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    534a:	8a e9       	ldi	r24, 0x9A	; 154
    534c:	97 e0       	ldi	r25, 0x07	; 7
    534e:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    5352:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_wheel_max_speed>
    5356:	1f 92       	push	r1
    5358:	8f 93       	push	r24
    535a:	87 e9       	ldi	r24, 0x97	; 151
    535c:	97 e0       	ldi	r25, 0x07	; 7
    535e:	9f 93       	push	r25
    5360:	8f 93       	push	r24
    5362:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    5366:	85 e9       	ldi	r24, 0x95	; 149
    5368:	97 e0       	ldi	r25, 0x07	; 7
    536a:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    536e:	8e e7       	ldi	r24, 0x7E	; 126
    5370:	97 e0       	ldi	r25, 0x07	; 7
    5372:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    5376:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_time_to_max>
    537a:	1f 92       	push	r1
    537c:	8f 93       	push	r24
    537e:	8b e7       	ldi	r24, 0x7B	; 123
    5380:	97 e0       	ldi	r25, 0x07	; 7
    5382:	9f 93       	push	r25
    5384:	8f 93       	push	r24
    5386:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    538a:	89 e7       	ldi	r24, 0x79	; 121
    538c:	97 e0       	ldi	r25, 0x07	; 7
    538e:	0e 94 67 07 	call	0xece	; 0xece <xputs>
    5392:	8d b7       	in	r24, 0x3d	; 61
    5394:	9e b7       	in	r25, 0x3e	; 62
    5396:	48 96       	adiw	r24, 0x18	; 24
    5398:	0f b6       	in	r0, 0x3f	; 63
    539a:	f8 94       	cli
    539c:	9e bf       	out	0x3e, r25	; 62
    539e:	0f be       	out	0x3f, r0	; 63
    53a0:	8d bf       	out	0x3d, r24	; 61
    53a2:	1b c0       	rjmp	.+54     	; 0x53da <command_proc+0x26c>
    53a4:	ce 51       	subi	r28, 0x1E	; 30
    53a6:	ec 2f       	mov	r30, r28
    53a8:	f0 e0       	ldi	r31, 0x00	; 0
    53aa:	e3 5c       	subi	r30, 0xC3	; 195
    53ac:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    53ae:	80 81       	ld	r24, Z
    53b0:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <mousekey_param>
    53b4:	12 c0       	rjmp	.+36     	; 0x53da <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    53b6:	61 e0       	ldi	r22, 0x01	; 1
    53b8:	03 c0       	rjmp	.+6      	; 0x53c0 <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    53ba:	61 e0       	ldi	r22, 0x01	; 1
    53bc:	06 c0       	rjmp	.+12     	; 0x53ca <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    53be:	6a e0       	ldi	r22, 0x0A	; 10
    53c0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <mousekey_param>
    53c4:	0e 94 ed 24 	call	0x49da	; 0x49da <mousekey_param_inc>
    53c8:	08 c0       	rjmp	.+16     	; 0x53da <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    53ca:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <mousekey_param>
    53ce:	0e 94 90 25 	call	0x4b20	; 0x4b20 <mousekey_param_dec>
    53d2:	03 c0       	rjmp	.+6      	; 0x53da <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    53d4:	8e e1       	ldi	r24, 0x1E	; 30
    53d6:	98 e0       	ldi	r25, 0x08	; 8
    53d8:	13 c0       	rjmp	.+38     	; 0x5400 <command_proc+0x292>
            return false;
    }
    if (mousekey_param)
    53da:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <mousekey_param>
    53de:	88 23       	and	r24, r24
    53e0:	69 f0       	breq	.+26     	; 0x53fc <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    53e2:	1f 92       	push	r1
    53e4:	8f 93       	push	r24
    53e6:	88 e1       	ldi	r24, 0x18	; 24
    53e8:	98 e0       	ldi	r25, 0x08	; 8
    53ea:	9f 93       	push	r25
    53ec:	8f 93       	push	r24
    53ee:	0e 94 00 08 	call	0x1000	; 0x1000 <__xprintf>
    53f2:	0f 90       	pop	r0
    53f4:	0f 90       	pop	r0
    53f6:	0f 90       	pop	r0
    53f8:	0f 90       	pop	r0
    53fa:	04 c0       	rjmp	.+8      	; 0x5404 <command_proc+0x296>
    else
        print("M>" );
    53fc:	85 e1       	ldi	r24, 0x15	; 21
    53fe:	98 e0       	ldi	r25, 0x08	; 8
    5400:	0e 94 67 07 	call	0xece	; 0xece <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    5404:	81 e0       	ldi	r24, 0x01	; 1
    5406:	06 c0       	rjmp	.+12     	; 0x5414 <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5408:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <command_state>
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	02 c0       	rjmp	.+4      	; 0x5414 <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5410:	80 e0       	ldi	r24, 0x00	; 0
    5412:	00 cf       	rjmp	.-512    	; 0x5214 <command_proc+0xa6>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    5414:	cf 91       	pop	r28
    5416:	08 95       	ret

00005418 <sleep_led_init>:

void sleep_led_init(void)
{
    /* Timer1 setup */
    /* CTC mode */
    TCCR1B |= _BV(WGM12);
    5418:	e1 e8       	ldi	r30, 0x81	; 129
    541a:	f0 e0       	ldi	r31, 0x00	; 0
    541c:	80 81       	ld	r24, Z
    541e:	88 60       	ori	r24, 0x08	; 8
    5420:	80 83       	st	Z, r24
    /* Clock selelct: clk/1 */
    TCCR1B |= _BV(CS10);
    5422:	80 81       	ld	r24, Z
    5424:	81 60       	ori	r24, 0x01	; 1
    5426:	80 83       	st	Z, r24
    /* Set TOP value */
    uint8_t sreg = SREG;
    5428:	8f b7       	in	r24, 0x3f	; 63
    cli();
    542a:	f8 94       	cli
    OCR1AH = (SLEEP_LED_TIMER_TOP>>8)&0xff;
    542c:	93 e0       	ldi	r25, 0x03	; 3
    542e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    OCR1AL = SLEEP_LED_TIMER_TOP&0xff;
    5432:	90 ed       	ldi	r25, 0xD0	; 208
    5434:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    SREG = sreg;
    5438:	8f bf       	out	0x3f, r24	; 63
    543a:	08 95       	ret

0000543c <sleep_led_enable>:
}

void sleep_led_enable(void)
{
    /* Enable Compare Match Interrupt */
    TIMSK1 |= _BV(OCIE1A);
    543c:	ef e6       	ldi	r30, 0x6F	; 111
    543e:	f0 e0       	ldi	r31, 0x00	; 0
    5440:	80 81       	ld	r24, Z
    5442:	82 60       	ori	r24, 0x02	; 2
    5444:	80 83       	st	Z, r24
    5446:	08 95       	ret

00005448 <sleep_led_disable>:
}

void sleep_led_disable(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 &= ~_BV(OCIE1A);
    5448:	ef e6       	ldi	r30, 0x6F	; 111
    544a:	f0 e0       	ldi	r31, 0x00	; 0
    544c:	80 81       	ld	r24, Z
    544e:	8d 7f       	andi	r24, 0xFD	; 253
    5450:	80 83       	st	Z, r24
    5452:	08 95       	ret

00005454 <sleep_led_toggle>:
}

void sleep_led_toggle(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 ^= _BV(OCIE1A);
    5454:	ef e6       	ldi	r30, 0x6F	; 111
    5456:	f0 e0       	ldi	r31, 0x00	; 0
    5458:	90 81       	ld	r25, Z
    545a:	82 e0       	ldi	r24, 0x02	; 2
    545c:	89 27       	eor	r24, r25
    545e:	80 83       	st	Z, r24
    5460:	08 95       	ret

00005462 <__vector_17>:
255, 252, 245, 233, 218, 199, 179, 157, 135, 113, 93, 74, 58, 44, 32, 23,
15, 10, 6, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

ISR(TIMER1_COMPA_vect)
{
    5462:	1f 92       	push	r1
    5464:	0f 92       	push	r0
    5466:	0f b6       	in	r0, 0x3f	; 63
    5468:	0f 92       	push	r0
    546a:	11 24       	eor	r1, r1
    546c:	2f 93       	push	r18
    546e:	3f 93       	push	r19
    5470:	4f 93       	push	r20
    5472:	5f 93       	push	r21
    5474:	6f 93       	push	r22
    5476:	7f 93       	push	r23
    5478:	8f 93       	push	r24
    547a:	9f 93       	push	r25
    547c:	af 93       	push	r26
    547e:	bf 93       	push	r27
    5480:	ef 93       	push	r30
    5482:	ff 93       	push	r31
            uint8_t duration:2;
            uint8_t index:6;
        } pwm;
    } timer = { .row = 0 };

    timer.row++;
    5484:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <timer.1678>
    5488:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <timer.1678+0x1>
    548c:	01 96       	adiw	r24, 0x01	; 1
    548e:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <timer.1678+0x1>
    5492:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <timer.1678>
    
    // LED on
    if (timer.pwm.count == 0) {
    5496:	81 11       	cpse	r24, r1
    5498:	03 c0       	rjmp	.+6      	; 0x54a0 <__vector_17+0x3e>
        led_set(1<<USB_LED_CAPS_LOCK);
    549a:	82 e0       	ldi	r24, 0x02	; 2
    549c:	0e 94 9e 0b 	call	0x173c	; 0x173c <led_set>
    }
    // LED off
    if (timer.pwm.count == pgm_read_byte(&breathing_table[timer.pwm.index])) {
    54a0:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <timer.1678+0x1>
    54a4:	e6 95       	lsr	r30
    54a6:	e6 95       	lsr	r30
    54a8:	f0 e0       	ldi	r31, 0x00	; 0
    54aa:	ec 51       	subi	r30, 0x1C	; 28
    54ac:	f2 4f       	sbci	r31, 0xF2	; 242
    54ae:	e4 91       	lpm	r30, Z
    54b0:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <timer.1678>
    54b4:	8e 13       	cpse	r24, r30
    54b6:	03 c0       	rjmp	.+6      	; 0x54be <__vector_17+0x5c>
        led_set(0);
    54b8:	80 e0       	ldi	r24, 0x00	; 0
    54ba:	0e 94 9e 0b 	call	0x173c	; 0x173c <led_set>
    }
}
    54be:	ff 91       	pop	r31
    54c0:	ef 91       	pop	r30
    54c2:	bf 91       	pop	r27
    54c4:	af 91       	pop	r26
    54c6:	9f 91       	pop	r25
    54c8:	8f 91       	pop	r24
    54ca:	7f 91       	pop	r23
    54cc:	6f 91       	pop	r22
    54ce:	5f 91       	pop	r21
    54d0:	4f 91       	pop	r20
    54d2:	3f 91       	pop	r19
    54d4:	2f 91       	pop	r18
    54d6:	0f 90       	pop	r0
    54d8:	0f be       	out	0x3f, r0	; 63
    54da:	0f 90       	pop	r0
    54dc:	1f 90       	pop	r1
    54de:	18 95       	reti

000054e0 <__fixsfsi>:
    54e0:	0e 94 77 2a 	call	0x54ee	; 0x54ee <__fixunssfsi>
    54e4:	68 94       	set
    54e6:	b1 11       	cpse	r27, r1
    54e8:	0c 94 06 2b 	jmp	0x560c	; 0x560c <__fp_szero>
    54ec:	08 95       	ret

000054ee <__fixunssfsi>:
    54ee:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <__fp_splitA>
    54f2:	88 f0       	brcs	.+34     	; 0x5516 <__fixunssfsi+0x28>
    54f4:	9f 57       	subi	r25, 0x7F	; 127
    54f6:	98 f0       	brcs	.+38     	; 0x551e <__fixunssfsi+0x30>
    54f8:	b9 2f       	mov	r27, r25
    54fa:	99 27       	eor	r25, r25
    54fc:	b7 51       	subi	r27, 0x17	; 23
    54fe:	b0 f0       	brcs	.+44     	; 0x552c <__fixunssfsi+0x3e>
    5500:	e1 f0       	breq	.+56     	; 0x553a <__fixunssfsi+0x4c>
    5502:	66 0f       	add	r22, r22
    5504:	77 1f       	adc	r23, r23
    5506:	88 1f       	adc	r24, r24
    5508:	99 1f       	adc	r25, r25
    550a:	1a f0       	brmi	.+6      	; 0x5512 <__fixunssfsi+0x24>
    550c:	ba 95       	dec	r27
    550e:	c9 f7       	brne	.-14     	; 0x5502 <__fixunssfsi+0x14>
    5510:	14 c0       	rjmp	.+40     	; 0x553a <__fixunssfsi+0x4c>
    5512:	b1 30       	cpi	r27, 0x01	; 1
    5514:	91 f0       	breq	.+36     	; 0x553a <__fixunssfsi+0x4c>
    5516:	0e 94 05 2b 	call	0x560a	; 0x560a <__fp_zero>
    551a:	b1 e0       	ldi	r27, 0x01	; 1
    551c:	08 95       	ret
    551e:	0c 94 05 2b 	jmp	0x560a	; 0x560a <__fp_zero>
    5522:	67 2f       	mov	r22, r23
    5524:	78 2f       	mov	r23, r24
    5526:	88 27       	eor	r24, r24
    5528:	b8 5f       	subi	r27, 0xF8	; 248
    552a:	39 f0       	breq	.+14     	; 0x553a <__fixunssfsi+0x4c>
    552c:	b9 3f       	cpi	r27, 0xF9	; 249
    552e:	cc f3       	brlt	.-14     	; 0x5522 <__fixunssfsi+0x34>
    5530:	86 95       	lsr	r24
    5532:	77 95       	ror	r23
    5534:	67 95       	ror	r22
    5536:	b3 95       	inc	r27
    5538:	d9 f7       	brne	.-10     	; 0x5530 <__fixunssfsi+0x42>
    553a:	3e f4       	brtc	.+14     	; 0x554a <__fixunssfsi+0x5c>
    553c:	90 95       	com	r25
    553e:	80 95       	com	r24
    5540:	70 95       	com	r23
    5542:	61 95       	neg	r22
    5544:	7f 4f       	sbci	r23, 0xFF	; 255
    5546:	8f 4f       	sbci	r24, 0xFF	; 255
    5548:	9f 4f       	sbci	r25, 0xFF	; 255
    554a:	08 95       	ret

0000554c <__floatunsisf>:
    554c:	e8 94       	clt
    554e:	09 c0       	rjmp	.+18     	; 0x5562 <__floatsisf+0x12>

00005550 <__floatsisf>:
    5550:	97 fb       	bst	r25, 7
    5552:	3e f4       	brtc	.+14     	; 0x5562 <__floatsisf+0x12>
    5554:	90 95       	com	r25
    5556:	80 95       	com	r24
    5558:	70 95       	com	r23
    555a:	61 95       	neg	r22
    555c:	7f 4f       	sbci	r23, 0xFF	; 255
    555e:	8f 4f       	sbci	r24, 0xFF	; 255
    5560:	9f 4f       	sbci	r25, 0xFF	; 255
    5562:	99 23       	and	r25, r25
    5564:	a9 f0       	breq	.+42     	; 0x5590 <__floatsisf+0x40>
    5566:	f9 2f       	mov	r31, r25
    5568:	96 e9       	ldi	r25, 0x96	; 150
    556a:	bb 27       	eor	r27, r27
    556c:	93 95       	inc	r25
    556e:	f6 95       	lsr	r31
    5570:	87 95       	ror	r24
    5572:	77 95       	ror	r23
    5574:	67 95       	ror	r22
    5576:	b7 95       	ror	r27
    5578:	f1 11       	cpse	r31, r1
    557a:	f8 cf       	rjmp	.-16     	; 0x556c <__floatsisf+0x1c>
    557c:	fa f4       	brpl	.+62     	; 0x55bc <__floatsisf+0x6c>
    557e:	bb 0f       	add	r27, r27
    5580:	11 f4       	brne	.+4      	; 0x5586 <__floatsisf+0x36>
    5582:	60 ff       	sbrs	r22, 0
    5584:	1b c0       	rjmp	.+54     	; 0x55bc <__floatsisf+0x6c>
    5586:	6f 5f       	subi	r22, 0xFF	; 255
    5588:	7f 4f       	sbci	r23, 0xFF	; 255
    558a:	8f 4f       	sbci	r24, 0xFF	; 255
    558c:	9f 4f       	sbci	r25, 0xFF	; 255
    558e:	16 c0       	rjmp	.+44     	; 0x55bc <__floatsisf+0x6c>
    5590:	88 23       	and	r24, r24
    5592:	11 f0       	breq	.+4      	; 0x5598 <__floatsisf+0x48>
    5594:	96 e9       	ldi	r25, 0x96	; 150
    5596:	11 c0       	rjmp	.+34     	; 0x55ba <__floatsisf+0x6a>
    5598:	77 23       	and	r23, r23
    559a:	21 f0       	breq	.+8      	; 0x55a4 <__floatsisf+0x54>
    559c:	9e e8       	ldi	r25, 0x8E	; 142
    559e:	87 2f       	mov	r24, r23
    55a0:	76 2f       	mov	r23, r22
    55a2:	05 c0       	rjmp	.+10     	; 0x55ae <__floatsisf+0x5e>
    55a4:	66 23       	and	r22, r22
    55a6:	71 f0       	breq	.+28     	; 0x55c4 <__floatsisf+0x74>
    55a8:	96 e8       	ldi	r25, 0x86	; 134
    55aa:	86 2f       	mov	r24, r22
    55ac:	70 e0       	ldi	r23, 0x00	; 0
    55ae:	60 e0       	ldi	r22, 0x00	; 0
    55b0:	2a f0       	brmi	.+10     	; 0x55bc <__floatsisf+0x6c>
    55b2:	9a 95       	dec	r25
    55b4:	66 0f       	add	r22, r22
    55b6:	77 1f       	adc	r23, r23
    55b8:	88 1f       	adc	r24, r24
    55ba:	da f7       	brpl	.-10     	; 0x55b2 <__floatsisf+0x62>
    55bc:	88 0f       	add	r24, r24
    55be:	96 95       	lsr	r25
    55c0:	87 95       	ror	r24
    55c2:	97 f9       	bld	r25, 7
    55c4:	08 95       	ret

000055c6 <__fp_split3>:
    55c6:	57 fd       	sbrc	r21, 7
    55c8:	90 58       	subi	r25, 0x80	; 128
    55ca:	44 0f       	add	r20, r20
    55cc:	55 1f       	adc	r21, r21
    55ce:	59 f0       	breq	.+22     	; 0x55e6 <__fp_splitA+0x10>
    55d0:	5f 3f       	cpi	r21, 0xFF	; 255
    55d2:	71 f0       	breq	.+28     	; 0x55f0 <__fp_splitA+0x1a>
    55d4:	47 95       	ror	r20

000055d6 <__fp_splitA>:
    55d6:	88 0f       	add	r24, r24
    55d8:	97 fb       	bst	r25, 7
    55da:	99 1f       	adc	r25, r25
    55dc:	61 f0       	breq	.+24     	; 0x55f6 <__fp_splitA+0x20>
    55de:	9f 3f       	cpi	r25, 0xFF	; 255
    55e0:	79 f0       	breq	.+30     	; 0x5600 <__fp_splitA+0x2a>
    55e2:	87 95       	ror	r24
    55e4:	08 95       	ret
    55e6:	12 16       	cp	r1, r18
    55e8:	13 06       	cpc	r1, r19
    55ea:	14 06       	cpc	r1, r20
    55ec:	55 1f       	adc	r21, r21
    55ee:	f2 cf       	rjmp	.-28     	; 0x55d4 <__fp_split3+0xe>
    55f0:	46 95       	lsr	r20
    55f2:	f1 df       	rcall	.-30     	; 0x55d6 <__fp_splitA>
    55f4:	08 c0       	rjmp	.+16     	; 0x5606 <__fp_splitA+0x30>
    55f6:	16 16       	cp	r1, r22
    55f8:	17 06       	cpc	r1, r23
    55fa:	18 06       	cpc	r1, r24
    55fc:	99 1f       	adc	r25, r25
    55fe:	f1 cf       	rjmp	.-30     	; 0x55e2 <__fp_splitA+0xc>
    5600:	86 95       	lsr	r24
    5602:	71 05       	cpc	r23, r1
    5604:	61 05       	cpc	r22, r1
    5606:	08 94       	sec
    5608:	08 95       	ret

0000560a <__fp_zero>:
    560a:	e8 94       	clt

0000560c <__fp_szero>:
    560c:	bb 27       	eor	r27, r27
    560e:	66 27       	eor	r22, r22
    5610:	77 27       	eor	r23, r23
    5612:	cb 01       	movw	r24, r22
    5614:	97 f9       	bld	r25, 7
    5616:	08 95       	ret

00005618 <__mulsf3>:
    5618:	0e 94 1f 2b 	call	0x563e	; 0x563e <__mulsf3x>
    561c:	0c 94 90 2b 	jmp	0x5720	; 0x5720 <__fp_round>
    5620:	0e 94 82 2b 	call	0x5704	; 0x5704 <__fp_pscA>
    5624:	38 f0       	brcs	.+14     	; 0x5634 <__mulsf3+0x1c>
    5626:	0e 94 89 2b 	call	0x5712	; 0x5712 <__fp_pscB>
    562a:	20 f0       	brcs	.+8      	; 0x5634 <__mulsf3+0x1c>
    562c:	95 23       	and	r25, r21
    562e:	11 f0       	breq	.+4      	; 0x5634 <__mulsf3+0x1c>
    5630:	0c 94 79 2b 	jmp	0x56f2	; 0x56f2 <__fp_inf>
    5634:	0c 94 7f 2b 	jmp	0x56fe	; 0x56fe <__fp_nan>
    5638:	11 24       	eor	r1, r1
    563a:	0c 94 06 2b 	jmp	0x560c	; 0x560c <__fp_szero>

0000563e <__mulsf3x>:
    563e:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <__fp_split3>
    5642:	70 f3       	brcs	.-36     	; 0x5620 <__mulsf3+0x8>

00005644 <__mulsf3_pse>:
    5644:	95 9f       	mul	r25, r21
    5646:	c1 f3       	breq	.-16     	; 0x5638 <__mulsf3+0x20>
    5648:	95 0f       	add	r25, r21
    564a:	50 e0       	ldi	r21, 0x00	; 0
    564c:	55 1f       	adc	r21, r21
    564e:	62 9f       	mul	r22, r18
    5650:	f0 01       	movw	r30, r0
    5652:	72 9f       	mul	r23, r18
    5654:	bb 27       	eor	r27, r27
    5656:	f0 0d       	add	r31, r0
    5658:	b1 1d       	adc	r27, r1
    565a:	63 9f       	mul	r22, r19
    565c:	aa 27       	eor	r26, r26
    565e:	f0 0d       	add	r31, r0
    5660:	b1 1d       	adc	r27, r1
    5662:	aa 1f       	adc	r26, r26
    5664:	64 9f       	mul	r22, r20
    5666:	66 27       	eor	r22, r22
    5668:	b0 0d       	add	r27, r0
    566a:	a1 1d       	adc	r26, r1
    566c:	66 1f       	adc	r22, r22
    566e:	82 9f       	mul	r24, r18
    5670:	22 27       	eor	r18, r18
    5672:	b0 0d       	add	r27, r0
    5674:	a1 1d       	adc	r26, r1
    5676:	62 1f       	adc	r22, r18
    5678:	73 9f       	mul	r23, r19
    567a:	b0 0d       	add	r27, r0
    567c:	a1 1d       	adc	r26, r1
    567e:	62 1f       	adc	r22, r18
    5680:	83 9f       	mul	r24, r19
    5682:	a0 0d       	add	r26, r0
    5684:	61 1d       	adc	r22, r1
    5686:	22 1f       	adc	r18, r18
    5688:	74 9f       	mul	r23, r20
    568a:	33 27       	eor	r19, r19
    568c:	a0 0d       	add	r26, r0
    568e:	61 1d       	adc	r22, r1
    5690:	23 1f       	adc	r18, r19
    5692:	84 9f       	mul	r24, r20
    5694:	60 0d       	add	r22, r0
    5696:	21 1d       	adc	r18, r1
    5698:	82 2f       	mov	r24, r18
    569a:	76 2f       	mov	r23, r22
    569c:	6a 2f       	mov	r22, r26
    569e:	11 24       	eor	r1, r1
    56a0:	9f 57       	subi	r25, 0x7F	; 127
    56a2:	50 40       	sbci	r21, 0x00	; 0
    56a4:	9a f0       	brmi	.+38     	; 0x56cc <__mulsf3_pse+0x88>
    56a6:	f1 f0       	breq	.+60     	; 0x56e4 <__mulsf3_pse+0xa0>
    56a8:	88 23       	and	r24, r24
    56aa:	4a f0       	brmi	.+18     	; 0x56be <__mulsf3_pse+0x7a>
    56ac:	ee 0f       	add	r30, r30
    56ae:	ff 1f       	adc	r31, r31
    56b0:	bb 1f       	adc	r27, r27
    56b2:	66 1f       	adc	r22, r22
    56b4:	77 1f       	adc	r23, r23
    56b6:	88 1f       	adc	r24, r24
    56b8:	91 50       	subi	r25, 0x01	; 1
    56ba:	50 40       	sbci	r21, 0x00	; 0
    56bc:	a9 f7       	brne	.-22     	; 0x56a8 <__mulsf3_pse+0x64>
    56be:	9e 3f       	cpi	r25, 0xFE	; 254
    56c0:	51 05       	cpc	r21, r1
    56c2:	80 f0       	brcs	.+32     	; 0x56e4 <__mulsf3_pse+0xa0>
    56c4:	0c 94 79 2b 	jmp	0x56f2	; 0x56f2 <__fp_inf>
    56c8:	0c 94 06 2b 	jmp	0x560c	; 0x560c <__fp_szero>
    56cc:	5f 3f       	cpi	r21, 0xFF	; 255
    56ce:	e4 f3       	brlt	.-8      	; 0x56c8 <__mulsf3_pse+0x84>
    56d0:	98 3e       	cpi	r25, 0xE8	; 232
    56d2:	d4 f3       	brlt	.-12     	; 0x56c8 <__mulsf3_pse+0x84>
    56d4:	86 95       	lsr	r24
    56d6:	77 95       	ror	r23
    56d8:	67 95       	ror	r22
    56da:	b7 95       	ror	r27
    56dc:	f7 95       	ror	r31
    56de:	e7 95       	ror	r30
    56e0:	9f 5f       	subi	r25, 0xFF	; 255
    56e2:	c1 f7       	brne	.-16     	; 0x56d4 <__mulsf3_pse+0x90>
    56e4:	fe 2b       	or	r31, r30
    56e6:	88 0f       	add	r24, r24
    56e8:	91 1d       	adc	r25, r1
    56ea:	96 95       	lsr	r25
    56ec:	87 95       	ror	r24
    56ee:	97 f9       	bld	r25, 7
    56f0:	08 95       	ret

000056f2 <__fp_inf>:
    56f2:	97 f9       	bld	r25, 7
    56f4:	9f 67       	ori	r25, 0x7F	; 127
    56f6:	80 e8       	ldi	r24, 0x80	; 128
    56f8:	70 e0       	ldi	r23, 0x00	; 0
    56fa:	60 e0       	ldi	r22, 0x00	; 0
    56fc:	08 95       	ret

000056fe <__fp_nan>:
    56fe:	9f ef       	ldi	r25, 0xFF	; 255
    5700:	80 ec       	ldi	r24, 0xC0	; 192
    5702:	08 95       	ret

00005704 <__fp_pscA>:
    5704:	00 24       	eor	r0, r0
    5706:	0a 94       	dec	r0
    5708:	16 16       	cp	r1, r22
    570a:	17 06       	cpc	r1, r23
    570c:	18 06       	cpc	r1, r24
    570e:	09 06       	cpc	r0, r25
    5710:	08 95       	ret

00005712 <__fp_pscB>:
    5712:	00 24       	eor	r0, r0
    5714:	0a 94       	dec	r0
    5716:	12 16       	cp	r1, r18
    5718:	13 06       	cpc	r1, r19
    571a:	14 06       	cpc	r1, r20
    571c:	05 06       	cpc	r0, r21
    571e:	08 95       	ret

00005720 <__fp_round>:
    5720:	09 2e       	mov	r0, r25
    5722:	03 94       	inc	r0
    5724:	00 0c       	add	r0, r0
    5726:	11 f4       	brne	.+4      	; 0x572c <__fp_round+0xc>
    5728:	88 23       	and	r24, r24
    572a:	52 f0       	brmi	.+20     	; 0x5740 <__fp_round+0x20>
    572c:	bb 0f       	add	r27, r27
    572e:	40 f4       	brcc	.+16     	; 0x5740 <__fp_round+0x20>
    5730:	bf 2b       	or	r27, r31
    5732:	11 f4       	brne	.+4      	; 0x5738 <__fp_round+0x18>
    5734:	60 ff       	sbrs	r22, 0
    5736:	04 c0       	rjmp	.+8      	; 0x5740 <__fp_round+0x20>
    5738:	6f 5f       	subi	r22, 0xFF	; 255
    573a:	7f 4f       	sbci	r23, 0xFF	; 255
    573c:	8f 4f       	sbci	r24, 0xFF	; 255
    573e:	9f 4f       	sbci	r25, 0xFF	; 255
    5740:	08 95       	ret

00005742 <__udivmodqi4>:
    5742:	99 1b       	sub	r25, r25
    5744:	79 e0       	ldi	r23, 0x09	; 9
    5746:	04 c0       	rjmp	.+8      	; 0x5750 <__udivmodqi4_ep>

00005748 <__udivmodqi4_loop>:
    5748:	99 1f       	adc	r25, r25
    574a:	96 17       	cp	r25, r22
    574c:	08 f0       	brcs	.+2      	; 0x5750 <__udivmodqi4_ep>
    574e:	96 1b       	sub	r25, r22

00005750 <__udivmodqi4_ep>:
    5750:	88 1f       	adc	r24, r24
    5752:	7a 95       	dec	r23
    5754:	c9 f7       	brne	.-14     	; 0x5748 <__udivmodqi4_loop>
    5756:	80 95       	com	r24
    5758:	08 95       	ret

0000575a <__divmodhi4>:
    575a:	97 fb       	bst	r25, 7
    575c:	07 2e       	mov	r0, r23
    575e:	16 f4       	brtc	.+4      	; 0x5764 <__divmodhi4+0xa>
    5760:	00 94       	com	r0
    5762:	07 d0       	rcall	.+14     	; 0x5772 <__divmodhi4_neg1>
    5764:	77 fd       	sbrc	r23, 7
    5766:	09 d0       	rcall	.+18     	; 0x577a <__divmodhi4_neg2>
    5768:	0e 94 c7 2b 	call	0x578e	; 0x578e <__udivmodhi4>
    576c:	07 fc       	sbrc	r0, 7
    576e:	05 d0       	rcall	.+10     	; 0x577a <__divmodhi4_neg2>
    5770:	3e f4       	brtc	.+14     	; 0x5780 <__divmodhi4_exit>

00005772 <__divmodhi4_neg1>:
    5772:	90 95       	com	r25
    5774:	81 95       	neg	r24
    5776:	9f 4f       	sbci	r25, 0xFF	; 255
    5778:	08 95       	ret

0000577a <__divmodhi4_neg2>:
    577a:	70 95       	com	r23
    577c:	61 95       	neg	r22
    577e:	7f 4f       	sbci	r23, 0xFF	; 255

00005780 <__divmodhi4_exit>:
    5780:	08 95       	ret

00005782 <__tablejump2__>:
    5782:	ee 0f       	add	r30, r30
    5784:	ff 1f       	adc	r31, r31
    5786:	05 90       	lpm	r0, Z+
    5788:	f4 91       	lpm	r31, Z
    578a:	e0 2d       	mov	r30, r0
    578c:	09 94       	ijmp

0000578e <__udivmodhi4>:
    578e:	aa 1b       	sub	r26, r26
    5790:	bb 1b       	sub	r27, r27
    5792:	51 e1       	ldi	r21, 0x11	; 17
    5794:	07 c0       	rjmp	.+14     	; 0x57a4 <__udivmodhi4_ep>

00005796 <__udivmodhi4_loop>:
    5796:	aa 1f       	adc	r26, r26
    5798:	bb 1f       	adc	r27, r27
    579a:	a6 17       	cp	r26, r22
    579c:	b7 07       	cpc	r27, r23
    579e:	10 f0       	brcs	.+4      	; 0x57a4 <__udivmodhi4_ep>
    57a0:	a6 1b       	sub	r26, r22
    57a2:	b7 0b       	sbc	r27, r23

000057a4 <__udivmodhi4_ep>:
    57a4:	88 1f       	adc	r24, r24
    57a6:	99 1f       	adc	r25, r25
    57a8:	5a 95       	dec	r21
    57aa:	a9 f7       	brne	.-22     	; 0x5796 <__udivmodhi4_loop>
    57ac:	80 95       	com	r24
    57ae:	90 95       	com	r25
    57b0:	bc 01       	movw	r22, r24
    57b2:	cd 01       	movw	r24, r26
    57b4:	08 95       	ret

000057b6 <eeprom_read_byte>:
    57b6:	f9 99       	sbic	0x1f, 1	; 31
    57b8:	fe cf       	rjmp	.-4      	; 0x57b6 <eeprom_read_byte>
    57ba:	92 bd       	out	0x22, r25	; 34
    57bc:	81 bd       	out	0x21, r24	; 33
    57be:	f8 9a       	sbi	0x1f, 0	; 31
    57c0:	99 27       	eor	r25, r25
    57c2:	80 b5       	in	r24, 0x20	; 32
    57c4:	08 95       	ret

000057c6 <eeprom_read_word>:
    57c6:	a8 e1       	ldi	r26, 0x18	; 24
    57c8:	b0 e0       	ldi	r27, 0x00	; 0
    57ca:	42 e0       	ldi	r20, 0x02	; 2
    57cc:	50 e0       	ldi	r21, 0x00	; 0
    57ce:	0c 94 fe 2b 	jmp	0x57fc	; 0x57fc <eeprom_read_blraw>

000057d2 <eeprom_write_byte>:
    57d2:	26 2f       	mov	r18, r22

000057d4 <eeprom_write_r18>:
    57d4:	f9 99       	sbic	0x1f, 1	; 31
    57d6:	fe cf       	rjmp	.-4      	; 0x57d4 <eeprom_write_r18>
    57d8:	1f ba       	out	0x1f, r1	; 31
    57da:	92 bd       	out	0x22, r25	; 34
    57dc:	81 bd       	out	0x21, r24	; 33
    57de:	20 bd       	out	0x20, r18	; 32
    57e0:	0f b6       	in	r0, 0x3f	; 63
    57e2:	f8 94       	cli
    57e4:	fa 9a       	sbi	0x1f, 2	; 31
    57e6:	f9 9a       	sbi	0x1f, 1	; 31
    57e8:	0f be       	out	0x3f, r0	; 63
    57ea:	01 96       	adiw	r24, 0x01	; 1
    57ec:	08 95       	ret

000057ee <eeprom_write_word>:
    57ee:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <eeprom_write_byte>
    57f2:	27 2f       	mov	r18, r23
    57f4:	0c 94 ea 2b 	jmp	0x57d4	; 0x57d4 <eeprom_write_r18>

000057f8 <eeprom_read_block>:
    57f8:	dc 01       	movw	r26, r24
    57fa:	cb 01       	movw	r24, r22

000057fc <eeprom_read_blraw>:
    57fc:	fc 01       	movw	r30, r24
    57fe:	f9 99       	sbic	0x1f, 1	; 31
    5800:	fe cf       	rjmp	.-4      	; 0x57fe <eeprom_read_blraw+0x2>
    5802:	06 c0       	rjmp	.+12     	; 0x5810 <eeprom_read_blraw+0x14>
    5804:	f2 bd       	out	0x22, r31	; 34
    5806:	e1 bd       	out	0x21, r30	; 33
    5808:	f8 9a       	sbi	0x1f, 0	; 31
    580a:	31 96       	adiw	r30, 0x01	; 1
    580c:	00 b4       	in	r0, 0x20	; 32
    580e:	0d 92       	st	X+, r0
    5810:	41 50       	subi	r20, 0x01	; 1
    5812:	50 40       	sbci	r21, 0x00	; 0
    5814:	b8 f7       	brcc	.-18     	; 0x5804 <eeprom_read_blraw+0x8>
    5816:	08 95       	ret

00005818 <_exit>:
    5818:	f8 94       	cli

0000581a <__stop_program>:
    581a:	ff cf       	rjmp	.-2      	; 0x581a <__stop_program>
